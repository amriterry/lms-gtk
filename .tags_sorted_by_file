AppProviderRepository	config\AppProviderRepository.cpp	/^AppProviderRepository::AppProviderRepository(Application *app) : ProviderRepository(app){$/;"	f	class:AppProviderRepository
getProviders	config\AppProviderRepository.cpp	/^vector<ServiceProvider*> AppProviderRepository::getProviders(){$/;"	f	class:AppProviderRepository
AppProviderRepository	config\AppProviderRepository.h	/^class AppProviderRepository : public ProviderRepository{$/;"	c
_CONFIG_PROVIDERS_H_	config\AppProviderRepository.h	2;"	d
m_providers	config\AppProviderRepository.h	/^    vector<ServiceProvider*> m_providers;$/;"	m	class:AppProviderRepository
AppControllerRepository	controllers\AppControllerRepository.cpp	/^AppControllerRepository::AppControllerRepository(Application* app) : ControllerRepository(app){$/;"	f	class:AppControllerRepository
getControllers	controllers\AppControllerRepository.cpp	/^map<string,ControllerResolvingCallback>	AppControllerRepository::getControllers(){$/;"	f	class:AppControllerRepository
AppControllerRepository	controllers\AppControllerRepository.h	/^class AppControllerRepository : public ControllerRepository{$/;"	c
_APP_CONTROLLER_REPOSITORY_H_	controllers\AppControllerRepository.h	2;"	d
m_controllers	controllers\AppControllerRepository.h	/^    map<string,ControllerResolvingCallback> m_controllers;$/;"	m	class:AppControllerRepository
onCreate	controllers\LoginController.cpp	/^void LoginController::onCreate(Bundle* package){$/;"	f	class:LoginController
onPause	controllers\LoginController.cpp	/^void LoginController::onPause(){$/;"	f	class:LoginController
onStart	controllers\LoginController.cpp	/^void LoginController::onStart(){$/;"	f	class:LoginController
LoginController	controllers\LoginController.h	/^class LoginController : public Controller{$/;"	c
_LOGIN_CONTROLLER_H_	controllers\LoginController.h	2;"	d
onCreate	controllers\MainController.cpp	/^void MainController::onCreate(Bundle* package){$/;"	f	class:MainController
onPause	controllers\MainController.cpp	/^void MainController::onPause(){$/;"	f	class:MainController
MainController	controllers\MainController.h	/^class MainController : public Controller{$/;"	c
_MAIN_CONTROLLER_H_	controllers\MainController.h	2;"	d
onCreate	controllers\SplashController.cpp	/^void SplashController::onCreate(Bundle* package){$/;"	f	class:SplashController
onPause	controllers\SplashController.cpp	/^void SplashController::onPause(){$/;"	f	class:SplashController
onStart	controllers\SplashController.cpp	/^void SplashController::onStart(){$/;"	f	class:SplashController
SplashController	controllers\SplashController.h	/^class SplashController: public Controller{$/;"	c
_SPLASH_CONTROLLER_H_	controllers\SplashController.h	2;"	d
onCreate	controllers\TestController.cpp	/^void TestController::onCreate(Bundle* package){$/;"	f	class:TestController
onStart	controllers\TestController.cpp	/^void TestController::onStart(){$/;"	f	class:TestController
TestController	controllers\TestController.h	/^class TestController: public Controller{$/;"	c
_TEST_CONTROLLER_H_	controllers\TestController.h	2;"	d
main	main.cpp	/^int main(int argc,char** argv){$/;"	f
User	models\User.cpp	/^User::User(){$/;"	f	class:User
User	models\User.h	/^class User: public Model{$/;"	c
_USER_H_	models\User.h	2;"	d
BOOLEAN	system\bundle\BindingType.h	/^	BOOLEAN,$/;"	m	class:tuber::BindingType
BindingType	system\bundle\BindingType.h	/^enum class BindingType{$/;"	c	namespace:tuber
DOUBLE	system\bundle\BindingType.h	/^	DOUBLE,$/;"	m	class:tuber::BindingType
INTEGER	system\bundle\BindingType.h	/^	INTEGER,$/;"	m	class:tuber::BindingType
STRING	system\bundle\BindingType.h	/^	STRING,$/;"	m	class:tuber::BindingType
_BINDING_TYPE_H_	system\bundle\BindingType.h	2;"	d
tuber	system\bundle\BindingType.h	/^namespace tuber{$/;"	n
clone	system\bundle\Bundle.cpp	/^void Bundle::clone(Bundle* toCloneBundle){$/;"	f	class:tuber::Bundle
empty	system\bundle\Bundle.cpp	/^bool Bundle::empty(){$/;"	f	class:tuber::Bundle
getBindingPositionMap	system\bundle\Bundle.cpp	/^map<int,pair<string,BindingType>>& Bundle::getBindingPositionMap(){$/;"	f	class:tuber::Bundle
getBoolean	system\bundle\Bundle.cpp	/^bool Bundle::getBoolean(string key){$/;"	f	class:tuber::Bundle
getBooleanAtPos	system\bundle\Bundle.cpp	/^bool Bundle::getBooleanAtPos(int pos){$/;"	f	class:tuber::Bundle
getBooleanMap	system\bundle\Bundle.cpp	/^map<string,bool>& Bundle::getBooleanMap(){$/;"	f	class:tuber::Bundle
getDouble	system\bundle\Bundle.cpp	/^double Bundle::getDouble(string key){$/;"	f	class:tuber::Bundle
getDoubleAtPos	system\bundle\Bundle.cpp	/^double Bundle::getDoubleAtPos(int pos){$/;"	f	class:tuber::Bundle
getDoubleMap	system\bundle\Bundle.cpp	/^map<string,double>& Bundle::getDoubleMap(){$/;"	f	class:tuber::Bundle
getGenericMap	system\bundle\Bundle.cpp	/^map<string,void*>& Bundle::getGenericMap(){$/;"	f	class:tuber::Bundle
getInt	system\bundle\Bundle.cpp	/^int Bundle::getInt(string key){$/;"	f	class:tuber::Bundle
getIntAtPos	system\bundle\Bundle.cpp	/^int Bundle::getIntAtPos(int pos){$/;"	f	class:tuber::Bundle
getIntMap	system\bundle\Bundle.cpp	/^map<string,int>& Bundle::getIntMap(){$/;"	f	class:tuber::Bundle
getKeyAtPos	system\bundle\Bundle.cpp	/^string Bundle::getKeyAtPos(int pos){$/;"	f	class:tuber::Bundle
getPairAtPos	system\bundle\Bundle.cpp	/^pair<string,BindingType>& Bundle::getPairAtPos(int pos){$/;"	f	class:tuber::Bundle
getSafeBoolean	system\bundle\Bundle.cpp	/^bool Bundle::getSafeBoolean(string key){$/;"	f	class:tuber::Bundle
getSafeDouble	system\bundle\Bundle.cpp	/^double Bundle::getSafeDouble(string key){$/;"	f	class:tuber::Bundle
getSafeInt	system\bundle\Bundle.cpp	/^int Bundle::getSafeInt(string key){$/;"	f	class:tuber::Bundle
getSafeString	system\bundle\Bundle.cpp	/^string Bundle::getSafeString(string key){$/;"	f	class:tuber::Bundle
getString	system\bundle\Bundle.cpp	/^string Bundle::getString(string key){$/;"	f	class:tuber::Bundle
getStringAtPos	system\bundle\Bundle.cpp	/^string Bundle::getStringAtPos(int pos){$/;"	f	class:tuber::Bundle
getStringMap	system\bundle\Bundle.cpp	/^map<string,string>& Bundle::getStringMap(){$/;"	f	class:tuber::Bundle
hasBoolean	system\bundle\Bundle.cpp	/^bool Bundle::hasBoolean(string key){$/;"	f	class:tuber::Bundle
hasDouble	system\bundle\Bundle.cpp	/^bool Bundle::hasDouble(string key){$/;"	f	class:tuber::Bundle
hasGeneric	system\bundle\Bundle.cpp	/^bool Bundle::hasGeneric(string key){$/;"	f	class:tuber::Bundle
hasInt	system\bundle\Bundle.cpp	/^bool Bundle::hasInt(string key){$/;"	f	class:tuber::Bundle
hasString	system\bundle\Bundle.cpp	/^bool Bundle::hasString(string key){$/;"	f	class:tuber::Bundle
move	system\bundle\Bundle.cpp	/^void Bundle::move(Bundle* toMoveBundle){$/;"	f	class:tuber::Bundle
putExtra	system\bundle\Bundle.cpp	/^Bundle* Bundle::putExtra(string key,bool value){$/;"	f	class:tuber::Bundle
putExtra	system\bundle\Bundle.cpp	/^Bundle* Bundle::putExtra(string key,const char* value){$/;"	f	class:tuber::Bundle
putExtra	system\bundle\Bundle.cpp	/^Bundle* Bundle::putExtra(string key,double value){$/;"	f	class:tuber::Bundle
putExtra	system\bundle\Bundle.cpp	/^Bundle* Bundle::putExtra(string key,int value){$/;"	f	class:tuber::Bundle
putExtra	system\bundle\Bundle.cpp	/^Bundle* Bundle::putExtra(string key,string value){$/;"	f	class:tuber::Bundle
putExtra	system\bundle\Bundle.cpp	/^Bundle* Bundle::putExtra(string key,void* value){$/;"	f	class:tuber::Bundle
reset	system\bundle\Bundle.cpp	/^void Bundle::reset(){$/;"	f	class:tuber::Bundle
setBindingPositionMap	system\bundle\Bundle.cpp	/^void Bundle::setBindingPositionMap(map<int,pair<string,BindingType>> bindingPos){$/;"	f	class:tuber::Bundle
tuber	system\bundle\Bundle.cpp	/^namespace tuber{$/;"	n	file:
Bundle	system\bundle\Bundle.h	/^class Bundle: public Service{$/;"	c	namespace:tuber
DEFAULT_BOOLEAN	system\bundle\Bundle.h	/^	static constexpr bool DEFAULT_BOOLEAN = false;$/;"	m	class:tuber::Bundle
DEFAULT_DOUBLE	system\bundle\Bundle.h	/^	static constexpr double DEFAULT_DOUBLE = 0.0;$/;"	m	class:tuber::Bundle
DEFAULT_INT	system\bundle\Bundle.h	/^	static constexpr int DEFAULT_INT = 0;$/;"	m	class:tuber::Bundle
DEFAULT_STRING	system\bundle\Bundle.h	/^	static constexpr char* DEFAULT_STRING = "";$/;"	m	class:tuber::Bundle
_BUNDLE_H_	system\bundle\Bundle.h	2;"	d
currentPos	system\bundle\Bundle.h	/^	int currentPos = 1;$/;"	m	class:tuber::Bundle
getGeneric	system\bundle\Bundle.h	/^	T* getGeneric(string key){$/;"	f	class:tuber::Bundle
getGenericAtPos	system\bundle\Bundle.h	/^	T* getGenericAtPos(int pos){$/;"	f	class:tuber::Bundle
getSafeGeneric	system\bundle\Bundle.h	/^	T* getSafeGeneric(string key){$/;"	f	class:tuber::Bundle
m_bindingPos	system\bundle\Bundle.h	/^	map<int,pair<string,BindingType>> m_bindingPos; $/;"	m	class:tuber::Bundle
m_booleans	system\bundle\Bundle.h	/^	map<string,bool> m_booleans;$/;"	m	class:tuber::Bundle
m_doubles	system\bundle\Bundle.h	/^	map<string,double> m_doubles;$/;"	m	class:tuber::Bundle
m_generics	system\bundle\Bundle.h	/^	map<string,void*> m_generics;$/;"	m	class:tuber::Bundle
m_integers	system\bundle\Bundle.h	/^	map<string,int> m_integers;$/;"	m	class:tuber::Bundle
m_strings	system\bundle\Bundle.h	/^	map<string,string> m_strings;$/;"	m	class:tuber::Bundle
tuber	system\bundle\Bundle.h	/^namespace tuber{$/;"	n
boot	system\bundle\BundleServiceProvider.cpp	/^void BundleServiceProvider::boot(){$/;"	f	class:tuber::BundleServiceProvider
provides	system\bundle\BundleServiceProvider.cpp	/^string BundleServiceProvider::provides(){$/;"	f	class:tuber::BundleServiceProvider
registerService	system\bundle\BundleServiceProvider.cpp	/^void BundleServiceProvider::registerService(){$/;"	f	class:tuber::BundleServiceProvider
tuber	system\bundle\BundleServiceProvider.cpp	/^namespace tuber{$/;"	n	file:
~BundleServiceProvider	system\bundle\BundleServiceProvider.cpp	/^BundleServiceProvider::~BundleServiceProvider(){$/;"	f	class:tuber::BundleServiceProvider
BundleServiceProvider	system\bundle\BundleServiceProvider.h	/^	BundleServiceProvider(Container* container) : ServiceProvider(container){$/;"	f	class:tuber::BundleServiceProvider
BundleServiceProvider	system\bundle\BundleServiceProvider.h	/^class BundleServiceProvider: public ServiceProvider{$/;"	c	namespace:tuber
_BUNDLE_SERVICE_PROVIDER_H_	system\bundle\BundleServiceProvider.h	2;"	d
tuber	system\bundle\BundleServiceProvider.h	/^namespace tuber{$/;"	n
ConfigManager	system\config\ConfigManager.cpp	/^ConfigManager::ConfigManager(Application* app) : m_app(app){$/;"	f	class:tuber::ConfigManager
getConnectionConfiguration	system\config\ConfigManager.cpp	/^map<string,string>& ConfigManager::getConnectionConfiguration(string connectionKey){$/;"	f	class:tuber::ConfigManager
getDefaultController	system\config\ConfigManager.cpp	/^string ConfigManager::getDefaultController(){$/;"	f	class:tuber::ConfigManager
getDefaultDbConnection	system\config\ConfigManager.cpp	/^string ConfigManager::getDefaultDbConnection(){$/;"	f	class:tuber::ConfigManager
loadConfigDocument	system\config\ConfigManager.cpp	/^void ConfigManager::loadConfigDocument(rapidjson::Document* configDocument){$/;"	f	class:tuber::ConfigManager
loadDBConfiguration	system\config\ConfigManager.cpp	/^void ConfigManager::loadDBConfiguration(rapidjson::Value* val){$/;"	f	class:tuber::ConfigManager
setDefaultController	system\config\ConfigManager.cpp	/^void ConfigManager::setDefaultController(string controllerKey){$/;"	f	class:tuber::ConfigManager
tuber	system\config\ConfigManager.cpp	/^namespace tuber{$/;"	n	file:
~ConfigManager	system\config\ConfigManager.cpp	/^ConfigManager::~ConfigManager(){$/;"	f	class:tuber::ConfigManager
ConfigManager	system\config\ConfigManager.h	/^class ConfigManager : public IBindable, public IEventPublisher{$/;"	c	namespace:tuber
_CONFIG_MANAGER_H_	system\config\ConfigManager.h	2;"	d
m_app	system\config\ConfigManager.h	/^    Application* m_app;$/;"	m	class:tuber::ConfigManager
m_connectionConfig	system\config\ConfigManager.h	/^    map<string,map<string,string>> m_connectionConfig;$/;"	m	class:tuber::ConfigManager
m_defaultConnection	system\config\ConfigManager.h	/^    string m_defaultConnection;$/;"	m	class:tuber::ConfigManager
m_defaultController	system\config\ConfigManager.h	/^    string m_defaultController;$/;"	m	class:tuber::ConfigManager
tuber	system\config\ConfigManager.h	/^namespace tuber{$/;"	n
ConfigRepository	system\config\ConfigRepository.cpp	/^ConfigRepository::ConfigRepository(string configFile) : m_configFile(configFile){$/;"	f	class:tuber::ConfigRepository
getConfigDocument	system\config\ConfigRepository.cpp	/^Document* ConfigRepository::getConfigDocument(){$/;"	f	class:tuber::ConfigRepository
tuber	system\config\ConfigRepository.cpp	/^namespace tuber{$/;"	n	file:
~ConfigRepository	system\config\ConfigRepository.cpp	/^ConfigRepository::~ConfigRepository(){$/;"	f	class:tuber::ConfigRepository
ConfigRepository	system\config\ConfigRepository.h	/^class ConfigRepository{$/;"	c	namespace:tuber
_CONFIG_REPOSITORY_H_	system\config\ConfigRepository.h	2;"	d
m_configFile	system\config\ConfigRepository.h	/^    string m_configFile;$/;"	m	class:tuber::ConfigRepository
m_document	system\config\ConfigRepository.h	/^    Document m_document;$/;"	m	class:tuber::ConfigRepository
tuber	system\config\ConfigRepository.h	/^namespace tuber{$/;"	n
Controller	system\controller\Controller.cpp	/^Controller::Controller() {$/;"	f	class:tuber::Controller
bindGtkBuilder	system\controller\Controller.cpp	/^void Controller::bindGtkBuilder(GtkBuilder* builder){$/;"	f	class:tuber::Controller
bindSceneRoot	system\controller\Controller.cpp	/^void Controller::bindSceneRoot(GtkWidget* widget){$/;"	f	class:tuber::Controller
destroySceneRoot	system\controller\Controller.cpp	/^void Controller::destroySceneRoot(){$/;"	f	class:tuber::Controller
finish	system\controller\Controller.cpp	/^void Controller::finish(bool bindChild){$/;"	f	class:tuber::Controller
getApplication	system\controller\Controller.cpp	/^Application* Controller::getApplication(){$/;"	f	class:tuber::Controller
getChildController	system\controller\Controller.cpp	/^Controller* Controller::getChildController(){$/;"	f	class:tuber::Controller
getGtkApplication	system\controller\Controller.cpp	/^GtkApplication* Controller::getGtkApplication(){$/;"	f	class:tuber::Controller
getGtkBuilder	system\controller\Controller.cpp	/^GtkBuilder* Controller::getGtkBuilder(){$/;"	f	class:tuber::Controller
getParentController	system\controller\Controller.cpp	/^Controller* Controller::getParentController(){$/;"	f	class:tuber::Controller
getSceneObj	system\controller\Controller.cpp	/^GtkWidget* Controller::getSceneObj(string objName){$/;"	f	class:tuber::Controller
getStateManager	system\controller\Controller.cpp	/^ControllerStateManager* Controller::getStateManager(){$/;"	f	class:tuber::Controller
getViewManager	system\controller\Controller.cpp	/^ViewManager* Controller::getViewManager(){$/;"	f	class:tuber::Controller
setChildController	system\controller\Controller.cpp	/^void Controller::setChildController(Controller* controller){$/;"	f	class:tuber::Controller
setContentView	system\controller\Controller.cpp	/^void Controller::setContentView(string viewPath,bool topLevel){$/;"	f	class:tuber::Controller
setContentView	system\controller\Controller.cpp	/^void Controller::setContentView(string viewPath,string nodeName,bool toplevel){$/;"	f	class:tuber::Controller
setControllerDependencies	system\controller\Controller.cpp	/^void Controller::setControllerDependencies(Application *app,ControllerStateManager* stateManager,ViewManager* viewManager){$/;"	f	class:tuber::Controller
setParentController	system\controller\Controller.cpp	/^void Controller::setParentController(Controller* controller){$/;"	f	class:tuber::Controller
startController	system\controller\Controller.cpp	/^void Controller::startController(Request* controllerRequest){$/;"	f	class:tuber::Controller
tuber	system\controller\Controller.cpp	/^namespace tuber{$/;"	n	file:
unrefChildController	system\controller\Controller.cpp	/^void Controller::unrefChildController(){$/;"	f	class:tuber::Controller
unrefParentController	system\controller\Controller.cpp	/^void Controller::unrefParentController(){$/;"	f	class:tuber::Controller
~Controller	system\controller\Controller.cpp	/^Controller::~Controller(){$/;"	f	class:tuber::Controller
Controller	system\controller\Controller.h	/^class Controller : public IBindable{$/;"	c	namespace:tuber
_CONTROLLER_H_	system\controller\Controller.h	2;"	d
m_app	system\controller\Controller.h	/^    Application* m_app;$/;"	m	class:tuber::Controller
m_builder	system\controller\Controller.h	/^    GtkBuilder* m_builder;$/;"	m	class:tuber::Controller
m_builderBinded	system\controller\Controller.h	/^    bool m_builderBinded;$/;"	m	class:tuber::Controller
m_childController	system\controller\Controller.h	/^    Controller* m_childController;$/;"	m	class:tuber::Controller
m_isSceneDestroyable	system\controller\Controller.h	/^    bool m_isSceneDestroyable;$/;"	m	class:tuber::Controller
m_parentController	system\controller\Controller.h	/^    Controller* m_parentController;$/;"	m	class:tuber::Controller
m_rootSceneBinded	system\controller\Controller.h	/^    bool m_rootSceneBinded;$/;"	m	class:tuber::Controller
m_sceneRoot	system\controller\Controller.h	/^    GtkWidget* m_sceneRoot;$/;"	m	class:tuber::Controller
m_stateManager	system\controller\Controller.h	/^    ControllerStateManager* m_stateManager;$/;"	m	class:tuber::Controller
m_viewManager	system\controller\Controller.h	/^    ViewManager* m_viewManager;$/;"	m	class:tuber::Controller
onCreate	system\controller\Controller.h	/^    virtual void onCreate(Bundle* package){}$/;"	f	class:tuber::Controller
onPause	system\controller\Controller.h	/^    virtual void onPause(){}$/;"	f	class:tuber::Controller
onResume	system\controller\Controller.h	/^    virtual void onResume(){}$/;"	f	class:tuber::Controller
onStart	system\controller\Controller.h	/^    virtual void onStart(){}$/;"	f	class:tuber::Controller
onStop	system\controller\Controller.h	/^    virtual void onStop(){}$/;"	f	class:tuber::Controller
tuber	system\controller\Controller.h	/^namespace tuber{$/;"	n
create	system\controller\ControllerLifeCycleManager.cpp	/^void ControllerLifeCycleManager::create(Controller* controller,Bundle* package){$/;"	f	class:tuber::ControllerLifeCycleManager
endLife	system\controller\ControllerLifeCycleManager.cpp	/^void ControllerLifeCycleManager::endLife(Controller* controller){$/;"	f	class:tuber::ControllerLifeCycleManager
initializeController	system\controller\ControllerLifeCycleManager.cpp	/^void ControllerLifeCycleManager::initializeController(Controller* controller){$/;"	f	class:tuber::ControllerLifeCycleManager
manage	system\controller\ControllerLifeCycleManager.cpp	/^void ControllerLifeCycleManager::manage(Controller* controller){$/;"	f	class:tuber::ControllerLifeCycleManager
pause	system\controller\ControllerLifeCycleManager.cpp	/^void ControllerLifeCycleManager::pause(Controller* controller){$/;"	f	class:tuber::ControllerLifeCycleManager
pauseController	system\controller\ControllerLifeCycleManager.cpp	/^void ControllerLifeCycleManager::pauseController(Controller* controller){$/;"	f	class:tuber::ControllerLifeCycleManager
respondRequest	system\controller\ControllerLifeCycleManager.cpp	/^void ControllerLifeCycleManager::respondRequest(Request* controllerRequest,Controller* clientController){$/;"	f	class:tuber::ControllerLifeCycleManager
resume	system\controller\ControllerLifeCycleManager.cpp	/^void ControllerLifeCycleManager::resume(Controller* controller){$/;"	f	class:tuber::ControllerLifeCycleManager
start	system\controller\ControllerLifeCycleManager.cpp	/^void ControllerLifeCycleManager::start(Controller* controller){$/;"	f	class:tuber::ControllerLifeCycleManager
startLife	system\controller\ControllerLifeCycleManager.cpp	/^void ControllerLifeCycleManager::startLife(Controller* controller,Bundle* package){$/;"	f	class:tuber::ControllerLifeCycleManager
stop	system\controller\ControllerLifeCycleManager.cpp	/^void ControllerLifeCycleManager::stop(Controller* controller){$/;"	f	class:tuber::ControllerLifeCycleManager
tuber	system\controller\ControllerLifeCycleManager.cpp	/^namespace tuber{$/;"	n	file:
ControllerLifeCycleManager	system\controller\ControllerLifeCycleManager.h	/^	ControllerLifeCycleManager(Application* app): m_app(app){}$/;"	f	class:tuber::ControllerLifeCycleManager
ControllerLifeCycleManager	system\controller\ControllerLifeCycleManager.h	/^class ControllerLifeCycleManager : public IBindable{$/;"	c	namespace:tuber
_CONTROLLER_LIFE_CYCLE_MANAGER_H_	system\controller\ControllerLifeCycleManager.h	2;"	d
m_app	system\controller\ControllerLifeCycleManager.h	/^	Application* m_app;$/;"	m	class:tuber::ControllerLifeCycleManager
m_controllerStack	system\controller\ControllerLifeCycleManager.h	/^	vector<Controller*> m_controllerStack;$/;"	m	class:tuber::ControllerLifeCycleManager
tuber	system\controller\ControllerLifeCycleManager.h	/^namespace tuber{$/;"	n
ControllerManager	system\controller\ControllerManager.cpp	/^ControllerManager::ControllerManager(Application* app,ControllerLifeCycleManager* lifeCycleManager) : m_app(app), m_lifeCycleManager(lifeCycleManager){$/;"	f	class:tuber::ControllerManager
destroyController	system\controller\ControllerManager.cpp	/^void ControllerManager::destroyController(Controller* controller){$/;"	f	class:tuber::ControllerManager
isControllerRegistered	system\controller\ControllerManager.cpp	/^bool ControllerManager::isControllerRegistered(string controllerKey){$/;"	f	class:tuber::ControllerManager
loadController	system\controller\ControllerManager.cpp	/^void ControllerManager::loadController(Request* controllerRequest,Controller* clientController){$/;"	f	class:tuber::ControllerManager
loadController	system\controller\ControllerManager.cpp	/^void ControllerManager::loadController(string controllerKey){$/;"	f	class:tuber::ControllerManager
loadControllers	system\controller\ControllerManager.cpp	/^void ControllerManager::loadControllers(ControllerRepository* controllerRepo){$/;"	f	class:tuber::ControllerManager
markControllerAsRegistered	system\controller\ControllerManager.cpp	/^void ControllerManager::markControllerAsRegistered(string controllerKey){$/;"	f	class:tuber::ControllerManager
registerController	system\controller\ControllerManager.cpp	/^void ControllerManager::registerController(string controllerKey,ControllerResolvingCallback callback){$/;"	f	class:tuber::ControllerManager
tuber	system\controller\ControllerManager.cpp	/^namespace tuber{$/;"	n	file:
~ControllerManager	system\controller\ControllerManager.cpp	/^ControllerManager::~ControllerManager(){$/;"	f	class:tuber::ControllerManager
ControllerManager	system\controller\ControllerManager.h	/^class ControllerManager : public IBindable{$/;"	c	namespace:tuber
_CONTROLLER_MANAGER_H_	system\controller\ControllerManager.h	2;"	d
m_app	system\controller\ControllerManager.h	/^	Application* m_app;$/;"	m	class:tuber::ControllerManager
m_controllerRepo	system\controller\ControllerManager.h	/^	ControllerRepository* m_controllerRepo;$/;"	m	class:tuber::ControllerManager
m_controllers	system\controller\ControllerManager.h	/^	vector<string> m_controllers;$/;"	m	class:tuber::ControllerManager
m_lifeCycleManager	system\controller\ControllerManager.h	/^    ControllerLifeCycleManager* m_lifeCycleManager;$/;"	m	class:tuber::ControllerManager
tuber	system\controller\ControllerManager.h	/^namespace tuber{$/;"	n
ControllerRepository	system\controller\ControllerRepository.h	/^	ControllerRepository(Application* app): m_app(app){}$/;"	f	class:tuber::ControllerRepository
ControllerRepository	system\controller\ControllerRepository.h	/^class ControllerRepository{$/;"	c	namespace:tuber
ControllerResolvingCallback	system\controller\ControllerRepository.h	/^typedef function<IBindable*(Container*)> ControllerResolvingCallback;$/;"	t	namespace:tuber
_CONTROLLER_REPOSITORY_H_	system\controller\ControllerRepository.h	2;"	d
m_app	system\controller\ControllerRepository.h	/^	Application* m_app;$/;"	m	class:tuber::ControllerRepository
tuber	system\controller\ControllerRepository.h	/^namespace tuber{$/;"	n
~ControllerRepository	system\controller\ControllerRepository.h	/^	virtual ~ControllerRepository(){}$/;"	f	class:tuber::ControllerRepository
CREATE	system\controller\ControllerState.h	/^	CREATE,$/;"	m	class:tuber::ControllerState
ControllerState	system\controller\ControllerState.h	/^enum class ControllerState$/;"	c	namespace:tuber
PAUSE	system\controller\ControllerState.h	/^	PAUSE,$/;"	m	class:tuber::ControllerState
RESOLVE	system\controller\ControllerState.h	/^	RESOLVE,$/;"	m	class:tuber::ControllerState
RESUME	system\controller\ControllerState.h	/^	RESUME,$/;"	m	class:tuber::ControllerState
START	system\controller\ControllerState.h	/^	START,$/;"	m	class:tuber::ControllerState
_CONTROLLER_STATE_H_	system\controller\ControllerState.h	2;"	d
tuber	system\controller\ControllerState.h	/^namespace tuber{$/;"	n
ControllerStateManager	system\controller\ControllerStateManager.cpp	/^ControllerStateManager::ControllerStateManager(){$/;"	f	class:tuber::ControllerStateManager
getState	system\controller\ControllerStateManager.cpp	/^ControllerState ControllerStateManager::getState(){$/;"	f	class:tuber::ControllerStateManager
isCreated	system\controller\ControllerStateManager.cpp	/^bool ControllerStateManager::isCreated(){$/;"	f	class:tuber::ControllerStateManager
isPaused	system\controller\ControllerStateManager.cpp	/^bool ControllerStateManager::isPaused(){$/;"	f	class:tuber::ControllerStateManager
isResolved	system\controller\ControllerStateManager.cpp	/^bool ControllerStateManager::isResolved(){$/;"	f	class:tuber::ControllerStateManager
isResumed	system\controller\ControllerStateManager.cpp	/^bool ControllerStateManager::isResumed(){$/;"	f	class:tuber::ControllerStateManager
isStarted	system\controller\ControllerStateManager.cpp	/^bool ControllerStateManager::isStarted(){$/;"	f	class:tuber::ControllerStateManager
isStopped	system\controller\ControllerStateManager.cpp	/^bool ControllerStateManager::isStopped(){$/;"	f	class:tuber::ControllerStateManager
setState	system\controller\ControllerStateManager.cpp	/^void ControllerStateManager::setState(ControllerState state){$/;"	f	class:tuber::ControllerStateManager
tuber	system\controller\ControllerStateManager.cpp	/^namespace tuber{$/;"	n	file:
ControllerStateManager	system\controller\ControllerStateManager.h	/^class ControllerStateManager: public IBindable{$/;"	c	namespace:tuber
_CONTROLLER_STATE_MANAGER_H_	system\controller\ControllerStateManager.h	2;"	d
m_state	system\controller\ControllerStateManager.h	/^	ControllerState m_state;$/;"	m	class:tuber::ControllerStateManager
tuber	system\controller\ControllerStateManager.h	/^namespace tuber{$/;"	n
Binding	system\database\Binding.cpp	/^Binding::Binding(){$/;"	f	class:tuber::Binding
bindBoolean	system\database\Binding.cpp	/^Binding* Binding::bindBoolean(bool value,int pos){$/;"	f	class:tuber::Binding
bindDouble	system\database\Binding.cpp	/^Binding* Binding::bindDouble(double value,int pos){$/;"	f	class:tuber::Binding
bindInteger	system\database\Binding.cpp	/^Binding* Binding::bindInteger(int value,int pos){$/;"	f	class:tuber::Binding
bindNull	system\database\Binding.cpp	/^Binding* Binding::bindNull(int pos){$/;"	f	class:tuber::Binding
bindString	system\database\Binding.cpp	/^Binding* Binding::bindString(string value,int pos){$/;"	f	class:tuber::Binding
getBooleans	system\database\Binding.cpp	/^map<int,bool> Binding::getBooleans(){$/;"	f	class:tuber::Binding
getCurrentPosition	system\database\Binding.cpp	/^int Binding::getCurrentPosition(){$/;"	f	class:tuber::Binding
getDoubles	system\database\Binding.cpp	/^map<int,double> Binding::getDoubles(){$/;"	f	class:tuber::Binding
getIntegers	system\database\Binding.cpp	/^map<int,int> Binding::getIntegers(){$/;"	f	class:tuber::Binding
getNull	system\database\Binding.cpp	/^vector<int> Binding::getNull(){$/;"	f	class:tuber::Binding
getStrings	system\database\Binding.cpp	/^map<int,string> Binding::getStrings(){$/;"	f	class:tuber::Binding
hasBooleans	system\database\Binding.cpp	/^bool Binding::hasBooleans(){$/;"	f	class:tuber::Binding
hasDoubles	system\database\Binding.cpp	/^bool Binding::hasDoubles(){$/;"	f	class:tuber::Binding
hasIntegers	system\database\Binding.cpp	/^bool Binding::hasIntegers(){$/;"	f	class:tuber::Binding
hasNull	system\database\Binding.cpp	/^bool Binding::hasNull(){$/;"	f	class:tuber::Binding
hasStrings	system\database\Binding.cpp	/^bool Binding::hasStrings(){$/;"	f	class:tuber::Binding
tuber	system\database\Binding.cpp	/^namespace tuber{$/;"	n	file:
Binding	system\database\Binding.h	/^class Binding: public IBindable{$/;"	c	namespace:tuber
_BINDING_H_	system\database\Binding.h	2;"	d
m_booleans	system\database\Binding.h	/^	map<int,bool> m_booleans;$/;"	m	class:tuber::Binding
m_doubles	system\database\Binding.h	/^	map<int,double> m_doubles;$/;"	m	class:tuber::Binding
m_integers	system\database\Binding.h	/^	map<int,int> m_integers;$/;"	m	class:tuber::Binding
m_nulls	system\database\Binding.h	/^	vector<int> m_nulls;$/;"	m	class:tuber::Binding
m_pos	system\database\Binding.h	/^	int m_pos;$/;"	m	class:tuber::Binding
m_strings	system\database\Binding.h	/^	map<int,string> m_strings;$/;"	m	class:tuber::Binding
tuber	system\database\Binding.h	/^namespace tuber{$/;"	n
connection	system\database\DatabaseManager.cpp	/^Connection* DatabaseManager::connection(string name){$/;"	f	class:tuber::DatabaseManager
getConfig	system\database\DatabaseManager.cpp	/^map<string,string> DatabaseManager::getConfig(string name){$/;"	f	class:tuber::DatabaseManager
getConnectionConfigValue	system\database\DatabaseManager.cpp	/^string DatabaseManager::getConnectionConfigValue(string key,string connectionName){$/;"	f	class:tuber::DatabaseManager
getDefaultConnection	system\database\DatabaseManager.cpp	/^string DatabaseManager::getDefaultConnection(){$/;"	f	class:tuber::DatabaseManager
hasConnection	system\database\DatabaseManager.cpp	/^bool DatabaseManager::hasConnection(string name){$/;"	f	class:tuber::DatabaseManager
makeConnection	system\database\DatabaseManager.cpp	/^Connection* DatabaseManager::makeConnection(string name){$/;"	f	class:tuber::DatabaseManager
prepare	system\database\DatabaseManager.cpp	/^Connection* DatabaseManager::prepare(Connection* connection){$/;"	f	class:tuber::DatabaseManager
tuber	system\database\DatabaseManager.cpp	/^namespace tuber{$/;"	n	file:
~DatabaseManager	system\database\DatabaseManager.cpp	/^DatabaseManager::~DatabaseManager(){$/;"	f	class:tuber::DatabaseManager
DatabaseManager	system\database\DatabaseManager.h	/^	DatabaseManager(ConfigManager* config,ConnectionFactory* factory) : m_config(config),m_factory(factory){}$/;"	f	class:tuber::DatabaseManager
DatabaseManager	system\database\DatabaseManager.h	/^class DatabaseManager: public Service, public IConnectionResolver{$/;"	c	namespace:tuber
_DATABASE_MANAGER_H_	system\database\DatabaseManager.h	2;"	d
m_config	system\database\DatabaseManager.h	/^	ConfigManager* m_config;$/;"	m	class:tuber::DatabaseManager
m_connections	system\database\DatabaseManager.h	/^	map<string,Connection*> m_connections;$/;"	m	class:tuber::DatabaseManager
m_factory	system\database\DatabaseManager.h	/^	ConnectionFactory* m_factory;$/;"	m	class:tuber::DatabaseManager
tuber	system\database\DatabaseManager.h	/^namespace tuber{$/;"	n
boot	system\database\DatabaseServiceProvider.cpp	/^void DatabaseServiceProvider::boot(){$/;"	f	class:tuber::DatabaseServiceProvider
provides	system\database\DatabaseServiceProvider.cpp	/^string DatabaseServiceProvider::provides(){$/;"	f	class:tuber::DatabaseServiceProvider
registerService	system\database\DatabaseServiceProvider.cpp	/^void DatabaseServiceProvider::registerService(){$/;"	f	class:tuber::DatabaseServiceProvider
tuber	system\database\DatabaseServiceProvider.cpp	/^namespace tuber{$/;"	n	file:
DatabaseServiceProvider	system\database\DatabaseServiceProvider.h	/^	DatabaseServiceProvider(Container* container) : ServiceProvider(container){}$/;"	f	class:tuber::DatabaseServiceProvider
DatabaseServiceProvider	system\database\DatabaseServiceProvider.h	/^class DatabaseServiceProvider : public ServiceProvider{$/;"	c	namespace:tuber
_DATABASE_SERVICE_PROVIDER_H_	system\database\DatabaseServiceProvider.h	2;"	d
tuber	system\database\DatabaseServiceProvider.h	/^namespace tuber{$/;"	n
IConnectionResolver	system\database\IConnectionResolver.h	/^class IConnectionResolver{$/;"	c	namespace:tuber
_I_CONNECTION_RESOLVER_H_	system\database\IConnectionResolver.h	2;"	d
tuber	system\database\IConnectionResolver.h	/^namespace tuber{$/;"	n
Connection	system\database\connections\Connection.cpp	/^Connection::Connection(Connector* connector,string connectionName,string database,map<string,string> config): m_connector(connector),m_connectionName(connectionName), m_database(database), m_config(config){$/;"	f	class:tuber::Connection
affectedStatement	system\database\connections\Connection.cpp	/^int Connection::affectedStatement(string query,Binding* bindings){$/;"	f	class:tuber::Connection
deleteQuery	system\database\connections\Connection.cpp	/^int Connection::deleteQuery(string sql,Binding* bindings){$/;"	f	class:tuber::Connection
insertQuery	system\database\connections\Connection.cpp	/^int Connection::insertQuery(string sql,Binding* bindings){$/;"	f	class:tuber::Connection
resultStatement	system\database\connections\Connection.cpp	/^QueryResult Connection::resultStatement(string query,Binding* bindings){$/;"	f	class:tuber::Connection
selectQuery	system\database\connections\Connection.cpp	/^QueryResult Connection::selectQuery(string sql,Binding* bindings){$/;"	f	class:tuber::Connection
statement	system\database\connections\Connection.cpp	/^int Connection::statement(string query,Binding* bindings){$/;"	f	class:tuber::Connection
transaction	system\database\connections\Connection.cpp	/^void Connection::transaction(function<void()> callback){$/;"	f	class:tuber::Connection
tuber	system\database\connections\Connection.cpp	/^namespace tuber{$/;"	n	file:
updateQuery	system\database\connections\Connection.cpp	/^int Connection::updateQuery(string sql,Binding* bindings){$/;"	f	class:tuber::Connection
Connection	system\database\connections\Connection.h	/^class Connection: public ConnectionInterface{$/;"	c	namespace:tuber
RunAffectedCallback	system\database\connections\Connection.h	/^typedef function<int(Statement*,string,Binding*)> RunAffectedCallback;$/;"	t	namespace:tuber
RunCallback	system\database\connections\Connection.h	/^typedef function<int(Statement*,string,Binding*)> RunCallback;$/;"	t	namespace:tuber
RunResultCallback	system\database\connections\Connection.h	/^typedef function<QueryResult(Statement*,string,Binding*)> RunResultCallback;$/;"	t	namespace:tuber
_CONNECTION_H_	system\database\connections\Connection.h	2;"	d
m_config	system\database\connections\Connection.h	/^	map<string,string> m_config;$/;"	m	class:tuber::Connection
m_connectionName	system\database\connections\Connection.h	/^	string m_connectionName;$/;"	m	class:tuber::Connection
m_connector	system\database\connections\Connection.h	/^	Connector* m_connector;$/;"	m	class:tuber::Connection
m_database	system\database\connections\Connection.h	/^	string m_database;$/;"	m	class:tuber::Connection
tuber	system\database\connections\Connection.h	/^namespace tuber{$/;"	n
ConnectionInterface	system\database\connections\ConnectionInterface.h	/^class ConnectionInterface{$/;"	c	namespace:tuber
_CONNECTION_INTERFACE_H_	system\database\connections\ConnectionInterface.h	2;"	d
tuber	system\database\connections\ConnectionInterface.h	/^namespace tuber{$/;"	n
QueryResult	system\database\connections\QueryResult.h	/^typedef vector<QueryRow> QueryResult;$/;"	t	namespace:tuber
QueryRow	system\database\connections\QueryResult.h	/^typedef Bundle* QueryRow;$/;"	t	namespace:tuber
_QUERY_RESULT_H_	system\database\connections\QueryResult.h	2;"	d
tuber	system\database\connections\QueryResult.h	/^namespace tuber{$/;"	n
SQLiteConnection	system\database\connections\SQLiteConnection.cpp	/^SQLiteConnection::SQLiteConnection(Connector* connector,string connectionName,string database,map<string,string> config) : Connection(connector,connectionName,database,config){$/;"	f	class:tuber::SQLiteConnection
beginTransaction	system\database\connections\SQLiteConnection.cpp	/^void SQLiteConnection::beginTransaction(){$/;"	f	class:tuber::SQLiteConnection
commit	system\database\connections\SQLiteConnection.cpp	/^void SQLiteConnection::commit(){$/;"	f	class:tuber::SQLiteConnection
execute	system\database\connections\SQLiteConnection.cpp	/^void SQLiteConnection::execute(string query){$/;"	f	class:tuber::SQLiteConnection
getQueryGrammar	system\database\connections\SQLiteConnection.cpp	/^Grammar* SQLiteConnection::getQueryGrammar(){$/;"	f	class:tuber::SQLiteConnection
getRawConnection	system\database\connections\SQLiteConnection.cpp	/^sqlite3* SQLiteConnection::getRawConnection(){$/;"	f	class:tuber::SQLiteConnection
rollback	system\database\connections\SQLiteConnection.cpp	/^void SQLiteConnection::rollback(){$/;"	f	class:tuber::SQLiteConnection
run	system\database\connections\SQLiteConnection.cpp	/^int SQLiteConnection::run(string query,Binding* bindings,RunCallback callback){$/;"	f	class:tuber::SQLiteConnection
runAffected	system\database\connections\SQLiteConnection.cpp	/^int SQLiteConnection::runAffected(string query,Binding* bindings,RunAffectedCallback callback){$/;"	f	class:tuber::SQLiteConnection
runResult	system\database\connections\SQLiteConnection.cpp	/^QueryResult SQLiteConnection::runResult(string query,Binding* bindings,RunResultCallback callback){$/;"	f	class:tuber::SQLiteConnection
setQueryGrammar	system\database\connections\SQLiteConnection.cpp	/^void SQLiteConnection::setQueryGrammar(SQLiteGrammar* grammar){$/;"	f	class:tuber::SQLiteConnection
tuber	system\database\connections\SQLiteConnection.cpp	/^namespace tuber{$/;"	n	file:
SQLiteConnection	system\database\connections\SQLiteConnection.h	/^class SQLiteConnection: public Connection{$/;"	c	namespace:tuber
_SQLITE_CONNECTION_H_	system\database\connections\SQLiteConnection.h	2;"	d
m_queryGrammar	system\database\connections\SQLiteConnection.h	/^	SQLiteGrammar* m_queryGrammar;$/;"	m	class:tuber::SQLiteConnection
m_rawConnection	system\database\connections\SQLiteConnection.h	/^	sqlite3* m_rawConnection;$/;"	m	class:tuber::SQLiteConnection
tuber	system\database\connections\SQLiteConnection.h	/^namespace tuber{$/;"	n
SQLiteStatement	system\database\connections\statements\SQLiteStatement.cpp	/^SQLiteStatement::SQLiteStatement(sqlite3* connection) : m_connection(connection){}$/;"	f	class:tuber::SQLiteStatement
bindData	system\database\connections\statements\SQLiteStatement.cpp	/^Statement* SQLiteStatement::bindData(Binding* bindings){$/;"	f	class:tuber::SQLiteStatement
execute	system\database\connections\statements\SQLiteStatement.cpp	/^Statement* SQLiteStatement::execute(string query,Binding* bindings){$/;"	f	class:tuber::SQLiteStatement
executeAndFetch	system\database\connections\statements\SQLiteStatement.cpp	/^QueryResult SQLiteStatement::executeAndFetch(string query,Binding* bindings){$/;"	f	class:tuber::SQLiteStatement
getAffectedId	system\database\connections\statements\SQLiteStatement.cpp	/^int SQLiteStatement::getAffectedId(){$/;"	f	class:tuber::SQLiteStatement
getAffectedNum	system\database\connections\statements\SQLiteStatement.cpp	/^int SQLiteStatement::getAffectedNum(){$/;"	f	class:tuber::SQLiteStatement
getRawStatement	system\database\connections\statements\SQLiteStatement.cpp	/^sqlite3_stmt* SQLiteStatement::getRawStatement(){$/;"	f	class:tuber::SQLiteStatement
prepare	system\database\connections\statements\SQLiteStatement.cpp	/^Statement* SQLiteStatement::prepare(string query){$/;"	f	class:tuber::SQLiteStatement
step	system\database\connections\statements\SQLiteStatement.cpp	/^Statement* SQLiteStatement::step(Binding* bindings){$/;"	f	class:tuber::SQLiteStatement
tuber	system\database\connections\statements\SQLiteStatement.cpp	/^namespace tuber{$/;"	n	file:
~SQLiteStatement	system\database\connections\statements\SQLiteStatement.cpp	/^SQLiteStatement::~SQLiteStatement(){$/;"	f	class:tuber::SQLiteStatement
SQLiteStatement	system\database\connections\statements\SQLiteStatement.h	/^class SQLiteStatement: public Statement{$/;"	c	namespace:tuber
_SQLITE_STATEMENT_H_	system\database\connections\statements\SQLiteStatement.h	2;"	d
m_connection	system\database\connections\statements\SQLiteStatement.h	/^	sqlite3* m_connection;$/;"	m	class:tuber::SQLiteStatement
m_result	system\database\connections\statements\SQLiteStatement.h	/^	QueryResult m_result;$/;"	m	class:tuber::SQLiteStatement
m_stmt	system\database\connections\statements\SQLiteStatement.h	/^	sqlite3_stmt* m_stmt;$/;"	m	class:tuber::SQLiteStatement
tuber	system\database\connections\statements\SQLiteStatement.h	/^namespace tuber{$/;"	n
Statement	system\database\connections\statements\Statement.h	/^class Statement{$/;"	c	namespace:tuber
_STATEMENT_H_	system\database\connections\statements\Statement.h	2;"	d
tuber	system\database\connections\statements\Statement.h	/^namespace tuber{$/;"	n
ConnectionFactory	system\database\connectors\ConnectionFactory.cpp	/^ConnectionFactory::ConnectionFactory(){$/;"	f	class:tuber::ConnectionFactory
createConnection	system\database\connectors\ConnectionFactory.cpp	/^Connection* ConnectionFactory::createConnection(string driver,Connector* connector,string connectionName,string database,map<string,string> config){$/;"	f	class:tuber::ConnectionFactory
createConnector	system\database\connectors\ConnectionFactory.cpp	/^Connector* ConnectionFactory::createConnector(string driver){$/;"	f	class:tuber::ConnectionFactory
make	system\database\connectors\ConnectionFactory.cpp	/^Connection* ConnectionFactory::make(map<string,string> driverConfig,string name){$/;"	f	class:tuber::ConnectionFactory
tuber	system\database\connectors\ConnectionFactory.cpp	/^namespace tuber{$/;"	n	file:
ConnectionFactory	system\database\connectors\ConnectionFactory.h	/^class ConnectionFactory: public IBindable{$/;"	c	namespace:tuber
_CONNECTION_FACTORY_H_	system\database\connectors\ConnectionFactory.h	2;"	d
tuber	system\database\connectors\ConnectionFactory.h	/^namespace tuber{$/;"	n
Connector	system\database\connectors\Connector.h	/^class Connector{$/;"	c	namespace:tuber
_CONNECTOR_H_	system\database\connectors\Connector.h	2;"	d
tuber	system\database\connectors\Connector.h	/^namespace tuber{$/;"	n
createRawConnection	system\database\connectors\SQLiteConnector.cpp	/^sqlite3* SQLiteConnector::createRawConnection(map<string,string> config){$/;"	f	class:tuber::SQLiteConnector
tuber	system\database\connectors\SQLiteConnector.cpp	/^namespace tuber{$/;"	n	file:
SQLiteConnector	system\database\connectors\SQLiteConnector.h	/^class SQLiteConnector: public Connector{$/;"	c	namespace:tuber
_SQLITE_CONNECTOR_H_	system\database\connectors\SQLiteConnector.h	2;"	d
tuber	system\database\connectors\SQLiteConnector.h	/^namespace tuber{$/;"	n
Model	system\database\model\Model.cpp	/^Model::Model(){$/;"	f	class:tuber::Model
deleteRow	system\database\model\Model.cpp	/^bool Model::deleteRow(){$/;"	f	class:tuber::Model
fetch	system\database\model\Model.cpp	/^QueryRow Model::fetch(){$/;"	f	class:tuber::Model
fill	system\database\model\Model.cpp	/^Model* Model::fill(QueryRow row){$/;"	f	class:tuber::Model
finishDelete	system\database\model\Model.cpp	/^void Model::finishDelete(){$/;"	f	class:tuber::Model
finishSave	system\database\model\Model.cpp	/^void Model::finishSave(){$/;"	f	class:tuber::Model
getAttributesBundle	system\database\model\Model.cpp	/^Bundle* Model::getAttributesBundle(){$/;"	f	class:tuber::Model
getConnection	system\database\model\Model.cpp	/^Connection* Model::getConnection(string connection){$/;"	f	class:tuber::Model
getDirty	system\database\model\Model.cpp	/^QueryRow Model::getDirty(){$/;"	f	class:tuber::Model
getFreshTime	system\database\model\Model.cpp	/^string Model::getFreshTime(){$/;"	f	class:tuber::Model
getKeyName	system\database\model\Model.cpp	/^string Model::getKeyName(){$/;"	f	class:tuber::Model
getOriginalBundle	system\database\model\Model.cpp	/^Bundle* Model::getOriginalBundle(){$/;"	f	class:tuber::Model
getPrimaryKeyValue	system\database\model\Model.cpp	/^int Model::getPrimaryKeyValue(){$/;"	f	class:tuber::Model
getTableName	system\database\model\Model.cpp	/^string Model::getTableName(){$/;"	f	class:tuber::Model
isDirty	system\database\model\Model.cpp	/^bool Model::isDirty(){$/;"	f	class:tuber::Model
m_dispatcher	system\database\model\Model.cpp	/^EventDispatcher* Model::m_dispatcher = nullptr;$/;"	m	class:tuber::Model	file:
m_resolver	system\database\model\Model.cpp	/^IConnectionResolver* Model::m_resolver = nullptr;$/;"	m	class:tuber::Model	file:
moveToOriginal	system\database\model\Model.cpp	/^Model* Model::moveToOriginal(){$/;"	f	class:tuber::Model
newQuery	system\database\model\Model.cpp	/^ModelQueryBuilder* Model::newQuery(){$/;"	f	class:tuber::Model
performInsert	system\database\model\Model.cpp	/^bool Model::performInsert(ModelQueryBuilder* query){$/;"	f	class:tuber::Model
performUpdate	system\database\model\Model.cpp	/^bool Model::performUpdate(ModelQueryBuilder* query){$/;"	f	class:tuber::Model
resolveConnection	system\database\model\Model.cpp	/^Connection* Model::resolveConnection(string connection){$/;"	f	class:tuber::Model
saveRow	system\database\model\Model.cpp	/^bool Model::saveRow(){$/;"	f	class:tuber::Model
select	system\database\model\Model.cpp	/^QueryBuilder* Model::select(vector<string> columns){$/;"	f	class:tuber::Model
setConnectionResolver	system\database\model\Model.cpp	/^void Model::setConnectionResolver(IConnectionResolver* resolver){$/;"	f	class:tuber::Model
setCreatedAt	system\database\model\Model.cpp	/^void Model::setCreatedAt(string timestamp){$/;"	f	class:tuber::Model
setEventDispatcher	system\database\model\Model.cpp	/^void Model::setEventDispatcher(EventDispatcher* dispatcher){$/;"	f	class:tuber::Model
setModelAttributes	system\database\model\Model.cpp	/^void Model::setModelAttributes(string table,string primaryKey,bool timestamps){$/;"	f	class:tuber::Model
setUpdatedAt	system\database\model\Model.cpp	/^void Model::setUpdatedAt(string timestamp){$/;"	f	class:tuber::Model
syncOriginal	system\database\model\Model.cpp	/^Model* Model::syncOriginal(){$/;"	f	class:tuber::Model
tuber	system\database\model\Model.cpp	/^namespace tuber{$/;"	n	file:
updateTimestamps	system\database\model\Model.cpp	/^void Model::updateTimestamps(){$/;"	f	class:tuber::Model
usesTimestamps	system\database\model\Model.cpp	/^bool Model::usesTimestamps(){$/;"	f	class:tuber::Model
CREATED_AT	system\database\model\Model.h	/^	const string CREATED_AT = "created_at";$/;"	m	class:tuber::Model
Model	system\database\model\Model.h	/^class Model: public IEventPublisher{$/;"	c	namespace:tuber
UPDATED_AT	system\database\model\Model.h	/^	const string UPDATED_AT = "updated_at";$/;"	m	class:tuber::Model
_MODEL_H_	system\database\model\Model.h	2;"	d
all	system\database\model\Model.h	/^	static QueryResult all(vector<string> selectStatements){$/;"	f	class:tuber::Model
find	system\database\model\Model.h	/^	static T* find(int primaryKey){$/;"	f	class:tuber::Model
m_attributes	system\database\model\Model.h	/^	QueryRow m_attributes;$/;"	m	class:tuber::Model
m_dispatcher	system\database\model\Model.h	/^	static EventDispatcher* m_dispatcher;$/;"	m	class:tuber::Model
m_exists	system\database\model\Model.h	/^	bool m_exists;$/;"	m	class:tuber::Model
m_original	system\database\model\Model.h	/^	QueryRow m_original;$/;"	m	class:tuber::Model
m_primaryKey	system\database\model\Model.h	/^	string m_primaryKey = "";$/;"	m	class:tuber::Model
m_resolver	system\database\model\Model.h	/^	static IConnectionResolver* m_resolver;$/;"	m	class:tuber::Model
m_table	system\database\model\Model.h	/^	string m_table = "";$/;"	m	class:tuber::Model
m_timestamps	system\database\model\Model.h	/^	bool m_timestamps = true;$/;"	m	class:tuber::Model
tuber	system\database\model\Model.h	/^namespace tuber{$/;"	n
ModelQueryBuilder	system\database\model\ModelQueryBuilder.cpp	/^ModelQueryBuilder::ModelQueryBuilder(QueryBuilder* builder) : m_queryBuilder(builder){$/;"	f	class:tuber::ModelQueryBuilder
bindModel	system\database\model\ModelQueryBuilder.cpp	/^ModelQueryBuilder* ModelQueryBuilder::bindModel(Model* model){$/;"	f	class:tuber::ModelQueryBuilder
deleteModel	system\database\model\ModelQueryBuilder.cpp	/^bool ModelQueryBuilder::deleteModel(){$/;"	f	class:tuber::ModelQueryBuilder
find	system\database\model\ModelQueryBuilder.cpp	/^Model* ModelQueryBuilder::find(int pk){$/;"	f	class:tuber::ModelQueryBuilder
getQueryBuilder	system\database\model\ModelQueryBuilder.cpp	/^QueryBuilder* ModelQueryBuilder::getQueryBuilder(){$/;"	f	class:tuber::ModelQueryBuilder
insert	system\database\model\ModelQueryBuilder.cpp	/^bool ModelQueryBuilder::insert(Bundle* attributes){$/;"	f	class:tuber::ModelQueryBuilder
setQueryBuilder	system\database\model\ModelQueryBuilder.cpp	/^void ModelQueryBuilder::setQueryBuilder(QueryBuilder* builder){$/;"	f	class:tuber::ModelQueryBuilder
tuber	system\database\model\ModelQueryBuilder.cpp	/^namespace tuber{$/;"	n	file:
update	system\database\model\ModelQueryBuilder.cpp	/^bool ModelQueryBuilder::update(Bundle* attributes){$/;"	f	class:tuber::ModelQueryBuilder
~ModelQueryBuilder	system\database\model\ModelQueryBuilder.cpp	/^ModelQueryBuilder::~ModelQueryBuilder(){$/;"	f	class:tuber::ModelQueryBuilder
ModelQueryBuilder	system\database\model\ModelQueryBuilder.h	/^class ModelQueryBuilder{$/;"	c	namespace:tuber
_MODEL_QUERY_BUILDER_H_	system\database\model\ModelQueryBuilder.h	2;"	d
m_isModelBinded	system\database\model\ModelQueryBuilder.h	/^	bool m_isModelBinded;$/;"	m	class:tuber::ModelQueryBuilder
m_model	system\database\model\ModelQueryBuilder.h	/^	Model* m_model;$/;"	m	class:tuber::ModelQueryBuilder
m_queryBuilder	system\database\model\ModelQueryBuilder.h	/^	QueryBuilder* m_queryBuilder;$/;"	m	class:tuber::ModelQueryBuilder
tuber	system\database\model\ModelQueryBuilder.h	/^namespace tuber{$/;"	n
JoinStatement	system\database\query\JoinStatement.h	/^struct JoinStatement{$/;"	s	namespace:tuber
_JOIN_STATEMENT_H_	system\database\query\JoinStatement.h	2;"	d
joinMethod	system\database\query\JoinStatement.h	/^	string joinMethod;$/;"	m	struct:tuber::JoinStatement
statement	system\database\query\JoinStatement.h	/^	string statement;$/;"	m	struct:tuber::JoinStatement
table	system\database\query\JoinStatement.h	/^	string table;$/;"	m	struct:tuber::JoinStatement
tuber	system\database\query\JoinStatement.h	/^namespace tuber{$/;"	n
QueryBuilder	system\database\query\QueryBuilder.cpp	/^QueryBuilder::QueryBuilder(Connection* connection,Grammar* grammar): m_connection(connection), m_grammar(grammar){$/;"	f	class:tuber::QueryBuilder
compileBundle	system\database\query\QueryBuilder.cpp	/^QueryBuilder* QueryBuilder::compileBundle(Bundle* bundle){$/;"	f	class:tuber::QueryBuilder
deleteData	system\database\query\QueryBuilder.cpp	/^bool QueryBuilder::deleteData(){$/;"	f	class:tuber::QueryBuilder
distinct	system\database\query\QueryBuilder.cpp	/^QueryBuilder* QueryBuilder::distinct(){$/;"	f	class:tuber::QueryBuilder
first	system\database\query\QueryBuilder.cpp	/^QueryRow QueryBuilder::first(){$/;"	f	class:tuber::QueryBuilder
from	system\database\query\QueryBuilder.cpp	/^QueryBuilder* QueryBuilder::from(string table){$/;"	f	class:tuber::QueryBuilder
get	system\database\query\QueryBuilder.cpp	/^QueryResult QueryBuilder::get(){$/;"	f	class:tuber::QueryBuilder
getBindings	system\database\query\QueryBuilder.cpp	/^Binding* QueryBuilder::getBindings(){$/;"	f	class:tuber::QueryBuilder
getColumns	system\database\query\QueryBuilder.cpp	/^vector<string> QueryBuilder::getColumns(){$/;"	f	class:tuber::QueryBuilder
getDistinct	system\database\query\QueryBuilder.cpp	/^bool QueryBuilder::getDistinct(){$/;"	f	class:tuber::QueryBuilder
getFrom	system\database\query\QueryBuilder.cpp	/^string QueryBuilder::getFrom(){$/;"	f	class:tuber::QueryBuilder
getGroupByStatements	system\database\query\QueryBuilder.cpp	/^vector<string> QueryBuilder::getGroupByStatements(){$/;"	f	class:tuber::QueryBuilder
getHavingStatements	system\database\query\QueryBuilder.cpp	/^unordered_map<string,string> QueryBuilder::getHavingStatements(){$/;"	f	class:tuber::QueryBuilder
getJoinStatements	system\database\query\QueryBuilder.cpp	/^vector<JoinStatement> QueryBuilder::getJoinStatements(){$/;"	f	class:tuber::QueryBuilder
getLimit	system\database\query\QueryBuilder.cpp	/^int QueryBuilder::getLimit(){$/;"	f	class:tuber::QueryBuilder
getOffset	system\database\query\QueryBuilder.cpp	/^int QueryBuilder::getOffset(){$/;"	f	class:tuber::QueryBuilder
getOrderStatements	system\database\query\QueryBuilder.cpp	/^unordered_map<string,string> QueryBuilder::getOrderStatements(){$/;"	f	class:tuber::QueryBuilder
getTable	system\database\query\QueryBuilder.cpp	/^string QueryBuilder::getTable(){$/;"	f	class:tuber::QueryBuilder
getWhereStatements	system\database\query\QueryBuilder.cpp	/^vector<WhereBinding> QueryBuilder::getWhereStatements(){$/;"	f	class:tuber::QueryBuilder
groupBy	system\database\query\QueryBuilder.cpp	/^QueryBuilder* QueryBuilder::groupBy(string column){$/;"	f	class:tuber::QueryBuilder
groupBy	system\database\query\QueryBuilder.cpp	/^QueryBuilder* QueryBuilder::groupBy(vector<string> columns){$/;"	f	class:tuber::QueryBuilder
having	system\database\query\QueryBuilder.cpp	/^QueryBuilder* QueryBuilder::having(string sql,string operatorValue){$/;"	f	class:tuber::QueryBuilder
insert	system\database\query\QueryBuilder.cpp	/^bool QueryBuilder::insert(Bundle* attributes){$/;"	f	class:tuber::QueryBuilder
join	system\database\query\QueryBuilder.cpp	/^QueryBuilder* QueryBuilder::join(string table,string statement,string joinMethod){$/;"	f	class:tuber::QueryBuilder
limit	system\database\query\QueryBuilder.cpp	/^QueryBuilder* QueryBuilder::limit(int numRows,int offset){$/;"	f	class:tuber::QueryBuilder
orderBy	system\database\query\QueryBuilder.cpp	/^QueryBuilder* QueryBuilder::orderBy(string column,string method){$/;"	f	class:tuber::QueryBuilder
runSelect	system\database\query\QueryBuilder.cpp	/^QueryResult QueryBuilder::runSelect(){$/;"	f	class:tuber::QueryBuilder
select	system\database\query\QueryBuilder.cpp	/^QueryBuilder* QueryBuilder::select(vector<string> columns){$/;"	f	class:tuber::QueryBuilder
selectDistinct	system\database\query\QueryBuilder.cpp	/^QueryBuilder* QueryBuilder::selectDistinct(vector<string> columns){$/;"	f	class:tuber::QueryBuilder
setWhereBinding	system\database\query\QueryBuilder.cpp	/^QueryBuilder* QueryBuilder::setWhereBinding(string column,string operatorValue,string boolean,BindingType type){$/;"	f	class:tuber::QueryBuilder
table	system\database\query\QueryBuilder.cpp	/^QueryBuilder* QueryBuilder::table(string table){$/;"	f	class:tuber::QueryBuilder
take	system\database\query\QueryBuilder.cpp	/^QueryBuilder* QueryBuilder::take(int limit){$/;"	f	class:tuber::QueryBuilder
toSql	system\database\query\QueryBuilder.cpp	/^string QueryBuilder::toSql(){$/;"	f	class:tuber::QueryBuilder
tuber	system\database\query\QueryBuilder.cpp	/^namespace tuber{$/;"	n	file:
update	system\database\query\QueryBuilder.cpp	/^bool QueryBuilder::update(Bundle* attributes){$/;"	f	class:tuber::QueryBuilder
where	system\database\query\QueryBuilder.cpp	/^QueryBuilder* QueryBuilder::where(string column,string operatorValue,bool rValue,string boolean){$/;"	f	class:tuber::QueryBuilder
where	system\database\query\QueryBuilder.cpp	/^QueryBuilder* QueryBuilder::where(string column,string operatorValue,double rValue,string boolean){$/;"	f	class:tuber::QueryBuilder
where	system\database\query\QueryBuilder.cpp	/^QueryBuilder* QueryBuilder::where(string column,string operatorValue,int rValue,string boolean){$/;"	f	class:tuber::QueryBuilder
where	system\database\query\QueryBuilder.cpp	/^QueryBuilder* QueryBuilder::where(string column,string operatorValue,string rValue,string boolean){$/;"	f	class:tuber::QueryBuilder
whereNull	system\database\query\QueryBuilder.cpp	/^QueryBuilder* QueryBuilder::whereNull(string column,string operatorValue,string boolean){$/;"	f	class:tuber::QueryBuilder
QueryBuilder	system\database\query\QueryBuilder.h	/^class QueryBuilder{$/;"	c	namespace:tuber
_QUERY_BUILDER_H_	system\database\query\QueryBuilder.h	2;"	d
m_bindings	system\database\query\QueryBuilder.h	/^	Binding* m_bindings;$/;"	m	class:tuber::QueryBuilder
m_columns	system\database\query\QueryBuilder.h	/^	vector<string> m_columns;$/;"	m	class:tuber::QueryBuilder
m_connection	system\database\query\QueryBuilder.h	/^	Connection* m_connection;$/;"	m	class:tuber::QueryBuilder
m_distinct	system\database\query\QueryBuilder.h	/^	bool m_distinct = false;$/;"	m	class:tuber::QueryBuilder
m_grammar	system\database\query\QueryBuilder.h	/^	Grammar* m_grammar;$/;"	m	class:tuber::QueryBuilder
m_groupBy	system\database\query\QueryBuilder.h	/^	vector<string> m_groupBy;$/;"	m	class:tuber::QueryBuilder
m_having	system\database\query\QueryBuilder.h	/^	unordered_map<string,string> m_having;$/;"	m	class:tuber::QueryBuilder
m_joins	system\database\query\QueryBuilder.h	/^	vector<JoinStatement> m_joins;$/;"	m	class:tuber::QueryBuilder
m_limit	system\database\query\QueryBuilder.h	/^	int m_limit;$/;"	m	class:tuber::QueryBuilder
m_offset	system\database\query\QueryBuilder.h	/^	int m_offset;$/;"	m	class:tuber::QueryBuilder
m_orderBy	system\database\query\QueryBuilder.h	/^	unordered_map<string,string> m_orderBy;$/;"	m	class:tuber::QueryBuilder
m_table	system\database\query\QueryBuilder.h	/^	string m_table;$/;"	m	class:tuber::QueryBuilder
m_where	system\database\query\QueryBuilder.h	/^	vector<WhereBinding> m_where;$/;"	m	class:tuber::QueryBuilder
tuber	system\database\query\QueryBuilder.h	/^namespace tuber{$/;"	n
WhereBinding	system\database\query\WhereBinding.h	/^struct WhereBinding{$/;"	s	namespace:tuber
_WHERE_BINDING_H_	system\database\query\WhereBinding.h	2;"	d
boolean	system\database\query\WhereBinding.h	/^	string boolean;$/;"	m	struct:tuber::WhereBinding
column	system\database\query\WhereBinding.h	/^	string column;$/;"	m	struct:tuber::WhereBinding
operatorValue	system\database\query\WhereBinding.h	/^	string operatorValue;$/;"	m	struct:tuber::WhereBinding
position	system\database\query\WhereBinding.h	/^	int position;$/;"	m	struct:tuber::WhereBinding
tuber	system\database\query\WhereBinding.h	/^namespace tuber{$/;"	n
type	system\database\query\WhereBinding.h	/^	BindingType type;$/;"	m	struct:tuber::WhereBinding
compileColumnValues	system\database\query\grammar\Grammar.cpp	/^string Grammar::compileColumnValues(QueryBuilder* builder){$/;"	f	class:tuber::Grammar
compileColumns	system\database\query\grammar\Grammar.cpp	/^string Grammar::compileColumns(QueryBuilder* builder){$/;"	f	class:tuber::Grammar
compileDelete	system\database\query\grammar\Grammar.cpp	/^string Grammar::compileDelete(QueryBuilder* builder){$/;"	f	class:tuber::Grammar
compileFrom	system\database\query\grammar\Grammar.cpp	/^string Grammar::compileFrom(QueryBuilder* builder){$/;"	f	class:tuber::Grammar
compileGroupBy	system\database\query\grammar\Grammar.cpp	/^string Grammar::compileGroupBy(QueryBuilder* builder){$/;"	f	class:tuber::Grammar
compileHaving	system\database\query\grammar\Grammar.cpp	/^string Grammar::compileHaving(QueryBuilder* builder){$/;"	f	class:tuber::Grammar
compileInsert	system\database\query\grammar\Grammar.cpp	/^string Grammar::compileInsert(QueryBuilder* builder){$/;"	f	class:tuber::Grammar
compileJoin	system\database\query\grammar\Grammar.cpp	/^string Grammar::compileJoin(QueryBuilder* builder){$/;"	f	class:tuber::Grammar
compileNameValuePair	system\database\query\grammar\Grammar.cpp	/^string Grammar::compileNameValuePair(QueryBuilder* builder){$/;"	f	class:tuber::Grammar
compileOrderBy	system\database\query\grammar\Grammar.cpp	/^string Grammar::compileOrderBy(QueryBuilder* builder){$/;"	f	class:tuber::Grammar
compileSelect	system\database\query\grammar\Grammar.cpp	/^string Grammar::compileSelect(QueryBuilder* builder){$/;"	f	class:tuber::Grammar
compileUpdate	system\database\query\grammar\Grammar.cpp	/^string Grammar::compileUpdate(QueryBuilder* builder){$/;"	f	class:tuber::Grammar
compileWhere	system\database\query\grammar\Grammar.cpp	/^string Grammar::compileWhere(QueryBuilder* builder){$/;"	f	class:tuber::Grammar
concatenateComponents	system\database\query\grammar\Grammar.cpp	/^string Grammar::concatenateComponents(list<string> strings,string glue){$/;"	f	class:tuber::Grammar
concatenateComponents	system\database\query\grammar\Grammar.cpp	/^string Grammar::concatenateComponents(vector<string> strings,string glue){$/;"	f	class:tuber::Grammar
tuber	system\database\query\grammar\Grammar.cpp	/^namespace tuber{$/;"	n	file:
Grammar	system\database\query\grammar\Grammar.h	/^class Grammar{$/;"	c	namespace:tuber
_GRAMMAR_H_	system\database\query\grammar\Grammar.h	2;"	d
tuber	system\database\query\grammar\Grammar.h	/^namespace tuber{$/;"	n
SQLiteGrammar	system\database\query\grammar\SQLiteGrammar.h	/^class SQLiteGrammar: public Grammar{$/;"	c	namespace:tuber
_SQLITE_GRAMMAR_H_	system\database\query\grammar\SQLiteGrammar.h	2;"	d
tuber	system\database\query\grammar\SQLiteGrammar.h	/^namespace tuber{$/;"	n
fire	system\events\EventDispatcher.cpp	/^void EventDispatcher::fire(string event){$/;"	f	class:tuber::EventDispatcher
fireIfExists	system\events\EventDispatcher.cpp	/^void EventDispatcher::fireIfExists(string event){$/;"	f	class:tuber::EventDispatcher
hasPublisher	system\events\EventDispatcher.cpp	/^bool EventDispatcher::hasPublisher(string event,IEventPublisher* publisher){$/;"	f	class:tuber::EventDispatcher
isListening	system\events\EventDispatcher.cpp	/^bool EventDispatcher::isListening(string event){$/;"	f	class:tuber::EventDispatcher
listen	system\events\EventDispatcher.cpp	/^void EventDispatcher::listen(string event,EventCallback callback,IEventPublisher* publisher){$/;"	f	class:tuber::EventDispatcher
tuber	system\events\EventDispatcher.cpp	/^namespace tuber{$/;"	n	file:
EventCallback	system\events\EventDispatcher.h	/^typedef function<void(IEventPublisher*)> EventCallback;$/;"	t	namespace:tuber
EventDispatcher	system\events\EventDispatcher.h	/^    EventDispatcher(){ g_message("EventDispatcher: created"); }$/;"	f	class:tuber::EventDispatcher
EventDispatcher	system\events\EventDispatcher.h	/^class EventDispatcher : public Service{$/;"	c	namespace:tuber
_EVENT_DISPATCHER_H_	system\events\EventDispatcher.h	2;"	d
g_signal_callback	system\events\EventDispatcher.h	/^typedef void (*g_signal_callback)(GtkWidget*,gpointer);$/;"	t	namespace:tuber
listeners	system\events\EventDispatcher.h	/^	map<string,map<IEventPublisher*,vector<EventCallback>>> listeners;$/;"	m	class:tuber::EventDispatcher
tuber	system\events\EventDispatcher.h	/^namespace tuber{$/;"	n
~EventDispatcher	system\events\EventDispatcher.h	/^	~EventDispatcher() { g_message("EventDispatcher: deleting"); }$/;"	f	class:tuber::EventDispatcher
provides	system\events\EventServiceProvider.cpp	/^string EventServiceProvider::provides(){$/;"	f	class:tuber::EventServiceProvider
registerService	system\events\EventServiceProvider.cpp	/^void EventServiceProvider::registerService(){$/;"	f	class:tuber::EventServiceProvider
tuber	system\events\EventServiceProvider.cpp	/^namespace tuber{$/;"	n	file:
~EventServiceProvider	system\events\EventServiceProvider.cpp	/^EventServiceProvider::~EventServiceProvider(){$/;"	f	class:tuber::EventServiceProvider
EventServiceProvider	system\events\EventServiceProvider.h	/^    EventServiceProvider(Container* container) : ServiceProvider(container){$/;"	f	class:tuber::EventServiceProvider
EventServiceProvider	system\events\EventServiceProvider.h	/^class EventServiceProvider : public ServiceProvider{$/;"	c	namespace:tuber
_EVENT_SERVICE_PROVIDER_H_	system\events\EventServiceProvider.h	2;"	d
tuber	system\events\EventServiceProvider.h	/^namespace tuber{$/;"	n
tuber	system\events\UnregisteredEventFiringException.cpp	/^namespace tuber{$/;"	n	file:
what	system\events\UnregisteredEventFiringException.cpp	/^const char* UnregisteredEventFiringException::what() const throw(){$/;"	f	class:tuber::UnregisteredEventFiringException
UnregisteredEventFiringException	system\events\UnregisteredEventFiringException.h	/^	UnregisteredEventFiringException(string event) : m_eventKey(event){}$/;"	f	class:tuber::UnregisteredEventFiringException
UnregisteredEventFiringException	system\events\UnregisteredEventFiringException.h	/^class UnregisteredEventFiringException : public exception{$/;"	c	namespace:tuber
_UNREGISTERED_EVENT_FIRING_EXCEPTION_H_	system\events\UnregisteredEventFiringException.h	2;"	d
m_eventKey	system\events\UnregisteredEventFiringException.h	/^	string m_eventKey;$/;"	m	class:tuber::UnregisteredEventFiringException
tuber	system\events\UnregisteredEventFiringException.h	/^namespace tuber{$/;"	n
App	system\facades\App.h	/^class App: public Facade{$/;"	c	namespace:tuber
_APP_H_	system\facades\App.h	2;"	d
destroy	system\facades\App.h	/^	static void destroy(IBindable* bindable){$/;"	f	class:tuber::App
get	system\facades\App.h	/^	static Application* get(){$/;"	f	class:tuber::App
getFacadeAccessor	system\facades\App.h	/^	static string getFacadeAccessor(){$/;"	f	class:tuber::App
resolve	system\facades\App.h	/^	static T* resolve(string key){$/;"	f	class:tuber::App
tuber	system\facades\App.h	/^namespace tuber{$/;"	n
BundleFacade	system\facades\BundleFacade.h	/^class BundleFacade: public Facade{$/;"	c	namespace:tuber
_BUNDLE_FACADE_H_	system\facades\BundleFacade.h	2;"	d
get	system\facades\BundleFacade.h	/^	static Bundle* get(){$/;"	f	class:tuber::BundleFacade
getFacadeAccessor	system\facades\BundleFacade.h	/^	static string getFacadeAccessor(){$/;"	f	class:tuber::BundleFacade
tuber	system\facades\BundleFacade.h	/^namespace tuber{$/;"	n
ConfigManagerFacade	system\facades\ConfigManagerFacade.h	/^class ConfigManagerFacade: public Facade{$/;"	c	namespace:tuber
_CONFIG_MANAGER_FACADE_H_	system\facades\ConfigManagerFacade.h	2;"	d
get	system\facades\ConfigManagerFacade.h	/^	static ConfigManager* get(){$/;"	f	class:tuber::ConfigManagerFacade
getFacadeAccessor	system\facades\ConfigManagerFacade.h	/^	static string getFacadeAccessor(){$/;"	f	class:tuber::ConfigManagerFacade
tuber	system\facades\ConfigManagerFacade.h	/^namespace tuber{$/;"	n
ControllerLifeManagerFacade	system\facades\ControllerLifeManagerFacade.h	/^class ControllerLifeManagerFacade: public Facade{$/;"	c	namespace:tuber
_CONTROLLER_LIFE_MANAGER_FACADE_H_	system\facades\ControllerLifeManagerFacade.h	2;"	d
get	system\facades\ControllerLifeManagerFacade.h	/^	static ControllerLifeCycleManager* get(){$/;"	f	class:tuber::ControllerLifeManagerFacade
getFacadeAccessor	system\facades\ControllerLifeManagerFacade.h	/^	static string getFacadeAccessor(){$/;"	f	class:tuber::ControllerLifeManagerFacade
tuber	system\facades\ControllerLifeManagerFacade.h	/^namespace tuber{$/;"	n
ControllerManagerFacade	system\facades\ControllerManagerFacade.h	/^class ControllerManagerFacade: public Facade{$/;"	c	namespace:tuber
_CONTROLLER_MANAGER_FACADE_H_	system\facades\ControllerManagerFacade.h	2;"	d
get	system\facades\ControllerManagerFacade.h	/^	static ControllerManager* get(){$/;"	f	class:tuber::ControllerManagerFacade
getFacadeAccessor	system\facades\ControllerManagerFacade.h	/^	static string getFacadeAccessor(){$/;"	f	class:tuber::ControllerManagerFacade
tuber	system\facades\ControllerManagerFacade.h	/^namespace tuber{$/;"	n
DB	system\facades\DB.h	/^class DB: public Facade{$/;"	c	namespace:tuber
_DB_H_	system\facades\DB.h	2;"	d
get	system\facades\DB.h	/^	static DatabaseManager* get(){$/;"	f	class:tuber::DB
getFacadeAccessor	system\facades\DB.h	/^	static string getFacadeAccessor(){$/;"	f	class:tuber::DB
raw	system\facades\DB.h	/^	static void raw(string query){$/;"	f	class:tuber::DB
rawSelect	system\facades\DB.h	/^	static QueryResult rawSelect(string query){$/;"	f	class:tuber::DB
tuber	system\facades\DB.h	/^namespace tuber{$/;"	n
EventFacade	system\facades\EventFacade.h	/^class EventFacade: public Facade{$/;"	c	namespace:tuber
_EVENT_FACADE_H_	system\facades\EventFacade.h	2;"	d
get	system\facades\EventFacade.h	/^	static EventDispatcher* get(){$/;"	f	class:tuber::EventFacade
getFacadeAccessor	system\facades\EventFacade.h	/^	static string getFacadeAccessor(){$/;"	f	class:tuber::EventFacade
tuber	system\facades\EventFacade.h	/^namespace tuber{$/;"	n
get	system\facades\Facade.cpp	/^IBindable* Facade::get(){$/;"	f	class:tuber::Facade
getApp	system\facades\Facade.cpp	/^Application* Facade::getApp(){$/;"	f	class:tuber::Facade
getFacadeAccessor	system\facades\Facade.cpp	/^string Facade::getFacadeAccessor(){$/;"	f	class:tuber::Facade
m_app	system\facades\Facade.cpp	/^Application* Facade::m_app = nullptr;$/;"	m	class:tuber::Facade	file:
setFacadeApplication	system\facades\Facade.cpp	/^void Facade::setFacadeApplication(Application* app){$/;"	f	class:tuber::Facade
tuber	system\facades\Facade.cpp	/^namespace tuber{$/;"	n	file:
Facade	system\facades\Facade.h	/^class Facade{$/;"	c	namespace:tuber
_FACADE_H_	system\facades\Facade.h	2;"	d
m_app	system\facades\Facade.h	/^	static Application* m_app;$/;"	m	class:tuber::Facade
tuber	system\facades\Facade.h	/^namespace tuber{$/;"	n
_FACADES_H_	system\facades\Facades.h	2;"	d
Hash	system\facades\Hash.h	/^class Hash: public Facade{$/;"	c	namespace:tuber
_HASH_H_	system\facades\Hash.h	2;"	d
get	system\facades\Hash.h	/^	static HashFactory* get(){$/;"	f	class:tuber::Hash
getFacadeAccessor	system\facades\Hash.h	/^	static string getFacadeAccessor(){$/;"	f	class:tuber::Hash
make	system\facades\Hash.h	/^	static string make(string strToEncrypt){$/;"	f	class:tuber::Hash
tuber	system\facades\Hash.h	/^namespace tuber{$/;"	n
PathFacade	system\facades\PathFacade.h	/^class PathFacade: public Facade{$/;"	c	namespace:tuber
_PATH_FACADE_H_	system\facades\PathFacade.h	2;"	d
get	system\facades\PathFacade.h	/^	static PathManager* get(){$/;"	f	class:tuber::PathFacade
getFacadeAccessor	system\facades\PathFacade.h	/^	static string getFacadeAccessor(){$/;"	f	class:tuber::PathFacade
tuber	system\facades\PathFacade.h	/^namespace tuber{$/;"	n
RequestFacade	system\facades\RequestFacade.h	/^class RequestFacade: public Facade{$/;"	c	namespace:tuber
_REQUEST_FACADE_H_	system\facades\RequestFacade.h	2;"	d
get	system\facades\RequestFacade.h	/^	static Request* get(){$/;"	f	class:tuber::RequestFacade
getFacadeAccessor	system\facades\RequestFacade.h	/^	static string getFacadeAccessor(){$/;"	f	class:tuber::RequestFacade
tuber	system\facades\RequestFacade.h	/^namespace tuber{$/;"	n
View	system\facades\View.h	/^class View: public Facade{$/;"	c	namespace:tuber
_VIEW_H_	system\facades\View.h	2;"	d
get	system\facades\View.h	/^	static ViewManager* get(){$/;"	f	class:tuber::View
getFacadeAccessor	system\facades\View.h	/^	static string getFacadeAccessor(){$/;"	f	class:tuber::View
tuber	system\facades\View.h	/^namespace tuber{$/;"	n
Application	system\foundation\Application.cpp	/^Application::Application(string appId,string appName,GApplicationFlags flags) : m_appId(appId), m_appName(appName), m_flags(flags){$/;"	f	class:Application
boot	system\foundation\Application.cpp	/^void Application::boot(){$/;"	f	class:Application
bootUp	system\foundation\Application.cpp	/^void Application::bootUp(){$/;"	f	class:Application
create	system\foundation\Application.cpp	/^Application* Application::create(string appId,string appName,GApplicationFlags flags){$/;"	f	class:Application
getAppName	system\foundation\Application.cpp	/^string Application::getAppName(){$/;"	f	class:Application
getConfigManager	system\foundation\Application.cpp	/^ConfigManager* Application::getConfigManager(){$/;"	f	class:Application
getControllerManager	system\foundation\Application.cpp	/^ControllerManager* Application::getControllerManager(){$/;"	f	class:Application
getEventDispatcher	system\foundation\Application.cpp	/^EventDispatcher* Application::getEventDispatcher(){$/;"	f	class:Application
getGtkApp	system\foundation\Application.cpp	/^GtkApplication* Application::getGtkApp(){$/;"	f	class:Application
getInstance	system\foundation\Application.cpp	/^Application* Application::getInstance(){$/;"	f	class:Application
getPathManager	system\foundation\Application.cpp	/^PathManager* Application::getPathManager(){$/;"	f	class:Application
getServiceProviderManager	system\foundation\Application.cpp	/^ServiceProviderManager* Application::getServiceProviderManager(){$/;"	f	class:Application
getViewManager	system\foundation\Application.cpp	/^ViewManager* Application::getViewManager(){$/;"	f	class:Application
isBooted	system\foundation\Application.cpp	/^bool Application::isBooted(){$/;"	f	class:Application
isPrebooted	system\foundation\Application.cpp	/^bool Application::isPrebooted(){$/;"	f	class:Application
loadConfiguration	system\foundation\Application.cpp	/^void Application::loadConfiguration(ConfigRepository* configRepo){$/;"	f	class:Application
loadControllers	system\foundation\Application.cpp	/^void Application::loadControllers(ControllerRepository* controllerRepo){$/;"	f	class:Application
loadDefaultController	system\foundation\Application.cpp	/^void Application::loadDefaultController(){$/;"	f	class:Application
loadProviders	system\foundation\Application.cpp	/^void Application::loadProviders(ProviderRepository* providerRepo){$/;"	f	class:Application
onBoot	system\foundation\Application.cpp	/^void Application::onBoot(IEventPublisher* publisher){$/;"	f	class:Application
onPreboot	system\foundation\Application.cpp	/^void Application::onPreboot(IEventPublisher* publisher){$/;"	f	class:Application
onQuit	system\foundation\Application.cpp	/^void Application::onQuit(IEventPublisher* publisher){$/;"	f	class:Application
preboot	system\foundation\Application.cpp	/^void Application::preboot(){$/;"	f	class:Application
quit	system\foundation\Application.cpp	/^void Application::quit(){$/;"	f	class:Application
registerBaseApplicationEvents	system\foundation\Application.cpp	/^void Application::registerBaseApplicationEvents(){$/;"	f	class:Application
registerBaseGApplicationSignals	system\foundation\Application.cpp	/^void Application::registerBaseGApplicationSignals(){$/;"	f	class:Application
registerBaseManagers	system\foundation\Application.cpp	/^void Application::registerBaseManagers(){$/;"	f	class:Application
registerBasePaths	system\foundation\Application.cpp	/^void Application::registerBasePaths(){$/;"	f	class:Application
registerBaseServiceProviders	system\foundation\Application.cpp	/^void Application::registerBaseServiceProviders(){$/;"	f	class:Application
resolveManagerDependencies	system\foundation\Application.cpp	/^void Application::resolveManagerDependencies(){$/;"	f	class:Application
resolveServiceDependencies	system\foundation\Application.cpp	/^void Application::resolveServiceDependencies(){$/;"	f	class:Application
run	system\foundation\Application.cpp	/^int Application::run(int &argc,char** &argv){$/;"	f	class:Application
setActivateCallback	system\foundation\Application.cpp	/^void Application::setActivateCallback(ApplicationCallback activatedCallback,gpointer data){$/;"	f	class:Application
setBootCallback	system\foundation\Application.cpp	/^void Application::setBootCallback(ApplicationEventCallback bootCallback){$/;"	f	class:Application
setPrebootCallback	system\foundation\Application.cpp	/^void Application::setPrebootCallback(ApplicationEventCallback prebootCallback){$/;"	f	class:Application
setQuitCallback	system\foundation\Application.cpp	/^void Application::setQuitCallback(ApplicationEventCallback quitCallback){$/;"	f	class:Application
setShutdownCallback	system\foundation\Application.cpp	/^void Application::setShutdownCallback(ApplicationCallback shutdownCallback,gpointer data){$/;"	f	class:Application
~Application	system\foundation\Application.cpp	/^Application::~Application(){$/;"	f	class:Application
Application	system\foundation\Application.h	/^class Application : public Container, public IEventPublisher{$/;"	c	namespace:tuber
ApplicationCallback	system\foundation\Application.h	/^typedef void (*ApplicationCallback)(GtkApplication*,gpointer);$/;"	t	namespace:tuber
ApplicationEventCallback	system\foundation\Application.h	/^typedef function<void(Application*)> ApplicationEventCallback;$/;"	t	namespace:tuber
_APPLICATION_H_	system\foundation\Application.h	2;"	d
m_GtkApp	system\foundation\Application.h	/^    GtkApplication* m_GtkApp;$/;"	m	class:tuber::Application
m_activateCallbacks	system\foundation\Application.h	/^    map<ApplicationCallback,gpointer> m_activateCallbacks;$/;"	m	class:tuber::Application
m_appId	system\foundation\Application.h	/^    string m_appId;$/;"	m	class:tuber::Application
m_appName	system\foundation\Application.h	/^    string m_appName;$/;"	m	class:tuber::Application
m_bootCallbacks	system\foundation\Application.h	/^    vector<ApplicationEventCallback> m_bootCallbacks;$/;"	m	class:tuber::Application
m_booted	system\foundation\Application.h	/^    bool m_booted;$/;"	m	class:tuber::Application
m_configManager	system\foundation\Application.h	/^    ConfigManager* m_configManager;$/;"	m	class:tuber::Application
m_controllerManager	system\foundation\Application.h	/^    ControllerManager* m_controllerManager;$/;"	m	class:tuber::Application
m_eventDispatcher	system\foundation\Application.h	/^    EventDispatcher* m_eventDispatcher;$/;"	m	class:tuber::Application
m_flags	system\foundation\Application.h	/^    GApplicationFlags m_flags;$/;"	m	class:tuber::Application
m_instance	system\foundation\Application.h	/^    static Application* m_instance;$/;"	m	class:tuber::Application
m_pathManager	system\foundation\Application.h	/^    PathManager* m_pathManager;$/;"	m	class:tuber::Application
m_prebootCallbacks	system\foundation\Application.h	/^    vector<ApplicationEventCallback> m_prebootCallbacks;$/;"	m	class:tuber::Application
m_prebooted	system\foundation\Application.h	/^    bool m_prebooted;$/;"	m	class:tuber::Application
m_quitCallbacks	system\foundation\Application.h	/^    vector<ApplicationEventCallback> m_quitCallbacks;$/;"	m	class:tuber::Application
m_serviceProviderManager	system\foundation\Application.h	/^    ServiceProviderManager* m_serviceProviderManager;$/;"	m	class:tuber::Application
m_shutdownCallbacks	system\foundation\Application.h	/^    map<ApplicationCallback,gpointer> m_shutdownCallbacks;$/;"	m	class:tuber::Application
m_viewManager	system\foundation\Application.h	/^    ViewManager* m_viewManager;$/;"	m	class:tuber::Application
tuber	system\foundation\Application.h	/^namespace tuber{$/;"	n
Container	system\foundation\Container.cpp	/^Container::Container(){$/;"	f	class:tuber::Container
bind	system\foundation\Container.cpp	/^void Container::bind(string bindingKey,ResolvingCallback closure,bool shared){$/;"	f	class:tuber::Container
bindShared	system\foundation\Container.cpp	/^void Container::bindShared(string bindingKey,ResolvingCallback closure){$/;"	f	class:tuber::Container
build	system\foundation\Container.cpp	/^IBindable* Container::build(string bindingKey){$/;"	f	class:tuber::Container
destroyBindable	system\foundation\Container.cpp	/^bool Container::destroyBindable(IBindable* bindableInstance){$/;"	f	class:tuber::Container
hasResolveId	system\foundation\Container.cpp	/^bool Container::hasResolveId(int resolveId){$/;"	f	class:tuber::Container
isBound	system\foundation\Container.cpp	/^bool Container::isBound(string bindingKey){$/;"	f	class:tuber::Container
isResolved	system\foundation\Container.cpp	/^bool Container::isResolved(string bindingKey){$/;"	f	class:tuber::Container
make	system\foundation\Container.cpp	/^IBindable* Container::make(string bindingKey){$/;"	f	class:tuber::Container
tuber	system\foundation\Container.cpp	/^namespace tuber{$/;"	n	file:
~Container	system\foundation\Container.cpp	/^Container::~Container(){$/;"	f	class:tuber::Container
Container	system\foundation\Container.h	/^class Container{$/;"	c	namespace:tuber
ResolvingCallback	system\foundation\Container.h	/^typedef function<IBindable*(Container*)> ResolvingCallback;$/;"	t	namespace:tuber
_CONTAINER_H_	system\foundation\Container.h	2;"	d
bindings	system\foundation\Container.h	/^    map<string,bool> bindings;$/;"	m	class:tuber::Container
instances	system\foundation\Container.h	/^    unordered_map<int, IBindable*> instances;$/;"	m	class:tuber::Container
resolve	system\foundation\Container.h	/^    T* resolve(string bindingKey){$/;"	f	class:tuber::Container
resolved	system\foundation\Container.h	/^    map<string, vector<int>> resolved;$/;"	m	class:tuber::Container
resolvingCallbacks	system\foundation\Container.h	/^    map<string, ResolvingCallback> resolvingCallbacks;$/;"	m	class:tuber::Container
tuber	system\foundation\Container.h	/^namespace tuber{$/;"	n
tuber	system\foundation\InvalidArgumentException.cpp	/^namespace tuber{$/;"	n	file:
what	system\foundation\InvalidArgumentException.cpp	/^const char* InvalidArgumentException::what() const throw(){$/;"	f	class:tuber::InvalidArgumentException
InvalidArgumentException	system\foundation\InvalidArgumentException.h	/^	InvalidArgumentException(string message) : m_message(message){}$/;"	f	class:tuber::InvalidArgumentException
InvalidArgumentException	system\foundation\InvalidArgumentException.h	/^class InvalidArgumentException: public exception{$/;"	c	namespace:tuber
_INVALID_ARGUMENT_EXCEPTION_H_	system\foundation\InvalidArgumentException.h	2;"	d
m_message	system\foundation\InvalidArgumentException.h	/^	string m_message;$/;"	m	class:tuber::InvalidArgumentException
tuber	system\foundation\InvalidArgumentException.h	/^namespace tuber{$/;"	n
tuber	system\foundation\KeyNotFoundException.cpp	/^namespace tuber{$/;"	n	file:
what	system\foundation\KeyNotFoundException.cpp	/^const char* KeyNotFoundException::what() const throw(){$/;"	f	class:tuber::KeyNotFoundException
KeyNotFoundException	system\foundation\KeyNotFoundException.h	/^	KeyNotFoundException(string key) : m_key(key){}$/;"	f	class:tuber::KeyNotFoundException
KeyNotFoundException	system\foundation\KeyNotFoundException.h	/^class KeyNotFoundException: public exception{$/;"	c	namespace:tuber
_KEY_NOT_FOUND_EXCEPTION_H_	system\foundation\KeyNotFoundException.h	2;"	d
m_key	system\foundation\KeyNotFoundException.h	/^	string m_key;$/;"	m	class:tuber::KeyNotFoundException
tuber	system\foundation\KeyNotFoundException.h	/^namespace tuber{$/;"	n
getPath	system\foundation\PathManager.cpp	/^string PathManager::getPath(string pathKey){$/;"	f	class:tuber::PathManager
hasPath	system\foundation\PathManager.cpp	/^bool PathManager::hasPath(string pathKey){$/;"	f	class:tuber::PathManager
setPath	system\foundation\PathManager.cpp	/^PathManager* PathManager::setPath(string pathKey,string pathValue){$/;"	f	class:tuber::PathManager
tuber	system\foundation\PathManager.cpp	/^namespace tuber{$/;"	n	file:
PathManager	system\foundation\PathManager.h	/^class PathManager: public IBindable{$/;"	c	namespace:tuber
_PATH_MANAGER_H_	system\foundation\PathManager.h	2;"	d
m_paths	system\foundation\PathManager.h	/^	map<string,string> m_paths;$/;"	m	class:tuber::PathManager
tuber	system\foundation\PathManager.h	/^namespace tuber{$/;"	n
ProviderRepository	system\foundation\ProviderRepository.h	/^    ProviderRepository(Application *app) : m_app(app){}$/;"	f	class:tuber::ProviderRepository
ProviderRepository	system\foundation\ProviderRepository.h	/^class ProviderRepository{$/;"	c	namespace:tuber
_PROVIDER_REPOSITORY_H_	system\foundation\ProviderRepository.h	2;"	d
m_app	system\foundation\ProviderRepository.h	/^    Application* m_app;$/;"	m	class:tuber::ProviderRepository
tuber	system\foundation\ProviderRepository.h	/^namespace tuber{$/;"	n
~ProviderRepository	system\foundation\ProviderRepository.h	/^    virtual ~ProviderRepository(){}$/;"	f	class:tuber::ProviderRepository
tuber	system\foundation\RunTimeException.cpp	/^namespace tuber{$/;"	n	file:
what	system\foundation\RunTimeException.cpp	/^const char* RunTimeException::what() const throw(){$/;"	f	class:tuber::RunTimeException
RunTimeException	system\foundation\RunTimeException.h	/^	RunTimeException(string message) : m_message(message){}$/;"	f	class:tuber::RunTimeException
RunTimeException	system\foundation\RunTimeException.h	/^class RunTimeException: public exception{$/;"	c	namespace:tuber
_RUN_TIME_EXCEPTION_H_	system\foundation\RunTimeException.h	2;"	d
m_message	system\foundation\RunTimeException.h	/^	string m_message;$/;"	m	class:tuber::RunTimeException
tuber	system\foundation\RunTimeException.h	/^namespace tuber{$/;"	n
Service	system\foundation\Service.h	/^	Service(){}$/;"	f	class:tuber::Service
Service	system\foundation\Service.h	/^class Service : public IBindable{$/;"	c	namespace:tuber
_SERVICE_H_	system\foundation\Service.h	2;"	d
tuber	system\foundation\Service.h	/^namespace tuber{$/;"	n
~Service	system\foundation\Service.h	/^	virtual ~Service(){}$/;"	f	class:tuber::Service
ServiceProvider	system\foundation\ServiceProvider.h	/^    ServiceProvider(Container *container) : m_container(container){}$/;"	f	class:tuber::ServiceProvider
ServiceProvider	system\foundation\ServiceProvider.h	/^class ServiceProvider{$/;"	c	namespace:tuber
_SERVICE_PROVIDER_H_	system\foundation\ServiceProvider.h	2;"	d
boot	system\foundation\ServiceProvider.h	/^    virtual void boot(){}$/;"	f	class:tuber::ServiceProvider
m_container	system\foundation\ServiceProvider.h	/^    Container* m_container;$/;"	m	class:tuber::ServiceProvider
provides	system\foundation\ServiceProvider.h	/^    virtual string provides(){return "";}$/;"	f	class:tuber::ServiceProvider
tuber	system\foundation\ServiceProvider.h	/^namespace tuber{$/;"	n
~ServiceProvider	system\foundation\ServiceProvider.h	/^    virtual ~ServiceProvider(){}$/;"	f	class:tuber::ServiceProvider
ServiceProviderManager	system\foundation\ServiceProviderManager.cpp	/^ServiceProviderManager::ServiceProviderManager(Application* app) : m_app(app){$/;"	f	class:tuber::ServiceProviderManager
destroyProviders	system\foundation\ServiceProviderManager.cpp	/^void ServiceProviderManager::destroyProviders(){$/;"	f	class:tuber::ServiceProviderManager
isProviderRegistered	system\foundation\ServiceProviderManager.cpp	/^bool ServiceProviderManager::isProviderRegistered(ServiceProvider* provider){$/;"	f	class:tuber::ServiceProviderManager
loadProviders	system\foundation\ServiceProviderManager.cpp	/^void ServiceProviderManager::loadProviders(ProviderRepository* providerRepo){$/;"	f	class:tuber::ServiceProviderManager
markAsRegistered	system\foundation\ServiceProviderManager.cpp	/^void ServiceProviderManager::markAsRegistered(ServiceProvider* provider){$/;"	f	class:tuber::ServiceProviderManager
registerProvider	system\foundation\ServiceProviderManager.cpp	/^void ServiceProviderManager::registerProvider(ServiceProvider* provider){$/;"	f	class:tuber::ServiceProviderManager
tuber	system\foundation\ServiceProviderManager.cpp	/^namespace tuber{$/;"	n	file:
~ServiceProviderManager	system\foundation\ServiceProviderManager.cpp	/^ServiceProviderManager::~ServiceProviderManager(){$/;"	f	class:tuber::ServiceProviderManager
ServiceProviderManager	system\foundation\ServiceProviderManager.h	/^class ServiceProviderManager : public IBindable{$/;"	c	namespace:tuber
_SERVICE_PROVIDER_MANAGER_H_	system\foundation\ServiceProviderManager.h	2;"	d
m_app	system\foundation\ServiceProviderManager.h	/^	Application* m_app;$/;"	m	class:tuber::ServiceProviderManager
m_serviceProviders	system\foundation\ServiceProviderManager.h	/^	vector<ServiceProvider*> m_serviceProviders;$/;"	m	class:tuber::ServiceProviderManager
tuber	system\foundation\ServiceProviderManager.h	/^namespace tuber{$/;"	n
tuber	system\foundation\UnboundResolvingException.cpp	/^namespace tuber{$/;"	n	file:
what	system\foundation\UnboundResolvingException.cpp	/^const char* UnboundResolvingException::what() const throw(){$/;"	f	class:tuber::UnboundResolvingException
UnboundResolvingException	system\foundation\UnboundResolvingException.h	/^	UnboundResolvingException(string bindingKey) : m_bindingKey(bindingKey){}$/;"	f	class:tuber::UnboundResolvingException
UnboundResolvingException	system\foundation\UnboundResolvingException.h	/^class UnboundResolvingException: public exception{$/;"	c	namespace:tuber
_UNBOUND_RESOLVING_EXCEPTION_H_	system\foundation\UnboundResolvingException.h	2;"	d
m_bindingKey	system\foundation\UnboundResolvingException.h	/^	string m_bindingKey;$/;"	m	class:tuber::UnboundResolvingException
tuber	system\foundation\UnboundResolvingException.h	/^namespace tuber{$/;"	n
HashFactory	system\hash\HashFactory.cpp	/^HashFactory::HashFactory(string encryptionKey) : m_encryptionKey(encryptionKey){$/;"	f	class:tuber::HashFactory
encrypt	system\hash\HashFactory.cpp	/^string HashFactory::encrypt(string stringToEncrypt){$/;"	f	class:tuber::HashFactory
tuber	system\hash\HashFactory.cpp	/^namespace tuber{$/;"	n	file:
~HashFactory	system\hash\HashFactory.cpp	/^HashFactory::~HashFactory(){$/;"	f	class:tuber::HashFactory
HashFactory	system\hash\HashFactory.h	/^class HashFactory: public Service{$/;"	c	namespace:tuber
_HASH_FACTORY_H_	system\hash\HashFactory.h	2;"	d
m_encryptionKey	system\hash\HashFactory.h	/^	string m_encryptionKey;$/;"	m	class:tuber::HashFactory
m_hashWrapper	system\hash\HashFactory.h	/^	hashwrapper* m_hashWrapper;$/;"	m	class:tuber::HashFactory
tuber	system\hash\HashFactory.h	/^namespace tuber{$/;"	n
provides	system\hash\HashServiceProvider.cpp	/^string HashServiceProvider::provides(){$/;"	f	class:tuber::HashServiceProvider
registerService	system\hash\HashServiceProvider.cpp	/^void HashServiceProvider::registerService(){$/;"	f	class:tuber::HashServiceProvider
tuber	system\hash\HashServiceProvider.cpp	/^namespace tuber{$/;"	n	file:
HashServiceProvider	system\hash\HashServiceProvider.h	/^	HashServiceProvider(Container* container): ServiceProvider(container){}$/;"	f	class:tuber::HashServiceProvider
HashServiceProvider	system\hash\HashServiceProvider.h	/^class HashServiceProvider: public ServiceProvider{$/;"	c	namespace:tuber
_HASH_SERVICE_PROVIDER_H_	system\hash\HashServiceProvider.h	2;"	d
tuber	system\hash\HashServiceProvider.h	/^namespace tuber{$/;"	n
Request	system\request\Request.cpp	/^Request::Request(){$/;"	f	class:tuber::Request
carryPackage	system\request\Request.cpp	/^void Request::carryPackage(Bundle* package){$/;"	f	class:tuber::Request
getActionKey	system\request\Request.cpp	/^string Request::getActionKey(){$/;"	f	class:tuber::Request
getPackage	system\request\Request.cpp	/^Bundle* Request::getPackage(){$/;"	f	class:tuber::Request
setActionKey	system\request\Request.cpp	/^void Request::setActionKey(string actionKey){$/;"	f	class:tuber::Request
tuber	system\request\Request.cpp	/^namespace tuber{$/;"	n	file:
~Request	system\request\Request.cpp	/^Request::~Request(){$/;"	f	class:tuber::Request
Request	system\request\Request.h	/^class Request: public Service{$/;"	c	namespace:tuber
_REQUEST_H_	system\request\Request.h	2;"	d
m_actionKey	system\request\Request.h	/^	string m_actionKey;$/;"	m	class:tuber::Request
m_package	system\request\Request.h	/^	Bundle* m_package;$/;"	m	class:tuber::Request
tuber	system\request\Request.h	/^namespace tuber{$/;"	n
provides	system\request\RequestServiceProvider.cpp	/^string RequestServiceProvider::provides(){$/;"	f	class:tuber::RequestServiceProvider
registerService	system\request\RequestServiceProvider.cpp	/^void RequestServiceProvider::registerService(){$/;"	f	class:tuber::RequestServiceProvider
tuber	system\request\RequestServiceProvider.cpp	/^namespace tuber{$/;"	n	file:
RequestServiceProvider	system\request\RequestServiceProvider.h	/^	RequestServiceProvider(Container* container) : ServiceProvider(container){$/;"	f	class:tuber::RequestServiceProvider
RequestServiceProvider	system\request\RequestServiceProvider.h	/^class RequestServiceProvider: public ServiceProvider{$/;"	c	namespace:tuber
_REQUEST_SERVICE_PROVIDER_H_	system\request\RequestServiceProvider.h	2;"	d
tuber	system\request\RequestServiceProvider.h	/^namespace tuber{$/;"	n
~RequestServiceProvider	system\request\RequestServiceProvider.h	/^	~RequestServiceProvider(){$/;"	f	class:tuber::RequestServiceProvider
GAppEventCallback	system\support\GAppEventCallback.h	/^typedef void (*GAppEventCallback)(GtkWidget*,gpointer);$/;"	t	namespace:tuber
_G_APP_EVENT_CALLBACK_H_	system\support\GAppEventCallback.h	2;"	d
tuber	system\support\GAppEventCallback.h	/^namespace tuber{$/;"	n
IBindable	system\support\IBindable.h	/^	IBindable(){}$/;"	f	class:tuber::IBindable
IBindable	system\support\IBindable.h	/^class IBindable{$/;"	c	namespace:tuber
_I_BINDABLE_H_	system\support\IBindable.h	2;"	d
getBindingKey	system\support\IBindable.h	/^    string getBindingKey(){$/;"	f	class:tuber::IBindable
getResolveId	system\support\IBindable.h	/^    int getResolveId(){$/;"	f	class:tuber::IBindable
m_bindingKey	system\support\IBindable.h	/^	string m_bindingKey;$/;"	m	class:tuber::IBindable
m_resolveId	system\support\IBindable.h	/^	int m_resolveId;$/;"	m	class:tuber::IBindable
setIdentifier	system\support\IBindable.h	/^    void setIdentifier(string bindingKey,int resolveId){$/;"	f	class:tuber::IBindable
tuber	system\support\IBindable.h	/^namespace tuber{$/;"	n
~IBindable	system\support\IBindable.h	/^    virtual ~IBindable(){}$/;"	f	class:tuber::IBindable
IEventPublisher	system\support\IEventPublisher.h	/^    IEventPublisher(){}$/;"	f	class:tuber::IEventPublisher
IEventPublisher	system\support\IEventPublisher.h	/^class IEventPublisher{$/;"	c	namespace:tuber
_I_EVENT_PUBLISHER_H_	system\support\IEventPublisher.h	2;"	d
tuber	system\support\IEventPublisher.h	/^namespace tuber{$/;"	n
~IEventPublisher	system\support\IEventPublisher.h	/^    virtual ~IEventPublisher(){}$/;"	f	class:tuber::IEventPublisher
Bar	system\test\TestServiceProvider.h	/^    Bar(){$/;"	f	class:Bar
Bar	system\test\TestServiceProvider.h	/^class Bar: public Service{$/;"	c
BarServiceProvider	system\test\TestServiceProvider.h	/^    BarServiceProvider(Container* container) : ServiceProvider(container){}$/;"	f	class:BarServiceProvider
BarServiceProvider	system\test\TestServiceProvider.h	/^class BarServiceProvider: public ServiceProvider{$/;"	c
Foo	system\test\TestServiceProvider.h	/^    Foo(){$/;"	f	class:Foo
Foo	system\test\TestServiceProvider.h	/^class Foo: public Service{$/;"	c
FooServiceProvider	system\test\TestServiceProvider.h	/^    FooServiceProvider(Container* container) : ServiceProvider(container){}$/;"	f	class:FooServiceProvider
FooServiceProvider	system\test\TestServiceProvider.h	/^class FooServiceProvider: public ServiceProvider{$/;"	c
_TEST_SERVICE_PROVIDER_H_	system\test\TestServiceProvider.h	2;"	d
registerService	system\test\TestServiceProvider.h	/^    virtual void registerService(){$/;"	f	class:BarServiceProvider
registerService	system\test\TestServiceProvider.h	/^    virtual void registerService(){$/;"	f	class:FooServiceProvider
~Bar	system\test\TestServiceProvider.h	/^    ~Bar(){$/;"	f	class:Bar
~BarServiceProvider	system\test\TestServiceProvider.h	/^    ~BarServiceProvider(){$/;"	f	class:BarServiceProvider
~Foo	system\test\TestServiceProvider.h	/^    ~Foo(){$/;"	f	class:Foo
~FooServiceProvider	system\test\TestServiceProvider.h	/^    ~FooServiceProvider(){$/;"	f	class:FooServiceProvider
ViewManager	system\views\ViewManager.cpp	/^ViewManager::ViewManager(Application* app): m_app(app){$/;"	f	class:tuber::ViewManager
getDefaultStage	system\views\ViewManager.cpp	/^GtkWindow* ViewManager::getDefaultStage(){$/;"	f	class:tuber::ViewManager
setDefaultStage	system\views\ViewManager.cpp	/^void ViewManager::setDefaultStage(int stageId){$/;"	f	class:tuber::ViewManager
setScene	system\views\ViewManager.cpp	/^GtkWidget* ViewManager::setScene(Controller* controller,string viewPath,string rootName,bool topLevel){$/;"	f	class:tuber::ViewManager
setScene	system\views\ViewManager.cpp	/^GtkWidget* ViewManager::setScene(GtkWidget* scene,bool topLevel){$/;"	f	class:tuber::ViewManager
setScene	system\views\ViewManager.cpp	/^GtkWidget* ViewManager::setScene(GtkWindow* stage,GtkWidget* scene,bool topLevel){$/;"	f	class:tuber::ViewManager
tuber	system\views\ViewManager.cpp	/^namespace tuber{$/;"	n	file:
ViewManager	system\views\ViewManager.h	/^class ViewManager: public Service{$/;"	c	namespace:tuber
_VIEW_MANAGER_H_	system\views\ViewManager.h	2;"	d
m_app	system\views\ViewManager.h	/^	Application* m_app;$/;"	m	class:tuber::ViewManager
m_defaultStageId	system\views\ViewManager.h	/^	int m_defaultStageId;$/;"	m	class:tuber::ViewManager
m_gtkApp	system\views\ViewManager.h	/^	GtkApplication* m_gtkApp;$/;"	m	class:tuber::ViewManager
tuber	system\views\ViewManager.h	/^namespace tuber{$/;"	n
provides	system\views\ViewServiceProvider.cpp	/^string ViewServiceProvider::provides(){$/;"	f	class:tuber::ViewServiceProvider
registerService	system\views\ViewServiceProvider.cpp	/^void ViewServiceProvider::registerService(){$/;"	f	class:tuber::ViewServiceProvider
tuber	system\views\ViewServiceProvider.cpp	/^namespace tuber{$/;"	n	file:
ViewServiceProvider	system\views\ViewServiceProvider.h	/^	ViewServiceProvider(Container* container): ServiceProvider(container){}$/;"	f	class:tuber::ViewServiceProvider
ViewServiceProvider	system\views\ViewServiceProvider.h	/^class ViewServiceProvider: public ServiceProvider{$/;"	c	namespace:tuber
_VIEW_SERVICE_PROVIDER_H_	system\views\ViewServiceProvider.h	2;"	d
tuber	system\views\ViewServiceProvider.h	/^namespace tuber{$/;"	n
HASHLIBPP_H	vendor\hashlib\hashlibpp.h	39;"	d
_HASHLIBPP_VERSION_	vendor\hashlib\hashlibpp.h	43;"	d
HL_EXCEPTION_H	vendor\hashlib\hl_exception.h	41;"	d
HL_FILE_READ_ERROR	vendor\hashlib\hl_exception.h	/^	HL_FILE_READ_ERROR,$/;"	e	enum:hlerrors
HL_NO_ERROR	vendor\hashlib\hl_exception.h	/^	HL_NO_ERROR = 0,$/;"	e	enum:hlerrors
HL_UNKNOWN_HASH_TYPE	vendor\hashlib\hl_exception.h	/^	HL_UNKNOWN_HASH_TYPE$/;"	e	enum:hlerrors
HL_UNKNOWN_SEE_MSG	vendor\hashlib\hl_exception.h	/^	HL_UNKNOWN_SEE_MSG,$/;"	e	enum:hlerrors
HL_VERIFY_TEST_FAILED	vendor\hashlib\hl_exception.h	/^	HL_VERIFY_TEST_FAILED,$/;"	e	enum:hlerrors
error_message	vendor\hashlib\hl_exception.h	/^			std::string error_message(void)$/;"	f	class:hlException
error_number	vendor\hashlib\hl_exception.h	/^			hlerror error_number(void)$/;"	f	class:hlException
hlException	vendor\hashlib\hl_exception.h	/^			hlException(hlerror er, std::string m)$/;"	f	class:hlException
hlException	vendor\hashlib\hl_exception.h	/^			hlException(std::string m)$/;"	f	class:hlException
hlException	vendor\hashlib\hl_exception.h	/^class hlException$/;"	c
hlerror	vendor\hashlib\hl_exception.h	/^} hlerror;$/;"	t	typeref:enum:hlerrors
hlerrors	vendor\hashlib\hl_exception.h	/^typedef enum hlerrors$/;"	g
iError	vendor\hashlib\hl_exception.h	/^			hlerror iError;$/;"	m	class:hlException
strMessge	vendor\hashlib\hl_exception.h	/^			std::string strMessge;$/;"	m	class:hlException
HASHWRAPPER_H	vendor\hashlib\hl_hashwrapper.h	73;"	d
getHashFromFile	vendor\hashlib\hl_hashwrapper.h	/^		virtual std::string getHashFromFile(std::string filename)$/;"	f	class:hashwrapper
getHashFromString	vendor\hashlib\hl_hashwrapper.h	/^		virtual std::string getHashFromString(std::string text)$/;"	f	class:hashwrapper
hashwrapper	vendor\hashlib\hl_hashwrapper.h	/^		hashwrapper( void ) $/;"	f	class:hashwrapper
hashwrapper	vendor\hashlib\hl_hashwrapper.h	/^class hashwrapper$/;"	c
test	vendor\hashlib\hl_hashwrapper.h	/^		virtual void test( void )$/;"	f	class:hashwrapper
teststring	vendor\hashlib\hl_hashwrapper.h	/^		const std::string teststring;$/;"	m	class:hashwrapper
~hashwrapper	vendor\hashlib\hl_hashwrapper.h	/^		virtual ~hashwrapper ( void ) { };$/;"	f	class:hashwrapper
Decode	vendor\hashlib\hl_md5.cpp	/^void MD5::Decode (unsigned long int *output, unsigned char *input, unsigned int len)$/;"	f	class:MD5
Encode	vendor\hashlib\hl_md5.cpp	/^void MD5::Encode (unsigned char *output, unsigned long int *input, unsigned int len)$/;"	f	class:MD5
F	vendor\hashlib\hl_md5.cpp	97;"	d	file:
FF	vendor\hashlib\hl_md5.cpp	112;"	d	file:
G	vendor\hashlib\hl_md5.cpp	98;"	d	file:
GG	vendor\hashlib\hl_md5.cpp	118;"	d	file:
H	vendor\hashlib\hl_md5.cpp	99;"	d	file:
HH	vendor\hashlib\hl_md5.cpp	123;"	d	file:
I	vendor\hashlib\hl_md5.cpp	100;"	d	file:
II	vendor\hashlib\hl_md5.cpp	128;"	d	file:
MD5Final	vendor\hashlib\hl_md5.cpp	/^void MD5::MD5Final (unsigned char digest[16], HL_MD5_CTX *context)$/;"	f	class:MD5
MD5Init	vendor\hashlib\hl_md5.cpp	/^void MD5::MD5Init (HL_MD5_CTX *context)$/;"	f	class:MD5
MD5Transform	vendor\hashlib\hl_md5.cpp	/^void MD5::MD5Transform (unsigned long int state[4], unsigned char block[64])$/;"	f	class:MD5
MD5Update	vendor\hashlib\hl_md5.cpp	/^void MD5::MD5Update (HL_MD5_CTX *context, unsigned char *input, unsigned int inputLen)$/;"	f	class:MD5
MD5_memcpy	vendor\hashlib\hl_md5.cpp	/^void MD5::MD5_memcpy (POINTER output, POINTER input, unsigned int len)$/;"	f	class:MD5
MD5_memset	vendor\hashlib\hl_md5.cpp	/^void MD5::MD5_memset (POINTER output,int value,unsigned int len)$/;"	f	class:MD5
PADDING	vendor\hashlib\hl_md5.cpp	/^static unsigned char PADDING[64] = {$/;"	v	file:
ROTATE_LEFT	vendor\hashlib\hl_md5.cpp	106;"	d	file:
S11	vendor\hashlib\hl_md5.cpp	73;"	d	file:
S12	vendor\hashlib\hl_md5.cpp	74;"	d	file:
S13	vendor\hashlib\hl_md5.cpp	75;"	d	file:
S14	vendor\hashlib\hl_md5.cpp	76;"	d	file:
S21	vendor\hashlib\hl_md5.cpp	77;"	d	file:
S22	vendor\hashlib\hl_md5.cpp	78;"	d	file:
S23	vendor\hashlib\hl_md5.cpp	79;"	d	file:
S24	vendor\hashlib\hl_md5.cpp	80;"	d	file:
S31	vendor\hashlib\hl_md5.cpp	81;"	d	file:
S32	vendor\hashlib\hl_md5.cpp	82;"	d	file:
S33	vendor\hashlib\hl_md5.cpp	83;"	d	file:
S34	vendor\hashlib\hl_md5.cpp	84;"	d	file:
S41	vendor\hashlib\hl_md5.cpp	85;"	d	file:
S42	vendor\hashlib\hl_md5.cpp	86;"	d	file:
S43	vendor\hashlib\hl_md5.cpp	87;"	d	file:
S44	vendor\hashlib\hl_md5.cpp	88;"	d	file:
HL_MD5_CTX	vendor\hashlib\hl_md5.h	/^} HL_MD5_CTX;$/;"	t	typeref:struct:__anon1
MD5	vendor\hashlib\hl_md5.h	/^		MD5(){};$/;"	f	class:MD5
MD5	vendor\hashlib\hl_md5.h	/^class MD5$/;"	c
MD5_H	vendor\hashlib\hl_md5.h	68;"	d
POINTER	vendor\hashlib\hl_md5.h	/^typedef hl_uint8 *POINTER;$/;"	t
buffer	vendor\hashlib\hl_md5.h	/^	unsigned char buffer[64];$/;"	m	struct:__anon1
count	vendor\hashlib\hl_md5.h	/^	unsigned long int count[2];$/;"	m	struct:__anon1
state	vendor\hashlib\hl_md5.h	/^	unsigned long int state[4];   	      $/;"	m	struct:__anon1
convToString	vendor\hashlib\hl_md5wrapper.cpp	/^std::string md5wrapper::convToString(unsigned char *data)$/;"	f	class:md5wrapper
getTestHash	vendor\hashlib\hl_md5wrapper.cpp	/^std::string md5wrapper::getTestHash(void)$/;"	f	class:md5wrapper
hashIt	vendor\hashlib\hl_md5wrapper.cpp	/^std::string md5wrapper::hashIt(void)$/;"	f	class:md5wrapper
md5wrapper	vendor\hashlib\hl_md5wrapper.cpp	/^md5wrapper::md5wrapper()$/;"	f	class:md5wrapper
resetContext	vendor\hashlib\hl_md5wrapper.cpp	/^void md5wrapper::resetContext(void)$/;"	f	class:md5wrapper
updateContext	vendor\hashlib\hl_md5wrapper.cpp	/^void md5wrapper::updateContext(unsigned char *data, unsigned int len)$/;"	f	class:md5wrapper
~md5wrapper	vendor\hashlib\hl_md5wrapper.cpp	/^md5wrapper::~md5wrapper()$/;"	f	class:md5wrapper
MD5WRAPPER_H	vendor\hashlib\hl_md5wrapper.h	41;"	d
ctx	vendor\hashlib\hl_md5wrapper.h	/^		HL_MD5_CTX ctx;$/;"	m	class:md5wrapper
md5	vendor\hashlib\hl_md5wrapper.h	/^		MD5 *md5;$/;"	m	class:md5wrapper
md5wrapper	vendor\hashlib\hl_md5wrapper.h	/^class md5wrapper : public hashwrapper$/;"	c
SHA1CircularShift	vendor\hashlib\hl_sha1.cpp	81;"	d	file:
SHA1Input	vendor\hashlib\hl_sha1.cpp	/^int SHA1::SHA1Input(    HL_SHA1_CTX    *context,$/;"	f	class:SHA1
SHA1PadMessage	vendor\hashlib\hl_sha1.cpp	/^void SHA1::SHA1PadMessage(HL_SHA1_CTX *context)$/;"	f	class:SHA1
SHA1ProcessMessageBlock	vendor\hashlib\hl_sha1.cpp	/^void SHA1::SHA1ProcessMessageBlock(HL_SHA1_CTX *context)$/;"	f	class:SHA1
SHA1Reset	vendor\hashlib\hl_sha1.cpp	/^int SHA1::SHA1Reset(HL_SHA1_CTX *context)$/;"	f	class:SHA1
SHA1Result	vendor\hashlib\hl_sha1.cpp	/^int SHA1::SHA1Result( HL_SHA1_CTX *context,$/;"	f	class:SHA1
Computed	vendor\hashlib\hl_sha1.h	/^	int Computed;$/;"	m	struct:HL_SHA1_CTX
Corrupted	vendor\hashlib\hl_sha1.h	/^	int Corrupted;$/;"	m	struct:HL_SHA1_CTX
HL_SHA1_CTX	vendor\hashlib\hl_sha1.h	/^typedef struct HL_SHA1_CTX$/;"	s
HL_SHA1_CTX	vendor\hashlib\hl_sha1.h	/^} HL_SHA1_CTX;$/;"	t	typeref:struct:HL_SHA1_CTX
Intermediate_Hash	vendor\hashlib\hl_sha1.h	/^	hl_uint32 Intermediate_Hash[SHA1HashSize\/4];$/;"	m	struct:HL_SHA1_CTX
Length_High	vendor\hashlib\hl_sha1.h	/^	hl_uint32 Length_High;$/;"	m	struct:HL_SHA1_CTX
Length_Low	vendor\hashlib\hl_sha1.h	/^	hl_uint32 Length_Low;            $/;"	m	struct:HL_SHA1_CTX
Message_Block	vendor\hashlib\hl_sha1.h	/^	hl_uint8 Message_Block[64];      $/;"	m	struct:HL_SHA1_CTX
Message_Block_Index	vendor\hashlib\hl_sha1.h	/^	hl_uint16 Message_Block_Index;$/;"	m	struct:HL_SHA1_CTX
SHA1	vendor\hashlib\hl_sha1.h	/^class SHA1$/;"	c
SHA1HashSize	vendor\hashlib\hl_sha1.h	95;"	d
SHA1_H	vendor\hashlib\hl_sha1.h	73;"	d
_SHA_enum_	vendor\hashlib\hl_sha1.h	83;"	d
shaInputTooLong	vendor\hashlib\hl_sha1.h	/^    shaInputTooLong,    \/* input data too long *\/$/;"	e	enum:__anon2
shaNull	vendor\hashlib\hl_sha1.h	/^    shaNull,            \/* Null pointer parameter *\/$/;"	e	enum:__anon2
shaStateError	vendor\hashlib\hl_sha1.h	/^    shaStateError       \/* called Input after Result *\/$/;"	e	enum:__anon2
shaSuccess	vendor\hashlib\hl_sha1.h	/^    shaSuccess = 0,$/;"	e	enum:__anon2
convToString	vendor\hashlib\hl_sha1wrapper.cpp	/^std::string sha1wrapper::convToString(unsigned char *data)$/;"	f	class:sha1wrapper
getTestHash	vendor\hashlib\hl_sha1wrapper.cpp	/^std::string sha1wrapper::getTestHash(void)$/;"	f	class:sha1wrapper
hashIt	vendor\hashlib\hl_sha1wrapper.cpp	/^std::string sha1wrapper::hashIt(void)$/;"	f	class:sha1wrapper
resetContext	vendor\hashlib\hl_sha1wrapper.cpp	/^void sha1wrapper::resetContext(void)$/;"	f	class:sha1wrapper
sha1wrapper	vendor\hashlib\hl_sha1wrapper.cpp	/^sha1wrapper::sha1wrapper()$/;"	f	class:sha1wrapper
updateContext	vendor\hashlib\hl_sha1wrapper.cpp	/^void sha1wrapper::updateContext(unsigned char *data, unsigned int len)$/;"	f	class:sha1wrapper
~sha1wrapper	vendor\hashlib\hl_sha1wrapper.cpp	/^sha1wrapper::~sha1wrapper()$/;"	f	class:sha1wrapper
SHA1WRAPPER_H	vendor\hashlib\hl_sha1wrapper.h	41;"	d
context	vendor\hashlib\hl_sha1wrapper.h	/^			HL_SHA1_CTX context;$/;"	m	class:sha1wrapper
sha1	vendor\hashlib\hl_sha1wrapper.h	/^			SHA1 *sha1;$/;"	m	class:sha1wrapper
sha1wrapper	vendor\hashlib\hl_sha1wrapper.h	/^class sha1wrapper : public hashwrapper$/;"	c
K256	vendor\hashlib\hl_sha256.cpp	/^const static sha2_word32 K256[64] = {$/;"	v	file:
ROUND256	vendor\hashlib\hl_sha256.cpp	171;"	d	file:
ROUND256_0_TO_15	vendor\hashlib\hl_sha256.cpp	151;"	d	file:
ROUND256_0_TO_15	vendor\hashlib\hl_sha256.cpp	162;"	d	file:
SHA256_End	vendor\hashlib\hl_sha256.cpp	/^char* SHA256::SHA256_End(HL_SHA256_CTX* context, char buffer[]) {$/;"	f	class:SHA256
SHA256_Final	vendor\hashlib\hl_sha256.cpp	/^void SHA256::SHA256_Final(sha2_byte digest[], HL_SHA256_CTX* context) {$/;"	f	class:SHA256
SHA256_Init	vendor\hashlib\hl_sha256.cpp	/^void SHA256::SHA256_Init(HL_SHA256_CTX* context) {$/;"	f	class:SHA256
SHA256_Transform	vendor\hashlib\hl_sha256.cpp	/^void SHA256::SHA256_Transform(HL_SHA256_CTX* context, const sha2_word32* data) {$/;"	f	class:SHA256
SHA256_Update	vendor\hashlib\hl_sha256.cpp	/^void SHA256::SHA256_Update(HL_SHA256_CTX* context, const sha2_byte *data, unsigned int len) {$/;"	f	class:SHA256
sha256_initial_hash_value	vendor\hashlib\hl_sha256.cpp	/^const static sha2_word32 sha256_initial_hash_value[8] = {$/;"	v	file:
sha2_hex_digits	vendor\hashlib\hl_sha256.cpp	/^static const char *sha2_hex_digits = "0123456789abcdef";$/;"	v	file:
HL_SHA256_CTX	vendor\hashlib\hl_sha256.h	/^typedef struct HL_SHA256_CTX $/;"	s
HL_SHA256_CTX	vendor\hashlib\hl_sha256.h	/^} HL_SHA256_CTX;$/;"	t	typeref:struct:HL_SHA256_CTX
SHA256	vendor\hashlib\hl_sha256.h	/^class SHA256$/;"	c
SHA256_BLOCK_LENGTH	vendor\hashlib\hl_sha256.h	78;"	d
SHA256_DIGEST_LENGTH	vendor\hashlib\hl_sha256.h	80;"	d
SHA256_DIGEST_STRING_LENGTH	vendor\hashlib\hl_sha256.h	81;"	d
SHA256_H	vendor\hashlib\hl_sha256.h	74;"	d
SHA256_SHORT_BLOCK_LENGTH	vendor\hashlib\hl_sha256.h	79;"	d
bitcount	vendor\hashlib\hl_sha256.h	/^	hl_uint64		bitcount;$/;"	m	struct:HL_SHA256_CTX
buffer	vendor\hashlib\hl_sha256.h	/^	hl_uint8		buffer[SHA256_BLOCK_LENGTH];$/;"	m	struct:HL_SHA256_CTX
sha2_byte	vendor\hashlib\hl_sha256.h	/^typedef hl_uint8  sha2_byte;	$/;"	t
sha2_word32	vendor\hashlib\hl_sha256.h	/^typedef hl_uint32 sha2_word32;	$/;"	t
sha2_word64	vendor\hashlib\hl_sha256.h	/^typedef hl_uint64 sha2_word64;	$/;"	t
state	vendor\hashlib\hl_sha256.h	/^	hl_uint32		state[8];$/;"	m	struct:HL_SHA256_CTX
convToString	vendor\hashlib\hl_sha256wrapper.cpp	/^std::string sha256wrapper::convToString(unsigned char *data)$/;"	f	class:sha256wrapper
getTestHash	vendor\hashlib\hl_sha256wrapper.cpp	/^std::string sha256wrapper::getTestHash(void)$/;"	f	class:sha256wrapper
hashIt	vendor\hashlib\hl_sha256wrapper.cpp	/^std::string sha256wrapper::hashIt(void)$/;"	f	class:sha256wrapper
resetContext	vendor\hashlib\hl_sha256wrapper.cpp	/^void sha256wrapper::resetContext(void)$/;"	f	class:sha256wrapper
sha256wrapper	vendor\hashlib\hl_sha256wrapper.cpp	/^sha256wrapper::sha256wrapper()$/;"	f	class:sha256wrapper
updateContext	vendor\hashlib\hl_sha256wrapper.cpp	/^void sha256wrapper::updateContext(unsigned char *data, unsigned int len)$/;"	f	class:sha256wrapper
~sha256wrapper	vendor\hashlib\hl_sha256wrapper.cpp	/^sha256wrapper::~sha256wrapper()$/;"	f	class:sha256wrapper
SHA256WRAPPER_H	vendor\hashlib\hl_sha256wrapper.h	41;"	d
context	vendor\hashlib\hl_sha256wrapper.h	/^			HL_SHA256_CTX context;$/;"	m	class:sha256wrapper
sha256	vendor\hashlib\hl_sha256wrapper.h	/^			SHA256 *sha256;$/;"	m	class:sha256wrapper
sha256wrapper	vendor\hashlib\hl_sha256wrapper.h	/^class sha256wrapper : public hashwrapper$/;"	c
K512	vendor\hashlib\hl_sha2ext.cpp	/^const static sha2_word64 K512[80] = {$/;"	v	file:
ROUND512	vendor\hashlib\hl_sha2ext.cpp	198;"	d	file:
ROUND512_0_TO_15	vendor\hashlib\hl_sha2ext.cpp	178;"	d	file:
ROUND512_0_TO_15	vendor\hashlib\hl_sha2ext.cpp	189;"	d	file:
SHA384_End	vendor\hashlib\hl_sha2ext.cpp	/^char* SHA2ext::SHA384_End(HL_SHA_384_CTX* context, char buffer[]) $/;"	f	class:SHA2ext
SHA384_Final	vendor\hashlib\hl_sha2ext.cpp	/^void SHA2ext::SHA384_Final(sha2_byte digest[], HL_SHA_384_CTX* context) $/;"	f	class:SHA2ext
SHA384_Init	vendor\hashlib\hl_sha2ext.cpp	/^void SHA2ext::SHA384_Init(HL_SHA_384_CTX* context) $/;"	f	class:SHA2ext
SHA384_Update	vendor\hashlib\hl_sha2ext.cpp	/^void SHA2ext::SHA384_Update(HL_SHA_384_CTX* context, const sha2_byte* data, unsigned int len) $/;"	f	class:SHA2ext
SHA512_End	vendor\hashlib\hl_sha2ext.cpp	/^char* SHA2ext::SHA512_End(HL_SHA512_CTX* context, char buffer[]) $/;"	f	class:SHA2ext
SHA512_Final	vendor\hashlib\hl_sha2ext.cpp	/^void SHA2ext::SHA512_Final(sha2_byte digest[], HL_SHA512_CTX* context) $/;"	f	class:SHA2ext
SHA512_Init	vendor\hashlib\hl_sha2ext.cpp	/^void SHA2ext::SHA512_Init(HL_SHA512_CTX* context) $/;"	f	class:SHA2ext
SHA512_Last	vendor\hashlib\hl_sha2ext.cpp	/^void SHA2ext::SHA512_Last(HL_SHA512_CTX* context) $/;"	f	class:SHA2ext
SHA512_Transform	vendor\hashlib\hl_sha2ext.cpp	/^void SHA2ext::SHA512_Transform(HL_SHA512_CTX* context, const sha2_word64* data) {$/;"	f	class:SHA2ext
SHA512_Update	vendor\hashlib\hl_sha2ext.cpp	/^void SHA2ext::SHA512_Update(HL_SHA512_CTX* context, const sha2_byte *data, unsigned int len) {$/;"	f	class:SHA2ext
sha2_hex_digits	vendor\hashlib\hl_sha2ext.cpp	/^static const char *sha2_hex_digits = "0123456789abcdef";$/;"	v	file:
sha384_initial_hash_value	vendor\hashlib\hl_sha2ext.cpp	/^const static sha2_word64 sha384_initial_hash_value[8] = {$/;"	v	file:
sha512_initial_hash_value	vendor\hashlib\hl_sha2ext.cpp	/^const static sha2_word64 sha512_initial_hash_value[8] = {$/;"	v	file:
HL_SHA512_CTX	vendor\hashlib\hl_sha2ext.h	/^typedef struct HL_SHA512_CTX $/;"	s
HL_SHA512_CTX	vendor\hashlib\hl_sha2ext.h	/^} HL_SHA512_CTX;$/;"	t	typeref:struct:HL_SHA512_CTX
HL_SHA_384_CTX	vendor\hashlib\hl_sha2ext.h	/^typedef HL_SHA512_CTX HL_SHA_384_CTX;$/;"	t
SHA2ext	vendor\hashlib\hl_sha2ext.h	/^class SHA2ext$/;"	c
SHA2ext_H	vendor\hashlib\hl_sha2ext.h	75;"	d
SHA384_BLOCK_LENGTH	vendor\hashlib\hl_sha2ext.h	79;"	d
SHA384_DIGEST_LENGTH	vendor\hashlib\hl_sha2ext.h	80;"	d
SHA384_DIGEST_STRING_LENGTH	vendor\hashlib\hl_sha2ext.h	81;"	d
SHA512_BLOCK_LENGTH	vendor\hashlib\hl_sha2ext.h	82;"	d
SHA512_DIGEST_LENGTH	vendor\hashlib\hl_sha2ext.h	83;"	d
SHA512_DIGEST_STRING_LENGTH	vendor\hashlib\hl_sha2ext.h	84;"	d
SHA512_SHORT_BLOCK_LENGTH	vendor\hashlib\hl_sha2ext.h	85;"	d
bitcount	vendor\hashlib\hl_sha2ext.h	/^	hl_uint64       bitcount[2];$/;"	m	struct:HL_SHA512_CTX
buffer	vendor\hashlib\hl_sha2ext.h	/^	hl_uint8        buffer[SHA512_BLOCK_LENGTH];$/;"	m	struct:HL_SHA512_CTX
sha2_byte	vendor\hashlib\hl_sha2ext.h	/^typedef hl_uint8  sha2_byte;	$/;"	t
sha2_word32	vendor\hashlib\hl_sha2ext.h	/^typedef hl_uint32 sha2_word32;	$/;"	t
sha2_word64	vendor\hashlib\hl_sha2ext.h	/^typedef hl_uint64 sha2_word64;	$/;"	t
state	vendor\hashlib\hl_sha2ext.h	/^	hl_uint64       state[8];$/;"	m	struct:HL_SHA512_CTX
ADDINC128	vendor\hashlib\hl_sha2mac.h	130;"	d
BYTE_ORDER	vendor\hashlib\hl_sha2mac.h	103;"	d
Ch	vendor\hashlib\hl_sha2mac.h	181;"	d
LITTLE_ENDIAN	vendor\hashlib\hl_sha2mac.h	102;"	d
MEMCPY_BCOPY	vendor\hashlib\hl_sha2mac.h	157;"	d
MEMCPY_BCOPY	vendor\hashlib\hl_sha2mac.h	161;"	d
MEMSET_BZERO	vendor\hashlib\hl_sha2mac.h	156;"	d
MEMSET_BZERO	vendor\hashlib\hl_sha2mac.h	160;"	d
Maj	vendor\hashlib\hl_sha2mac.h	182;"	d
R	vendor\hashlib\hl_sha2mac.h	174;"	d
REVERSE32	vendor\hashlib\hl_sha2mac.h	110;"	d
REVERSE64	vendor\hashlib\hl_sha2mac.h	115;"	d
S32	vendor\hashlib\hl_sha2mac.h	176;"	d
S64	vendor\hashlib\hl_sha2mac.h	178;"	d
SHA2_USE_MEMSET_MEMCPY	vendor\hashlib\hl_sha2mac.h	148;"	d
Sigma0_256	vendor\hashlib\hl_sha2mac.h	185;"	d
Sigma0_512	vendor\hashlib\hl_sha2mac.h	191;"	d
Sigma1_256	vendor\hashlib\hl_sha2mac.h	186;"	d
Sigma1_512	vendor\hashlib\hl_sha2mac.h	192;"	d
sigma0_256	vendor\hashlib\hl_sha2mac.h	187;"	d
sigma0_512	vendor\hashlib\hl_sha2mac.h	193;"	d
sigma1_256	vendor\hashlib\hl_sha2mac.h	188;"	d
sigma1_512	vendor\hashlib\hl_sha2mac.h	194;"	d
convToString	vendor\hashlib\hl_sha384wrapper.cpp	/^std::string sha384wrapper::convToString(unsigned char *data)$/;"	f	class:sha384wrapper
getTestHash	vendor\hashlib\hl_sha384wrapper.cpp	/^std::string sha384wrapper::getTestHash(void)$/;"	f	class:sha384wrapper
hashIt	vendor\hashlib\hl_sha384wrapper.cpp	/^std::string sha384wrapper::hashIt(void)$/;"	f	class:sha384wrapper
resetContext	vendor\hashlib\hl_sha384wrapper.cpp	/^void sha384wrapper::resetContext(void)$/;"	f	class:sha384wrapper
sha384wrapper	vendor\hashlib\hl_sha384wrapper.cpp	/^sha384wrapper::sha384wrapper()$/;"	f	class:sha384wrapper
updateContext	vendor\hashlib\hl_sha384wrapper.cpp	/^void sha384wrapper::updateContext(unsigned char *data, unsigned int len)$/;"	f	class:sha384wrapper
~sha384wrapper	vendor\hashlib\hl_sha384wrapper.cpp	/^sha384wrapper::~sha384wrapper()$/;"	f	class:sha384wrapper
SHA384WRAPPER_H	vendor\hashlib\hl_sha384wrapper.h	41;"	d
context	vendor\hashlib\hl_sha384wrapper.h	/^			HL_SHA_384_CTX context;$/;"	m	class:sha384wrapper
sha384	vendor\hashlib\hl_sha384wrapper.h	/^			SHA2ext *sha384;$/;"	m	class:sha384wrapper
sha384wrapper	vendor\hashlib\hl_sha384wrapper.h	/^class sha384wrapper : public hashwrapper$/;"	c
convToString	vendor\hashlib\hl_sha512wrapper.cpp	/^std::string sha512wrapper::convToString(unsigned char *data)$/;"	f	class:sha512wrapper
getTestHash	vendor\hashlib\hl_sha512wrapper.cpp	/^std::string sha512wrapper::getTestHash(void)$/;"	f	class:sha512wrapper
hashIt	vendor\hashlib\hl_sha512wrapper.cpp	/^std::string sha512wrapper::hashIt(void)$/;"	f	class:sha512wrapper
resetContext	vendor\hashlib\hl_sha512wrapper.cpp	/^void sha512wrapper::resetContext(void)$/;"	f	class:sha512wrapper
sha512wrapper	vendor\hashlib\hl_sha512wrapper.cpp	/^sha512wrapper::sha512wrapper()$/;"	f	class:sha512wrapper
updateContext	vendor\hashlib\hl_sha512wrapper.cpp	/^void sha512wrapper::updateContext(unsigned char *data, unsigned int len)$/;"	f	class:sha512wrapper
~sha512wrapper	vendor\hashlib\hl_sha512wrapper.cpp	/^sha512wrapper::~sha512wrapper()$/;"	f	class:sha512wrapper
SHA512WRAPPER_H	vendor\hashlib\hl_sha512wrapper.h	41;"	d
context	vendor\hashlib\hl_sha512wrapper.h	/^			HL_SHA512_CTX context;$/;"	m	class:sha512wrapper
sha512	vendor\hashlib\hl_sha512wrapper.h	/^			SHA2ext *sha512;$/;"	m	class:sha512wrapper
sha512wrapper	vendor\hashlib\hl_sha512wrapper.h	/^class sha512wrapper : public hashwrapper$/;"	c
HLTYPES_H	vendor\hashlib\hl_types.h	40;"	d
hl_uint16	vendor\hashlib\hl_types.h	/^typedef unsigned short int 	hl_uint16;$/;"	t
hl_uint32	vendor\hashlib\hl_types.h	/^typedef unsigned int hl_uint32;$/;"	t
hl_uint64	vendor\hashlib\hl_types.h	/^	typedef unsigned __int64 hl_uint64;$/;"	t
hl_uint64	vendor\hashlib\hl_types.h	/^	typedef unsigned long long int	hl_uint64;$/;"	t
hl_uint8	vendor\hashlib\hl_types.h	/^typedef unsigned char 	hl_uint8;$/;"	t
create	vendor\hashlib\hl_wrapperfactory.cpp	/^hashwrapper* wrapperfactory::create(HL_Wrappertype type)$/;"	f	class:wrapperfactory
create	vendor\hashlib\hl_wrapperfactory.cpp	/^hashwrapper* wrapperfactory::create(std::string type)$/;"	f	class:wrapperfactory
HL_MD5	vendor\hashlib\hl_wrapperfactory.h	/^enum HL_Wrappertype { HL_MD5, HL_SHA1, HL_SHA256, HL_SHA384, HL_SHA512 };$/;"	e	enum:HL_Wrappertype
HL_SHA1	vendor\hashlib\hl_wrapperfactory.h	/^enum HL_Wrappertype { HL_MD5, HL_SHA1, HL_SHA256, HL_SHA384, HL_SHA512 };$/;"	e	enum:HL_Wrappertype
HL_SHA256	vendor\hashlib\hl_wrapperfactory.h	/^enum HL_Wrappertype { HL_MD5, HL_SHA1, HL_SHA256, HL_SHA384, HL_SHA512 };$/;"	e	enum:HL_Wrappertype
HL_SHA384	vendor\hashlib\hl_wrapperfactory.h	/^enum HL_Wrappertype { HL_MD5, HL_SHA1, HL_SHA256, HL_SHA384, HL_SHA512 };$/;"	e	enum:HL_Wrappertype
HL_SHA512	vendor\hashlib\hl_wrapperfactory.h	/^enum HL_Wrappertype { HL_MD5, HL_SHA1, HL_SHA256, HL_SHA384, HL_SHA512 };$/;"	e	enum:HL_Wrappertype
HL_Wrappertype	vendor\hashlib\hl_wrapperfactory.h	/^enum HL_Wrappertype { HL_MD5, HL_SHA1, HL_SHA256, HL_SHA384, HL_SHA512 };$/;"	g
WRAPPERFACTORY_H	vendor\hashlib\hl_wrapperfactory.h	40;"	d
wrapperfactory	vendor\hashlib\hl_wrapperfactory.h	/^class wrapperfactory$/;"	c
Accept	vendor\rapidjson\document.h	/^	const GenericValue& Accept(Handler& handler) const {$/;"	f	class:rapidjson::GenericValue
AddMember	vendor\rapidjson\document.h	/^	GenericValue& AddMember(GenericValue& name, GenericValue& value, Allocator& allocator) {$/;"	f	class:rapidjson::GenericValue
AddMember	vendor\rapidjson\document.h	/^	GenericValue& AddMember(const Ch* name, Allocator& nameAllocator, GenericValue& value, Allocator& allocator) {$/;"	f	class:rapidjson::GenericValue
AddMember	vendor\rapidjson\document.h	/^	GenericValue& AddMember(const Ch* name, GenericValue& value, Allocator& allocator) {$/;"	f	class:rapidjson::GenericValue
AddMember	vendor\rapidjson\document.h	/^	GenericValue& AddMember(const Ch* name, T value, Allocator& allocator) {$/;"	f	class:rapidjson::GenericValue
AllocatorType	vendor\rapidjson\document.h	/^	typedef Allocator AllocatorType;						\/\/!< Allocator type from template parameter.$/;"	t	class:rapidjson::GenericDocument
AllocatorType	vendor\rapidjson\document.h	/^	typedef Allocator AllocatorType;				\/\/!< Allocator type from template parameter.$/;"	t	class:rapidjson::GenericValue
Array	vendor\rapidjson\document.h	/^	struct Array {$/;"	s	class:rapidjson::GenericValue
Begin	vendor\rapidjson\document.h	/^	ConstValueIterator Begin() const { return const_cast<GenericValue&>(*this).Begin(); }$/;"	f	class:rapidjson::GenericValue
Begin	vendor\rapidjson\document.h	/^	ValueIterator Begin() { RAPIDJSON_ASSERT(IsArray()); return data_.a.elements; }$/;"	f	class:rapidjson::GenericValue
Bool	vendor\rapidjson\document.h	/^	void Bool(bool b) { new (stack_.template Push<ValueType>()) ValueType(b); }$/;"	f	class:rapidjson::GenericDocument
Capacity	vendor\rapidjson\document.h	/^	SizeType Capacity() const { RAPIDJSON_ASSERT(IsArray()); return data_.a.capacity; }$/;"	f	class:rapidjson::GenericValue
Ch	vendor\rapidjson\document.h	/^	typedef typename Encoding::Ch Ch;						\/\/!< Character type derived from Encoding.$/;"	t	class:rapidjson::GenericDocument
Ch	vendor\rapidjson\document.h	/^	typedef typename Encoding::Ch Ch;				\/\/!< Character type derived from Encoding.$/;"	t	class:rapidjson::GenericValue
Clear	vendor\rapidjson\document.h	/^	void Clear() {$/;"	f	class:rapidjson::GenericValue
ClearStack	vendor\rapidjson\document.h	/^	void ClearStack() {$/;"	f	class:rapidjson::GenericDocument
ConstMemberIterator	vendor\rapidjson\document.h	/^	typedef const Member* ConstMemberIterator;		\/\/!< Constant member iterator for iterating in object.$/;"	t	class:rapidjson::GenericValue
ConstValueIterator	vendor\rapidjson\document.h	/^	typedef const GenericValue* ConstValueIterator;	\/\/!< Constant value iterator for iterating in array.$/;"	t	class:rapidjson::GenericValue
Data	vendor\rapidjson\document.h	/^	union Data {$/;"	u	class:rapidjson::GenericValue
Document	vendor\rapidjson\document.h	/^typedef GenericDocument<UTF8<> > Document;$/;"	t	namespace:rapidjson
Double	vendor\rapidjson\document.h	/^	void Double(double d) { new (stack_.template Push<ValueType>()) ValueType(d); }$/;"	f	class:rapidjson::GenericDocument
Empty	vendor\rapidjson\document.h	/^	bool Empty() const { RAPIDJSON_ASSERT(IsArray()); return data_.a.size == 0; }$/;"	f	class:rapidjson::GenericValue
EncodingType	vendor\rapidjson\document.h	/^	typedef Encoding EncodingType;					\/\/!< Encoding type from template parameter.$/;"	t	class:rapidjson::GenericValue
End	vendor\rapidjson\document.h	/^	ConstValueIterator End() const { return const_cast<GenericValue&>(*this).End(); }$/;"	f	class:rapidjson::GenericValue
End	vendor\rapidjson\document.h	/^	ValueIterator End() { RAPIDJSON_ASSERT(IsArray()); return data_.a.elements + data_.a.size; }$/;"	f	class:rapidjson::GenericValue
EndArray	vendor\rapidjson\document.h	/^	void EndArray(SizeType elementCount) {$/;"	f	class:rapidjson::GenericDocument
EndObject	vendor\rapidjson\document.h	/^	void EndObject(SizeType memberCount) {$/;"	f	class:rapidjson::GenericDocument
FindMember	vendor\rapidjson\document.h	/^	Member* FindMember(const Ch* name) {$/;"	f	class:rapidjson::GenericValue
FindMember	vendor\rapidjson\document.h	/^	const Member* FindMember(const Ch* name) const { return const_cast<GenericValue&>(*this).FindMember(name); }$/;"	f	class:rapidjson::GenericValue
GenericDocument	vendor\rapidjson\document.h	/^	GenericDocument(Allocator* allocator = 0, size_t stackCapacity = kDefaultStackCapacity) : stack_(allocator, stackCapacity), parseError_(0), errorOffset_(0) {}$/;"	f	class:rapidjson::GenericDocument
GenericDocument	vendor\rapidjson\document.h	/^class GenericDocument : public GenericValue<Encoding, Allocator> {$/;"	c	namespace:rapidjson
GenericValue	vendor\rapidjson\document.h	/^	GenericValue() : flags_(kNullFlag) {}$/;"	f	class:rapidjson::GenericValue
GenericValue	vendor\rapidjson\document.h	/^	GenericValue(Type type) {$/;"	f	class:rapidjson::GenericValue
GenericValue	vendor\rapidjson\document.h	/^	GenericValue(bool b) : flags_(b ? kTrueFlag : kFalseFlag) {}$/;"	f	class:rapidjson::GenericValue
GenericValue	vendor\rapidjson\document.h	/^	GenericValue(const Ch* s) { SetStringRaw(s, internal::StrLen(s)); }$/;"	f	class:rapidjson::GenericValue
GenericValue	vendor\rapidjson\document.h	/^	GenericValue(const Ch* s, SizeType length) { $/;"	f	class:rapidjson::GenericValue
GenericValue	vendor\rapidjson\document.h	/^	GenericValue(const Ch* s, SizeType length, Allocator& allocator) { SetStringRaw(s, length, allocator); }$/;"	f	class:rapidjson::GenericValue
GenericValue	vendor\rapidjson\document.h	/^	GenericValue(const Ch*s, Allocator& allocator) { SetStringRaw(s, internal::StrLen(s), allocator); }$/;"	f	class:rapidjson::GenericValue
GenericValue	vendor\rapidjson\document.h	/^	GenericValue(double d) : flags_(kNumberDoubleFlag) { data_.n.d = d; }$/;"	f	class:rapidjson::GenericValue
GenericValue	vendor\rapidjson\document.h	/^	GenericValue(int i) : flags_(kNumberIntFlag) { $/;"	f	class:rapidjson::GenericValue
GenericValue	vendor\rapidjson\document.h	/^	GenericValue(int64_t i64) : flags_(kNumberInt64Flag) {$/;"	f	class:rapidjson::GenericValue
GenericValue	vendor\rapidjson\document.h	/^	GenericValue(uint64_t u64) : flags_(kNumberUint64Flag) {$/;"	f	class:rapidjson::GenericValue
GenericValue	vendor\rapidjson\document.h	/^	GenericValue(unsigned u) : flags_(kNumberUintFlag) {$/;"	f	class:rapidjson::GenericValue
GenericValue	vendor\rapidjson\document.h	/^class GenericValue {$/;"	c	namespace:rapidjson
GetAllocator	vendor\rapidjson\document.h	/^	Allocator& GetAllocator() {	return stack_.GetAllocator(); }$/;"	f	class:rapidjson::GenericDocument
GetBool	vendor\rapidjson\document.h	/^	bool GetBool() const { RAPIDJSON_ASSERT(IsBool()); return flags_ == kTrueFlag; }$/;"	f	class:rapidjson::GenericValue
GetDouble	vendor\rapidjson\document.h	/^	double GetDouble() const {$/;"	f	class:rapidjson::GenericValue
GetErrorOffset	vendor\rapidjson\document.h	/^	size_t GetErrorOffset() const { return errorOffset_; }$/;"	f	class:rapidjson::GenericDocument
GetInt	vendor\rapidjson\document.h	/^	int GetInt() const			{ RAPIDJSON_ASSERT(flags_ & kIntFlag);   return data_.n.i.i;   }$/;"	f	class:rapidjson::GenericValue
GetInt64	vendor\rapidjson\document.h	/^	int64_t GetInt64() const	{ RAPIDJSON_ASSERT(flags_ & kInt64Flag); return data_.n.i64; }$/;"	f	class:rapidjson::GenericValue
GetParseError	vendor\rapidjson\document.h	/^	const char* GetParseError() const { return parseError_; }$/;"	f	class:rapidjson::GenericDocument
GetStackCapacity	vendor\rapidjson\document.h	/^	size_t GetStackCapacity() const { return stack_.GetCapacity(); }$/;"	f	class:rapidjson::GenericDocument
GetString	vendor\rapidjson\document.h	/^	const Ch* GetString() const { RAPIDJSON_ASSERT(IsString()); return data_.s.str; }$/;"	f	class:rapidjson::GenericValue
GetStringLength	vendor\rapidjson\document.h	/^	SizeType GetStringLength() const { RAPIDJSON_ASSERT(IsString()); return data_.s.length; }$/;"	f	class:rapidjson::GenericValue
GetType	vendor\rapidjson\document.h	/^	Type GetType()	const { return static_cast<Type>(flags_ & kTypeMask); }$/;"	f	class:rapidjson::GenericValue
GetUint	vendor\rapidjson\document.h	/^	unsigned GetUint() const	{ RAPIDJSON_ASSERT(flags_ & kUintFlag);  return data_.n.u.u;   }$/;"	f	class:rapidjson::GenericValue
GetUint64	vendor\rapidjson\document.h	/^	uint64_t GetUint64() const	{ RAPIDJSON_ASSERT(flags_ & kUint64Flag); return data_.n.u64; }$/;"	f	class:rapidjson::GenericValue
HasMember	vendor\rapidjson\document.h	/^	bool HasMember(const Ch* name) const { return FindMember(name) != 0; }$/;"	f	class:rapidjson::GenericValue
HasParseError	vendor\rapidjson\document.h	/^	bool HasParseError() const { return parseError_ != 0; }$/;"	f	class:rapidjson::GenericDocument
I	vendor\rapidjson\document.h	/^		struct I {$/;"	s	union:rapidjson::GenericValue::Number
Int	vendor\rapidjson\document.h	/^	void Int(int i) { new (stack_.template Push<ValueType>()) ValueType(i); }$/;"	f	class:rapidjson::GenericDocument
Int64	vendor\rapidjson\document.h	/^	void Int64(int64_t i) { new (stack_.template Push<ValueType>()) ValueType(i); }$/;"	f	class:rapidjson::GenericDocument
IsArray	vendor\rapidjson\document.h	/^	bool IsArray()	const { return flags_ == kArrayFlag; }$/;"	f	class:rapidjson::GenericValue
IsBool	vendor\rapidjson\document.h	/^	bool IsBool()	const { return (flags_ & kBoolFlag) != 0; }$/;"	f	class:rapidjson::GenericValue
IsDouble	vendor\rapidjson\document.h	/^	bool IsDouble() const { return (flags_ & kDoubleFlag) != 0; }$/;"	f	class:rapidjson::GenericValue
IsFalse	vendor\rapidjson\document.h	/^	bool IsFalse()	const { return flags_ == kFalseFlag; }$/;"	f	class:rapidjson::GenericValue
IsInt	vendor\rapidjson\document.h	/^	bool IsInt()	const { return (flags_ & kIntFlag) != 0; }$/;"	f	class:rapidjson::GenericValue
IsInt64	vendor\rapidjson\document.h	/^	bool IsInt64()	const { return (flags_ & kInt64Flag) != 0; }$/;"	f	class:rapidjson::GenericValue
IsNull	vendor\rapidjson\document.h	/^	bool IsNull()	const { return flags_ == kNullFlag; }$/;"	f	class:rapidjson::GenericValue
IsNumber	vendor\rapidjson\document.h	/^	bool IsNumber() const { return (flags_ & kNumberFlag) != 0; }$/;"	f	class:rapidjson::GenericValue
IsObject	vendor\rapidjson\document.h	/^	bool IsObject()	const { return flags_ == kObjectFlag; }$/;"	f	class:rapidjson::GenericValue
IsString	vendor\rapidjson\document.h	/^	bool IsString() const { return (flags_ & kStringFlag) != 0; }$/;"	f	class:rapidjson::GenericValue
IsTrue	vendor\rapidjson\document.h	/^	bool IsTrue()	const { return flags_ == kTrueFlag; }$/;"	f	class:rapidjson::GenericValue
IsUint	vendor\rapidjson\document.h	/^	bool IsUint()	const { return (flags_ & kUintFlag) != 0; }$/;"	f	class:rapidjson::GenericValue
IsUint64	vendor\rapidjson\document.h	/^	bool IsUint64()	const { return (flags_ & kUint64Flag) != 0; }$/;"	f	class:rapidjson::GenericValue
Member	vendor\rapidjson\document.h	/^	struct Member { $/;"	s	class:rapidjson::GenericValue
MemberBegin	vendor\rapidjson\document.h	/^	ConstMemberIterator MemberBegin() const	{ RAPIDJSON_ASSERT(IsObject()); return data_.o.members; }$/;"	f	class:rapidjson::GenericValue
MemberBegin	vendor\rapidjson\document.h	/^	MemberIterator MemberBegin()			{ RAPIDJSON_ASSERT(IsObject()); return data_.o.members; }$/;"	f	class:rapidjson::GenericValue
MemberEnd	vendor\rapidjson\document.h	/^	ConstMemberIterator MemberEnd()	const	{ RAPIDJSON_ASSERT(IsObject()); return data_.o.members + data_.o.size; }$/;"	f	class:rapidjson::GenericValue
MemberEnd	vendor\rapidjson\document.h	/^	MemberIterator MemberEnd()				{ RAPIDJSON_ASSERT(IsObject()); return data_.o.members + data_.o.size; }$/;"	f	class:rapidjson::GenericValue
MemberIterator	vendor\rapidjson\document.h	/^	typedef Member* MemberIterator;					\/\/!< Member iterator for iterating in object.$/;"	t	class:rapidjson::GenericValue
Null	vendor\rapidjson\document.h	/^	void Null()	{ new (stack_.template Push<ValueType>()) ValueType(); }$/;"	f	class:rapidjson::GenericDocument
Number	vendor\rapidjson\document.h	/^	union Number {$/;"	u	class:rapidjson::GenericValue
Object	vendor\rapidjson\document.h	/^	struct Object {$/;"	s	class:rapidjson::GenericValue
Parse	vendor\rapidjson\document.h	/^	GenericDocument& Parse(const Ch* str) {$/;"	f	class:rapidjson::GenericDocument
ParseInsitu	vendor\rapidjson\document.h	/^	GenericDocument& ParseInsitu(Ch* str) {$/;"	f	class:rapidjson::GenericDocument
ParseStream	vendor\rapidjson\document.h	/^	GenericDocument& ParseStream(Stream& stream) {$/;"	f	class:rapidjson::GenericDocument
PopBack	vendor\rapidjson\document.h	/^	GenericValue& PopBack() {$/;"	f	class:rapidjson::GenericValue
PushBack	vendor\rapidjson\document.h	/^	GenericValue& PushBack(GenericValue& value, Allocator& allocator) {$/;"	f	class:rapidjson::GenericValue
PushBack	vendor\rapidjson\document.h	/^	GenericValue& PushBack(T value, Allocator& allocator) {$/;"	f	class:rapidjson::GenericValue
RAPIDJSON_DOCUMENT_H_	vendor\rapidjson\document.h	2;"	d
RawAssign	vendor\rapidjson\document.h	/^	void RawAssign(GenericValue& rhs) {$/;"	f	class:rapidjson::GenericValue
RemoveMember	vendor\rapidjson\document.h	/^	bool RemoveMember(const Ch* name) {$/;"	f	class:rapidjson::GenericValue
Reserve	vendor\rapidjson\document.h	/^	GenericValue& Reserve(SizeType newCapacity, Allocator &allocator) {$/;"	f	class:rapidjson::GenericValue
SetArray	vendor\rapidjson\document.h	/^	GenericValue& SetArray() {	this->~GenericValue(); new (this) GenericValue(kArrayType); return *this; }$/;"	f	class:rapidjson::GenericValue
SetArrayRaw	vendor\rapidjson\document.h	/^	void SetArrayRaw(GenericValue* values, SizeType count, Allocator& alloctaor) {$/;"	f	class:rapidjson::GenericValue
SetBool	vendor\rapidjson\document.h	/^	GenericValue& SetBool(bool b) { this->~GenericValue(); new (this) GenericValue(b); return *this; }$/;"	f	class:rapidjson::GenericValue
SetDouble	vendor\rapidjson\document.h	/^	GenericValue& SetDouble(double d)		{ this->~GenericValue(); new (this) GenericValue(d);	return *this; }$/;"	f	class:rapidjson::GenericValue
SetInt	vendor\rapidjson\document.h	/^	GenericValue& SetInt(int i)				{ this->~GenericValue(); new (this) GenericValue(i);	return *this; }$/;"	f	class:rapidjson::GenericValue
SetInt64	vendor\rapidjson\document.h	/^	GenericValue& SetInt64(int64_t i64)		{ this->~GenericValue(); new (this) GenericValue(i64);	return *this; }$/;"	f	class:rapidjson::GenericValue
SetNull	vendor\rapidjson\document.h	/^	GenericValue& SetNull() { this->~GenericValue(); new (this) GenericValue(); return *this; }$/;"	f	class:rapidjson::GenericValue
SetObject	vendor\rapidjson\document.h	/^	GenericValue& SetObject() { this->~GenericValue(); new (this) GenericValue(kObjectType); return *this; }$/;"	f	class:rapidjson::GenericValue
SetObjectRaw	vendor\rapidjson\document.h	/^	void SetObjectRaw(Member* members, SizeType count, Allocator& alloctaor) {$/;"	f	class:rapidjson::GenericValue
SetString	vendor\rapidjson\document.h	/^	GenericValue& SetString(const Ch* s) { return SetString(s, internal::StrLen(s)); }$/;"	f	class:rapidjson::GenericValue
SetString	vendor\rapidjson\document.h	/^	GenericValue& SetString(const Ch* s, Allocator& allocator) {	SetString(s, internal::StrLen(s), allocator); return *this; }$/;"	f	class:rapidjson::GenericValue
SetString	vendor\rapidjson\document.h	/^	GenericValue& SetString(const Ch* s, SizeType length) { this->~GenericValue(); SetStringRaw(s, length); return *this; }$/;"	f	class:rapidjson::GenericValue
SetString	vendor\rapidjson\document.h	/^	GenericValue& SetString(const Ch* s, SizeType length, Allocator& allocator) { this->~GenericValue(); SetStringRaw(s, length, allocator); return *this; }$/;"	f	class:rapidjson::GenericValue
SetStringRaw	vendor\rapidjson\document.h	/^	void SetStringRaw(const Ch* s, SizeType length) {$/;"	f	class:rapidjson::GenericValue
SetStringRaw	vendor\rapidjson\document.h	/^	void SetStringRaw(const Ch* s, SizeType length, Allocator& allocator) {$/;"	f	class:rapidjson::GenericValue
SetUint	vendor\rapidjson\document.h	/^	GenericValue& SetUint(unsigned u)		{ this->~GenericValue(); new (this) GenericValue(u);	return *this; }$/;"	f	class:rapidjson::GenericValue
SetUint64	vendor\rapidjson\document.h	/^	GenericValue& SetUint64(uint64_t u64)	{ this->~GenericValue(); new (this) GenericValue(u64);	return *this; }$/;"	f	class:rapidjson::GenericValue
Size	vendor\rapidjson\document.h	/^	SizeType Size() const { RAPIDJSON_ASSERT(IsArray()); return data_.a.size; }$/;"	f	class:rapidjson::GenericValue
StartArray	vendor\rapidjson\document.h	/^	void StartArray() { new (stack_.template Push<ValueType>()) ValueType(kArrayType); }$/;"	f	class:rapidjson::GenericDocument
StartObject	vendor\rapidjson\document.h	/^	void StartObject() { new (stack_.template Push<ValueType>()) ValueType(kObjectType); }$/;"	f	class:rapidjson::GenericDocument
String	vendor\rapidjson\document.h	/^	struct String {$/;"	s	class:rapidjson::GenericValue
String	vendor\rapidjson\document.h	/^	void String(const Ch* str, SizeType length, bool copy) { $/;"	f	class:rapidjson::GenericDocument
U	vendor\rapidjson\document.h	/^		struct U {$/;"	s	union:rapidjson::GenericValue::Number
Uint	vendor\rapidjson\document.h	/^	void Uint(unsigned i) { new (stack_.template Push<ValueType>()) ValueType(i); }$/;"	f	class:rapidjson::GenericDocument
Uint64	vendor\rapidjson\document.h	/^	void Uint64(uint64_t i) { new (stack_.template Push<ValueType>()) ValueType(i); }$/;"	f	class:rapidjson::GenericDocument
Value	vendor\rapidjson\document.h	/^typedef GenericValue<UTF8<> > Value;$/;"	t	namespace:rapidjson
ValueIterator	vendor\rapidjson\document.h	/^	typedef GenericValue* ValueIterator;			\/\/!< Value iterator for iterating in array.$/;"	t	class:rapidjson::GenericValue
ValueType	vendor\rapidjson\document.h	/^	typedef GenericValue<Encoding, Allocator> ValueType;	\/\/!< Value type of the document.$/;"	t	class:rapidjson::GenericDocument
a	vendor\rapidjson\document.h	/^		Array a;$/;"	m	union:rapidjson::GenericValue::Data
capacity	vendor\rapidjson\document.h	/^		SizeType capacity;$/;"	m	struct:rapidjson::GenericValue::Array
capacity	vendor\rapidjson\document.h	/^		SizeType capacity;$/;"	m	struct:rapidjson::GenericValue::Object
d	vendor\rapidjson\document.h	/^		double d;$/;"	m	union:rapidjson::GenericValue::Number
data_	vendor\rapidjson\document.h	/^	Data data_;$/;"	m	class:rapidjson::GenericValue
elements	vendor\rapidjson\document.h	/^		GenericValue<Encoding, Allocator>* elements;$/;"	m	struct:rapidjson::GenericValue::Array
errorOffset_	vendor\rapidjson\document.h	/^	size_t errorOffset_;$/;"	m	class:rapidjson::GenericDocument
flags_	vendor\rapidjson\document.h	/^	unsigned flags_;$/;"	m	class:rapidjson::GenericValue
hashcode	vendor\rapidjson\document.h	/^		unsigned hashcode;	\/\/!< reserved$/;"	m	struct:rapidjson::GenericValue::String
i	vendor\rapidjson\document.h	/^			int i;$/;"	m	struct:rapidjson::GenericValue::Number::I
i	vendor\rapidjson\document.h	/^		}i;$/;"	m	union:rapidjson::GenericValue::Number	typeref:struct:rapidjson::GenericValue::Number::I
i64	vendor\rapidjson\document.h	/^		int64_t i64;$/;"	m	union:rapidjson::GenericValue::Number
kArrayFlag	vendor\rapidjson\document.h	/^		kArrayFlag = kArrayType,$/;"	e	enum:rapidjson::GenericValue::__anon3
kBoolFlag	vendor\rapidjson\document.h	/^		kBoolFlag = 0x100,$/;"	e	enum:rapidjson::GenericValue::__anon3
kConstStringFlag	vendor\rapidjson\document.h	/^		kConstStringFlag = kStringType | kStringFlag,$/;"	e	enum:rapidjson::GenericValue::__anon3
kCopyFlag	vendor\rapidjson\document.h	/^		kCopyFlag = 0x200000,$/;"	e	enum:rapidjson::GenericValue::__anon3
kCopyStringFlag	vendor\rapidjson\document.h	/^		kCopyStringFlag = kStringType | kStringFlag | kCopyFlag,$/;"	e	enum:rapidjson::GenericValue::__anon3
kDefaultArrayCapacity	vendor\rapidjson\document.h	/^	static const SizeType kDefaultArrayCapacity = 16;$/;"	m	class:rapidjson::GenericValue
kDefaultObjectCapacity	vendor\rapidjson\document.h	/^	static const SizeType kDefaultObjectCapacity = 16;$/;"	m	class:rapidjson::GenericValue
kDefaultStackCapacity	vendor\rapidjson\document.h	/^	static const size_t kDefaultStackCapacity = 1024;$/;"	m	class:rapidjson::GenericDocument
kDoubleFlag	vendor\rapidjson\document.h	/^		kDoubleFlag = 0x4000,$/;"	e	enum:rapidjson::GenericValue::__anon3
kFalseFlag	vendor\rapidjson\document.h	/^		kFalseFlag = kFalseType | kBoolFlag,$/;"	e	enum:rapidjson::GenericValue::__anon3
kInt64Flag	vendor\rapidjson\document.h	/^		kInt64Flag = 0x1000,$/;"	e	enum:rapidjson::GenericValue::__anon3
kIntFlag	vendor\rapidjson\document.h	/^		kIntFlag = 0x400,$/;"	e	enum:rapidjson::GenericValue::__anon3
kNullFlag	vendor\rapidjson\document.h	/^		kNullFlag = kNullType,$/;"	e	enum:rapidjson::GenericValue::__anon3
kNumberDoubleFlag	vendor\rapidjson\document.h	/^		kNumberDoubleFlag = kNumberType | kNumberFlag | kDoubleFlag,$/;"	e	enum:rapidjson::GenericValue::__anon3
kNumberFlag	vendor\rapidjson\document.h	/^		kNumberFlag = 0x200,$/;"	e	enum:rapidjson::GenericValue::__anon3
kNumberInt64Flag	vendor\rapidjson\document.h	/^		kNumberInt64Flag = kNumberType | kNumberFlag | kInt64Flag,$/;"	e	enum:rapidjson::GenericValue::__anon3
kNumberIntFlag	vendor\rapidjson\document.h	/^		kNumberIntFlag = kNumberType | kNumberFlag | kIntFlag | kInt64Flag,$/;"	e	enum:rapidjson::GenericValue::__anon3
kNumberUint64Flag	vendor\rapidjson\document.h	/^		kNumberUint64Flag = kNumberType | kNumberFlag | kUint64Flag,$/;"	e	enum:rapidjson::GenericValue::__anon3
kNumberUintFlag	vendor\rapidjson\document.h	/^		kNumberUintFlag = kNumberType | kNumberFlag | kUintFlag | kUint64Flag | kInt64Flag,$/;"	e	enum:rapidjson::GenericValue::__anon3
kObjectFlag	vendor\rapidjson\document.h	/^		kObjectFlag = kObjectType,$/;"	e	enum:rapidjson::GenericValue::__anon3
kStringFlag	vendor\rapidjson\document.h	/^		kStringFlag = 0x100000,$/;"	e	enum:rapidjson::GenericValue::__anon3
kTrueFlag	vendor\rapidjson\document.h	/^		kTrueFlag = kTrueType | kBoolFlag,$/;"	e	enum:rapidjson::GenericValue::__anon3
kTypeMask	vendor\rapidjson\document.h	/^		kTypeMask = 0xFF	\/\/ bitwise-and with mask of 0xFF can be optimized by compiler$/;"	e	enum:rapidjson::GenericValue::__anon3
kUint64Flag	vendor\rapidjson\document.h	/^		kUint64Flag = 0x2000,$/;"	e	enum:rapidjson::GenericValue::__anon3
kUintFlag	vendor\rapidjson\document.h	/^		kUintFlag = 0x800,$/;"	e	enum:rapidjson::GenericValue::__anon3
length	vendor\rapidjson\document.h	/^		SizeType length;$/;"	m	struct:rapidjson::GenericValue::String
members	vendor\rapidjson\document.h	/^		Member* members;$/;"	m	struct:rapidjson::GenericValue::Object
n	vendor\rapidjson\document.h	/^		Number n;$/;"	m	union:rapidjson::GenericValue::Data
name	vendor\rapidjson\document.h	/^		GenericValue<Encoding, Allocator> name;		\/\/!< name of member (must be a string)$/;"	m	struct:rapidjson::GenericValue::Member
o	vendor\rapidjson\document.h	/^		Object o;$/;"	m	union:rapidjson::GenericValue::Data
operator =	vendor\rapidjson\document.h	/^	GenericValue& operator=(GenericValue& rhs) {$/;"	f	class:rapidjson::GenericValue
operator =	vendor\rapidjson\document.h	/^	GenericValue& operator=(T value) {$/;"	f	class:rapidjson::GenericValue
operator []	vendor\rapidjson\document.h	/^	GenericValue& operator[](SizeType index) {$/;"	f	class:rapidjson::GenericValue
operator []	vendor\rapidjson\document.h	/^	GenericValue& operator[](const Ch* name) {$/;"	f	class:rapidjson::GenericValue
operator []	vendor\rapidjson\document.h	/^	const GenericValue& operator[](SizeType index) const { return const_cast<GenericValue&>(*this)[index]; }$/;"	f	class:rapidjson::GenericValue
operator []	vendor\rapidjson\document.h	/^	const GenericValue& operator[](const Ch* name) const { return const_cast<GenericValue&>(*this)[name]; }$/;"	f	class:rapidjson::GenericValue
padding	vendor\rapidjson\document.h	/^			char padding[4];$/;"	m	struct:rapidjson::GenericValue::Number::I
padding2	vendor\rapidjson\document.h	/^			char padding2[4];$/;"	m	struct:rapidjson::GenericValue::Number::U
parseError_	vendor\rapidjson\document.h	/^	const char* parseError_;$/;"	m	class:rapidjson::GenericDocument
rapidjson	vendor\rapidjson\document.h	/^namespace rapidjson {$/;"	n
s	vendor\rapidjson\document.h	/^		String s;$/;"	m	union:rapidjson::GenericValue::Data
size	vendor\rapidjson\document.h	/^		SizeType size;$/;"	m	struct:rapidjson::GenericValue::Array
size	vendor\rapidjson\document.h	/^		SizeType size;$/;"	m	struct:rapidjson::GenericValue::Object
stack_	vendor\rapidjson\document.h	/^	internal::Stack<Allocator> stack_;$/;"	m	class:rapidjson::GenericDocument
str	vendor\rapidjson\document.h	/^		const Ch* str;$/;"	m	struct:rapidjson::GenericValue::String
u	vendor\rapidjson\document.h	/^			unsigned u;$/;"	m	struct:rapidjson::GenericValue::Number::U
u	vendor\rapidjson\document.h	/^		}u;$/;"	m	union:rapidjson::GenericValue::Number	typeref:struct:rapidjson::GenericValue::Number::U
u64	vendor\rapidjson\document.h	/^		uint64_t u64;$/;"	m	union:rapidjson::GenericValue::Number
value	vendor\rapidjson\document.h	/^		GenericValue<Encoding, Allocator> value;	\/\/!< value of member.$/;"	m	struct:rapidjson::GenericValue::Member
~GenericValue	vendor\rapidjson\document.h	/^	~GenericValue() {$/;"	f	class:rapidjson::GenericValue
Ch	vendor\rapidjson\filestream.h	/^	typedef char Ch;	\/\/!< Character type. Only support char.$/;"	t	class:rapidjson::FileStream
FileStream	vendor\rapidjson\filestream.h	/^	FileStream(FILE* fp) : fp_(fp), count_(0) { Read(); }$/;"	f	class:rapidjson::FileStream
FileStream	vendor\rapidjson\filestream.h	/^class FileStream {$/;"	c	namespace:rapidjson
Peek	vendor\rapidjson\filestream.h	/^	char Peek() const { return current_; }$/;"	f	class:rapidjson::FileStream
Put	vendor\rapidjson\filestream.h	/^	void Put(char c) { fputc(c, fp_); }$/;"	f	class:rapidjson::FileStream
PutBegin	vendor\rapidjson\filestream.h	/^	char* PutBegin() { return 0; }$/;"	f	class:rapidjson::FileStream
PutEnd	vendor\rapidjson\filestream.h	/^	size_t PutEnd(char*) { return 0; }$/;"	f	class:rapidjson::FileStream
RAPIDJSON_FILESTREAM_H_	vendor\rapidjson\filestream.h	2;"	d
Read	vendor\rapidjson\filestream.h	/^	void Read() {$/;"	f	class:rapidjson::FileStream
Take	vendor\rapidjson\filestream.h	/^	char Take() { char c = current_; Read(); return c; }$/;"	f	class:rapidjson::FileStream
Tell	vendor\rapidjson\filestream.h	/^	size_t Tell() const { return count_; }$/;"	f	class:rapidjson::FileStream
count_	vendor\rapidjson\filestream.h	/^	size_t count_;$/;"	m	class:rapidjson::FileStream
current_	vendor\rapidjson\filestream.h	/^	char current_;$/;"	m	class:rapidjson::FileStream
fp_	vendor\rapidjson\filestream.h	/^	FILE* fp_;$/;"	m	class:rapidjson::FileStream
rapidjson	vendor\rapidjson\filestream.h	/^namespace rapidjson {$/;"	n
Pow10	vendor\rapidjson\internal\pow10.h	/^inline double Pow10(int n) {$/;"	f	namespace:rapidjson::internal
RAPIDJSON_POW10_	vendor\rapidjson\internal\pow10.h	2;"	d
internal	vendor\rapidjson\internal\pow10.h	/^namespace internal {$/;"	n	namespace:rapidjson
rapidjson	vendor\rapidjson\internal\pow10.h	/^namespace rapidjson {$/;"	n
Bottom	vendor\rapidjson\internal\stack.h	/^	T* Bottom() { return (T*)stack_; }$/;"	f	class:rapidjson::internal::Stack
Clear	vendor\rapidjson\internal\stack.h	/^	void Clear() { \/*stack_top_ = 0;*\/ stack_top_ = stack_; }$/;"	f	class:rapidjson::internal::Stack
GetAllocator	vendor\rapidjson\internal\stack.h	/^	Allocator& GetAllocator() { return *allocator_; }$/;"	f	class:rapidjson::internal::Stack
GetCapacity	vendor\rapidjson\internal\stack.h	/^	size_t GetCapacity() const { return stack_capacity_; }$/;"	f	class:rapidjson::internal::Stack
GetSize	vendor\rapidjson\internal\stack.h	/^	size_t GetSize() const { return stack_top_ - stack_; }$/;"	f	class:rapidjson::internal::Stack
Pop	vendor\rapidjson\internal\stack.h	/^	T* Pop(size_t count) {$/;"	f	class:rapidjson::internal::Stack
Push	vendor\rapidjson\internal\stack.h	/^	T* Push(size_t count = 1) {$/;"	f	class:rapidjson::internal::Stack
RAPIDJSON_INTERNAL_STACK_H_	vendor\rapidjson\internal\stack.h	2;"	d
Stack	vendor\rapidjson\internal\stack.h	/^	Stack(Allocator* allocator, size_t stack_capacity) : allocator_(allocator), own_allocator_(0), stack_(0), stack_top_(0), stack_end_(0), stack_capacity_(stack_capacity) {$/;"	f	class:rapidjson::internal::Stack
Stack	vendor\rapidjson\internal\stack.h	/^class Stack {$/;"	c	namespace:rapidjson::internal
Top	vendor\rapidjson\internal\stack.h	/^	T* Top() { $/;"	f	class:rapidjson::internal::Stack
allocator_	vendor\rapidjson\internal\stack.h	/^	Allocator* allocator_;$/;"	m	class:rapidjson::internal::Stack
internal	vendor\rapidjson\internal\stack.h	/^namespace internal {$/;"	n	namespace:rapidjson
own_allocator_	vendor\rapidjson\internal\stack.h	/^	Allocator* own_allocator_;$/;"	m	class:rapidjson::internal::Stack
rapidjson	vendor\rapidjson\internal\stack.h	/^namespace rapidjson {$/;"	n
stack_	vendor\rapidjson\internal\stack.h	/^	char *stack_;$/;"	m	class:rapidjson::internal::Stack
stack_capacity_	vendor\rapidjson\internal\stack.h	/^	size_t stack_capacity_;$/;"	m	class:rapidjson::internal::Stack
stack_end_	vendor\rapidjson\internal\stack.h	/^	char *stack_end_;$/;"	m	class:rapidjson::internal::Stack
stack_top_	vendor\rapidjson\internal\stack.h	/^	char *stack_top_;$/;"	m	class:rapidjson::internal::Stack
~Stack	vendor\rapidjson\internal\stack.h	/^	~Stack() {$/;"	f	class:rapidjson::internal::Stack
RAPIDJSON_INTERNAL_STRFUNC_H_	vendor\rapidjson\internal\strfunc.h	2;"	d
StrLen	vendor\rapidjson\internal\strfunc.h	/^inline SizeType StrLen(const Ch* s) {$/;"	f	namespace:rapidjson::internal
internal	vendor\rapidjson\internal\strfunc.h	/^namespace internal {$/;"	n	namespace:rapidjson
rapidjson	vendor\rapidjson\internal\strfunc.h	/^namespace rapidjson {$/;"	n
Base	vendor\rapidjson\prettywriter.h	/^	typedef Writer<Stream, Encoding, Allocator> Base;$/;"	t	class:rapidjson::PrettyWriter
Bool	vendor\rapidjson\prettywriter.h	/^	PrettyWriter& Bool(bool b)			{ PrettyPrefix(b ? kTrueType : kFalseType); Base::WriteBool(b); return *this; }$/;"	f	class:rapidjson::PrettyWriter
Ch	vendor\rapidjson\prettywriter.h	/^	typedef typename Base::Ch Ch;$/;"	t	class:rapidjson::PrettyWriter
Double	vendor\rapidjson\prettywriter.h	/^	PrettyWriter& Double(double d)		{ PrettyPrefix(kNumberType); Base::WriteDouble(d);		return *this; }$/;"	f	class:rapidjson::PrettyWriter
EndArray	vendor\rapidjson\prettywriter.h	/^	PrettyWriter& EndArray(SizeType memberCount = 0) {$/;"	f	class:rapidjson::PrettyWriter
EndObject	vendor\rapidjson\prettywriter.h	/^	PrettyWriter& EndObject(SizeType memberCount = 0) {$/;"	f	class:rapidjson::PrettyWriter
Int	vendor\rapidjson\prettywriter.h	/^	PrettyWriter& Int(int i)			{ PrettyPrefix(kNumberType); Base::WriteInt(i);			return *this; }$/;"	f	class:rapidjson::PrettyWriter
Int64	vendor\rapidjson\prettywriter.h	/^	PrettyWriter& Int64(int64_t i64)	{ PrettyPrefix(kNumberType); Base::WriteInt64(i64);		return *this; }$/;"	f	class:rapidjson::PrettyWriter
Null	vendor\rapidjson\prettywriter.h	/^	PrettyWriter& Null()				{ PrettyPrefix(kNullType);   Base::WriteNull();			return *this; }$/;"	f	class:rapidjson::PrettyWriter
PrettyPrefix	vendor\rapidjson\prettywriter.h	/^	void PrettyPrefix(Type type) {$/;"	f	class:rapidjson::PrettyWriter
PrettyWriter	vendor\rapidjson\prettywriter.h	/^	PrettyWriter(Stream& stream, Allocator* allocator = 0, size_t levelDepth = Base::kDefaultLevelDepth) : $/;"	f	class:rapidjson::PrettyWriter
PrettyWriter	vendor\rapidjson\prettywriter.h	/^class PrettyWriter : public Writer<Stream, Encoding, Allocator> {$/;"	c	namespace:rapidjson
RAPIDJSON_PRETTYWRITER_H_	vendor\rapidjson\prettywriter.h	2;"	d
SetIndent	vendor\rapidjson\prettywriter.h	/^	PrettyWriter& SetIndent(Ch indentChar, unsigned indentCharCount) {$/;"	f	class:rapidjson::PrettyWriter
StartArray	vendor\rapidjson\prettywriter.h	/^	PrettyWriter& StartArray() {$/;"	f	class:rapidjson::PrettyWriter
StartObject	vendor\rapidjson\prettywriter.h	/^	PrettyWriter& StartObject() {$/;"	f	class:rapidjson::PrettyWriter
String	vendor\rapidjson\prettywriter.h	/^	PrettyWriter& String(const Ch* str) { return String(str, internal::StrLen(str)); }$/;"	f	class:rapidjson::PrettyWriter
String	vendor\rapidjson\prettywriter.h	/^	PrettyWriter& String(const Ch* str, SizeType length, bool copy = false) {$/;"	f	class:rapidjson::PrettyWriter
Uint	vendor\rapidjson\prettywriter.h	/^	PrettyWriter& Uint(unsigned u)		{ PrettyPrefix(kNumberType); Base::WriteUint(u);		return *this; }$/;"	f	class:rapidjson::PrettyWriter
Uint64	vendor\rapidjson\prettywriter.h	/^	PrettyWriter& Uint64(uint64_t u64)	{ PrettyPrefix(kNumberType); Base::WriteUint64(u64);	return *this; }$/;"	f	class:rapidjson::PrettyWriter
WriteIndent	vendor\rapidjson\prettywriter.h	/^	void WriteIndent()  {$/;"	f	class:rapidjson::PrettyWriter
indentCharCount_	vendor\rapidjson\prettywriter.h	/^	unsigned indentCharCount_;$/;"	m	class:rapidjson::PrettyWriter
indentChar_	vendor\rapidjson\prettywriter.h	/^	Ch indentChar_;$/;"	m	class:rapidjson::PrettyWriter
rapidjson	vendor\rapidjson\prettywriter.h	/^namespace rapidjson {$/;"	n
AddChunk	vendor\rapidjson\rapidjson.h	/^	void AddChunk(size_t capacity) {$/;"	f	class:rapidjson::MemoryPoolAllocator
Capacity	vendor\rapidjson\rapidjson.h	/^	size_t Capacity() {$/;"	f	class:rapidjson::MemoryPoolAllocator
Ch	vendor\rapidjson\rapidjson.h	/^	typedef CharType Ch;$/;"	t	struct:rapidjson::UTF16
Ch	vendor\rapidjson\rapidjson.h	/^	typedef CharType Ch;$/;"	t	struct:rapidjson::UTF32
Ch	vendor\rapidjson\rapidjson.h	/^	typedef CharType Ch;$/;"	t	struct:rapidjson::UTF8
Ch	vendor\rapidjson\rapidjson.h	/^	typedef typename Encoding::Ch Ch;$/;"	t	struct:rapidjson::GenericInsituStringStream
Ch	vendor\rapidjson\rapidjson.h	/^	typedef typename Encoding::Ch Ch;$/;"	t	struct:rapidjson::GenericStringStream
ChunkHeader	vendor\rapidjson\rapidjson.h	/^	struct ChunkHeader {$/;"	s	class:rapidjson::MemoryPoolAllocator
Clear	vendor\rapidjson\rapidjson.h	/^	void Clear() {$/;"	f	class:rapidjson::MemoryPoolAllocator
CrtAllocator	vendor\rapidjson\rapidjson.h	/^class CrtAllocator {$/;"	c	namespace:rapidjson
Encode	vendor\rapidjson\rapidjson.h	/^	static Ch *Encode(Ch* buffer, unsigned codepoint) {$/;"	f	struct:rapidjson::UTF32
Encode	vendor\rapidjson\rapidjson.h	/^	static Ch* Encode(Ch *buffer, unsigned codepoint) {$/;"	f	struct:rapidjson::UTF8
Encode	vendor\rapidjson\rapidjson.h	/^	static Ch* Encode(Ch* buffer, unsigned codepoint) {$/;"	f	struct:rapidjson::UTF16
Free	vendor\rapidjson\rapidjson.h	/^	static void Free(void *) {} \/\/ Do nothing$/;"	f	class:rapidjson::MemoryPoolAllocator
Free	vendor\rapidjson\rapidjson.h	/^	static void Free(void *ptr) { free(ptr); }$/;"	f	class:rapidjson::CrtAllocator
GenericInsituStringStream	vendor\rapidjson\rapidjson.h	/^	GenericInsituStringStream(Ch *src) : src_(src), dst_(0), head_(src) {}$/;"	f	struct:rapidjson::GenericInsituStringStream
GenericInsituStringStream	vendor\rapidjson\rapidjson.h	/^struct GenericInsituStringStream {$/;"	s	namespace:rapidjson
GenericStringStream	vendor\rapidjson\rapidjson.h	/^	GenericStringStream(const Ch *src) : src_(src), head_(src) {}$/;"	f	struct:rapidjson::GenericStringStream
GenericStringStream	vendor\rapidjson\rapidjson.h	/^struct GenericStringStream {$/;"	s	namespace:rapidjson
InsituStringStream	vendor\rapidjson\rapidjson.h	/^typedef GenericInsituStringStream<UTF8<> > InsituStringStream;$/;"	t	namespace:rapidjson
Malloc	vendor\rapidjson\rapidjson.h	/^	void* Malloc(size_t size) { return malloc(size); }$/;"	f	class:rapidjson::CrtAllocator
Malloc	vendor\rapidjson\rapidjson.h	/^	void* Malloc(size_t size) {$/;"	f	class:rapidjson::MemoryPoolAllocator
MemoryPoolAllocator	vendor\rapidjson\rapidjson.h	/^	MemoryPoolAllocator(char *buffer, size_t size, size_t chunkSize = kDefaultChunkCapacity, BaseAllocator* baseAllocator = 0) :$/;"	f	class:rapidjson::MemoryPoolAllocator
MemoryPoolAllocator	vendor\rapidjson\rapidjson.h	/^	MemoryPoolAllocator(size_t chunkSize = kDefaultChunkCapacity, BaseAllocator* baseAllocator = 0) : $/;"	f	class:rapidjson::MemoryPoolAllocator
MemoryPoolAllocator	vendor\rapidjson\rapidjson.h	/^class MemoryPoolAllocator {$/;"	c	namespace:rapidjson
Peek	vendor\rapidjson\rapidjson.h	/^	Ch Peek() const { return *src_; }$/;"	f	struct:rapidjson::GenericStringStream
Peek	vendor\rapidjson\rapidjson.h	/^	Ch Peek() { return *src_; }$/;"	f	struct:rapidjson::GenericInsituStringStream
Put	vendor\rapidjson\rapidjson.h	/^	void Put(Ch c) { RAPIDJSON_ASSERT(dst_ != 0); *dst_++ = c; }$/;"	f	struct:rapidjson::GenericInsituStringStream
Put	vendor\rapidjson\rapidjson.h	/^	void Put(Ch) { RAPIDJSON_ASSERT(false); }$/;"	f	struct:rapidjson::GenericStringStream
PutBegin	vendor\rapidjson\rapidjson.h	/^	Ch* PutBegin() { RAPIDJSON_ASSERT(false); return 0; }$/;"	f	struct:rapidjson::GenericStringStream
PutBegin	vendor\rapidjson\rapidjson.h	/^	Ch* PutBegin() { return dst_ = src_; }$/;"	f	struct:rapidjson::GenericInsituStringStream
PutEnd	vendor\rapidjson\rapidjson.h	/^	size_t PutEnd(Ch* begin) { return dst_ - begin; }$/;"	f	struct:rapidjson::GenericInsituStringStream
PutEnd	vendor\rapidjson\rapidjson.h	/^	size_t PutEnd(Ch*) { RAPIDJSON_ASSERT(false); return 0; }$/;"	f	struct:rapidjson::GenericStringStream
PutN	vendor\rapidjson\rapidjson.h	/^inline void PutN(Stream& stream, Ch c, size_t n) {$/;"	f	namespace:rapidjson
RAPIDJSON_ASSERT	vendor\rapidjson\rapidjson.h	80;"	d
RAPIDJSON_BIGENDIAN	vendor\rapidjson\rapidjson.h	27;"	d
RAPIDJSON_ENDIAN	vendor\rapidjson\rapidjson.h	37;"	d
RAPIDJSON_ENDIAN	vendor\rapidjson\rapidjson.h	39;"	d
RAPIDJSON_ENDIAN	vendor\rapidjson\rapidjson.h	42;"	d
RAPIDJSON_LITTLEENDIAN	vendor\rapidjson\rapidjson.h	26;"	d
RAPIDJSON_MULTILINEMACRO_BEGIN	vendor\rapidjson\rapidjson.h	86;"	d
RAPIDJSON_MULTILINEMACRO_END	vendor\rapidjson\rapidjson.h	87;"	d
RAPIDJSON_RAPIDJSON_H_	vendor\rapidjson\rapidjson.h	2;"	d
RAPIDJSON_SIMD	vendor\rapidjson\rapidjson.h	56;"	d
Realloc	vendor\rapidjson\rapidjson.h	/^	void* Realloc(void* originalPtr, size_t originalSize, size_t newSize) { (void)originalSize; return realloc(originalPtr, newSize); }$/;"	f	class:rapidjson::CrtAllocator
Realloc	vendor\rapidjson\rapidjson.h	/^	void* Realloc(void* originalPtr, size_t originalSize, size_t newSize) {$/;"	f	class:rapidjson::MemoryPoolAllocator
Size	vendor\rapidjson\rapidjson.h	/^	size_t Size() {$/;"	f	class:rapidjson::MemoryPoolAllocator
SizeType	vendor\rapidjson\rapidjson.h	/^typedef unsigned SizeType;$/;"	t	namespace:rapidjson
StringStream	vendor\rapidjson\rapidjson.h	/^typedef GenericStringStream<UTF8<> > StringStream;$/;"	t	namespace:rapidjson
Take	vendor\rapidjson\rapidjson.h	/^	Ch Take() { return *src_++; }$/;"	f	struct:rapidjson::GenericInsituStringStream
Take	vendor\rapidjson\rapidjson.h	/^	Ch Take() { return *src_++; }$/;"	f	struct:rapidjson::GenericStringStream
Tell	vendor\rapidjson\rapidjson.h	/^	size_t Tell() const { return src_ - head_; }$/;"	f	struct:rapidjson::GenericStringStream
Tell	vendor\rapidjson\rapidjson.h	/^	size_t Tell() { return src_ - head_; }$/;"	f	struct:rapidjson::GenericInsituStringStream
Type	vendor\rapidjson\rapidjson.h	/^enum Type {$/;"	g	namespace:rapidjson
UTF16	vendor\rapidjson\rapidjson.h	/^struct UTF16 {$/;"	s	namespace:rapidjson
UTF32	vendor\rapidjson\rapidjson.h	/^struct UTF32 {$/;"	s	namespace:rapidjson
UTF8	vendor\rapidjson\rapidjson.h	/^struct UTF8 {$/;"	s	namespace:rapidjson
baseAllocator_	vendor\rapidjson\rapidjson.h	/^	BaseAllocator* baseAllocator_;	\/\/!< base allocator for allocating memory chunks.$/;"	m	class:rapidjson::MemoryPoolAllocator
capacity	vendor\rapidjson\rapidjson.h	/^		size_t capacity;	\/\/!< Capacity of the chunk in bytes (excluding the header itself).$/;"	m	struct:rapidjson::MemoryPoolAllocator::ChunkHeader
chunkHead_	vendor\rapidjson\rapidjson.h	/^	ChunkHeader *chunkHead_;	\/\/!< Head of the chunk linked-list. Only the head chunk serves allocation.$/;"	m	class:rapidjson::MemoryPoolAllocator
chunk_capacity_	vendor\rapidjson\rapidjson.h	/^	size_t chunk_capacity_;		\/\/!< The minimum capacity of chunk when they are allocated.$/;"	m	class:rapidjson::MemoryPoolAllocator
dst_	vendor\rapidjson\rapidjson.h	/^	Ch* dst_;$/;"	m	struct:rapidjson::GenericInsituStringStream
head_	vendor\rapidjson\rapidjson.h	/^	Ch* head_;$/;"	m	struct:rapidjson::GenericInsituStringStream
head_	vendor\rapidjson\rapidjson.h	/^	const Ch* head_;	\/\/!< Original head of the string.$/;"	m	struct:rapidjson::GenericStringStream
int64_t	vendor\rapidjson\rapidjson.h	/^typedef __int64 int64_t;$/;"	t
kArrayType	vendor\rapidjson\rapidjson.h	/^	kArrayType = 4,		\/\/!< array $/;"	e	enum:rapidjson::Type
kDefaultChunkCapacity	vendor\rapidjson\rapidjson.h	/^	static const int kDefaultChunkCapacity = 64 * 1024; \/\/!< Default chunk capacity.$/;"	m	class:rapidjson::MemoryPoolAllocator
kFalseType	vendor\rapidjson\rapidjson.h	/^	kFalseType = 1,		\/\/!< false$/;"	e	enum:rapidjson::Type
kNeedFree	vendor\rapidjson\rapidjson.h	/^	static const bool kNeedFree = false;	\/\/!< Tell users that no need to call Free() with this allocator. (concept Allocator)$/;"	m	class:rapidjson::MemoryPoolAllocator
kNeedFree	vendor\rapidjson\rapidjson.h	/^	static const bool kNeedFree = true;$/;"	m	class:rapidjson::CrtAllocator
kNullType	vendor\rapidjson\rapidjson.h	/^	kNullType = 0,		\/\/!< null$/;"	e	enum:rapidjson::Type
kNumberType	vendor\rapidjson\rapidjson.h	/^	kNumberType = 6,	\/\/!< number$/;"	e	enum:rapidjson::Type
kObjectType	vendor\rapidjson\rapidjson.h	/^	kObjectType = 3,	\/\/!< object$/;"	e	enum:rapidjson::Type
kStringType	vendor\rapidjson\rapidjson.h	/^	kStringType = 5,	\/\/!< string$/;"	e	enum:rapidjson::Type
kTrueType	vendor\rapidjson\rapidjson.h	/^	kTrueType = 2,		\/\/!< true$/;"	e	enum:rapidjson::Type
next	vendor\rapidjson\rapidjson.h	/^		ChunkHeader *next;	\/\/!< Next chunk in the linked list.$/;"	m	struct:rapidjson::MemoryPoolAllocator::ChunkHeader
ownBaseAllocator_	vendor\rapidjson\rapidjson.h	/^	BaseAllocator* ownBaseAllocator_;	\/\/!< base allocator created by this object.$/;"	m	class:rapidjson::MemoryPoolAllocator
rapidjson	vendor\rapidjson\rapidjson.h	/^namespace rapidjson {$/;"	n
size	vendor\rapidjson\rapidjson.h	/^		size_t size;		\/\/!< Current size of allocated memory in bytes.$/;"	m	struct:rapidjson::MemoryPoolAllocator::ChunkHeader
src_	vendor\rapidjson\rapidjson.h	/^	Ch* src_;$/;"	m	struct:rapidjson::GenericInsituStringStream
src_	vendor\rapidjson\rapidjson.h	/^	const Ch* src_;		\/\/!< Current read position.$/;"	m	struct:rapidjson::GenericStringStream
uint64_t	vendor\rapidjson\rapidjson.h	/^typedef unsigned __int64 uint64_t;$/;"	t
userBuffer_	vendor\rapidjson\rapidjson.h	/^	char *userBuffer_;			\/\/!< User supplied buffer.$/;"	m	class:rapidjson::MemoryPoolAllocator
~MemoryPoolAllocator	vendor\rapidjson\rapidjson.h	/^	~MemoryPoolAllocator() {$/;"	f	class:rapidjson::MemoryPoolAllocator
BaseReaderHandler	vendor\rapidjson\reader.h	/^struct BaseReaderHandler {$/;"	s	namespace:rapidjson
Bool	vendor\rapidjson\reader.h	/^	void Bool(bool) { Default(); }$/;"	f	struct:rapidjson::BaseReaderHandler
Ch	vendor\rapidjson\reader.h	/^	typedef typename Encoding::Ch Ch;$/;"	t	class:rapidjson::GenericReader
Ch	vendor\rapidjson\reader.h	/^	typedef typename Encoding::Ch Ch;$/;"	t	struct:rapidjson::BaseReaderHandler
Default	vendor\rapidjson\reader.h	/^	void Default() {}$/;"	f	struct:rapidjson::BaseReaderHandler
Double	vendor\rapidjson\reader.h	/^	void Double(double) { Default(); }$/;"	f	struct:rapidjson::BaseReaderHandler
EndArray	vendor\rapidjson\reader.h	/^	void EndArray(SizeType) { Default(); }$/;"	f	struct:rapidjson::BaseReaderHandler
EndObject	vendor\rapidjson\reader.h	/^	void EndObject(SizeType) { Default(); }$/;"	f	struct:rapidjson::BaseReaderHandler
GenericReader	vendor\rapidjson\reader.h	/^	GenericReader(Allocator* allocator = 0, size_t stackCapacity = kDefaultStackCapacity) : stack_(allocator, stackCapacity), parseError_(0), errorOffset_(0) {}$/;"	f	class:rapidjson::GenericReader
GenericReader	vendor\rapidjson\reader.h	/^class GenericReader {$/;"	c	namespace:rapidjson
GetErrorOffset	vendor\rapidjson\reader.h	/^	size_t GetErrorOffset() const { return errorOffset_; }$/;"	f	class:rapidjson::GenericReader
GetParseError	vendor\rapidjson\reader.h	/^	const char* GetParseError() const { return parseError_; }$/;"	f	class:rapidjson::GenericReader
HasParseError	vendor\rapidjson\reader.h	/^	bool HasParseError() const { return parseError_ != 0; }$/;"	f	class:rapidjson::GenericReader
Int	vendor\rapidjson\reader.h	/^	void Int(int) { Default(); }$/;"	f	struct:rapidjson::BaseReaderHandler
Int64	vendor\rapidjson\reader.h	/^	void Int64(int64_t) { Default(); }$/;"	f	struct:rapidjson::BaseReaderHandler
Null	vendor\rapidjson\reader.h	/^	void Null() { Default(); }$/;"	f	struct:rapidjson::BaseReaderHandler
Parse	vendor\rapidjson\reader.h	/^	bool Parse(Stream& stream, Handler& handler) {$/;"	f	class:rapidjson::GenericReader
ParseArray	vendor\rapidjson\reader.h	/^	void ParseArray(Stream& stream, Handler& handler) {$/;"	f	class:rapidjson::GenericReader
ParseFalse	vendor\rapidjson\reader.h	/^	void ParseFalse(Stream& stream, Handler& handler) {$/;"	f	class:rapidjson::GenericReader
ParseFlag	vendor\rapidjson\reader.h	/^enum ParseFlag {$/;"	g	namespace:rapidjson
ParseHex4	vendor\rapidjson\reader.h	/^	unsigned ParseHex4(Stream& stream) {$/;"	f	class:rapidjson::GenericReader
ParseNull	vendor\rapidjson\reader.h	/^	void ParseNull(Stream& stream, Handler& handler) {$/;"	f	class:rapidjson::GenericReader
ParseNumber	vendor\rapidjson\reader.h	/^	void ParseNumber(Stream& stream, Handler& handler) {$/;"	f	class:rapidjson::GenericReader
ParseObject	vendor\rapidjson\reader.h	/^	void ParseObject(Stream& stream, Handler& handler) {$/;"	f	class:rapidjson::GenericReader
ParseString	vendor\rapidjson\reader.h	/^	void ParseString(Stream& stream, Handler& handler) {$/;"	f	class:rapidjson::GenericReader
ParseTrue	vendor\rapidjson\reader.h	/^	void ParseTrue(Stream& stream, Handler& handler) {$/;"	f	class:rapidjson::GenericReader
ParseValue	vendor\rapidjson\reader.h	/^	void ParseValue(Stream& stream, Handler& handler) {$/;"	f	class:rapidjson::GenericReader
RAPIDJSON_PARSE_ERROR	vendor\rapidjson\reader.h	24;"	d
RAPIDJSON_PUT	vendor\rapidjson\reader.h	408;"	d
RAPIDJSON_PUT	vendor\rapidjson\reader.h	480;"	d
RAPIDJSON_READER_H_	vendor\rapidjson\reader.h	2;"	d
Reader	vendor\rapidjson\reader.h	/^typedef GenericReader<UTF8<> > Reader;$/;"	t	namespace:rapidjson
SkipWhitespace	vendor\rapidjson\reader.h	/^template<> inline void SkipWhitespace(InsituStringStream& stream) { $/;"	f	namespace:rapidjson
SkipWhitespace	vendor\rapidjson\reader.h	/^template<> inline void SkipWhitespace(StringStream& stream) {$/;"	f	namespace:rapidjson
SkipWhitespace	vendor\rapidjson\reader.h	/^void SkipWhitespace(Stream& stream) {$/;"	f	namespace:rapidjson
SkipWhitespace_SIMD	vendor\rapidjson\reader.h	/^inline const char *SkipWhitespace_SIMD(const char* p) {$/;"	f	namespace:rapidjson
StartArray	vendor\rapidjson\reader.h	/^	void StartArray() { Default(); }$/;"	f	struct:rapidjson::BaseReaderHandler
StartObject	vendor\rapidjson\reader.h	/^	void StartObject() { Default(); }$/;"	f	struct:rapidjson::BaseReaderHandler
String	vendor\rapidjson\reader.h	/^	void String(const Ch*, SizeType, bool) { Default(); }$/;"	f	struct:rapidjson::BaseReaderHandler
Uint	vendor\rapidjson\reader.h	/^	void Uint(unsigned) { Default(); }$/;"	f	struct:rapidjson::BaseReaderHandler
Uint64	vendor\rapidjson\reader.h	/^	void Uint64(uint64_t) { Default(); }$/;"	f	struct:rapidjson::BaseReaderHandler
Z16	vendor\rapidjson\reader.h	388;"	d
Z16	vendor\rapidjson\reader.h	396;"	d
errorOffset_	vendor\rapidjson\reader.h	/^	size_t errorOffset_;$/;"	m	class:rapidjson::GenericReader
jmpbuf_	vendor\rapidjson\reader.h	/^	jmp_buf jmpbuf_;					\/\/!< setjmp buffer for fast exit from nested parsing function calls.$/;"	m	class:rapidjson::GenericReader
kDefaultStackCapacity	vendor\rapidjson\reader.h	/^	static const size_t kDefaultStackCapacity = 256;	\/\/!< Default stack capacity in bytes for storing a single decoded string. $/;"	m	class:rapidjson::GenericReader
kParseDefaultFlags	vendor\rapidjson\reader.h	/^	kParseDefaultFlags = 0,			\/\/!< Default parse flags. Non-destructive parsing. Text strings are decoded into allocated buffer.$/;"	e	enum:rapidjson::ParseFlag
kParseInsituFlag	vendor\rapidjson\reader.h	/^	kParseInsituFlag = 1			\/\/!< In-situ(destructive) parsing.$/;"	e	enum:rapidjson::ParseFlag
parseError_	vendor\rapidjson\reader.h	/^	const char* parseError_;$/;"	m	class:rapidjson::GenericReader
rapidjson	vendor\rapidjson\reader.h	/^namespace rapidjson {$/;"	n
stack_	vendor\rapidjson\reader.h	/^	internal::Stack<Allocator> stack_;	\/\/!< A stack for storing decoded string temporarily during non-destructive parsing.$/;"	m	class:rapidjson::GenericReader
Ch	vendor\rapidjson\stringbuffer.h	/^	typedef typename Encoding::Ch Ch;$/;"	t	struct:rapidjson::GenericStringBuffer
Clear	vendor\rapidjson\stringbuffer.h	/^	void Clear() { stack_.Clear(); }$/;"	f	struct:rapidjson::GenericStringBuffer
GenericStringBuffer	vendor\rapidjson\stringbuffer.h	/^	GenericStringBuffer(Allocator* allocator = 0, size_t capacity = kDefaultCapacity) : stack_(allocator, capacity) {}$/;"	f	struct:rapidjson::GenericStringBuffer
GenericStringBuffer	vendor\rapidjson\stringbuffer.h	/^struct GenericStringBuffer {$/;"	s	namespace:rapidjson
GetString	vendor\rapidjson\stringbuffer.h	/^	const char* GetString() const {$/;"	f	struct:rapidjson::GenericStringBuffer
Put	vendor\rapidjson\stringbuffer.h	/^	void Put(Ch c) { *stack_.template Push<Ch>() = c; }$/;"	f	struct:rapidjson::GenericStringBuffer
PutN	vendor\rapidjson\stringbuffer.h	/^inline void PutN(GenericStringBuffer<UTF8<> >& stream, char c, size_t n) {$/;"	f	namespace:rapidjson
RAPIDJSON_STRINGBUFFER_H_	vendor\rapidjson\stringbuffer.h	2;"	d
Size	vendor\rapidjson\stringbuffer.h	/^	size_t Size() const { return stack_.GetSize(); }$/;"	f	struct:rapidjson::GenericStringBuffer
StringBuffer	vendor\rapidjson\stringbuffer.h	/^typedef GenericStringBuffer<UTF8<> > StringBuffer;$/;"	t	namespace:rapidjson
kDefaultCapacity	vendor\rapidjson\stringbuffer.h	/^	static const size_t kDefaultCapacity = 256;$/;"	m	struct:rapidjson::GenericStringBuffer
rapidjson	vendor\rapidjson\stringbuffer.h	/^namespace rapidjson {$/;"	n
stack_	vendor\rapidjson\stringbuffer.h	/^	mutable internal::Stack<Allocator> stack_;$/;"	m	struct:rapidjson::GenericStringBuffer
Bool	vendor\rapidjson\writer.h	/^	Writer& Bool(bool b)			{ Prefix(b ? kTrueType : kFalseType); WriteBool(b); return *this; }$/;"	f	class:rapidjson::Writer
Ch	vendor\rapidjson\writer.h	/^	typedef typename Encoding::Ch Ch;$/;"	t	class:rapidjson::Writer
Double	vendor\rapidjson\writer.h	/^	Writer& Double(double d)		{ Prefix(kNumberType); WriteDouble(d);		return *this; }$/;"	f	class:rapidjson::Writer
EndArray	vendor\rapidjson\writer.h	/^	Writer& EndArray(SizeType elementCount = 0) {$/;"	f	class:rapidjson::Writer
EndObject	vendor\rapidjson\writer.h	/^	Writer& EndObject(SizeType memberCount = 0) {$/;"	f	class:rapidjson::Writer
Int	vendor\rapidjson\writer.h	/^	Writer& Int(int i)				{ Prefix(kNumberType); WriteInt(i);			return *this; }$/;"	f	class:rapidjson::Writer
Int64	vendor\rapidjson\writer.h	/^	Writer& Int64(int64_t i64)		{ Prefix(kNumberType); WriteInt64(i64);		return *this; }$/;"	f	class:rapidjson::Writer
Level	vendor\rapidjson\writer.h	/^		Level(bool inArray_) : inArray(inArray_), valueCount(0) {}$/;"	f	struct:rapidjson::Writer::Level
Level	vendor\rapidjson\writer.h	/^	struct Level {$/;"	s	class:rapidjson::Writer
Null	vendor\rapidjson\writer.h	/^	Writer& Null()					{ Prefix(kNullType);   WriteNull();			return *this; }$/;"	f	class:rapidjson::Writer
Prefix	vendor\rapidjson\writer.h	/^	void Prefix(Type type) {$/;"	f	class:rapidjson::Writer
RAPIDJSON_WRITER_H_	vendor\rapidjson\writer.h	2;"	d
StartArray	vendor\rapidjson\writer.h	/^	Writer& StartArray() {$/;"	f	class:rapidjson::Writer
StartObject	vendor\rapidjson\writer.h	/^	Writer& StartObject() {$/;"	f	class:rapidjson::Writer
String	vendor\rapidjson\writer.h	/^	Writer& String(const Ch* str) { return String(str, internal::StrLen(str)); }$/;"	f	class:rapidjson::Writer
String	vendor\rapidjson\writer.h	/^	Writer& String(const Ch* str, SizeType length, bool copy = false) {$/;"	f	class:rapidjson::Writer
Uint	vendor\rapidjson\writer.h	/^	Writer& Uint(unsigned u)		{ Prefix(kNumberType); WriteUint(u);		return *this; }$/;"	f	class:rapidjson::Writer
Uint64	vendor\rapidjson\writer.h	/^	Writer& Uint64(uint64_t u64)	{ Prefix(kNumberType); WriteUint64(u64);	return *this; }$/;"	f	class:rapidjson::Writer
WriteBool	vendor\rapidjson\writer.h	/^	void WriteBool(bool b)  {$/;"	f	class:rapidjson::Writer
WriteDouble	vendor\rapidjson\writer.h	/^	void WriteDouble(double d) {$/;"	f	class:rapidjson::Writer
WriteEndArray	vendor\rapidjson\writer.h	/^	void WriteEndArray()	{ stream_.Put(']'); }$/;"	f	class:rapidjson::Writer
WriteEndObject	vendor\rapidjson\writer.h	/^	void WriteEndObject()	{ stream_.Put('}'); }$/;"	f	class:rapidjson::Writer
WriteInt	vendor\rapidjson\writer.h	/^	void WriteInt(int i) {$/;"	f	class:rapidjson::Writer
WriteInt64	vendor\rapidjson\writer.h	/^	void WriteInt64(int64_t i64) {$/;"	f	class:rapidjson::Writer
WriteNull	vendor\rapidjson\writer.h	/^	void WriteNull()  {$/;"	f	class:rapidjson::Writer
WriteStartArray	vendor\rapidjson\writer.h	/^	void WriteStartArray()	{ stream_.Put('['); }$/;"	f	class:rapidjson::Writer
WriteStartObject	vendor\rapidjson\writer.h	/^	void WriteStartObject()	{ stream_.Put('{'); }$/;"	f	class:rapidjson::Writer
WriteString	vendor\rapidjson\writer.h	/^	void WriteString(const Ch* str, SizeType length)  {$/;"	f	class:rapidjson::Writer
WriteUint	vendor\rapidjson\writer.h	/^	void WriteUint(unsigned u) {$/;"	f	class:rapidjson::Writer
WriteUint64	vendor\rapidjson\writer.h	/^	void WriteUint64(uint64_t u64) {$/;"	f	class:rapidjson::Writer
Writer	vendor\rapidjson\writer.h	/^	Writer(Stream& stream, Allocator* allocator = 0, size_t levelDepth = kDefaultLevelDepth) : $/;"	f	class:rapidjson::Writer
Writer	vendor\rapidjson\writer.h	/^class Writer {$/;"	c	namespace:rapidjson
Z16	vendor\rapidjson\writer.h	175;"	d
Z16	vendor\rapidjson\writer.h	183;"	d
inArray	vendor\rapidjson\writer.h	/^		bool inArray;		\/\/!< true if in array, otherwise in object$/;"	m	struct:rapidjson::Writer::Level
kDefaultLevelDepth	vendor\rapidjson\writer.h	/^	static const size_t kDefaultLevelDepth = 32;$/;"	m	class:rapidjson::Writer
level_stack_	vendor\rapidjson\writer.h	/^	internal::Stack<Allocator> level_stack_;$/;"	m	class:rapidjson::Writer
rapidjson	vendor\rapidjson\writer.h	/^namespace rapidjson {$/;"	n
stream_	vendor\rapidjson\writer.h	/^	Stream& stream_;$/;"	m	class:rapidjson::Writer
valueCount	vendor\rapidjson\writer.h	/^		size_t valueCount;	\/\/!< number of values in this level$/;"	m	struct:rapidjson::Writer::Level
ADDR	vendor\sqlite\sqlite3.c	9631;"	d	file:
AGGREGATE	vendor\sqlite\sqlite3.c	11176;"	d	file:
AGGREGATE2	vendor\sqlite\sqlite3.c	11179;"	d	file:
ALWAYS	vendor\sqlite\sqlite3.c	131683;"	d	file:
ALWAYS	vendor\sqlite\sqlite3.c	131686;"	d	file:
ALWAYS	vendor\sqlite\sqlite3.c	8411;"	d	file:
ALWAYS	vendor\sqlite\sqlite3.c	8414;"	d	file:
ALWAYS	vendor\sqlite\sqlite3.c	8417;"	d	file:
AdjustTree	vendor\sqlite\sqlite3.c	/^static int AdjustTree($/;"	f	file:
AggInfo	vendor\sqlite\sqlite3.c	/^struct AggInfo {$/;"	s	file:
AggInfo	vendor\sqlite\sqlite3.c	/^typedef struct AggInfo AggInfo;$/;"	t	typeref:struct:AggInfo	file:
AggInfo_col	vendor\sqlite\sqlite3.c	/^  struct AggInfo_col {    \/* For each column used in source tables *\/$/;"	s	struct:AggInfo	file:
AggInfo_func	vendor\sqlite\sqlite3.c	/^  struct AggInfo_func {   \/* For each aggregate function *\/$/;"	s	struct:AggInfo	file:
ApplyCostMultiplier	vendor\sqlite\sqlite3.c	119772;"	d	file:
ApplyCostMultiplier	vendor\sqlite\sqlite3.c	119774;"	d	file:
ArraySize	vendor\sqlite\sqlite3.c	9093;"	d	file:
AttachKey	vendor\sqlite\sqlite3.c	/^struct AttachKey { int type;  Token key; };$/;"	s	file:
AuthContext	vendor\sqlite\sqlite3.c	/^struct AuthContext {$/;"	s	file:
AuthContext	vendor\sqlite\sqlite3.c	/^typedef struct AuthContext AuthContext;$/;"	t	typeref:struct:AuthContext	file:
AutoincInfo	vendor\sqlite\sqlite3.c	/^struct AutoincInfo {$/;"	s	file:
AutoincInfo	vendor\sqlite\sqlite3.c	/^typedef struct AutoincInfo AutoincInfo;$/;"	t	typeref:struct:AutoincInfo	file:
AuxData	vendor\sqlite\sqlite3.c	/^struct AuxData {$/;"	s	file:
AuxData	vendor\sqlite\sqlite3.c	/^typedef struct AuxData AuxData;$/;"	t	typeref:struct:AuxData	file:
BITVEC_HASH	vendor\sqlite\sqlite3.c	38659;"	d	file:
BITVEC_MXHASH	vendor\sqlite\sqlite3.c	38654;"	d	file:
BITVEC_NBIT	vendor\sqlite\sqlite3.c	38648;"	d	file:
BITVEC_NELEM	vendor\sqlite\sqlite3.c	38646;"	d	file:
BITVEC_NINT	vendor\sqlite\sqlite3.c	38651;"	d	file:
BITVEC_NPTR	vendor\sqlite\sqlite3.c	38661;"	d	file:
BITVEC_SZ	vendor\sqlite\sqlite3.c	38632;"	d	file:
BITVEC_SZELEM	vendor\sqlite\sqlite3.c	38644;"	d	file:
BITVEC_TELEM	vendor\sqlite\sqlite3.c	38642;"	d	file:
BITVEC_USIZE	vendor\sqlite\sqlite3.c	38636;"	d	file:
BMS	vendor\sqlite\sqlite3.c	11989;"	d	file:
BTALLOC_ANY	vendor\sqlite\sqlite3.c	52830;"	d	file:
BTALLOC_EXACT	vendor\sqlite\sqlite3.c	52831;"	d	file:
BTALLOC_LE	vendor\sqlite\sqlite3.c	52832;"	d	file:
BTCF_AtLast	vendor\sqlite\sqlite3.c	52342;"	d	file:
BTCF_Incrblob	vendor\sqlite\sqlite3.c	52343;"	d	file:
BTCF_ValidNKey	vendor\sqlite\sqlite3.c	52340;"	d	file:
BTCF_ValidOvfl	vendor\sqlite\sqlite3.c	52341;"	d	file:
BTCF_WriteFlag	vendor\sqlite\sqlite3.c	52339;"	d	file:
BTCURSOR_MAX_DEPTH	vendor\sqlite\sqlite3.c	52294;"	d	file:
BTREE_APPLICATION_ID	vendor\sqlite\sqlite3.c	9360;"	d	file:
BTREE_AUTOVACUUM_FULL	vendor\sqlite\sqlite3.c	9244;"	d	file:
BTREE_AUTOVACUUM_INCR	vendor\sqlite\sqlite3.c	9245;"	d	file:
BTREE_AUTOVACUUM_NONE	vendor\sqlite\sqlite3.c	9243;"	d	file:
BTREE_BLOBKEY	vendor\sqlite\sqlite3.c	9323;"	d	file:
BTREE_BULKLOAD	vendor\sqlite\sqlite3.c	9367;"	d	file:
BTREE_DATA_VERSION	vendor\sqlite\sqlite3.c	9361;"	d	file:
BTREE_DEFAULT_CACHE_SIZE	vendor\sqlite\sqlite3.c	9355;"	d	file:
BTREE_FILE_FORMAT	vendor\sqlite\sqlite3.c	9354;"	d	file:
BTREE_FREE_PAGE_COUNT	vendor\sqlite\sqlite3.c	9352;"	d	file:
BTREE_INCR_VACUUM	vendor\sqlite\sqlite3.c	9359;"	d	file:
BTREE_INTKEY	vendor\sqlite\sqlite3.c	9322;"	d	file:
BTREE_LARGEST_ROOT_PAGE	vendor\sqlite\sqlite3.c	9356;"	d	file:
BTREE_MEMORY	vendor\sqlite\sqlite3.c	9271;"	d	file:
BTREE_OMIT_JOURNAL	vendor\sqlite\sqlite3.c	9270;"	d	file:
BTREE_SCHEMA_VERSION	vendor\sqlite\sqlite3.c	9353;"	d	file:
BTREE_SINGLE	vendor\sqlite\sqlite3.c	9272;"	d	file:
BTREE_TEXT_ENCODING	vendor\sqlite\sqlite3.c	9357;"	d	file:
BTREE_UNORDERED	vendor\sqlite\sqlite3.c	9273;"	d	file:
BTREE_USER_VERSION	vendor\sqlite\sqlite3.c	9358;"	d	file:
BTS_EXCLUSIVE	vendor\sqlite\sqlite3.c	52267;"	d	file:
BTS_INITIALLY_EMPTY	vendor\sqlite\sqlite3.c	52265;"	d	file:
BTS_NO_WAL	vendor\sqlite\sqlite3.c	52266;"	d	file:
BTS_PAGESIZE_FIXED	vendor\sqlite\sqlite3.c	52263;"	d	file:
BTS_PENDING	vendor\sqlite\sqlite3.c	52268;"	d	file:
BTS_READ_ONLY	vendor\sqlite\sqlite3.c	52262;"	d	file:
BTS_SECURE_DELETE	vendor\sqlite\sqlite3.c	52264;"	d	file:
BYTESWAP32	vendor\sqlite\sqlite3.c	49223;"	d	file:
BenignMallocHooks	vendor\sqlite\sqlite3.c	/^static SQLITE_WSD struct BenignMallocHooks {$/;"	s	file:
BenignMallocHooks	vendor\sqlite\sqlite3.c	/^typedef struct BenignMallocHooks BenignMallocHooks;$/;"	t	typeref:struct:BenignMallocHooks	file:
Bitmask	vendor\sqlite\sqlite3.c	/^typedef u64 Bitmask;$/;"	t	file:
Bitvec	vendor\sqlite\sqlite3.c	/^struct Bitvec {$/;"	s	file:
Bitvec	vendor\sqlite\sqlite3.c	/^typedef struct Bitvec Bitvec;$/;"	t	typeref:struct:Bitvec	file:
Blob	vendor\sqlite\sqlite3.c	/^struct Blob {$/;"	s	file:
Blob	vendor\sqlite\sqlite3.c	/^typedef struct Blob Blob;$/;"	t	typeref:struct:Blob	file:
Bool	vendor\sqlite\sqlite3.c	/^typedef unsigned Bool;$/;"	t	file:
BtCursor	vendor\sqlite\sqlite3.c	/^struct BtCursor {$/;"	s	file:
BtCursor	vendor\sqlite\sqlite3.c	/^typedef struct BtCursor BtCursor;$/;"	t	typeref:struct:BtCursor	file:
BtLock	vendor\sqlite\sqlite3.c	/^struct BtLock {$/;"	s	file:
BtLock	vendor\sqlite\sqlite3.c	/^typedef struct BtLock BtLock;$/;"	t	typeref:struct:BtLock	file:
BtShared	vendor\sqlite\sqlite3.c	/^struct BtShared {$/;"	s	file:
BtShared	vendor\sqlite\sqlite3.c	/^typedef struct BtShared BtShared;$/;"	t	typeref:struct:BtShared	file:
Btree	vendor\sqlite\sqlite3.c	/^struct Btree {$/;"	s	file:
Btree	vendor\sqlite\sqlite3.c	/^typedef struct Btree Btree;$/;"	t	typeref:struct:Btree	file:
BusyHandler	vendor\sqlite\sqlite3.c	/^struct BusyHandler {$/;"	s	file:
BusyHandler	vendor\sqlite\sqlite3.c	/^typedef struct BusyHandler BusyHandler;$/;"	t	typeref:struct:BusyHandler	file:
ByteRangeLockPB2	vendor\sqlite\sqlite3.c	/^struct ByteRangeLockPB2$/;"	s	file:
CACHE_STALE	vendor\sqlite\sqlite3.c	14522;"	d	file:
CHECK_PAGE	vendor\sqlite\sqlite3.c	42569;"	d	file:
CHECK_PAGE	vendor\sqlite\sqlite3.c	42580;"	d	file:
CLEARBIT	vendor\sqlite\sqlite3.c	38892;"	d	file:
CODEC1	vendor\sqlite\sqlite3.c	41782;"	d	file:
CODEC1	vendor\sqlite\sqlite3.c	41788;"	d	file:
CODEC2	vendor\sqlite\sqlite3.c	41784;"	d	file:
CODEC2	vendor\sqlite\sqlite3.c	41789;"	d	file:
COLFLAG_HIDDEN	vendor\sqlite\sqlite3.c	11236;"	d	file:
COLFLAG_PRIMKEY	vendor\sqlite\sqlite3.c	11235;"	d	file:
COLNAME_COLUMN	vendor\sqlite\sqlite3.c	9614;"	d	file:
COLNAME_DATABASE	vendor\sqlite\sqlite3.c	9612;"	d	file:
COLNAME_DECLTYPE	vendor\sqlite\sqlite3.c	9611;"	d	file:
COLNAME_N	vendor\sqlite\sqlite3.c	9616;"	d	file:
COLNAME_N	vendor\sqlite\sqlite3.c	9619;"	d	file:
COLNAME_N	vendor\sqlite\sqlite3.c	9621;"	d	file:
COLNAME_NAME	vendor\sqlite\sqlite3.c	9610;"	d	file:
COLNAME_TABLE	vendor\sqlite\sqlite3.c	9613;"	d	file:
COLUMN_MASK	vendor\sqlite\sqlite3.c	98487;"	d	file:
CORRUPT_DB	vendor\sqlite\sqlite3.c	12719;"	d	file:
CTIMEOPT_VAL	vendor\sqlite\sqlite3.c	13952;"	d	file:
CTIMEOPT_VAL_	vendor\sqlite\sqlite3.c	13951;"	d	file:
CTRL_FREE	vendor\sqlite\sqlite3.c	18416;"	d	file:
CTRL_LOGSIZE	vendor\sqlite\sqlite3.c	18415;"	d	file:
CURSOR_FAULT	vendor\sqlite\sqlite3.c	52379;"	d	file:
CURSOR_INVALID	vendor\sqlite\sqlite3.c	52375;"	d	file:
CURSOR_REQUIRESEEK	vendor\sqlite\sqlite3.c	52378;"	d	file:
CURSOR_SKIPNEXT	vendor\sqlite\sqlite3.c	52377;"	d	file:
CURSOR_VALID	vendor\sqlite\sqlite3.c	52376;"	d	file:
CellInfo	vendor\sqlite\sqlite3.c	/^struct CellInfo {$/;"	s	file:
CellInfo	vendor\sqlite\sqlite3.c	/^typedef struct CellInfo CellInfo;$/;"	t	typeref:struct:CellInfo	file:
ChooseLeaf	vendor\sqlite\sqlite3.c	/^static int ChooseLeaf($/;"	f	file:
Cleanup	vendor\sqlite\sqlite3.c	/^static void Cleanup(Vdbe *p){$/;"	f	file:
CollSeq	vendor\sqlite\sqlite3.c	/^struct CollSeq {$/;"	s	file:
CollSeq	vendor\sqlite\sqlite3.c	/^typedef struct CollSeq CollSeq;$/;"	t	typeref:struct:CollSeq	file:
Column	vendor\sqlite\sqlite3.c	/^struct Column {$/;"	s	file:
Column	vendor\sqlite\sqlite3.c	/^typedef struct Column Column;$/;"	t	typeref:struct:Column	file:
ConstFactorOk	vendor\sqlite\sqlite3.c	11062;"	d	file:
CountCtx	vendor\sqlite\sqlite3.c	/^struct CountCtx {$/;"	s	file:
CountCtx	vendor\sqlite\sqlite3.c	/^typedef struct CountCtx CountCtx;$/;"	t	typeref:struct:CountCtx	file:
Cte	vendor\sqlite\sqlite3.c	/^  struct Cte {                    \/* For each CTE in the WITH clause.... *\/$/;"	s	struct:With	file:
D	vendor\sqlite\sqlite3.c	/^  int Y, M, D;       \/* Year, month, and day *\/$/;"	m	struct:DateTime	file:
DB_Empty	vendor\sqlite\sqlite3.c	10778;"	d	file:
DB_SchemaLoaded	vendor\sqlite\sqlite3.c	10776;"	d	file:
DB_UnresetViews	vendor\sqlite\sqlite3.c	10777;"	d	file:
DCOORD	vendor\sqlite\sqlite3.c	149933;"	d	file:
DCOORD	vendor\sqlite\sqlite3.c	149935;"	d	file:
DIRECT_MODE	vendor\sqlite\sqlite3.c	47351;"	d	file:
DOCID_CMP	vendor\sqlite\sqlite3.c	134244;"	d	file:
DOTLOCK_SUFFIX	vendor\sqlite\sqlite3.c	27302;"	d	file:
DO_OS_MALLOC_TEST	vendor\sqlite\sqlite3.c	16316;"	d	file:
DO_OS_MALLOC_TEST	vendor\sqlite\sqlite3.c	16323;"	d	file:
DateTime	vendor\sqlite\sqlite3.c	/^struct DateTime {$/;"	s	file:
DateTime	vendor\sqlite\sqlite3.c	/^typedef struct DateTime DateTime;$/;"	t	typeref:struct:DateTime	file:
Db	vendor\sqlite\sqlite3.c	/^struct Db {$/;"	s	file:
Db	vendor\sqlite\sqlite3.c	/^typedef struct Db Db;$/;"	t	typeref:struct:Db	file:
DbClearProperty	vendor\sqlite\sqlite3.c	10764;"	d	file:
DbFixer	vendor\sqlite\sqlite3.c	/^struct DbFixer {$/;"	s	file:
DbFixer	vendor\sqlite\sqlite3.c	/^typedef struct DbFixer DbFixer;$/;"	t	typeref:struct:DbFixer	file:
DbHasAnyProperty	vendor\sqlite\sqlite3.c	10762;"	d	file:
DbHasProperty	vendor\sqlite\sqlite3.c	10761;"	d	file:
DbMaskAllZero	vendor\sqlite\sqlite3.c	12344;"	d	file:
DbMaskAllZero	vendor\sqlite\sqlite3.c	12351;"	d	file:
DbMaskNonZero	vendor\sqlite\sqlite3.c	12345;"	d	file:
DbMaskNonZero	vendor\sqlite\sqlite3.c	12352;"	d	file:
DbMaskSet	vendor\sqlite\sqlite3.c	12343;"	d	file:
DbMaskSet	vendor\sqlite\sqlite3.c	12350;"	d	file:
DbMaskTest	vendor\sqlite\sqlite3.c	12341;"	d	file:
DbMaskTest	vendor\sqlite\sqlite3.c	12348;"	d	file:
DbMaskZero	vendor\sqlite\sqlite3.c	12342;"	d	file:
DbMaskZero	vendor\sqlite\sqlite3.c	12349;"	d	file:
DbPage	vendor\sqlite\sqlite3.c	/^typedef struct PgHdr DbPage;$/;"	t	typeref:struct:PgHdr	file:
DbSetProperty	vendor\sqlite\sqlite3.c	10763;"	d	file:
Deephemeralize	vendor\sqlite\sqlite3.c	70404;"	d	file:
DistinctCtx	vendor\sqlite\sqlite3.c	/^struct DistinctCtx {$/;"	s	file:
DistinctCtx	vendor\sqlite\sqlite3.c	/^typedef struct DistinctCtx DistinctCtx;$/;"	t	typeref:struct:DistinctCtx	file:
EIGHT_BYTE_ALIGNMENT	vendor\sqlite\sqlite3.c	8982;"	d	file:
EIGHT_BYTE_ALIGNMENT	vendor\sqlite\sqlite3.c	8984;"	d	file:
ENC	vendor\sqlite\sqlite3.c	10991;"	d	file:
EP_Agg	vendor\sqlite\sqlite3.c	11846;"	d	file:
EP_CanBeNull	vendor\sqlite\sqlite3.c	11865;"	d	file:
EP_Collate	vendor\sqlite\sqlite3.c	11853;"	d	file:
EP_ConstFunc	vendor\sqlite\sqlite3.c	11864;"	d	file:
EP_DblQuoted	vendor\sqlite\sqlite3.c	11851;"	d	file:
EP_Distinct	vendor\sqlite\sqlite3.c	11849;"	d	file:
EP_Error	vendor\sqlite\sqlite3.c	11848;"	d	file:
EP_FromJoin	vendor\sqlite\sqlite3.c	11845;"	d	file:
EP_Generic	vendor\sqlite\sqlite3.c	11854;"	d	file:
EP_InfixFunc	vendor\sqlite\sqlite3.c	11852;"	d	file:
EP_IntValue	vendor\sqlite\sqlite3.c	11855;"	d	file:
EP_MemToken	vendor\sqlite\sqlite3.c	11861;"	d	file:
EP_NoReduce	vendor\sqlite\sqlite3.c	11862;"	d	file:
EP_Propagate	vendor\sqlite\sqlite3.c	11871;"	d	file:
EP_Reduced	vendor\sqlite\sqlite3.c	11858;"	d	file:
EP_Resolved	vendor\sqlite\sqlite3.c	11847;"	d	file:
EP_Skip	vendor\sqlite\sqlite3.c	11857;"	d	file:
EP_Static	vendor\sqlite\sqlite3.c	11860;"	d	file:
EP_Subquery	vendor\sqlite\sqlite3.c	11866;"	d	file:
EP_TokenOnly	vendor\sqlite\sqlite3.c	11859;"	d	file:
EP_Unlikely	vendor\sqlite\sqlite3.c	11863;"	d	file:
EP_VarSelect	vendor\sqlite\sqlite3.c	11850;"	d	file:
EP_xIsSelect	vendor\sqlite\sqlite3.c	11856;"	d	file:
EXCLUSIVE_LOCK	vendor\sqlite\sqlite3.c	10511;"	d	file:
EXPRDUP_REDUCE	vendor\sqlite\sqlite3.c	11905;"	d	file:
EXPR_FULLSIZE	vendor\sqlite\sqlite3.c	11897;"	d	file:
EXPR_REDUCEDSIZE	vendor\sqlite\sqlite3.c	11898;"	d	file:
EXPR_TOKENONLYSIZE	vendor\sqlite\sqlite3.c	11899;"	d	file:
EXTRA_SIZE	vendor\sqlite\sqlite3.c	52118;"	d	file:
ExpandBlob	vendor\sqlite\sqlite3.c	14863;"	d	file:
ExpandBlob	vendor\sqlite\sqlite3.c	14866;"	d	file:
Explain	vendor\sqlite\sqlite3.c	/^struct Explain {$/;"	s	file:
Explain	vendor\sqlite\sqlite3.c	/^typedef struct Explain Explain;$/;"	t	typeref:struct:Explain	file:
Expr	vendor\sqlite\sqlite3.c	/^struct Expr {$/;"	s	file:
Expr	vendor\sqlite\sqlite3.c	/^typedef struct Expr Expr;$/;"	t	typeref:struct:Expr	file:
ExprClearProperty	vendor\sqlite\sqlite3.c	11880;"	d	file:
ExprHasAllProperty	vendor\sqlite\sqlite3.c	11878;"	d	file:
ExprHasProperty	vendor\sqlite\sqlite3.c	11877;"	d	file:
ExprList	vendor\sqlite\sqlite3.c	/^struct ExprList {$/;"	s	file:
ExprList	vendor\sqlite\sqlite3.c	/^typedef struct ExprList ExprList;$/;"	t	typeref:struct:ExprList	file:
ExprList_item	vendor\sqlite\sqlite3.c	/^  struct ExprList_item { \/* For each expression in the list *\/$/;"	s	struct:ExprList	file:
ExprSetProperty	vendor\sqlite\sqlite3.c	11879;"	d	file:
ExprSetVVAProperty	vendor\sqlite\sqlite3.c	11887;"	d	file:
ExprSetVVAProperty	vendor\sqlite\sqlite3.c	11889;"	d	file:
ExprSpan	vendor\sqlite\sqlite3.c	/^struct ExprSpan {$/;"	s	file:
ExprSpan	vendor\sqlite\sqlite3.c	/^typedef struct ExprSpan ExprSpan;$/;"	t	typeref:struct:ExprSpan	file:
FILEHANDLEID	vendor\sqlite\sqlite3.c	41501;"	d	file:
FILE_ATTRIBUTE_MASK	vendor\sqlite\sqlite3.c	33218;"	d	file:
FILE_FLAG_MASK	vendor\sqlite\sqlite3.c	33214;"	d	file:
FKey	vendor\sqlite\sqlite3.c	/^struct FKey {$/;"	s	file:
FKey	vendor\sqlite\sqlite3.c	/^typedef struct FKey FKey;$/;"	t	typeref:struct:FKey	file:
FLAG_INTERN	vendor\sqlite\sqlite3.c	21212;"	d	file:
FLAG_SIGNED	vendor\sqlite\sqlite3.c	21211;"	d	file:
FLAG_STRING	vendor\sqlite\sqlite3.c	21213;"	d	file:
FOREGUARD	vendor\sqlite\sqlite3.c	17181;"	d	file:
FOUR_BYTE_INT	vendor\sqlite\sqlite3.c	67345;"	d	file:
FOUR_BYTE_UINT	vendor\sqlite\sqlite3.c	67344;"	d	file:
FTS3_AUX_SCHEMA	vendor\sqlite\sqlite3.c	137707;"	d	file:
FTS3_DOCID_SEARCH	vendor\sqlite\sqlite3.c	131877;"	d	file:
FTS3_EVAL_FILTER	vendor\sqlite\sqlite3.c	131857;"	d	file:
FTS3_EVAL_MATCHINFO	vendor\sqlite\sqlite3.c	131859;"	d	file:
FTS3_EVAL_NEXT	vendor\sqlite\sqlite3.c	131858;"	d	file:
FTS3_FULLSCAN_SEARCH	vendor\sqlite\sqlite3.c	131876;"	d	file:
FTS3_FULLTEXT_SEARCH	vendor\sqlite\sqlite3.c	131878;"	d	file:
FTS3_HASH_BINARY	vendor\sqlite\sqlite3.c	131542;"	d	file:
FTS3_HASH_STRING	vendor\sqlite\sqlite3.c	131541;"	d	file:
FTS3_HAVE_DOCID_GE	vendor\sqlite\sqlite3.c	131887;"	d	file:
FTS3_HAVE_DOCID_LE	vendor\sqlite\sqlite3.c	131888;"	d	file:
FTS3_HAVE_LANGID	vendor\sqlite\sqlite3.c	131886;"	d	file:
FTS3_MATCHINFO_AVGLENGTH	vendor\sqlite\sqlite3.c	147411;"	d	file:
FTS3_MATCHINFO_DEFAULT	vendor\sqlite\sqlite3.c	147419;"	d	file:
FTS3_MATCHINFO_HITS	vendor\sqlite\sqlite3.c	147414;"	d	file:
FTS3_MATCHINFO_LCS	vendor\sqlite\sqlite3.c	147413;"	d	file:
FTS3_MATCHINFO_LENGTH	vendor\sqlite\sqlite3.c	147412;"	d	file:
FTS3_MATCHINFO_NCOL	vendor\sqlite\sqlite3.c	147409;"	d	file:
FTS3_MATCHINFO_NDOC	vendor\sqlite\sqlite3.c	147410;"	d	file:
FTS3_MATCHINFO_NPHRASE	vendor\sqlite\sqlite3.c	147408;"	d	file:
FTS3_MAX_PENDING_DATA	vendor\sqlite\sqlite3.c	131617;"	d	file:
FTS3_MERGE_COUNT	vendor\sqlite\sqlite3.c	131607;"	d	file:
FTS3_NODE_CHUNKSIZE	vendor\sqlite\sqlite3.c	141785;"	d	file:
FTS3_NODE_CHUNKSIZE	vendor\sqlite\sqlite3.c	141788;"	d	file:
FTS3_NODE_CHUNK_THRESHOLD	vendor\sqlite\sqlite3.c	141786;"	d	file:
FTS3_NODE_CHUNK_THRESHOLD	vendor\sqlite\sqlite3.c	141789;"	d	file:
FTS3_NODE_PADDING	vendor\sqlite\sqlite3.c	141763;"	d	file:
FTS3_SEGCURSOR_ALL	vendor\sqlite\sqlite3.c	132030;"	d	file:
FTS3_SEGCURSOR_PENDING	vendor\sqlite\sqlite3.c	132029;"	d	file:
FTS3_SEGDIR_MAXLEVEL	vendor\sqlite\sqlite3.c	131655;"	d	file:
FTS3_SEGDIR_MAXLEVEL_STR	vendor\sqlite\sqlite3.c	131656;"	d	file:
FTS3_SEGMENT_COLUMN_FILTER	vendor\sqlite\sqlite3.c	132042;"	d	file:
FTS3_SEGMENT_FIRST	vendor\sqlite\sqlite3.c	132045;"	d	file:
FTS3_SEGMENT_IGNORE_EMPTY	vendor\sqlite\sqlite3.c	132041;"	d	file:
FTS3_SEGMENT_PREFIX	vendor\sqlite\sqlite3.c	132043;"	d	file:
FTS3_SEGMENT_REQUIRE_POS	vendor\sqlite\sqlite3.c	132040;"	d	file:
FTS3_SEGMENT_SCAN	vendor\sqlite\sqlite3.c	132044;"	d	file:
FTS3_TOK_SCHEMA	vendor\sqlite\sqlite3.c	141413;"	d	file:
FTS3_VARINT_MAX	vendor\sqlite\sqlite3.c	131638;"	d	file:
FTS4AUX_EQ_CONSTRAINT	vendor\sqlite\sqlite3.c	137800;"	d	file:
FTS4AUX_GE_CONSTRAINT	vendor\sqlite\sqlite3.c	137801;"	d	file:
FTS4AUX_LE_CONSTRAINT	vendor\sqlite\sqlite3.c	137802;"	d	file:
FTSQUERY_AND	vendor\sqlite\sqlite3.c	131990;"	d	file:
FTSQUERY_NEAR	vendor\sqlite\sqlite3.c	131988;"	d	file:
FTSQUERY_NOT	vendor\sqlite\sqlite3.c	131989;"	d	file:
FTSQUERY_OR	vendor\sqlite\sqlite3.c	131991;"	d	file:
FTSQUERY_PHRASE	vendor\sqlite\sqlite3.c	131992;"	d	file:
FTS_CORRUPT_VTAB	vendor\sqlite\sqlite3.c	131726;"	d	file:
FTS_CORRUPT_VTAB	vendor\sqlite\sqlite3.c	131728;"	d	file:
FTS_MAX_APPENDABLE_HEIGHT	vendor\sqlite\sqlite3.c	141751;"	d	file:
FTS_STAT_AUTOINCRMERGE	vendor\sqlite\sqlite3.c	141798;"	d	file:
FTS_STAT_DOCTOTAL	vendor\sqlite\sqlite3.c	141796;"	d	file:
FTS_STAT_INCRMERGEHINT	vendor\sqlite\sqlite3.c	141797;"	d	file:
FULLY_WITHIN	vendor\sqlite\sqlite3.c	7939;"	d	file:
FUNCTION	vendor\sqlite\sqlite3.c	11161;"	d	file:
FUNCTION2	vendor\sqlite\sqlite3.c	11167;"	d	file:
FUNC_PERFECT_MATCH	vendor\sqlite\sqlite3.c	94572;"	d	file:
FileChunk	vendor\sqlite\sqlite3.c	/^struct FileChunk {$/;"	s	file:
FileChunk	vendor\sqlite\sqlite3.c	/^typedef struct FileChunk FileChunk;$/;"	t	typeref:struct:FileChunk	file:
FilePoint	vendor\sqlite\sqlite3.c	/^struct FilePoint {$/;"	s	file:
FilePoint	vendor\sqlite\sqlite3.c	/^typedef struct FilePoint FilePoint;$/;"	t	typeref:struct:FilePoint	file:
Fts3Cursor	vendor\sqlite\sqlite3.c	/^struct Fts3Cursor {$/;"	s	file:
Fts3Cursor	vendor\sqlite\sqlite3.c	/^typedef struct Fts3Cursor Fts3Cursor;$/;"	t	typeref:struct:Fts3Cursor	file:
Fts3DeferredToken	vendor\sqlite\sqlite3.c	/^struct Fts3DeferredToken {$/;"	s	file:
Fts3DeferredToken	vendor\sqlite\sqlite3.c	/^typedef struct Fts3DeferredToken Fts3DeferredToken;$/;"	t	typeref:struct:Fts3DeferredToken	file:
Fts3Doclist	vendor\sqlite\sqlite3.c	/^struct Fts3Doclist {$/;"	s	file:
Fts3Doclist	vendor\sqlite\sqlite3.c	/^typedef struct Fts3Doclist Fts3Doclist;$/;"	t	typeref:struct:Fts3Doclist	file:
Fts3Expr	vendor\sqlite\sqlite3.c	/^struct Fts3Expr {$/;"	s	file:
Fts3Expr	vendor\sqlite\sqlite3.c	/^typedef struct Fts3Expr Fts3Expr;$/;"	t	typeref:struct:Fts3Expr	file:
Fts3Hash	vendor\sqlite\sqlite3.c	/^struct Fts3Hash {$/;"	s	file:
Fts3Hash	vendor\sqlite\sqlite3.c	/^typedef struct Fts3Hash Fts3Hash;$/;"	t	typeref:struct:Fts3Hash	file:
Fts3HashElem	vendor\sqlite\sqlite3.c	/^struct Fts3HashElem {$/;"	s	file:
Fts3HashElem	vendor\sqlite\sqlite3.c	/^typedef struct Fts3HashElem Fts3HashElem;$/;"	t	typeref:struct:Fts3HashElem	file:
Fts3Index	vendor\sqlite\sqlite3.c	/^  struct Fts3Index {$/;"	s	struct:Fts3Table	file:
Fts3MultiSegReader	vendor\sqlite\sqlite3.c	/^struct Fts3MultiSegReader {$/;"	s	file:
Fts3MultiSegReader	vendor\sqlite\sqlite3.c	/^typedef struct Fts3MultiSegReader Fts3MultiSegReader;$/;"	t	typeref:struct:Fts3MultiSegReader	file:
Fts3Phrase	vendor\sqlite\sqlite3.c	/^struct Fts3Phrase {$/;"	s	file:
Fts3Phrase	vendor\sqlite\sqlite3.c	/^typedef struct Fts3Phrase Fts3Phrase;$/;"	t	typeref:struct:Fts3Phrase	file:
Fts3PhraseToken	vendor\sqlite\sqlite3.c	/^struct Fts3PhraseToken {$/;"	s	file:
Fts3PhraseToken	vendor\sqlite\sqlite3.c	/^typedef struct Fts3PhraseToken Fts3PhraseToken;$/;"	t	typeref:struct:Fts3PhraseToken	file:
Fts3SegFilter	vendor\sqlite\sqlite3.c	/^struct Fts3SegFilter {$/;"	s	file:
Fts3SegFilter	vendor\sqlite\sqlite3.c	/^typedef struct Fts3SegFilter Fts3SegFilter;$/;"	t	typeref:struct:Fts3SegFilter	file:
Fts3SegReader	vendor\sqlite\sqlite3.c	/^struct Fts3SegReader {$/;"	s	file:
Fts3SegReader	vendor\sqlite\sqlite3.c	/^typedef struct Fts3SegReader Fts3SegReader;$/;"	t	typeref:struct:Fts3SegReader	file:
Fts3Table	vendor\sqlite\sqlite3.c	/^struct Fts3Table {$/;"	s	file:
Fts3Table	vendor\sqlite\sqlite3.c	/^typedef struct Fts3Table Fts3Table;$/;"	t	typeref:struct:Fts3Table	file:
Fts3TokenAndCost	vendor\sqlite\sqlite3.c	/^struct Fts3TokenAndCost {$/;"	s	file:
Fts3TokenAndCost	vendor\sqlite\sqlite3.c	/^typedef struct Fts3TokenAndCost Fts3TokenAndCost;$/;"	t	typeref:struct:Fts3TokenAndCost	file:
Fts3auxColstats	vendor\sqlite\sqlite3.c	/^  struct Fts3auxColstats {$/;"	s	struct:Fts3auxCursor	file:
Fts3auxCursor	vendor\sqlite\sqlite3.c	/^struct Fts3auxCursor {$/;"	s	file:
Fts3auxCursor	vendor\sqlite\sqlite3.c	/^typedef struct Fts3auxCursor Fts3auxCursor;$/;"	t	typeref:struct:Fts3auxCursor	file:
Fts3auxTable	vendor\sqlite\sqlite3.c	/^struct Fts3auxTable {$/;"	s	file:
Fts3auxTable	vendor\sqlite\sqlite3.c	/^typedef struct Fts3auxTable Fts3auxTable;$/;"	t	typeref:struct:Fts3auxTable	file:
Fts3tokCursor	vendor\sqlite\sqlite3.c	/^struct Fts3tokCursor {$/;"	s	file:
Fts3tokCursor	vendor\sqlite\sqlite3.c	/^typedef struct Fts3tokCursor Fts3tokCursor;$/;"	t	typeref:struct:Fts3tokCursor	file:
Fts3tokTable	vendor\sqlite\sqlite3.c	/^struct Fts3tokTable {$/;"	s	file:
Fts3tokTable	vendor\sqlite\sqlite3.c	/^typedef struct Fts3tokTable Fts3tokTable;$/;"	t	typeref:struct:Fts3tokTable	file:
FuncDef	vendor\sqlite\sqlite3.c	/^struct FuncDef {$/;"	s	file:
FuncDef	vendor\sqlite\sqlite3.c	/^typedef struct FuncDef FuncDef;$/;"	t	typeref:struct:FuncDef	file:
FuncDefHash	vendor\sqlite\sqlite3.c	/^struct FuncDefHash {$/;"	s	file:
FuncDefHash	vendor\sqlite\sqlite3.c	/^typedef struct FuncDefHash FuncDefHash;$/;"	t	typeref:struct:FuncDefHash	file:
FuncDestructor	vendor\sqlite\sqlite3.c	/^struct FuncDestructor {$/;"	s	file:
FuncDestructor	vendor\sqlite\sqlite3.c	/^typedef struct FuncDestructor FuncDestructor;$/;"	t	typeref:struct:FuncDestructor	file:
GETVARINT_INIT	vendor\sqlite\sqlite3.c	132194;"	d	file:
GETVARINT_STEP	vendor\sqlite\sqlite3.c	132191;"	d	file:
GLOBAL	vendor\sqlite\sqlite3.c	9126;"	d	file:
GLOBAL	vendor\sqlite\sqlite3.c	9132;"	d	file:
GlobUpperToLower	vendor\sqlite\sqlite3.c	96223;"	d	file:
GlobUpperToLower	vendor\sqlite\sqlite3.c	96226;"	d	file:
GlobUpperToLowerAscii	vendor\sqlite\sqlite3.c	96224;"	d	file:
GlobUpperToLowerAscii	vendor\sqlite\sqlite3.c	96227;"	d	file:
HANDLE_TO_WINFILE	vendor\sqlite\sqlite3.c	35012;"	d	file:
HASHSIZE	vendor\sqlite\sqlite3.c	149774;"	d	file:
HASHTABLE_HASH_1	vendor\sqlite\sqlite3.c	49137;"	d	file:
HASHTABLE_NPAGE	vendor\sqlite\sqlite3.c	49136;"	d	file:
HASHTABLE_NPAGE_ONE	vendor\sqlite\sqlite3.c	49145;"	d	file:
HASHTABLE_NSLOT	vendor\sqlite\sqlite3.c	49138;"	d	file:
HAVE_FULLFSYNC	vendor\sqlite\sqlite3.c	28650;"	d	file:
HAVE_FULLFSYNC	vendor\sqlite\sqlite3.c	28652;"	d	file:
HAVE_LOCALTIME_S	vendor\sqlite\sqlite3.c	15546;"	d	file:
HAVE_LOCALTIME_S	vendor\sqlite\sqlite3.c	15547;"	d	file:
HAVE_MREMAP	vendor\sqlite\sqlite3.c	25538;"	d	file:
HAVE_MREMAP	vendor\sqlite\sqlite3.c	25540;"	d	file:
HAVE_UTIME	vendor\sqlite\sqlite3.c	122;"	d	file:
HasRowid	vendor\sqlite\sqlite3.c	11444;"	d	file:
Hash	vendor\sqlite\sqlite3.c	/^struct Hash {$/;"	s	file:
Hash	vendor\sqlite\sqlite3.c	/^typedef struct Hash Hash;$/;"	t	typeref:struct:Hash	file:
HashElem	vendor\sqlite\sqlite3.c	/^struct HashElem {$/;"	s	file:
HashElem	vendor\sqlite\sqlite3.c	/^typedef struct HashElem HashElem;$/;"	t	typeref:struct:HashElem	file:
INCRINIT_NORMAL	vendor\sqlite\sqlite3.c	79250;"	d	file:
INCRINIT_ROOT	vendor\sqlite\sqlite3.c	79252;"	d	file:
INCRINIT_TASK	vendor\sqlite\sqlite3.c	79251;"	d	file:
INT16_TYPE	vendor\sqlite\sqlite3.c	8841;"	d	file:
INT16_TYPE	vendor\sqlite\sqlite3.c	8843;"	d	file:
INT8_TYPE	vendor\sqlite\sqlite3.c	8855;"	d	file:
INT8_TYPE	vendor\sqlite\sqlite3.c	8857;"	d	file:
INTERFACE	vendor\sqlite\sqlite3.c	122284;"	d	file:
INVALID_FILE_ATTRIBUTES	vendor\sqlite\sqlite3.c	33210;"	d	file:
INVALID_SET_FILE_POINTER	vendor\sqlite\sqlite3.c	35364;"	d	file:
IN_DECLARE_VTAB	vendor\sqlite\sqlite3.c	12481;"	d	file:
IN_DECLARE_VTAB	vendor\sqlite\sqlite3.c	12483;"	d	file:
IN_INDEX_EPH	vendor\sqlite\sqlite3.c	13537;"	d	file:
IN_INDEX_INDEX_ASC	vendor\sqlite\sqlite3.c	13538;"	d	file:
IN_INDEX_INDEX_DESC	vendor\sqlite\sqlite3.c	13539;"	d	file:
IN_INDEX_LOOP	vendor\sqlite\sqlite3.c	13546;"	d	file:
IN_INDEX_MEMBERSHIP	vendor\sqlite\sqlite3.c	13545;"	d	file:
IN_INDEX_NOOP	vendor\sqlite\sqlite3.c	13540;"	d	file:
IN_INDEX_NOOP_OK	vendor\sqlite\sqlite3.c	13544;"	d	file:
IN_INDEX_ROWID	vendor\sqlite\sqlite3.c	13536;"	d	file:
IOMETHODS	vendor\sqlite\sqlite3.c	30216;"	d	file:
IOTRACE	vendor\sqlite\sqlite3.c	13595;"	d	file:
IOTRACE	vendor\sqlite\sqlite3.c	13599;"	d	file:
ISAUTOVACUUM	vendor\sqlite\sqlite3.c	52458;"	d	file:
ISAUTOVACUUM	vendor\sqlite\sqlite3.c	52460;"	d	file:
IS_BIG_INT	vendor\sqlite\sqlite3.c	8426;"	d	file:
IS_LOCK_ERROR	vendor\sqlite\sqlite3.c	25190;"	d	file:
IcuCursor	vendor\sqlite\sqlite3.c	/^struct IcuCursor {$/;"	s	file:
IcuCursor	vendor\sqlite\sqlite3.c	/^typedef struct IcuCursor IcuCursor;$/;"	t	typeref:struct:IcuCursor	file:
IcuTokenizer	vendor\sqlite\sqlite3.c	/^struct IcuTokenizer {$/;"	s	file:
IcuTokenizer	vendor\sqlite\sqlite3.c	/^typedef struct IcuTokenizer IcuTokenizer;$/;"	t	typeref:struct:IcuTokenizer	file:
IdChar	vendor\sqlite\sqlite3.c	126067;"	d	file:
IdChar	vendor\sqlite\sqlite3.c	126085;"	d	file:
IdChar	vendor\sqlite\sqlite3.c	126533;"	d	file:
IdChar	vendor\sqlite\sqlite3.c	126537;"	d	file:
IdList	vendor\sqlite\sqlite3.c	/^struct IdList {$/;"	s	file:
IdList	vendor\sqlite\sqlite3.c	/^typedef struct IdList IdList;$/;"	t	typeref:struct:IdList	file:
IdList_item	vendor\sqlite\sqlite3.c	/^  struct IdList_item {$/;"	s	struct:IdList	file:
IfNotOmitAV	vendor\sqlite\sqlite3.c	52841;"	d	file:
IfNotOmitAV	vendor\sqlite\sqlite3.c	52843;"	d	file:
IgnorableOrderby	vendor\sqlite\sqlite3.c	12265;"	d	file:
InLoop	vendor\sqlite\sqlite3.c	/^      struct InLoop {$/;"	s	struct:WhereLevel::__anon19::__anon20	file:
IncrMerger	vendor\sqlite\sqlite3.c	/^struct IncrMerger {$/;"	s	file:
IncrMerger	vendor\sqlite\sqlite3.c	/^typedef struct IncrMerger IncrMerger;       \/* Read & merge multiple PMAs *\/$/;"	t	typeref:struct:IncrMerger	file:
Incrblob	vendor\sqlite\sqlite3.c	/^struct Incrblob {$/;"	s	file:
Incrblob	vendor\sqlite\sqlite3.c	/^typedef struct Incrblob Incrblob;$/;"	t	typeref:struct:Incrblob	file:
IncrmergeWriter	vendor\sqlite\sqlite3.c	/^struct IncrmergeWriter {$/;"	s	file:
IncrmergeWriter	vendor\sqlite\sqlite3.c	/^typedef struct IncrmergeWriter IncrmergeWriter;$/;"	t	typeref:struct:IncrmergeWriter	file:
Index	vendor\sqlite\sqlite3.c	/^struct Index {$/;"	s	file:
Index	vendor\sqlite\sqlite3.c	/^typedef struct Index Index;$/;"	t	typeref:struct:Index	file:
IndexSample	vendor\sqlite\sqlite3.c	/^struct IndexSample {$/;"	s	file:
IndexSample	vendor\sqlite\sqlite3.c	/^typedef struct IndexSample IndexSample;$/;"	t	typeref:struct:IndexSample	file:
InitData	vendor\sqlite\sqlite3.c	/^} InitData;$/;"	t	typeref:struct:__anon10	file:
IntegrityCk	vendor\sqlite\sqlite3.c	/^struct IntegrityCk {$/;"	s	file:
IntegrityCk	vendor\sqlite\sqlite3.c	/^typedef struct IntegrityCk IntegrityCk;$/;"	t	typeref:struct:IntegrityCk	file:
IsHiddenColumn	vendor\sqlite\sqlite3.c	11437;"	d	file:
IsHiddenColumn	vendor\sqlite\sqlite3.c	11440;"	d	file:
IsPowerOfTwo	vendor\sqlite\sqlite3.c	9098;"	d	file:
IsPrimaryKeyIndex	vendor\sqlite\sqlite3.c	11644;"	d	file:
IsStat3	vendor\sqlite\sqlite3.c	87428;"	d	file:
IsStat3	vendor\sqlite\sqlite3.c	87431;"	d	file:
IsStat3	vendor\sqlite\sqlite3.c	87434;"	d	file:
IsStat34	vendor\sqlite\sqlite3.c	87438;"	d	file:
IsStat4	vendor\sqlite\sqlite3.c	87427;"	d	file:
IsStat4	vendor\sqlite\sqlite3.c	87430;"	d	file:
IsStat4	vendor\sqlite\sqlite3.c	87433;"	d	file:
IsUniqueIndex	vendor\sqlite\sqlite3.c	11647;"	d	file:
IsVirtual	vendor\sqlite\sqlite3.c	11436;"	d	file:
IsVirtual	vendor\sqlite\sqlite3.c	11439;"	d	file:
JOURNAL_CHUNKSIZE	vendor\sqlite\sqlite3.c	80176;"	d	file:
JOURNAL_HDR_SZ	vendor\sqlite\sqlite3.c	42139;"	d	file:
JOURNAL_PG_SZ	vendor\sqlite\sqlite3.c	42133;"	d	file:
JT_CROSS	vendor\sqlite\sqlite3.c	12050;"	d	file:
JT_ERROR	vendor\sqlite\sqlite3.c	12055;"	d	file:
JT_INNER	vendor\sqlite\sqlite3.c	12049;"	d	file:
JT_LEFT	vendor\sqlite\sqlite3.c	12052;"	d	file:
JT_NATURAL	vendor\sqlite\sqlite3.c	12051;"	d	file:
JT_OUTER	vendor\sqlite\sqlite3.c	12054;"	d	file:
JT_RIGHT	vendor\sqlite\sqlite3.c	12053;"	d	file:
JournalFile	vendor\sqlite\sqlite3.c	/^struct JournalFile {$/;"	s	file:
JournalFile	vendor\sqlite\sqlite3.c	/^typedef struct JournalFile JournalFile;$/;"	t	typeref:struct:JournalFile	file:
JournalFileMethods	vendor\sqlite\sqlite3.c	/^static struct sqlite3_io_methods JournalFileMethods = {$/;"	v	typeref:struct:sqlite3_io_methods	file:
KeyClass	vendor\sqlite\sqlite3.c	/^typedef struct KeyClass KeyClass;$/;"	t	typeref:struct:KeyClass	file:
KeyInfo	vendor\sqlite\sqlite3.c	/^struct KeyInfo {$/;"	s	file:
KeyInfo	vendor\sqlite\sqlite3.c	/^typedef struct KeyInfo KeyInfo;$/;"	t	typeref:struct:KeyInfo	file:
LARGEST_INT64	vendor\sqlite\sqlite3.c	134905;"	d	file:
LARGEST_INT64	vendor\sqlite\sqlite3.c	8958;"	d	file:
LCS_ITERATOR_FINISHED	vendor\sqlite\sqlite3.c	148285;"	d	file:
LIKEFUNC	vendor\sqlite\sqlite3.c	11173;"	d	file:
LOCKFILE_EXCLUSIVE_LOCK	vendor\sqlite\sqlite3.c	35843;"	d	file:
LOCKFILE_FAIL_IMMEDIATELY	vendor\sqlite\sqlite3.c	35839;"	d	file:
LOGMAX	vendor\sqlite\sqlite3.c	18410;"	d	file:
LONGDOUBLE_TYPE	vendor\sqlite\sqlite3.c	8716;"	d	file:
LONGDOUBLE_TYPE	vendor\sqlite\sqlite3.c	8861;"	d	file:
LcsIterator	vendor\sqlite\sqlite3.c	/^struct LcsIterator {$/;"	s	file:
LcsIterator	vendor\sqlite\sqlite3.c	/^typedef struct LcsIterator LcsIterator;$/;"	t	typeref:struct:LcsIterator	file:
LikeOp	vendor\sqlite\sqlite3.c	/^struct LikeOp {$/;"	s	file:
LimitVal	vendor\sqlite\sqlite3.c	/^struct LimitVal {$/;"	s	file:
LoadDoclistCtx	vendor\sqlite\sqlite3.c	/^struct LoadDoclistCtx {$/;"	s	file:
LoadDoclistCtx	vendor\sqlite\sqlite3.c	/^typedef struct LoadDoclistCtx LoadDoclistCtx;$/;"	t	typeref:struct:LoadDoclistCtx	file:
LogEst	vendor\sqlite\sqlite3.c	/^typedef INT16_TYPE LogEst;$/;"	t	file:
Lookaside	vendor\sqlite\sqlite3.c	/^struct Lookaside {$/;"	s	file:
Lookaside	vendor\sqlite\sqlite3.c	/^typedef struct Lookaside Lookaside;$/;"	t	typeref:struct:Lookaside	file:
LookasideSlot	vendor\sqlite\sqlite3.c	/^struct LookasideSlot {$/;"	s	file:
LookasideSlot	vendor\sqlite\sqlite3.c	/^typedef struct LookasideSlot LookasideSlot;$/;"	t	typeref:struct:LookasideSlot	file:
M	vendor\sqlite\sqlite3.c	/^  int Y, M, D;       \/* Year, month, and day *\/$/;"	m	struct:DateTime	file:
MASKBIT	vendor\sqlite\sqlite3.c	11994;"	d	file:
MASKBIT32	vendor\sqlite\sqlite3.c	11995;"	d	file:
MASTER_NAME	vendor\sqlite\sqlite3.c	9076;"	d	file:
MASTER_ROOT	vendor\sqlite\sqlite3.c	9082;"	d	file:
MAX	vendor\sqlite\sqlite3.c	131631;"	d	file:
MAX	vendor\sqlite\sqlite3.c	150033;"	d	file:
MAX	vendor\sqlite\sqlite3.c	8801;"	d	file:
MAX_6BYTE	vendor\sqlite\sqlite3.c	67195;"	d	file:
MAX_INCR_PHRASE_TOKENS	vendor\sqlite\sqlite3.c	135976;"	d	file:
MAX_PATH	vendor\sqlite\sqlite3.c	33096;"	d	file:
MAX_PATHNAME	vendor\sqlite\sqlite3.c	25180;"	d	file:
MAX_ROWID	vendor\sqlite\sqlite3.c	74316;"	d	file:
MAX_SECTOR_SIZE	vendor\sqlite\sqlite3.c	41798;"	d	file:
MEM5LINK	vendor\sqlite\sqlite3.c	18473;"	d	file:
MEMCELLSIZE	vendor\sqlite\sqlite3.c	63509;"	d	file:
MEMDB	vendor\sqlite\sqlite3.c	42148;"	d	file:
MEMDB	vendor\sqlite\sqlite3.c	42150;"	d	file:
MEMTYPE_HEAP	vendor\sqlite\sqlite3.c	13640;"	d	file:
MEMTYPE_LOOKASIDE	vendor\sqlite\sqlite3.c	13641;"	d	file:
MEMTYPE_PCACHE	vendor\sqlite\sqlite3.c	13643;"	d	file:
MEMTYPE_SCRATCH	vendor\sqlite\sqlite3.c	13642;"	d	file:
MEM_AffMask	vendor\sqlite\sqlite3.c	14571;"	d	file:
MEM_Agg	vendor\sqlite\sqlite3.c	14588;"	d	file:
MEM_Blob	vendor\sqlite\sqlite3.c	14570;"	d	file:
MEM_Cleared	vendor\sqlite\sqlite3.c	14575;"	d	file:
MEM_Dyn	vendor\sqlite\sqlite3.c	14585;"	d	file:
MEM_Ephem	vendor\sqlite\sqlite3.c	14587;"	d	file:
MEM_Frame	vendor\sqlite\sqlite3.c	14573;"	d	file:
MEM_Int	vendor\sqlite\sqlite3.c	14568;"	d	file:
MEM_Null	vendor\sqlite\sqlite3.c	14566;"	d	file:
MEM_Real	vendor\sqlite\sqlite3.c	14569;"	d	file:
MEM_RowSet	vendor\sqlite\sqlite3.c	14572;"	d	file:
MEM_Static	vendor\sqlite\sqlite3.c	14586;"	d	file:
MEM_Str	vendor\sqlite\sqlite3.c	14567;"	d	file:
MEM_Term	vendor\sqlite\sqlite3.c	14584;"	d	file:
MEM_TypeMask	vendor\sqlite\sqlite3.c	14576;"	d	file:
MEM_Undefined	vendor\sqlite\sqlite3.c	14574;"	d	file:
MEM_Zero	vendor\sqlite\sqlite3.c	14589;"	d	file:
MEM_Zero	vendor\sqlite\sqlite3.c	14591;"	d	file:
MEM_Zero	vendor\sqlite\sqlite3.c	14592;"	d	file:
MIN	vendor\sqlite\sqlite3.c	131628;"	d	file:
MIN	vendor\sqlite\sqlite3.c	150036;"	d	file:
MIN	vendor\sqlite\sqlite3.c	8800;"	d	file:
MUTEX_LOGIC	vendor\sqlite\sqlite3.c	10703;"	d	file:
MUTEX_LOGIC	vendor\sqlite\sqlite3.c	10705;"	d	file:
MX_CELL	vendor\sqlite\sqlite3.c	52042;"	d	file:
MX_CELL_SIZE	vendor\sqlite\sqlite3.c	52035;"	d	file:
MX_CLOSE_ATTEMPT	vendor\sqlite\sqlite3.c	35444;"	d	file:
MX_SMALL	vendor\sqlite\sqlite3.c	17683;"	d	file:
MatchInfo	vendor\sqlite\sqlite3.c	/^struct MatchInfo {$/;"	s	file:
MatchInfo	vendor\sqlite\sqlite3.c	/^typedef struct MatchInfo MatchInfo;$/;"	t	typeref:struct:MatchInfo	file:
Mem	vendor\sqlite\sqlite3.c	/^struct Mem {$/;"	s	file:
Mem	vendor\sqlite\sqlite3.c	/^typedef struct Mem Mem;$/;"	t	typeref:struct:Mem	file:
Mem0Global	vendor\sqlite\sqlite3.c	/^static SQLITE_WSD struct Mem0Global {$/;"	s	file:
Mem3Block	vendor\sqlite\sqlite3.c	/^struct Mem3Block {$/;"	s	file:
Mem3Block	vendor\sqlite\sqlite3.c	/^typedef struct Mem3Block Mem3Block;$/;"	t	typeref:struct:Mem3Block	file:
Mem3Global	vendor\sqlite\sqlite3.c	/^static SQLITE_WSD struct Mem3Global {$/;"	s	file:
Mem5Global	vendor\sqlite\sqlite3.c	/^static SQLITE_WSD struct Mem5Global {$/;"	s	file:
Mem5Link	vendor\sqlite\sqlite3.c	/^struct Mem5Link {$/;"	s	file:
Mem5Link	vendor\sqlite\sqlite3.c	/^typedef struct Mem5Link Mem5Link;$/;"	t	typeref:struct:Mem5Link	file:
MemBlockHdr	vendor\sqlite\sqlite3.c	/^struct MemBlockHdr {$/;"	s	file:
MemJournal	vendor\sqlite\sqlite3.c	/^struct MemJournal {$/;"	s	file:
MemJournal	vendor\sqlite\sqlite3.c	/^typedef struct MemJournal MemJournal;$/;"	t	typeref:struct:MemJournal	file:
MemJournalMethods	vendor\sqlite\sqlite3.c	/^static const struct sqlite3_io_methods MemJournalMethods = {$/;"	v	typeref:struct:sqlite3_io_methods	file:
MemPage	vendor\sqlite\sqlite3.c	/^struct MemPage {$/;"	s	file:
MemPage	vendor\sqlite\sqlite3.c	/^typedef struct MemPage MemPage;$/;"	t	typeref:struct:MemPage	file:
MemSetTypeFlag	vendor\sqlite\sqlite3.c	14598;"	d	file:
MemValue	vendor\sqlite\sqlite3.c	/^  union MemValue {$/;"	u	struct:Mem	file:
MergeEngine	vendor\sqlite\sqlite3.c	/^struct MergeEngine {$/;"	s	file:
MergeEngine	vendor\sqlite\sqlite3.c	/^typedef struct MergeEngine MergeEngine;     \/* Merge PMAs together *\/$/;"	t	typeref:struct:MergeEngine	file:
Module	vendor\sqlite\sqlite3.c	/^struct Module {$/;"	s	file:
Module	vendor\sqlite\sqlite3.c	/^typedef struct Module Module;$/;"	t	typeref:struct:Module	file:
NB	vendor\sqlite\sqlite3.c	59180;"	d	file:
NCELL	vendor\sqlite\sqlite3.c	149979;"	d	file:
NCSIZE	vendor\sqlite\sqlite3.c	17187;"	d	file:
NC_AllowAgg	vendor\sqlite\sqlite3.c	12123;"	d	file:
NC_HasAgg	vendor\sqlite\sqlite3.c	12124;"	d	file:
NC_InAggFunc	vendor\sqlite\sqlite3.c	12126;"	d	file:
NC_IsCheck	vendor\sqlite\sqlite3.c	12125;"	d	file:
NC_MinMaxAgg	vendor\sqlite\sqlite3.c	12128;"	d	file:
NC_PartIdx	vendor\sqlite\sqlite3.c	12127;"	d	file:
NDEBUG	vendor\sqlite\sqlite3.c	131288;"	d	file:
NDEBUG	vendor\sqlite\sqlite3.c	131708;"	d	file:
NDEBUG	vendor\sqlite\sqlite3.c	8336;"	d	file:
NDEBUG	vendor\sqlite\sqlite3.c	8339;"	d	file:
NDELAY	vendor\sqlite\sqlite3.c	128249;"	d	file:
NEVER	vendor\sqlite\sqlite3.c	131684;"	d	file:
NEVER	vendor\sqlite\sqlite3.c	131687;"	d	file:
NEVER	vendor\sqlite\sqlite3.c	8412;"	d	file:
NEVER	vendor\sqlite\sqlite3.c	8415;"	d	file:
NEVER	vendor\sqlite\sqlite3.c	8418;"	d	file:
NN	vendor\sqlite\sqlite3.c	59179;"	d	file:
NOT_WITHIN	vendor\sqlite\sqlite3.c	7937;"	d	file:
NO_LOCK	vendor\sqlite\sqlite3.c	10507;"	d	file:
NTDDI_WIN8	vendor\sqlite\sqlite3.c	33073;"	d	file:
NTDDI_WINBLUE	vendor\sqlite\sqlite3.c	33077;"	d	file:
N_HASH	vendor\sqlite\sqlite3.c	17689;"	d	file:
N_OR_COST	vendor\sqlite\sqlite3.c	115016;"	d	file:
N_SORT_BUCKET	vendor\sqlite\sqlite3.c	39560;"	d	file:
N_STATEMENT	vendor\sqlite\sqlite3.c	152681;"	d	file:
NameContext	vendor\sqlite\sqlite3.c	/^struct NameContext {$/;"	s	file:
NameContext	vendor\sqlite\sqlite3.c	/^typedef struct NameContext NameContext;$/;"	t	typeref:struct:NameContext	file:
NodeReader	vendor\sqlite\sqlite3.c	/^struct NodeReader {$/;"	s	file:
NodeReader	vendor\sqlite\sqlite3.c	/^typedef struct NodeReader NodeReader;$/;"	t	typeref:struct:NodeReader	file:
NodeWriter	vendor\sqlite\sqlite3.c	/^struct NodeWriter {$/;"	s	file:
NodeWriter	vendor\sqlite\sqlite3.c	/^typedef struct NodeWriter NodeWriter;$/;"	t	typeref:struct:NodeWriter	file:
OE_Abort	vendor\sqlite\sqlite3.c	11518;"	d	file:
OE_Cascade	vendor\sqlite\sqlite3.c	11526;"	d	file:
OE_Default	vendor\sqlite\sqlite3.c	11528;"	d	file:
OE_Fail	vendor\sqlite\sqlite3.c	11519;"	d	file:
OE_Ignore	vendor\sqlite\sqlite3.c	11520;"	d	file:
OE_None	vendor\sqlite\sqlite3.c	11516;"	d	file:
OE_Replace	vendor\sqlite\sqlite3.c	11521;"	d	file:
OE_Restrict	vendor\sqlite\sqlite3.c	11523;"	d	file:
OE_Rollback	vendor\sqlite\sqlite3.c	11517;"	d	file:
OE_SetDflt	vendor\sqlite\sqlite3.c	11525;"	d	file:
OE_SetNull	vendor\sqlite\sqlite3.c	11524;"	d	file:
OMIT_TEMPDB	vendor\sqlite\sqlite3.c	8735;"	d	file:
OMIT_TEMPDB	vendor\sqlite\sqlite3.c	8737;"	d	file:
ONE_BYTE_INT	vendor\sqlite\sqlite3.c	67341;"	d	file:
OPFLAG_APPEND	vendor\sqlite\sqlite3.c	12502;"	d	file:
OPFLAG_BULKCSR	vendor\sqlite\sqlite3.c	12506;"	d	file:
OPFLAG_EPHEM	vendor\sqlite\sqlite3.c	12499;"	d	file:
OPFLAG_ISUPDATE	vendor\sqlite\sqlite3.c	12501;"	d	file:
OPFLAG_LASTROWID	vendor\sqlite\sqlite3.c	12500;"	d	file:
OPFLAG_LENGTHARG	vendor\sqlite\sqlite3.c	12504;"	d	file:
OPFLAG_NCHANGE	vendor\sqlite\sqlite3.c	12498;"	d	file:
OPFLAG_P2ISREG	vendor\sqlite\sqlite3.c	12507;"	d	file:
OPFLAG_PERMUTE	vendor\sqlite\sqlite3.c	12508;"	d	file:
OPFLAG_TYPEOFARG	vendor\sqlite\sqlite3.c	12505;"	d	file:
OPFLAG_USESEEKRESULT	vendor\sqlite\sqlite3.c	12503;"	d	file:
OPFLG_IN1	vendor\sqlite\sqlite3.c	9806;"	d	file:
OPFLG_IN2	vendor\sqlite\sqlite3.c	9807;"	d	file:
OPFLG_IN3	vendor\sqlite\sqlite3.c	9808;"	d	file:
OPFLG_INITIALIZER	vendor\sqlite\sqlite3.c	9811;"	d	file:
OPFLG_JUMP	vendor\sqlite\sqlite3.c	9804;"	d	file:
OPFLG_OUT2	vendor\sqlite\sqlite3.c	9809;"	d	file:
OPFLG_OUT2_PRERELEASE	vendor\sqlite\sqlite3.c	9805;"	d	file:
OPFLG_OUT3	vendor\sqlite\sqlite3.c	9810;"	d	file:
OP_Add	vendor\sqlite\sqlite3.c	9729;"	d	file:
OP_AddImm	vendor\sqlite\sqlite3.c	9677;"	d	file:
OP_Affinity	vendor\sqlite\sqlite3.c	9688;"	d	file:
OP_AggFinal	vendor\sqlite\sqlite3.c	9782;"	d	file:
OP_AggStep	vendor\sqlite\sqlite3.c	9650;"	d	file:
OP_And	vendor\sqlite\sqlite3.c	9712;"	d	file:
OP_AutoCommit	vendor\sqlite\sqlite3.c	9643;"	d	file:
OP_BitAnd	vendor\sqlite\sqlite3.c	9725;"	d	file:
OP_BitNot	vendor\sqlite\sqlite3.c	9736;"	d	file:
OP_BitOr	vendor\sqlite\sqlite3.c	9726;"	d	file:
OP_Blob	vendor\sqlite\sqlite3.c	9670;"	d	file:
OP_Cast	vendor\sqlite\sqlite3.c	9680;"	d	file:
OP_Checkpoint	vendor\sqlite\sqlite3.c	9651;"	d	file:
OP_Clear	vendor\sqlite\sqlite3.c	9758;"	d	file:
OP_Close	vendor\sqlite\sqlite3.c	9701;"	d	file:
OP_CollSeq	vendor\sqlite\sqlite3.c	9676;"	d	file:
OP_Column	vendor\sqlite\sqlite3.c	9687;"	d	file:
OP_Compare	vendor\sqlite\sqlite3.c	9682;"	d	file:
OP_Concat	vendor\sqlite\sqlite3.c	9734;"	d	file:
OP_Copy	vendor\sqlite\sqlite3.c	9673;"	d	file:
OP_Count	vendor\sqlite\sqlite3.c	9690;"	d	file:
OP_CreateIndex	vendor\sqlite\sqlite3.c	9760;"	d	file:
OP_CreateTable	vendor\sqlite\sqlite3.c	9761;"	d	file:
OP_DecrJumpZero	vendor\sqlite\sqlite3.c	9780;"	d	file:
OP_Delete	vendor\sqlite\sqlite3.c	9735;"	d	file:
OP_Destroy	vendor\sqlite\sqlite3.c	9757;"	d	file:
OP_Divide	vendor\sqlite\sqlite3.c	9732;"	d	file:
OP_DropIndex	vendor\sqlite\sqlite3.c	9765;"	d	file:
OP_DropTable	vendor\sqlite\sqlite3.c	9764;"	d	file:
OP_DropTrigger	vendor\sqlite\sqlite3.c	9766;"	d	file:
OP_EndCoroutine	vendor\sqlite\sqlite3.c	9661;"	d	file:
OP_Eq	vendor\sqlite\sqlite3.c	9719;"	d	file:
OP_Expire	vendor\sqlite\sqlite3.c	9784;"	d	file:
OP_Explain	vendor\sqlite\sqlite3.c	9797;"	d	file:
OP_FkCounter	vendor\sqlite\sqlite3.c	9774;"	d	file:
OP_FkIfZero	vendor\sqlite\sqlite3.c	9775;"	d	file:
OP_Found	vendor\sqlite\sqlite3.c	9709;"	d	file:
OP_Function	vendor\sqlite\sqlite3.c	9641;"	d	file:
OP_Ge	vendor\sqlite\sqlite3.c	9723;"	d	file:
OP_Gosub	vendor\sqlite\sqlite3.c	9657;"	d	file:
OP_Goto	vendor\sqlite\sqlite3.c	9656;"	d	file:
OP_Gt	vendor\sqlite\sqlite3.c	9720;"	d	file:
OP_Halt	vendor\sqlite\sqlite3.c	9664;"	d	file:
OP_HaltIfNull	vendor\sqlite\sqlite3.c	9663;"	d	file:
OP_IdxDelete	vendor\sqlite\sqlite3.c	9751;"	d	file:
OP_IdxGE	vendor\sqlite\sqlite3.c	9756;"	d	file:
OP_IdxGT	vendor\sqlite\sqlite3.c	9754;"	d	file:
OP_IdxInsert	vendor\sqlite\sqlite3.c	9750;"	d	file:
OP_IdxLE	vendor\sqlite\sqlite3.c	9753;"	d	file:
OP_IdxLT	vendor\sqlite\sqlite3.c	9755;"	d	file:
OP_IdxRowid	vendor\sqlite\sqlite3.c	9752;"	d	file:
OP_If	vendor\sqlite\sqlite3.c	9685;"	d	file:
OP_IfNeg	vendor\sqlite\sqlite3.c	9778;"	d	file:
OP_IfNot	vendor\sqlite\sqlite3.c	9686;"	d	file:
OP_IfNotZero	vendor\sqlite\sqlite3.c	9779;"	d	file:
OP_IfPos	vendor\sqlite\sqlite3.c	9777;"	d	file:
OP_IncrVacuum	vendor\sqlite\sqlite3.c	9783;"	d	file:
OP_Init	vendor\sqlite\sqlite3.c	9795;"	d	file:
OP_InitCoroutine	vendor\sqlite\sqlite3.c	9660;"	d	file:
OP_Insert	vendor\sqlite\sqlite3.c	9715;"	d	file:
OP_InsertInt	vendor\sqlite\sqlite3.c	9724;"	d	file:
OP_Int64	vendor\sqlite\sqlite3.c	9666;"	d	file:
OP_Integer	vendor\sqlite\sqlite3.c	9665;"	d	file:
OP_IntegrityCk	vendor\sqlite\sqlite3.c	9767;"	d	file:
OP_IsNull	vendor\sqlite\sqlite3.c	9716;"	d	file:
OP_JournalMode	vendor\sqlite\sqlite3.c	9652;"	d	file:
OP_Jump	vendor\sqlite\sqlite3.c	9683;"	d	file:
OP_JumpZeroIncr	vendor\sqlite\sqlite3.c	9781;"	d	file:
OP_Last	vendor\sqlite\sqlite3.c	9745;"	d	file:
OP_Le	vendor\sqlite\sqlite3.c	9721;"	d	file:
OP_LoadAnalysis	vendor\sqlite\sqlite3.c	9763;"	d	file:
OP_Lt	vendor\sqlite\sqlite3.c	9722;"	d	file:
OP_MakeRecord	vendor\sqlite\sqlite3.c	9689;"	d	file:
OP_MaxPgcnt	vendor\sqlite\sqlite3.c	9794;"	d	file:
OP_MemMax	vendor\sqlite\sqlite3.c	9776;"	d	file:
OP_Move	vendor\sqlite\sqlite3.c	9672;"	d	file:
OP_Multiply	vendor\sqlite\sqlite3.c	9731;"	d	file:
OP_MustBeInt	vendor\sqlite\sqlite3.c	9678;"	d	file:
OP_Ne	vendor\sqlite\sqlite3.c	9718;"	d	file:
OP_NewRowid	vendor\sqlite\sqlite3.c	9714;"	d	file:
OP_Next	vendor\sqlite\sqlite3.c	9649;"	d	file:
OP_NextIfOpen	vendor\sqlite\sqlite3.c	9647;"	d	file:
OP_NoConflict	vendor\sqlite\sqlite3.c	9707;"	d	file:
OP_Noop	vendor\sqlite\sqlite3.c	9796;"	d	file:
OP_Not	vendor\sqlite\sqlite3.c	9659;"	d	file:
OP_NotExists	vendor\sqlite\sqlite3.c	9710;"	d	file:
OP_NotFound	vendor\sqlite\sqlite3.c	9708;"	d	file:
OP_NotNull	vendor\sqlite\sqlite3.c	9717;"	d	file:
OP_Null	vendor\sqlite\sqlite3.c	9668;"	d	file:
OP_NullRow	vendor\sqlite\sqlite3.c	9744;"	d	file:
OP_Once	vendor\sqlite\sqlite3.c	9684;"	d	file:
OP_OpenAutoindex	vendor\sqlite\sqlite3.c	9696;"	d	file:
OP_OpenEphemeral	vendor\sqlite\sqlite3.c	9697;"	d	file:
OP_OpenPseudo	vendor\sqlite\sqlite3.c	9700;"	d	file:
OP_OpenRead	vendor\sqlite\sqlite3.c	9694;"	d	file:
OP_OpenWrite	vendor\sqlite\sqlite3.c	9695;"	d	file:
OP_Or	vendor\sqlite\sqlite3.c	9711;"	d	file:
OP_Pagecount	vendor\sqlite\sqlite3.c	9793;"	d	file:
OP_Param	vendor\sqlite\sqlite3.c	9772;"	d	file:
OP_ParseSchema	vendor\sqlite\sqlite3.c	9762;"	d	file:
OP_Permutation	vendor\sqlite\sqlite3.c	9681;"	d	file:
OP_Prev	vendor\sqlite\sqlite3.c	9648;"	d	file:
OP_PrevIfOpen	vendor\sqlite\sqlite3.c	9646;"	d	file:
OP_Program	vendor\sqlite\sqlite3.c	9771;"	d	file:
OP_ReadCookie	vendor\sqlite\sqlite3.c	9691;"	d	file:
OP_Real	vendor\sqlite\sqlite3.c	9773;"	d	file:
OP_RealAffinity	vendor\sqlite\sqlite3.c	9679;"	d	file:
OP_Remainder	vendor\sqlite\sqlite3.c	9733;"	d	file:
OP_ReopenIdx	vendor\sqlite\sqlite3.c	9693;"	d	file:
OP_ResetCount	vendor\sqlite\sqlite3.c	9738;"	d	file:
OP_ResetSorter	vendor\sqlite\sqlite3.c	9759;"	d	file:
OP_ResultRow	vendor\sqlite\sqlite3.c	9675;"	d	file:
OP_Return	vendor\sqlite\sqlite3.c	9658;"	d	file:
OP_Rewind	vendor\sqlite\sqlite3.c	9748;"	d	file:
OP_RowData	vendor\sqlite\sqlite3.c	9742;"	d	file:
OP_RowKey	vendor\sqlite\sqlite3.c	9741;"	d	file:
OP_RowSetAdd	vendor\sqlite\sqlite3.c	9768;"	d	file:
OP_RowSetRead	vendor\sqlite\sqlite3.c	9769;"	d	file:
OP_RowSetTest	vendor\sqlite\sqlite3.c	9770;"	d	file:
OP_Rowid	vendor\sqlite\sqlite3.c	9743;"	d	file:
OP_SCopy	vendor\sqlite\sqlite3.c	9674;"	d	file:
OP_Savepoint	vendor\sqlite\sqlite3.c	9642;"	d	file:
OP_Seek	vendor\sqlite\sqlite3.c	9706;"	d	file:
OP_SeekGE	vendor\sqlite\sqlite3.c	9704;"	d	file:
OP_SeekGT	vendor\sqlite\sqlite3.c	9705;"	d	file:
OP_SeekLE	vendor\sqlite\sqlite3.c	9703;"	d	file:
OP_SeekLT	vendor\sqlite\sqlite3.c	9702;"	d	file:
OP_Sequence	vendor\sqlite\sqlite3.c	9713;"	d	file:
OP_SequenceTest	vendor\sqlite\sqlite3.c	9699;"	d	file:
OP_SetCookie	vendor\sqlite\sqlite3.c	9692;"	d	file:
OP_ShiftLeft	vendor\sqlite\sqlite3.c	9727;"	d	file:
OP_ShiftRight	vendor\sqlite\sqlite3.c	9728;"	d	file:
OP_SoftNull	vendor\sqlite\sqlite3.c	9669;"	d	file:
OP_Sort	vendor\sqlite\sqlite3.c	9747;"	d	file:
OP_SorterCompare	vendor\sqlite\sqlite3.c	9739;"	d	file:
OP_SorterData	vendor\sqlite\sqlite3.c	9740;"	d	file:
OP_SorterInsert	vendor\sqlite\sqlite3.c	9749;"	d	file:
OP_SorterNext	vendor\sqlite\sqlite3.c	9645;"	d	file:
OP_SorterOpen	vendor\sqlite\sqlite3.c	9698;"	d	file:
OP_SorterSort	vendor\sqlite\sqlite3.c	9746;"	d	file:
OP_String	vendor\sqlite\sqlite3.c	9667;"	d	file:
OP_String8	vendor\sqlite\sqlite3.c	9737;"	d	file:
OP_Subtract	vendor\sqlite\sqlite3.c	9730;"	d	file:
OP_TableLock	vendor\sqlite\sqlite3.c	9785;"	d	file:
OP_Transaction	vendor\sqlite\sqlite3.c	9644;"	d	file:
OP_VBegin	vendor\sqlite\sqlite3.c	9786;"	d	file:
OP_VColumn	vendor\sqlite\sqlite3.c	9790;"	d	file:
OP_VCreate	vendor\sqlite\sqlite3.c	9787;"	d	file:
OP_VDestroy	vendor\sqlite\sqlite3.c	9788;"	d	file:
OP_VFilter	vendor\sqlite\sqlite3.c	9654;"	d	file:
OP_VNext	vendor\sqlite\sqlite3.c	9791;"	d	file:
OP_VOpen	vendor\sqlite\sqlite3.c	9789;"	d	file:
OP_VRename	vendor\sqlite\sqlite3.c	9792;"	d	file:
OP_VUpdate	vendor\sqlite\sqlite3.c	9655;"	d	file:
OP_Vacuum	vendor\sqlite\sqlite3.c	9653;"	d	file:
OP_Variable	vendor\sqlite\sqlite3.c	9671;"	d	file:
OP_Yield	vendor\sqlite\sqlite3.c	9662;"	d	file:
OSTRACE	vendor\sqlite\sqlite3.c	19709;"	d	file:
OSTRACE	vendor\sqlite\sqlite3.c	19711;"	d	file:
OSTRACE	vendor\sqlite\sqlite3.c	25334;"	d	file:
OSTRACE	vendor\sqlite\sqlite3.c	25336;"	d	file:
OSTRACE	vendor\sqlite\sqlite3.c	32853;"	d	file:
OSTRACE	vendor\sqlite\sqlite3.c	32855;"	d	file:
OS_VXWORKS	vendor\sqlite\sqlite3.c	117;"	d	file:
OS_VXWORKS	vendor\sqlite\sqlite3.c	125;"	d	file:
O_BINARY	vendor\sqlite\sqlite3.c	25520;"	d	file:
O_LARGEFILE	vendor\sqlite\sqlite3.c	25510;"	d	file:
O_LARGEFILE	vendor\sqlite\sqlite3.c	25513;"	d	file:
O_LARGEFILE	vendor\sqlite\sqlite3.c	25514;"	d	file:
O_NOFOLLOW	vendor\sqlite\sqlite3.c	25517;"	d	file:
Op	vendor\sqlite\sqlite3.c	/^typedef struct VdbeOp Op;$/;"	t	typeref:struct:VdbeOp	file:
OpHelp	vendor\sqlite\sqlite3.c	24873;"	d	file:
OpHelp	vendor\sqlite\sqlite3.c	24875;"	d	file:
OpenCounter	vendor\sqlite\sqlite3.c	19871;"	d	file:
OpenCounter	vendor\sqlite\sqlite3.c	19873;"	d	file:
OpenCounter	vendor\sqlite\sqlite3.c	25496;"	d	file:
OpenCounter	vendor\sqlite\sqlite3.c	25498;"	d	file:
OpenCounter	vendor\sqlite\sqlite3.c	33015;"	d	file:
OpenCounter	vendor\sqlite\sqlite3.c	33017;"	d	file:
OptimizationDisabled	vendor\sqlite\sqlite3.c	11051;"	d	file:
OptimizationDisabled	vendor\sqlite\sqlite3.c	11054;"	d	file:
OptimizationEnabled	vendor\sqlite\sqlite3.c	11052;"	d	file:
OptimizationEnabled	vendor\sqlite\sqlite3.c	11055;"	d	file:
P4_ADVANCE	vendor\sqlite\sqlite3.c	9598;"	d	file:
P4_COLLSEQ	vendor\sqlite\sqlite3.c	9586;"	d	file:
P4_DYNAMIC	vendor\sqlite\sqlite3.c	9584;"	d	file:
P4_FUNCDEF	vendor\sqlite\sqlite3.c	9587;"	d	file:
P4_INT32	vendor\sqlite\sqlite3.c	9595;"	d	file:
P4_INT64	vendor\sqlite\sqlite3.c	9594;"	d	file:
P4_INTARRAY	vendor\sqlite\sqlite3.c	9596;"	d	file:
P4_KEYINFO	vendor\sqlite\sqlite3.c	9588;"	d	file:
P4_MEM	vendor\sqlite\sqlite3.c	9589;"	d	file:
P4_MPRINTF	vendor\sqlite\sqlite3.c	9592;"	d	file:
P4_NOTUSED	vendor\sqlite\sqlite3.c	9583;"	d	file:
P4_REAL	vendor\sqlite\sqlite3.c	9593;"	d	file:
P4_STATIC	vendor\sqlite\sqlite3.c	9585;"	d	file:
P4_SUBPROGRAM	vendor\sqlite\sqlite3.c	9597;"	d	file:
P4_TRANSIENT	vendor\sqlite\sqlite3.c	9590;"	d	file:
P4_VTAB	vendor\sqlite\sqlite3.c	9591;"	d	file:
P5_ConstraintCheck	vendor\sqlite\sqlite3.c	9603;"	d	file:
P5_ConstraintFK	vendor\sqlite\sqlite3.c	9604;"	d	file:
P5_ConstraintNotNull	vendor\sqlite\sqlite3.c	9601;"	d	file:
P5_ConstraintUnique	vendor\sqlite\sqlite3.c	9602;"	d	file:
PAGERID	vendor\sqlite\sqlite3.c	41500;"	d	file:
PAGERTRACE	vendor\sqlite\sqlite3.c	41489;"	d	file:
PAGER_CACHESPILL	vendor\sqlite\sqlite3.c	10066;"	d	file:
PAGER_CKPT_FULLFSYNC	vendor\sqlite\sqlite3.c	10065;"	d	file:
PAGER_ERROR	vendor\sqlite\sqlite3.c	41726;"	d	file:
PAGER_FLAGS_MASK	vendor\sqlite\sqlite3.c	10067;"	d	file:
PAGER_FULLFSYNC	vendor\sqlite\sqlite3.c	10064;"	d	file:
PAGER_GET_NOCONTENT	vendor\sqlite\sqlite3.c	10054;"	d	file:
PAGER_GET_READONLY	vendor\sqlite\sqlite3.c	10055;"	d	file:
PAGER_INCR	vendor\sqlite\sqlite3.c	42095;"	d	file:
PAGER_INCR	vendor\sqlite\sqlite3.c	42097;"	d	file:
PAGER_JOURNALMODE_DELETE	vendor\sqlite\sqlite3.c	10044;"	d	file:
PAGER_JOURNALMODE_MEMORY	vendor\sqlite\sqlite3.c	10048;"	d	file:
PAGER_JOURNALMODE_OFF	vendor\sqlite\sqlite3.c	10046;"	d	file:
PAGER_JOURNALMODE_PERSIST	vendor\sqlite\sqlite3.c	10045;"	d	file:
PAGER_JOURNALMODE_QUERY	vendor\sqlite\sqlite3.c	10043;"	d	file:
PAGER_JOURNALMODE_TRUNCATE	vendor\sqlite\sqlite3.c	10047;"	d	file:
PAGER_JOURNALMODE_WAL	vendor\sqlite\sqlite3.c	10049;"	d	file:
PAGER_LOCKINGMODE_EXCLUSIVE	vendor\sqlite\sqlite3.c	10038;"	d	file:
PAGER_LOCKINGMODE_NORMAL	vendor\sqlite\sqlite3.c	10037;"	d	file:
PAGER_LOCKINGMODE_QUERY	vendor\sqlite\sqlite3.c	10036;"	d	file:
PAGER_MAX_PGNO	vendor\sqlite\sqlite3.c	42166;"	d	file:
PAGER_MEMORY	vendor\sqlite\sqlite3.c	10031;"	d	file:
PAGER_MJ_PGNO	vendor\sqlite\sqlite3.c	10023;"	d	file:
PAGER_OMIT_JOURNAL	vendor\sqlite\sqlite3.c	10030;"	d	file:
PAGER_OPEN	vendor\sqlite\sqlite3.c	41720;"	d	file:
PAGER_READER	vendor\sqlite\sqlite3.c	41721;"	d	file:
PAGER_STAT_HIT	vendor\sqlite\sqlite3.c	42082;"	d	file:
PAGER_STAT_MISS	vendor\sqlite\sqlite3.c	42083;"	d	file:
PAGER_STAT_WRITE	vendor\sqlite\sqlite3.c	42084;"	d	file:
PAGER_SYNCHRONOUS_FULL	vendor\sqlite\sqlite3.c	10062;"	d	file:
PAGER_SYNCHRONOUS_MASK	vendor\sqlite\sqlite3.c	10063;"	d	file:
PAGER_SYNCHRONOUS_NORMAL	vendor\sqlite\sqlite3.c	10061;"	d	file:
PAGER_SYNCHRONOUS_OFF	vendor\sqlite\sqlite3.c	10060;"	d	file:
PAGER_WRITER_CACHEMOD	vendor\sqlite\sqlite3.c	41723;"	d	file:
PAGER_WRITER_DBMOD	vendor\sqlite\sqlite3.c	41724;"	d	file:
PAGER_WRITER_FINISHED	vendor\sqlite\sqlite3.c	41725;"	d	file:
PAGER_WRITER_LOCKED	vendor\sqlite\sqlite3.c	41722;"	d	file:
PARTLY_WITHIN	vendor\sqlite\sqlite3.c	7938;"	d	file:
PCACHE_DIRTYLIST_ADD	vendor\sqlite\sqlite3.c	39039;"	d	file:
PCACHE_DIRTYLIST_FRONT	vendor\sqlite\sqlite3.c	39040;"	d	file:
PCACHE_DIRTYLIST_REMOVE	vendor\sqlite\sqlite3.c	39038;"	d	file:
PCache	vendor\sqlite\sqlite3.c	/^struct PCache {$/;"	s	file:
PCache	vendor\sqlite\sqlite3.c	/^typedef struct PCache PCache;$/;"	t	typeref:struct:PCache	file:
PCache1	vendor\sqlite\sqlite3.c	/^struct PCache1 {$/;"	s	file:
PCache1	vendor\sqlite\sqlite3.c	/^typedef struct PCache1 PCache1;$/;"	t	typeref:struct:PCache1	file:
PCacheGlobal	vendor\sqlite\sqlite3.c	/^static SQLITE_WSD struct PCacheGlobal {$/;"	s	file:
PENDING_BYTE	vendor\sqlite\sqlite3.c	10569;"	d	file:
PENDING_BYTE	vendor\sqlite\sqlite3.c	10571;"	d	file:
PENDING_BYTE_PAGE	vendor\sqlite\sqlite3.c	52384;"	d	file:
PENDING_LOCK	vendor\sqlite\sqlite3.c	10510;"	d	file:
PGHDR_DIRTY	vendor\sqlite\sqlite3.c	10237;"	d	file:
PGHDR_DONT_WRITE	vendor\sqlite\sqlite3.c	10242;"	d	file:
PGHDR_MMAP	vendor\sqlite\sqlite3.c	10244;"	d	file:
PGHDR_NEED_READ	vendor\sqlite\sqlite3.c	10240;"	d	file:
PGHDR_NEED_SYNC	vendor\sqlite\sqlite3.c	10238;"	d	file:
PGHDR_REUSE_UNLIKELY	vendor\sqlite\sqlite3.c	10241;"	d	file:
PGroup	vendor\sqlite\sqlite3.c	/^struct PGroup {$/;"	s	file:
PGroup	vendor\sqlite\sqlite3.c	/^typedef struct PGroup PGroup;$/;"	t	typeref:struct:PGroup	file:
POSITION_LIST_END	vendor\sqlite\sqlite3.c	133849;"	d	file:
POS_COLUMN	vendor\sqlite\sqlite3.c	131669;"	d	file:
POS_END	vendor\sqlite\sqlite3.c	131670;"	d	file:
PROXY_CONCHVERSION	vendor\sqlite\sqlite3.c	31880;"	d	file:
PROXY_HEADERLEN	vendor\sqlite\sqlite3.c	31881;"	d	file:
PROXY_HOSTIDLEN	vendor\sqlite\sqlite3.c	31842;"	d	file:
PROXY_MAXCONCHLEN	vendor\sqlite\sqlite3.c	31883;"	d	file:
PROXY_PATHINDEX	vendor\sqlite\sqlite3.c	31882;"	d	file:
PTF_INTKEY	vendor\sqlite\sqlite3.c	52068;"	d	file:
PTF_LEAF	vendor\sqlite\sqlite3.c	52071;"	d	file:
PTF_LEAFDATA	vendor\sqlite\sqlite3.c	52070;"	d	file:
PTF_ZERODATA	vendor\sqlite\sqlite3.c	52069;"	d	file:
PTRMAP_BTREE	vendor\sqlite\sqlite3.c	52440;"	d	file:
PTRMAP_FREEPAGE	vendor\sqlite\sqlite3.c	52437;"	d	file:
PTRMAP_ISPAGE	vendor\sqlite\sqlite3.c	52403;"	d	file:
PTRMAP_OVERFLOW1	vendor\sqlite\sqlite3.c	52438;"	d	file:
PTRMAP_OVERFLOW2	vendor\sqlite\sqlite3.c	52439;"	d	file:
PTRMAP_PAGENO	vendor\sqlite\sqlite3.c	52401;"	d	file:
PTRMAP_PTROFFSET	vendor\sqlite\sqlite3.c	52402;"	d	file:
PTRMAP_ROOTPAGE	vendor\sqlite\sqlite3.c	52436;"	d	file:
Pager	vendor\sqlite\sqlite3.c	/^struct Pager {$/;"	s	file:
Pager	vendor\sqlite\sqlite3.c	/^typedef struct Pager Pager;$/;"	t	typeref:struct:Pager	file:
PagerSavepoint	vendor\sqlite\sqlite3.c	/^struct PagerSavepoint {$/;"	s	file:
PagerSavepoint	vendor\sqlite\sqlite3.c	/^typedef struct PagerSavepoint PagerSavepoint;$/;"	t	typeref:struct:PagerSavepoint	file:
Parse	vendor\sqlite\sqlite3.c	/^struct Parse {$/;"	s	file:
Parse	vendor\sqlite\sqlite3.c	/^typedef struct Parse Parse;$/;"	t	typeref:struct:Parse	file:
ParseContext	vendor\sqlite\sqlite3.c	/^struct ParseContext {$/;"	s	file:
ParseContext	vendor\sqlite\sqlite3.c	/^typedef struct ParseContext ParseContext;$/;"	t	typeref:struct:ParseContext	file:
PendingList	vendor\sqlite\sqlite3.c	/^struct PendingList {$/;"	s	file:
PendingList	vendor\sqlite\sqlite3.c	/^typedef struct PendingList PendingList;$/;"	t	typeref:struct:PendingList	file:
PgFreeslot	vendor\sqlite\sqlite3.c	/^struct PgFreeslot {$/;"	s	file:
PgFreeslot	vendor\sqlite\sqlite3.c	/^typedef struct PgFreeslot PgFreeslot;$/;"	t	typeref:struct:PgFreeslot	file:
PgHdr	vendor\sqlite\sqlite3.c	/^struct PgHdr {$/;"	s	file:
PgHdr	vendor\sqlite\sqlite3.c	/^typedef struct PgHdr PgHdr;$/;"	t	typeref:struct:PgHdr	file:
PgHdr1	vendor\sqlite\sqlite3.c	/^struct PgHdr1 {$/;"	s	file:
PgHdr1	vendor\sqlite\sqlite3.c	/^typedef struct PgHdr1 PgHdr1;$/;"	t	typeref:struct:PgHdr1	file:
Pgno	vendor\sqlite\sqlite3.c	/^typedef u32 Pgno;$/;"	t	file:
PmaReader	vendor\sqlite\sqlite3.c	/^struct PmaReader {$/;"	s	file:
PmaReader	vendor\sqlite\sqlite3.c	/^typedef struct PmaReader PmaReader;         \/* Incrementally read one PMA *\/$/;"	t	typeref:struct:PmaReader	file:
PmaWriter	vendor\sqlite\sqlite3.c	/^struct PmaWriter {$/;"	s	file:
PmaWriter	vendor\sqlite\sqlite3.c	/^typedef struct PmaWriter PmaWriter;         \/* Incrementally write one PMA *\/$/;"	t	typeref:struct:PmaWriter	file:
PragFlag_NeedSchema	vendor\sqlite\sqlite3.c	102387;"	d	file:
PragFlag_ReadOnly	vendor\sqlite\sqlite3.c	102388;"	d	file:
PragTyp_ACTIVATE_EXTENSIONS	vendor\sqlite\sqlite3.c	102381;"	d	file:
PragTyp_AUTO_VACUUM	vendor\sqlite\sqlite3.c	102346;"	d	file:
PragTyp_BUSY_TIMEOUT	vendor\sqlite\sqlite3.c	102348;"	d	file:
PragTyp_CACHE_SIZE	vendor\sqlite\sqlite3.c	102349;"	d	file:
PragTyp_CASE_SENSITIVE_LIKE	vendor\sqlite\sqlite3.c	102350;"	d	file:
PragTyp_COLLATION_LIST	vendor\sqlite\sqlite3.c	102351;"	d	file:
PragTyp_COMPILE_OPTIONS	vendor\sqlite\sqlite3.c	102352;"	d	file:
PragTyp_DATABASE_LIST	vendor\sqlite\sqlite3.c	102354;"	d	file:
PragTyp_DATA_STORE_DIRECTORY	vendor\sqlite\sqlite3.c	102353;"	d	file:
PragTyp_DEFAULT_CACHE_SIZE	vendor\sqlite\sqlite3.c	102355;"	d	file:
PragTyp_ENCODING	vendor\sqlite\sqlite3.c	102356;"	d	file:
PragTyp_FLAG	vendor\sqlite\sqlite3.c	102347;"	d	file:
PragTyp_FOREIGN_KEY_CHECK	vendor\sqlite\sqlite3.c	102357;"	d	file:
PragTyp_FOREIGN_KEY_LIST	vendor\sqlite\sqlite3.c	102358;"	d	file:
PragTyp_HEADER_VALUE	vendor\sqlite\sqlite3.c	102345;"	d	file:
PragTyp_HEXKEY	vendor\sqlite\sqlite3.c	102382;"	d	file:
PragTyp_INCREMENTAL_VACUUM	vendor\sqlite\sqlite3.c	102359;"	d	file:
PragTyp_INDEX_INFO	vendor\sqlite\sqlite3.c	102360;"	d	file:
PragTyp_INDEX_LIST	vendor\sqlite\sqlite3.c	102361;"	d	file:
PragTyp_INTEGRITY_CHECK	vendor\sqlite\sqlite3.c	102362;"	d	file:
PragTyp_JOURNAL_MODE	vendor\sqlite\sqlite3.c	102363;"	d	file:
PragTyp_JOURNAL_SIZE_LIMIT	vendor\sqlite\sqlite3.c	102364;"	d	file:
PragTyp_KEY	vendor\sqlite\sqlite3.c	102383;"	d	file:
PragTyp_LOCKING_MODE	vendor\sqlite\sqlite3.c	102366;"	d	file:
PragTyp_LOCK_PROXY_FILE	vendor\sqlite\sqlite3.c	102365;"	d	file:
PragTyp_LOCK_STATUS	vendor\sqlite\sqlite3.c	102385;"	d	file:
PragTyp_MMAP_SIZE	vendor\sqlite\sqlite3.c	102368;"	d	file:
PragTyp_PAGE_COUNT	vendor\sqlite\sqlite3.c	102367;"	d	file:
PragTyp_PAGE_SIZE	vendor\sqlite\sqlite3.c	102369;"	d	file:
PragTyp_PARSER_TRACE	vendor\sqlite\sqlite3.c	102386;"	d	file:
PragTyp_REKEY	vendor\sqlite\sqlite3.c	102384;"	d	file:
PragTyp_SECURE_DELETE	vendor\sqlite\sqlite3.c	102370;"	d	file:
PragTyp_SHRINK_MEMORY	vendor\sqlite\sqlite3.c	102371;"	d	file:
PragTyp_SOFT_HEAP_LIMIT	vendor\sqlite\sqlite3.c	102372;"	d	file:
PragTyp_STATS	vendor\sqlite\sqlite3.c	102373;"	d	file:
PragTyp_SYNCHRONOUS	vendor\sqlite\sqlite3.c	102374;"	d	file:
PragTyp_TABLE_INFO	vendor\sqlite\sqlite3.c	102375;"	d	file:
PragTyp_TEMP_STORE	vendor\sqlite\sqlite3.c	102376;"	d	file:
PragTyp_TEMP_STORE_DIRECTORY	vendor\sqlite\sqlite3.c	102377;"	d	file:
PragTyp_THREADS	vendor\sqlite\sqlite3.c	102378;"	d	file:
PragTyp_WAL_AUTOCHECKPOINT	vendor\sqlite\sqlite3.c	102379;"	d	file:
PragTyp_WAL_CHECKPOINT	vendor\sqlite\sqlite3.c	102380;"	d	file:
PrintfArguments	vendor\sqlite\sqlite3.c	/^struct PrintfArguments {$/;"	s	file:
PrintfArguments	vendor\sqlite\sqlite3.c	/^typedef struct PrintfArguments PrintfArguments;$/;"	t	typeref:struct:PrintfArguments	file:
READMARK_NOT_USED	vendor\sqlite\sqlite3.c	49011;"	d	file:
READ_LOCK	vendor\sqlite\sqlite3.c	52135;"	d	file:
READ_UTF16BE	vendor\sqlite\sqlite3.c	22808;"	d	file:
READ_UTF16LE	vendor\sqlite\sqlite3.c	22798;"	d	file:
READ_UTF8	vendor\sqlite\sqlite3.c	148959;"	d	file:
READ_UTF8	vendor\sqlite\sqlite3.c	22845;"	d	file:
REARGUARD	vendor\sqlite\sqlite3.c	17182;"	d	file:
REGISTER_TRACE	vendor\sqlite\sqlite3.c	70722;"	d	file:
REGISTER_TRACE	vendor\sqlite\sqlite3.c	70724;"	d	file:
RESERVED_BYTE	vendor\sqlite\sqlite3.c	10573;"	d	file:
RESERVED_LOCK	vendor\sqlite\sqlite3.c	10509;"	d	file:
RNDAWAY	vendor\sqlite\sqlite3.c	152439;"	d	file:
RNDTOWARDS	vendor\sqlite\sqlite3.c	152438;"	d	file:
ROUND8	vendor\sqlite\sqlite3.c	8965;"	d	file:
ROUNDDOWN8	vendor\sqlite\sqlite3.c	8970;"	d	file:
ROWSET_ALLOCATION_SIZE	vendor\sqlite\sqlite3.c	40788;"	d	file:
ROWSET_ENTRY_PER_CHUNK	vendor\sqlite\sqlite3.c	40793;"	d	file:
ROWSET_NEXT	vendor\sqlite\sqlite3.c	40842;"	d	file:
ROWSET_SORTED	vendor\sqlite\sqlite3.c	40841;"	d	file:
RTREE_CACHE_SZ	vendor\sqlite\sqlite3.c	149892;"	d	file:
RTREE_COORD_INT32	vendor\sqlite\sqlite3.c	149830;"	d	file:
RTREE_COORD_REAL32	vendor\sqlite\sqlite3.c	149829;"	d	file:
RTREE_DECODE_COORD	vendor\sqlite\sqlite3.c	150597;"	d	file:
RTREE_DECODE_COORD	vendor\sqlite\sqlite3.c	150605;"	d	file:
RTREE_DECODE_COORD	vendor\sqlite\sqlite3.c	150611;"	d	file:
RTREE_DEFAULT_ROWEST	vendor\sqlite\sqlite3.c	149783;"	d	file:
RTREE_EQ	vendor\sqlite\sqlite3.c	149957;"	d	file:
RTREE_GE	vendor\sqlite\sqlite3.c	149960;"	d	file:
RTREE_GEOMETRY_MAGIC	vendor\sqlite\sqlite3.c	150017;"	d	file:
RTREE_GT	vendor\sqlite\sqlite3.c	149961;"	d	file:
RTREE_LE	vendor\sqlite\sqlite3.c	149958;"	d	file:
RTREE_LT	vendor\sqlite\sqlite3.c	149959;"	d	file:
RTREE_MATCH	vendor\sqlite\sqlite3.c	149962;"	d	file:
RTREE_MAXCELLS	vendor\sqlite\sqlite3.c	149875;"	d	file:
RTREE_MAX_DEPTH	vendor\sqlite\sqlite3.c	149884;"	d	file:
RTREE_MAX_DIMENSIONS	vendor\sqlite\sqlite3.c	149768;"	d	file:
RTREE_MINCELLS	vendor\sqlite\sqlite3.c	149873;"	d	file:
RTREE_MIN_ROWEST	vendor\sqlite\sqlite3.c	149784;"	d	file:
RTREE_OF_CURSOR	vendor\sqlite\sqlite3.c	149914;"	d	file:
RTREE_QUERY	vendor\sqlite\sqlite3.c	149963;"	d	file:
RTREE_QUEUE_TRACE	vendor\sqlite\sqlite3.c	150937;"	d	file:
RTREE_REINSERT	vendor\sqlite\sqlite3.c	149874;"	d	file:
RTREE_ZERO	vendor\sqlite\sqlite3.c	149840;"	d	file:
RTREE_ZERO	vendor\sqlite\sqlite3.c	149844;"	d	file:
RecordCompare	vendor\sqlite\sqlite3.c	/^typedef int (*RecordCompare)(int,const void*,UnpackedRecord*);$/;"	t	file:
Reinsert	vendor\sqlite\sqlite3.c	/^static int Reinsert($/;"	f	file:
RowSet	vendor\sqlite\sqlite3.c	/^struct RowSet {$/;"	s	file:
RowSet	vendor\sqlite\sqlite3.c	/^typedef struct RowSet RowSet;$/;"	t	typeref:struct:RowSet	file:
RowSetChunk	vendor\sqlite\sqlite3.c	/^struct RowSetChunk {$/;"	s	file:
RowSetEntry	vendor\sqlite\sqlite3.c	/^struct RowSetEntry {            $/;"	s	file:
Rtree	vendor\sqlite\sqlite3.c	/^struct Rtree {$/;"	s	file:
Rtree	vendor\sqlite\sqlite3.c	/^typedef struct Rtree Rtree;$/;"	t	typeref:struct:Rtree	file:
RtreeCell	vendor\sqlite\sqlite3.c	/^struct RtreeCell {$/;"	s	file:
RtreeCell	vendor\sqlite\sqlite3.c	/^typedef struct RtreeCell RtreeCell;$/;"	t	typeref:struct:RtreeCell	file:
RtreeConstraint	vendor\sqlite\sqlite3.c	/^struct RtreeConstraint {$/;"	s	file:
RtreeConstraint	vendor\sqlite\sqlite3.c	/^typedef struct RtreeConstraint RtreeConstraint;$/;"	t	typeref:struct:RtreeConstraint	file:
RtreeCoord	vendor\sqlite\sqlite3.c	/^typedef union RtreeCoord RtreeCoord;$/;"	t	typeref:union:RtreeCoord	file:
RtreeCoord	vendor\sqlite\sqlite3.c	/^union RtreeCoord {$/;"	u	file:
RtreeCursor	vendor\sqlite\sqlite3.c	/^struct RtreeCursor {$/;"	s	file:
RtreeCursor	vendor\sqlite\sqlite3.c	/^typedef struct RtreeCursor RtreeCursor;$/;"	t	typeref:struct:RtreeCursor	file:
RtreeDValue	vendor\sqlite\sqlite3.c	/^  typedef double RtreeDValue;              \/* High accuracy coordinate *\/$/;"	t	file:
RtreeDValue	vendor\sqlite\sqlite3.c	/^  typedef sqlite3_int64 RtreeDValue;       \/* High accuracy coordinate *\/$/;"	t	file:
RtreeGeomCallback	vendor\sqlite\sqlite3.c	/^struct RtreeGeomCallback {$/;"	s	file:
RtreeGeomCallback	vendor\sqlite\sqlite3.c	/^typedef struct RtreeGeomCallback RtreeGeomCallback;$/;"	t	typeref:struct:RtreeGeomCallback	file:
RtreeMatchArg	vendor\sqlite\sqlite3.c	/^struct RtreeMatchArg {$/;"	s	file:
RtreeMatchArg	vendor\sqlite\sqlite3.c	/^typedef struct RtreeMatchArg RtreeMatchArg;$/;"	t	typeref:struct:RtreeMatchArg	file:
RtreeNode	vendor\sqlite\sqlite3.c	/^struct RtreeNode {$/;"	s	file:
RtreeNode	vendor\sqlite\sqlite3.c	/^typedef struct RtreeNode RtreeNode;$/;"	t	typeref:struct:RtreeNode	file:
RtreeSearchPoint	vendor\sqlite\sqlite3.c	/^struct RtreeSearchPoint {$/;"	s	file:
RtreeSearchPoint	vendor\sqlite\sqlite3.c	/^typedef struct RtreeSearchPoint RtreeSearchPoint;$/;"	t	typeref:struct:RtreeSearchPoint	file:
RtreeValue	vendor\sqlite\sqlite3.c	/^  typedef float RtreeValue;                \/* Low accuracy coordinate *\/$/;"	t	file:
RtreeValue	vendor\sqlite\sqlite3.c	/^  typedef int RtreeValue;                  \/* Low accuracy coordinate *\/$/;"	t	file:
SAVEPOINT_BEGIN	vendor\sqlite\sqlite3.c	11200;"	d	file:
SAVEPOINT_RELEASE	vendor\sqlite\sqlite3.c	11201;"	d	file:
SAVEPOINT_ROLLBACK	vendor\sqlite\sqlite3.c	11202;"	d	file:
SAVE_SZ	vendor\sqlite\sqlite3.c	90285;"	d	file:
SCHEMA_ENC	vendor\sqlite\sqlite3.c	10990;"	d	file:
SCHEMA_TABLE	vendor\sqlite\sqlite3.c	9087;"	d	file:
SELECTTRACE	vendor\sqlite\sqlite3.c	105667;"	d	file:
SELECTTRACE	vendor\sqlite\sqlite3.c	105672;"	d	file:
SELECTTRACE_ENABLED	vendor\sqlite\sqlite3.c	9050;"	d	file:
SELECTTRACE_ENABLED	vendor\sqlite\sqlite3.c	9052;"	d	file:
SETBIT	vendor\sqlite\sqlite3.c	38891;"	d	file:
SET_FULLSYNC	vendor\sqlite\sqlite3.c	10455;"	d	file:
SF_Aggregate	vendor\sqlite\sqlite3.c	12178;"	d	file:
SF_AllValues	vendor\sqlite\sqlite3.c	12184;"	d	file:
SF_Compound	vendor\sqlite\sqlite3.c	12182;"	d	file:
SF_Distinct	vendor\sqlite\sqlite3.c	12176;"	d	file:
SF_Expanded	vendor\sqlite\sqlite3.c	12180;"	d	file:
SF_HasTypeInfo	vendor\sqlite\sqlite3.c	12181;"	d	file:
SF_MaybeConvert	vendor\sqlite\sqlite3.c	12186;"	d	file:
SF_MinMaxAgg	vendor\sqlite\sqlite3.c	12188;"	d	file:
SF_NestedFrom	vendor\sqlite\sqlite3.c	12185;"	d	file:
SF_Recursive	vendor\sqlite\sqlite3.c	12187;"	d	file:
SF_Resolved	vendor\sqlite\sqlite3.c	12177;"	d	file:
SF_UsesEphemeral	vendor\sqlite\sqlite3.c	12179;"	d	file:
SF_Values	vendor\sqlite\sqlite3.c	12183;"	d	file:
SHARED_FIRST	vendor\sqlite\sqlite3.c	10574;"	d	file:
SHARED_LOCK	vendor\sqlite\sqlite3.c	10508;"	d	file:
SHARED_SIZE	vendor\sqlite\sqlite3.c	10575;"	d	file:
SLOT_2_0	vendor\sqlite\sqlite3.c	23989;"	d	file:
SLOT_4_2_0	vendor\sqlite\sqlite3.c	23990;"	d	file:
SMALLEST_INT64	vendor\sqlite\sqlite3.c	134906;"	d	file:
SMALLEST_INT64	vendor\sqlite\sqlite3.c	8959;"	d	file:
SORTER_MAX_MERGE_COUNT	vendor\sqlite\sqlite3.c	77811;"	d	file:
SORTFLAG_UseSorter	vendor\sqlite\sqlite3.c	105703;"	d	file:
SPILLFLAG_NOSYNC	vendor\sqlite\sqlite3.c	41830;"	d	file:
SPILLFLAG_OFF	vendor\sqlite\sqlite3.c	41828;"	d	file:
SPILLFLAG_ROLLBACK	vendor\sqlite\sqlite3.c	41829;"	d	file:
SQLITE3_MUTEX_INITIALIZER	vendor\sqlite\sqlite3.c	19336;"	d	file:
SQLITE3_MUTEX_INITIALIZER	vendor\sqlite\sqlite3.c	19338;"	d	file:
SQLITE3_MUTEX_INITIALIZER	vendor\sqlite\sqlite3.c	20006;"	d	file:
SQLITE3_MUTEX_INITIALIZER	vendor\sqlite\sqlite3.c	20009;"	d	file:
SQLITE3_TEXT	vendor\sqlite\sqlite3.c	4051;"	d	file:
SQLITE_ABORT	vendor\sqlite\sqlite3.c	612;"	d	file:
SQLITE_ABORT_ROLLBACK	vendor\sqlite\sqlite3.c	695;"	d	file:
SQLITE_ACCESS_EXISTS	vendor\sqlite\sqlite3.c	1423;"	d	file:
SQLITE_ACCESS_READ	vendor\sqlite\sqlite3.c	1425;"	d	file:
SQLITE_ACCESS_READWRITE	vendor\sqlite\sqlite3.c	1424;"	d	file:
SQLITE_AFF_INTEGER	vendor\sqlite\sqlite3.c	11278;"	d	file:
SQLITE_AFF_MASK	vendor\sqlite\sqlite3.c	11287;"	d	file:
SQLITE_AFF_NONE	vendor\sqlite\sqlite3.c	11275;"	d	file:
SQLITE_AFF_NUMERIC	vendor\sqlite\sqlite3.c	11277;"	d	file:
SQLITE_AFF_REAL	vendor\sqlite\sqlite3.c	11279;"	d	file:
SQLITE_AFF_TEXT	vendor\sqlite\sqlite3.c	11276;"	d	file:
SQLITE_ALLOW_COVERING_INDEX_SCAN	vendor\sqlite\sqlite3.c	13807;"	d	file:
SQLITE_ALTER_TABLE	vendor\sqlite\sqlite3.c	2846;"	d	file:
SQLITE_AMALGAMATION	vendor\sqlite\sqlite3.c	21;"	d	file:
SQLITE_ANALYZE	vendor\sqlite\sqlite3.c	2848;"	d	file:
SQLITE_ANY	vendor\sqlite\sqlite3.c	4418;"	d	file:
SQLITE_API	vendor\sqlite\sqlite3.c	262;"	d	file:
SQLITE_API	vendor\sqlite\sqlite3.c	26;"	d	file:
SQLITE_ASCII	vendor\sqlite\sqlite3.c	8815;"	d	file:
SQLITE_ATTACH	vendor\sqlite\sqlite3.c	2844;"	d	file:
SQLITE_AUTH	vendor\sqlite\sqlite3.c	631;"	d	file:
SQLITE_AUTH_USER	vendor\sqlite\sqlite3.c	709;"	d	file:
SQLITE_AllOpts	vendor\sqlite\sqlite3.c	11045;"	d	file:
SQLITE_AutoIndex	vendor\sqlite\sqlite3.c	11019;"	d	file:
SQLITE_BIGENDIAN	vendor\sqlite\sqlite3.c	8935;"	d	file:
SQLITE_BIGENDIAN	vendor\sqlite\sqlite3.c	8942;"	d	file:
SQLITE_BIGENDIAN	vendor\sqlite\sqlite3.c	8948;"	d	file:
SQLITE_BIG_DBL	vendor\sqlite\sqlite3.c	8718;"	d	file:
SQLITE_BIG_DBL	vendor\sqlite\sqlite3.c	8726;"	d	file:
SQLITE_BLOB	vendor\sqlite\sqlite3.c	4044;"	d	file:
SQLITE_BUSY	vendor\sqlite\sqlite3.c	613;"	d	file:
SQLITE_BUSY_RECOVERY	vendor\sqlite\sqlite3.c	684;"	d	file:
SQLITE_BUSY_SNAPSHOT	vendor\sqlite\sqlite3.c	685;"	d	file:
SQLITE_BYTEORDER	vendor\sqlite\sqlite3.c	8934;"	d	file:
SQLITE_BYTEORDER	vendor\sqlite\sqlite3.c	8941;"	d	file:
SQLITE_BYTEORDER	vendor\sqlite\sqlite3.c	8947;"	d	file:
SQLITE_CANTOPEN	vendor\sqlite\sqlite3.c	622;"	d	file:
SQLITE_CANTOPEN_BKPT	vendor\sqlite\sqlite3.c	12803;"	d	file:
SQLITE_CANTOPEN_CONVPATH	vendor\sqlite\sqlite3.c	689;"	d	file:
SQLITE_CANTOPEN_FULLPATH	vendor\sqlite\sqlite3.c	688;"	d	file:
SQLITE_CANTOPEN_ISDIR	vendor\sqlite\sqlite3.c	687;"	d	file:
SQLITE_CANTOPEN_NOTEMPDIR	vendor\sqlite\sqlite3.c	686;"	d	file:
SQLITE_CHECKPOINT_FULL	vendor\sqlite\sqlite3.c	7627;"	d	file:
SQLITE_CHECKPOINT_PASSIVE	vendor\sqlite\sqlite3.c	7626;"	d	file:
SQLITE_CHECKPOINT_RESTART	vendor\sqlite\sqlite3.c	7628;"	d	file:
SQLITE_CHECKPOINT_TRUNCATE	vendor\sqlite\sqlite3.c	7629;"	d	file:
SQLITE_CONFIG_COVERING_INDEX_SCAN	vendor\sqlite\sqlite3.c	2003;"	d	file:
SQLITE_CONFIG_GETMALLOC	vendor\sqlite\sqlite3.c	1988;"	d	file:
SQLITE_CONFIG_GETMUTEX	vendor\sqlite\sqlite3.c	1994;"	d	file:
SQLITE_CONFIG_GETPCACHE	vendor\sqlite\sqlite3.c	1998;"	d	file:
SQLITE_CONFIG_GETPCACHE2	vendor\sqlite\sqlite3.c	2002;"	d	file:
SQLITE_CONFIG_HEAP	vendor\sqlite\sqlite3.c	1991;"	d	file:
SQLITE_CONFIG_LOG	vendor\sqlite\sqlite3.c	1999;"	d	file:
SQLITE_CONFIG_LOOKASIDE	vendor\sqlite\sqlite3.c	1996;"	d	file:
SQLITE_CONFIG_MALLOC	vendor\sqlite\sqlite3.c	1987;"	d	file:
SQLITE_CONFIG_MEMSTATUS	vendor\sqlite\sqlite3.c	1992;"	d	file:
SQLITE_CONFIG_MMAP_SIZE	vendor\sqlite\sqlite3.c	2005;"	d	file:
SQLITE_CONFIG_MULTITHREAD	vendor\sqlite\sqlite3.c	1985;"	d	file:
SQLITE_CONFIG_MUTEX	vendor\sqlite\sqlite3.c	1993;"	d	file:
SQLITE_CONFIG_PAGECACHE	vendor\sqlite\sqlite3.c	1990;"	d	file:
SQLITE_CONFIG_PCACHE	vendor\sqlite\sqlite3.c	1997;"	d	file:
SQLITE_CONFIG_PCACHE2	vendor\sqlite\sqlite3.c	2001;"	d	file:
SQLITE_CONFIG_PCACHE_HDRSZ	vendor\sqlite\sqlite3.c	2007;"	d	file:
SQLITE_CONFIG_PMASZ	vendor\sqlite\sqlite3.c	2008;"	d	file:
SQLITE_CONFIG_SCRATCH	vendor\sqlite\sqlite3.c	1989;"	d	file:
SQLITE_CONFIG_SERIALIZED	vendor\sqlite\sqlite3.c	1986;"	d	file:
SQLITE_CONFIG_SINGLETHREAD	vendor\sqlite\sqlite3.c	1984;"	d	file:
SQLITE_CONFIG_SQLLOG	vendor\sqlite\sqlite3.c	2004;"	d	file:
SQLITE_CONFIG_URI	vendor\sqlite\sqlite3.c	2000;"	d	file:
SQLITE_CONFIG_WIN32_HEAPSIZE	vendor\sqlite\sqlite3.c	2006;"	d	file:
SQLITE_CONSTRAINT	vendor\sqlite\sqlite3.c	627;"	d	file:
SQLITE_CONSTRAINT_CHECK	vendor\sqlite\sqlite3.c	696;"	d	file:
SQLITE_CONSTRAINT_COMMITHOOK	vendor\sqlite\sqlite3.c	697;"	d	file:
SQLITE_CONSTRAINT_FOREIGNKEY	vendor\sqlite\sqlite3.c	698;"	d	file:
SQLITE_CONSTRAINT_FUNCTION	vendor\sqlite\sqlite3.c	699;"	d	file:
SQLITE_CONSTRAINT_NOTNULL	vendor\sqlite\sqlite3.c	700;"	d	file:
SQLITE_CONSTRAINT_PRIMARYKEY	vendor\sqlite\sqlite3.c	701;"	d	file:
SQLITE_CONSTRAINT_ROWID	vendor\sqlite\sqlite3.c	705;"	d	file:
SQLITE_CONSTRAINT_TRIGGER	vendor\sqlite\sqlite3.c	702;"	d	file:
SQLITE_CONSTRAINT_UNIQUE	vendor\sqlite\sqlite3.c	703;"	d	file:
SQLITE_CONSTRAINT_VTAB	vendor\sqlite\sqlite3.c	704;"	d	file:
SQLITE_COPY	vendor\sqlite\sqlite3.c	2853;"	d	file:
SQLITE_CORE	vendor\sqlite\sqlite3.c	101033;"	d	file:
SQLITE_CORE	vendor\sqlite\sqlite3.c	132155;"	d	file:
SQLITE_CORE	vendor\sqlite\sqlite3.c	20;"	d	file:
SQLITE_CORRUPT	vendor\sqlite\sqlite3.c	619;"	d	file:
SQLITE_CORRUPT_BKPT	vendor\sqlite\sqlite3.c	12801;"	d	file:
SQLITE_CORRUPT_VTAB	vendor\sqlite\sqlite3.c	690;"	d	file:
SQLITE_CREATE_INDEX	vendor\sqlite\sqlite3.c	2821;"	d	file:
SQLITE_CREATE_TABLE	vendor\sqlite\sqlite3.c	2822;"	d	file:
SQLITE_CREATE_TEMP_INDEX	vendor\sqlite\sqlite3.c	2823;"	d	file:
SQLITE_CREATE_TEMP_TABLE	vendor\sqlite\sqlite3.c	2824;"	d	file:
SQLITE_CREATE_TEMP_TRIGGER	vendor\sqlite\sqlite3.c	2825;"	d	file:
SQLITE_CREATE_TEMP_VIEW	vendor\sqlite\sqlite3.c	2826;"	d	file:
SQLITE_CREATE_TRIGGER	vendor\sqlite\sqlite3.c	2827;"	d	file:
SQLITE_CREATE_VIEW	vendor\sqlite\sqlite3.c	2828;"	d	file:
SQLITE_CREATE_VTABLE	vendor\sqlite\sqlite3.c	2849;"	d	file:
SQLITE_CacheSpill	vendor\sqlite\sqlite3.c	11000;"	d	file:
SQLITE_CkptFullFSync	vendor\sqlite\sqlite3.c	10999;"	d	file:
SQLITE_ColumnCache	vendor\sqlite\sqlite3.c	11034;"	d	file:
SQLITE_CountRows	vendor\sqlite\sqlite3.c	11003;"	d	file:
SQLITE_CoverIdxScan	vendor\sqlite\sqlite3.c	11039;"	d	file:
SQLITE_DBCONFIG_ENABLE_FKEY	vendor\sqlite\sqlite3.c	2069;"	d	file:
SQLITE_DBCONFIG_ENABLE_TRIGGER	vendor\sqlite\sqlite3.c	2070;"	d	file:
SQLITE_DBCONFIG_LOOKASIDE	vendor\sqlite\sqlite3.c	2068;"	d	file:
SQLITE_DBSTATUS_CACHE_HIT	vendor\sqlite\sqlite3.c	6748;"	d	file:
SQLITE_DBSTATUS_CACHE_MISS	vendor\sqlite\sqlite3.c	6749;"	d	file:
SQLITE_DBSTATUS_CACHE_USED	vendor\sqlite\sqlite3.c	6742;"	d	file:
SQLITE_DBSTATUS_CACHE_WRITE	vendor\sqlite\sqlite3.c	6750;"	d	file:
SQLITE_DBSTATUS_DEFERRED_FKS	vendor\sqlite\sqlite3.c	6751;"	d	file:
SQLITE_DBSTATUS_LOOKASIDE_HIT	vendor\sqlite\sqlite3.c	6745;"	d	file:
SQLITE_DBSTATUS_LOOKASIDE_MISS_FULL	vendor\sqlite\sqlite3.c	6747;"	d	file:
SQLITE_DBSTATUS_LOOKASIDE_MISS_SIZE	vendor\sqlite\sqlite3.c	6746;"	d	file:
SQLITE_DBSTATUS_LOOKASIDE_USED	vendor\sqlite\sqlite3.c	6741;"	d	file:
SQLITE_DBSTATUS_MAX	vendor\sqlite\sqlite3.c	6752;"	d	file:
SQLITE_DBSTATUS_SCHEMA_USED	vendor\sqlite\sqlite3.c	6743;"	d	file:
SQLITE_DBSTATUS_STMT_USED	vendor\sqlite\sqlite3.c	6744;"	d	file:
SQLITE_DEBUG_OS_TRACE	vendor\sqlite\sqlite3.c	19706;"	d	file:
SQLITE_DEBUG_OS_TRACE	vendor\sqlite\sqlite3.c	25331;"	d	file:
SQLITE_DEBUG_OS_TRACE	vendor\sqlite\sqlite3.c	32850;"	d	file:
SQLITE_DEFAULT_AUTOVACUUM	vendor\sqlite\sqlite3.c	9240;"	d	file:
SQLITE_DEFAULT_CACHE_SIZE	vendor\sqlite\sqlite3.c	8071;"	d	file:
SQLITE_DEFAULT_FILE_FORMAT	vendor\sqlite\sqlite3.c	8748;"	d	file:
SQLITE_DEFAULT_FILE_PERMISSIONS	vendor\sqlite\sqlite3.c	25167;"	d	file:
SQLITE_DEFAULT_JOURNAL_SIZE_LIMIT	vendor\sqlite\sqlite3.c	9996;"	d	file:
SQLITE_DEFAULT_MEMSTATUS	vendor\sqlite\sqlite3.c	8270;"	d	file:
SQLITE_DEFAULT_MMAP_SIZE	vendor\sqlite\sqlite3.c	9023;"	d	file:
SQLITE_DEFAULT_MMAP_SIZE	vendor\sqlite\sqlite3.c	9027;"	d	file:
SQLITE_DEFAULT_MMAP_SIZE	vendor\sqlite\sqlite3.c	9028;"	d	file:
SQLITE_DEFAULT_MMAP_SIZE_xc	vendor\sqlite\sqlite3.c	9024;"	d	file:
SQLITE_DEFAULT_PAGE_SIZE	vendor\sqlite\sqlite3.c	8120;"	d	file:
SQLITE_DEFAULT_PAGE_SIZE	vendor\sqlite\sqlite3.c	8123;"	d	file:
SQLITE_DEFAULT_PAGE_SIZE	vendor\sqlite\sqlite3.c	8124;"	d	file:
SQLITE_DEFAULT_PROXYDIR_PERMISSIONS	vendor\sqlite\sqlite3.c	25174;"	d	file:
SQLITE_DEFAULT_RECURSIVE_TRIGGERS	vendor\sqlite\sqlite3.c	8756;"	d	file:
SQLITE_DEFAULT_SECTOR_SIZE	vendor\sqlite\sqlite3.c	10462;"	d	file:
SQLITE_DEFAULT_WAL_AUTOCHECKPOINT	vendor\sqlite\sqlite3.c	8079;"	d	file:
SQLITE_DEFAULT_WORKER_THREADS	vendor\sqlite\sqlite3.c	8781;"	d	file:
SQLITE_DELETE	vendor\sqlite\sqlite3.c	2829;"	d	file:
SQLITE_DENY	vendor\sqlite\sqlite3.c	2798;"	d	file:
SQLITE_DEPRECATED	vendor\sqlite\sqlite3.c	279;"	d	file:
SQLITE_DETACH	vendor\sqlite\sqlite3.c	2845;"	d	file:
SQLITE_DETERMINISTIC	vendor\sqlite\sqlite3.c	4429;"	d	file:
SQLITE_DONE	vendor\sqlite\sqlite3.c	638;"	d	file:
SQLITE_DROP_INDEX	vendor\sqlite\sqlite3.c	2830;"	d	file:
SQLITE_DROP_TABLE	vendor\sqlite\sqlite3.c	2831;"	d	file:
SQLITE_DROP_TEMP_INDEX	vendor\sqlite\sqlite3.c	2832;"	d	file:
SQLITE_DROP_TEMP_TABLE	vendor\sqlite\sqlite3.c	2833;"	d	file:
SQLITE_DROP_TEMP_TRIGGER	vendor\sqlite\sqlite3.c	2834;"	d	file:
SQLITE_DROP_TEMP_VIEW	vendor\sqlite\sqlite3.c	2835;"	d	file:
SQLITE_DROP_TRIGGER	vendor\sqlite\sqlite3.c	2836;"	d	file:
SQLITE_DROP_VIEW	vendor\sqlite\sqlite3.c	2837;"	d	file:
SQLITE_DROP_VTABLE	vendor\sqlite\sqlite3.c	2850;"	d	file:
SQLITE_DYNAMIC	vendor\sqlite\sqlite3.c	9108;"	d	file:
SQLITE_DeferFKs	vendor\sqlite\sqlite3.c	11023;"	d	file:
SQLITE_DistinctOpt	vendor\sqlite\sqlite3.c	11038;"	d	file:
SQLITE_EBCDIC	vendor\sqlite\sqlite3.c	8813;"	d	file:
SQLITE_ECEL_DUP	vendor\sqlite\sqlite3.c	13102;"	d	file:
SQLITE_ECEL_FACTOR	vendor\sqlite\sqlite3.c	13103;"	d	file:
SQLITE_EMPTY	vendor\sqlite\sqlite3.c	624;"	d	file:
SQLITE_ENABLE_EXPLAIN_COMMENTS	vendor\sqlite\sqlite3.c	8346;"	d	file:
SQLITE_ENABLE_FTS3	vendor\sqlite\sqlite3.c	12812;"	d	file:
SQLITE_ENABLE_FTS3	vendor\sqlite\sqlite3.c	131297;"	d	file:
SQLITE_ENABLE_LOCKING_STYLE	vendor\sqlite\sqlite3.c	102325;"	d	file:
SQLITE_ENABLE_LOCKING_STYLE	vendor\sqlite\sqlite3.c	102327;"	d	file:
SQLITE_ENABLE_LOCKING_STYLE	vendor\sqlite\sqlite3.c	121;"	d	file:
SQLITE_ENABLE_LOCKING_STYLE	vendor\sqlite\sqlite3.c	25109;"	d	file:
SQLITE_ENABLE_LOCKING_STYLE	vendor\sqlite\sqlite3.c	25111;"	d	file:
SQLITE_ENABLE_STAT3	vendor\sqlite\sqlite3.c	9037;"	d	file:
SQLITE_ENABLE_STAT3_OR_STAT4	vendor\sqlite\sqlite3.c	9038;"	d	file:
SQLITE_ENABLE_STAT3_OR_STAT4	vendor\sqlite\sqlite3.c	9040;"	d	file:
SQLITE_ENABLE_STAT3_OR_STAT4	vendor\sqlite\sqlite3.c	9042;"	d	file:
SQLITE_ERROR	vendor\sqlite\sqlite3.c	609;"	d	file:
SQLITE_EXPERIMENTAL	vendor\sqlite\sqlite3.c	280;"	d	file:
SQLITE_EXTENSION_INIT1	vendor\sqlite\sqlite3.c	101540;"	d	file:
SQLITE_EXTENSION_INIT1	vendor\sqlite\sqlite3.c	101547;"	d	file:
SQLITE_EXTENSION_INIT2	vendor\sqlite\sqlite3.c	101541;"	d	file:
SQLITE_EXTENSION_INIT2	vendor\sqlite\sqlite3.c	101548;"	d	file:
SQLITE_EXTENSION_INIT3	vendor\sqlite\sqlite3.c	101542;"	d	file:
SQLITE_EXTENSION_INIT3	vendor\sqlite\sqlite3.c	101549;"	d	file:
SQLITE_EXTERN	vendor\sqlite\sqlite3.c	258;"	d	file:
SQLITE_EnableTrigger	vendor\sqlite\sqlite3.c	11022;"	d	file:
SQLITE_FAIL	vendor\sqlite\sqlite3.c	7714;"	d	file:
SQLITE_FAULTINJECTOR_COUNT	vendor\sqlite\sqlite3.c	13518;"	d	file:
SQLITE_FAULTINJECTOR_MALLOC	vendor\sqlite\sqlite3.c	13517;"	d	file:
SQLITE_FCNTL_BUSYHANDLER	vendor\sqlite\sqlite3.c	1178;"	d	file:
SQLITE_FCNTL_CHUNK_SIZE	vendor\sqlite\sqlite3.c	1169;"	d	file:
SQLITE_FCNTL_COMMIT_PHASETWO	vendor\sqlite\sqlite3.c	1184;"	d	file:
SQLITE_FCNTL_DB_UNCHANGED	vendor\sqlite\sqlite3.c	10596;"	d	file:
SQLITE_FCNTL_FILE_POINTER	vendor\sqlite\sqlite3.c	1170;"	d	file:
SQLITE_FCNTL_GET_LOCKPROXYFILE	vendor\sqlite\sqlite3.c	1165;"	d	file:
SQLITE_FCNTL_HAS_MOVED	vendor\sqlite\sqlite3.c	1182;"	d	file:
SQLITE_FCNTL_LAST_ERRNO	vendor\sqlite\sqlite3.c	1167;"	d	file:
SQLITE_FCNTL_LOCKSTATE	vendor\sqlite\sqlite3.c	1164;"	d	file:
SQLITE_FCNTL_MMAP_SIZE	vendor\sqlite\sqlite3.c	1180;"	d	file:
SQLITE_FCNTL_OVERWRITE	vendor\sqlite\sqlite3.c	1174;"	d	file:
SQLITE_FCNTL_PERSIST_WAL	vendor\sqlite\sqlite3.c	1173;"	d	file:
SQLITE_FCNTL_POWERSAFE_OVERWRITE	vendor\sqlite\sqlite3.c	1176;"	d	file:
SQLITE_FCNTL_PRAGMA	vendor\sqlite\sqlite3.c	1177;"	d	file:
SQLITE_FCNTL_SET_LOCKPROXYFILE	vendor\sqlite\sqlite3.c	1166;"	d	file:
SQLITE_FCNTL_SIZE_HINT	vendor\sqlite\sqlite3.c	1168;"	d	file:
SQLITE_FCNTL_SYNC	vendor\sqlite\sqlite3.c	1183;"	d	file:
SQLITE_FCNTL_SYNC_OMITTED	vendor\sqlite\sqlite3.c	1171;"	d	file:
SQLITE_FCNTL_TEMPFILENAME	vendor\sqlite\sqlite3.c	1179;"	d	file:
SQLITE_FCNTL_TRACE	vendor\sqlite\sqlite3.c	1181;"	d	file:
SQLITE_FCNTL_VFSNAME	vendor\sqlite\sqlite3.c	1175;"	d	file:
SQLITE_FCNTL_WIN32_AV_RETRY	vendor\sqlite\sqlite3.c	1172;"	d	file:
SQLITE_FCNTL_WIN32_SET_HANDLE	vendor\sqlite\sqlite3.c	1185;"	d	file:
SQLITE_FILE_HEADER	vendor\sqlite\sqlite3.c	52061;"	d	file:
SQLITE_FLOAT	vendor\sqlite\sqlite3.c	4043;"	d	file:
SQLITE_FORMAT	vendor\sqlite\sqlite3.c	632;"	d	file:
SQLITE_FREE	vendor\sqlite\sqlite3.c	16879;"	d	file:
SQLITE_FREE	vendor\sqlite\sqlite3.c	16891;"	d	file:
SQLITE_FSFLAGS_IS_MSDOS	vendor\sqlite\sqlite3.c	25152;"	d	file:
SQLITE_FTS3_DEFAULT_NEAR_PARAM	vendor\sqlite\sqlite3.c	138289;"	d	file:
SQLITE_FTS3_MAX_EXPR_DEPTH	vendor\sqlite\sqlite3.c	131598;"	d	file:
SQLITE_FULL	vendor\sqlite\sqlite3.c	621;"	d	file:
SQLITE_FUNCTION	vendor\sqlite\sqlite3.c	2851;"	d	file:
SQLITE_FUNC_CASE	vendor\sqlite\sqlite3.c	11122;"	d	file:
SQLITE_FUNC_COALESCE	vendor\sqlite\sqlite3.c	11128;"	d	file:
SQLITE_FUNC_CONSTANT	vendor\sqlite\sqlite3.c	11130;"	d	file:
SQLITE_FUNC_COUNT	vendor\sqlite\sqlite3.c	11127;"	d	file:
SQLITE_FUNC_ENCMASK	vendor\sqlite\sqlite3.c	11120;"	d	file:
SQLITE_FUNC_EPHEM	vendor\sqlite\sqlite3.c	11123;"	d	file:
SQLITE_FUNC_LENGTH	vendor\sqlite\sqlite3.c	11125;"	d	file:
SQLITE_FUNC_LIKE	vendor\sqlite\sqlite3.c	11121;"	d	file:
SQLITE_FUNC_MINMAX	vendor\sqlite\sqlite3.c	11131;"	d	file:
SQLITE_FUNC_NEEDCOLL	vendor\sqlite\sqlite3.c	11124;"	d	file:
SQLITE_FUNC_TYPEOF	vendor\sqlite\sqlite3.c	11126;"	d	file:
SQLITE_FUNC_UNLIKELY	vendor\sqlite\sqlite3.c	11129;"	d	file:
SQLITE_FactorOutConst	vendor\sqlite\sqlite3.c	11036;"	d	file:
SQLITE_ForeignKeys	vendor\sqlite\sqlite3.c	11018;"	d	file:
SQLITE_FullColNames	vendor\sqlite\sqlite3.c	11001;"	d	file:
SQLITE_FullFSync	vendor\sqlite\sqlite3.c	10998;"	d	file:
SQLITE_GET_LOCKPROXYFILE	vendor\sqlite\sqlite3.c	1188;"	d	file:
SQLITE_GroupByOrder	vendor\sqlite\sqlite3.c	11035;"	d	file:
SQLITE_HAVE_ISNAN	vendor\sqlite\sqlite3.c	8723;"	d	file:
SQLITE_HOMEGROWN_RECURSIVE_MUTEX	vendor\sqlite\sqlite3.c	119;"	d	file:
SQLITE_IDXTYPE_APPDEF	vendor\sqlite\sqlite3.c	11639;"	d	file:
SQLITE_IDXTYPE_PRIMARYKEY	vendor\sqlite\sqlite3.c	11641;"	d	file:
SQLITE_IDXTYPE_UNIQUE	vendor\sqlite\sqlite3.c	11640;"	d	file:
SQLITE_IGNORE	vendor\sqlite\sqlite3.c	2799;"	d	file:
SQLITE_INDEX_CONSTRAINT_EQ	vendor\sqlite\sqlite3.c	5761;"	d	file:
SQLITE_INDEX_CONSTRAINT_GE	vendor\sqlite\sqlite3.c	5765;"	d	file:
SQLITE_INDEX_CONSTRAINT_GT	vendor\sqlite\sqlite3.c	5762;"	d	file:
SQLITE_INDEX_CONSTRAINT_LE	vendor\sqlite\sqlite3.c	5763;"	d	file:
SQLITE_INDEX_CONSTRAINT_LT	vendor\sqlite\sqlite3.c	5764;"	d	file:
SQLITE_INDEX_CONSTRAINT_MATCH	vendor\sqlite\sqlite3.c	5766;"	d	file:
SQLITE_INSERT	vendor\sqlite\sqlite3.c	2838;"	d	file:
SQLITE_INTEGER	vendor\sqlite\sqlite3.c	4042;"	d	file:
SQLITE_INTEGRITY_CHECK_ERROR_MAX	vendor\sqlite\sqlite3.c	104156;"	d	file:
SQLITE_INTERNAL	vendor\sqlite\sqlite3.c	610;"	d	file:
SQLITE_INTERRUPT	vendor\sqlite\sqlite3.c	617;"	d	file:
SQLITE_INT_TO_PTR	vendor\sqlite\sqlite3.c	8212;"	d	file:
SQLITE_INT_TO_PTR	vendor\sqlite\sqlite3.c	8215;"	d	file:
SQLITE_INT_TO_PTR	vendor\sqlite\sqlite3.c	8218;"	d	file:
SQLITE_INT_TO_PTR	vendor\sqlite\sqlite3.c	8221;"	d	file:
SQLITE_IOCAP_ATOMIC	vendor\sqlite\sqlite3.c	769;"	d	file:
SQLITE_IOCAP_ATOMIC16K	vendor\sqlite\sqlite3.c	775;"	d	file:
SQLITE_IOCAP_ATOMIC1K	vendor\sqlite\sqlite3.c	771;"	d	file:
SQLITE_IOCAP_ATOMIC2K	vendor\sqlite\sqlite3.c	772;"	d	file:
SQLITE_IOCAP_ATOMIC32K	vendor\sqlite\sqlite3.c	776;"	d	file:
SQLITE_IOCAP_ATOMIC4K	vendor\sqlite\sqlite3.c	773;"	d	file:
SQLITE_IOCAP_ATOMIC512	vendor\sqlite\sqlite3.c	770;"	d	file:
SQLITE_IOCAP_ATOMIC64K	vendor\sqlite\sqlite3.c	777;"	d	file:
SQLITE_IOCAP_ATOMIC8K	vendor\sqlite\sqlite3.c	774;"	d	file:
SQLITE_IOCAP_IMMUTABLE	vendor\sqlite\sqlite3.c	782;"	d	file:
SQLITE_IOCAP_POWERSAFE_OVERWRITE	vendor\sqlite\sqlite3.c	781;"	d	file:
SQLITE_IOCAP_SAFE_APPEND	vendor\sqlite\sqlite3.c	778;"	d	file:
SQLITE_IOCAP_SEQUENTIAL	vendor\sqlite\sqlite3.c	779;"	d	file:
SQLITE_IOCAP_UNDELETABLE_WHEN_OPEN	vendor\sqlite\sqlite3.c	780;"	d	file:
SQLITE_IOERR	vendor\sqlite\sqlite3.c	618;"	d	file:
SQLITE_IOERR_ACCESS	vendor\sqlite\sqlite3.c	669;"	d	file:
SQLITE_IOERR_BLOCKED	vendor\sqlite\sqlite3.c	667;"	d	file:
SQLITE_IOERR_CHECKRESERVEDLOCK	vendor\sqlite\sqlite3.c	670;"	d	file:
SQLITE_IOERR_CLOSE	vendor\sqlite\sqlite3.c	672;"	d	file:
SQLITE_IOERR_CONVPATH	vendor\sqlite\sqlite3.c	682;"	d	file:
SQLITE_IOERR_DELETE	vendor\sqlite\sqlite3.c	666;"	d	file:
SQLITE_IOERR_DELETE_NOENT	vendor\sqlite\sqlite3.c	679;"	d	file:
SQLITE_IOERR_DIR_CLOSE	vendor\sqlite\sqlite3.c	673;"	d	file:
SQLITE_IOERR_DIR_FSYNC	vendor\sqlite\sqlite3.c	661;"	d	file:
SQLITE_IOERR_FSTAT	vendor\sqlite\sqlite3.c	663;"	d	file:
SQLITE_IOERR_FSYNC	vendor\sqlite\sqlite3.c	660;"	d	file:
SQLITE_IOERR_GETTEMPPATH	vendor\sqlite\sqlite3.c	681;"	d	file:
SQLITE_IOERR_LOCK	vendor\sqlite\sqlite3.c	671;"	d	file:
SQLITE_IOERR_MMAP	vendor\sqlite\sqlite3.c	680;"	d	file:
SQLITE_IOERR_NOMEM	vendor\sqlite\sqlite3.c	668;"	d	file:
SQLITE_IOERR_RDLOCK	vendor\sqlite\sqlite3.c	665;"	d	file:
SQLITE_IOERR_READ	vendor\sqlite\sqlite3.c	657;"	d	file:
SQLITE_IOERR_SEEK	vendor\sqlite\sqlite3.c	678;"	d	file:
SQLITE_IOERR_SHMLOCK	vendor\sqlite\sqlite3.c	676;"	d	file:
SQLITE_IOERR_SHMMAP	vendor\sqlite\sqlite3.c	677;"	d	file:
SQLITE_IOERR_SHMOPEN	vendor\sqlite\sqlite3.c	674;"	d	file:
SQLITE_IOERR_SHMSIZE	vendor\sqlite\sqlite3.c	675;"	d	file:
SQLITE_IOERR_SHORT_READ	vendor\sqlite\sqlite3.c	658;"	d	file:
SQLITE_IOERR_TRUNCATE	vendor\sqlite\sqlite3.c	662;"	d	file:
SQLITE_IOERR_UNLOCK	vendor\sqlite\sqlite3.c	664;"	d	file:
SQLITE_IOERR_WRITE	vendor\sqlite\sqlite3.c	659;"	d	file:
SQLITE_IgnoreChecks	vendor\sqlite\sqlite3.c	11012;"	d	file:
SQLITE_InternChanges	vendor\sqlite\sqlite3.c	10997;"	d	file:
SQLITE_JUMPIFNULL	vendor\sqlite\sqlite3.c	11298;"	d	file:
SQLITE_LAST_ERRNO	vendor\sqlite\sqlite3.c	1190;"	d	file:
SQLITE_LIMIT_ATTACHED	vendor\sqlite\sqlite3.c	3380;"	d	file:
SQLITE_LIMIT_COLUMN	vendor\sqlite\sqlite3.c	3375;"	d	file:
SQLITE_LIMIT_COMPOUND_SELECT	vendor\sqlite\sqlite3.c	3377;"	d	file:
SQLITE_LIMIT_EXPR_DEPTH	vendor\sqlite\sqlite3.c	3376;"	d	file:
SQLITE_LIMIT_FUNCTION_ARG	vendor\sqlite\sqlite3.c	3379;"	d	file:
SQLITE_LIMIT_LENGTH	vendor\sqlite\sqlite3.c	3373;"	d	file:
SQLITE_LIMIT_LIKE_PATTERN_LENGTH	vendor\sqlite\sqlite3.c	3381;"	d	file:
SQLITE_LIMIT_SQL_LENGTH	vendor\sqlite\sqlite3.c	3374;"	d	file:
SQLITE_LIMIT_TRIGGER_DEPTH	vendor\sqlite\sqlite3.c	3383;"	d	file:
SQLITE_LIMIT_VARIABLE_NUMBER	vendor\sqlite\sqlite3.c	3382;"	d	file:
SQLITE_LIMIT_VDBE_OP	vendor\sqlite\sqlite3.c	3378;"	d	file:
SQLITE_LIMIT_WORKER_THREADS	vendor\sqlite\sqlite3.c	3384;"	d	file:
SQLITE_LITTLEENDIAN	vendor\sqlite\sqlite3.c	8936;"	d	file:
SQLITE_LITTLEENDIAN	vendor\sqlite\sqlite3.c	8943;"	d	file:
SQLITE_LITTLEENDIAN	vendor\sqlite\sqlite3.c	8949;"	d	file:
SQLITE_LOCKED	vendor\sqlite\sqlite3.c	614;"	d	file:
SQLITE_LOCKED_SHAREDCACHE	vendor\sqlite\sqlite3.c	683;"	d	file:
SQLITE_LOCKFILEEX_FLAGS	vendor\sqlite\sqlite3.c	35863;"	d	file:
SQLITE_LOCKFILE_FLAGS	vendor\sqlite\sqlite3.c	35854;"	d	file:
SQLITE_LOCK_EXCLUSIVE	vendor\sqlite\sqlite3.c	795;"	d	file:
SQLITE_LOCK_NONE	vendor\sqlite\sqlite3.c	791;"	d	file:
SQLITE_LOCK_PENDING	vendor\sqlite\sqlite3.c	794;"	d	file:
SQLITE_LOCK_RESERVED	vendor\sqlite\sqlite3.c	793;"	d	file:
SQLITE_LOCK_SHARED	vendor\sqlite\sqlite3.c	792;"	d	file:
SQLITE_LegacyFileFmt	vendor\sqlite\sqlite3.c	11014;"	d	file:
SQLITE_LoadExtension	vendor\sqlite\sqlite3.c	11021;"	d	file:
SQLITE_MAGIC_BUSY	vendor\sqlite\sqlite3.c	11072;"	d	file:
SQLITE_MAGIC_CLOSED	vendor\sqlite\sqlite3.c	11070;"	d	file:
SQLITE_MAGIC_ERROR	vendor\sqlite\sqlite3.c	11073;"	d	file:
SQLITE_MAGIC_OPEN	vendor\sqlite\sqlite3.c	11069;"	d	file:
SQLITE_MAGIC_SICK	vendor\sqlite\sqlite3.c	11071;"	d	file:
SQLITE_MAGIC_ZOMBIE	vendor\sqlite\sqlite3.c	11074;"	d	file:
SQLITE_MALLOC	vendor\sqlite\sqlite3.c	16878;"	d	file:
SQLITE_MALLOC	vendor\sqlite\sqlite3.c	16890;"	d	file:
SQLITE_MALLOCSIZE	vendor\sqlite\sqlite3.c	16881;"	d	file:
SQLITE_MALLOCSIZE	vendor\sqlite\sqlite3.c	16923;"	d	file:
SQLITE_MALLOCSIZE	vendor\sqlite\sqlite3.c	16927;"	d	file:
SQLITE_MALLOC_SOFT_LIMIT	vendor\sqlite\sqlite3.c	8311;"	d	file:
SQLITE_MAX_ATTACHED	vendor\sqlite\sqlite3.c	8088;"	d	file:
SQLITE_MAX_COLUMN	vendor\sqlite\sqlite3.c	8006;"	d	file:
SQLITE_MAX_COMPOUND_SELECT	vendor\sqlite\sqlite3.c	8043;"	d	file:
SQLITE_MAX_DEFAULT_PAGE_SIZE	vendor\sqlite\sqlite3.c	8135;"	d	file:
SQLITE_MAX_DEFAULT_PAGE_SIZE	vendor\sqlite\sqlite3.c	8138;"	d	file:
SQLITE_MAX_DEFAULT_PAGE_SIZE	vendor\sqlite\sqlite3.c	8139;"	d	file:
SQLITE_MAX_EXPR_DEPTH	vendor\sqlite\sqlite3.c	8031;"	d	file:
SQLITE_MAX_FILE_FORMAT	vendor\sqlite\sqlite3.c	8746;"	d	file:
SQLITE_MAX_FUNCTION_ARG	vendor\sqlite\sqlite3.c	8058;"	d	file:
SQLITE_MAX_LENGTH	vendor\sqlite\sqlite3.c	7985;"	d	file:
SQLITE_MAX_LIKE_PATTERN_LENGTH	vendor\sqlite\sqlite3.c	153197;"	d	file:
SQLITE_MAX_LIKE_PATTERN_LENGTH	vendor\sqlite\sqlite3.c	8159;"	d	file:
SQLITE_MAX_MMAP_SIZE	vendor\sqlite\sqlite3.c	8991;"	d	file:
SQLITE_MAX_MMAP_SIZE	vendor\sqlite\sqlite3.c	8992;"	d	file:
SQLITE_MAX_MMAP_SIZE	vendor\sqlite\sqlite3.c	9001;"	d	file:
SQLITE_MAX_MMAP_SIZE	vendor\sqlite\sqlite3.c	9002;"	d	file:
SQLITE_MAX_MMAP_SIZE	vendor\sqlite\sqlite3.c	9010;"	d	file:
SQLITE_MAX_MMAP_SIZE	vendor\sqlite\sqlite3.c	9012;"	d	file:
SQLITE_MAX_MMAP_SIZE_xc	vendor\sqlite\sqlite3.c	9014;"	d	file:
SQLITE_MAX_PAGE_COUNT	vendor\sqlite\sqlite3.c	8151;"	d	file:
SQLITE_MAX_PAGE_SIZE	vendor\sqlite\sqlite3.c	8111;"	d	file:
SQLITE_MAX_PAGE_SIZE	vendor\sqlite\sqlite3.c	8113;"	d	file:
SQLITE_MAX_PMASZ	vendor\sqlite\sqlite3.c	77513;"	d	file:
SQLITE_MAX_SCHEMA_RETRY	vendor\sqlite\sqlite3.c	14391;"	d	file:
SQLITE_MAX_SQL_LENGTH	vendor\sqlite\sqlite3.c	8017;"	d	file:
SQLITE_MAX_TRIGGER_DEPTH	vendor\sqlite\sqlite3.c	8170;"	d	file:
SQLITE_MAX_U32	vendor\sqlite\sqlite3.c	8877;"	d	file:
SQLITE_MAX_VARIABLE_NUMBER	vendor\sqlite\sqlite3.c	8096;"	d	file:
SQLITE_MAX_VDBE_OP	vendor\sqlite\sqlite3.c	8051;"	d	file:
SQLITE_MAX_WORKER_THREADS	vendor\sqlite\sqlite3.c	8774;"	d	file:
SQLITE_MAX_WORKER_THREADS	vendor\sqlite\sqlite3.c	8775;"	d	file:
SQLITE_MAX_WORKER_THREADS	vendor\sqlite\sqlite3.c	8778;"	d	file:
SQLITE_MAX_WORKER_THREADS	vendor\sqlite\sqlite3.c	8784;"	d	file:
SQLITE_MAX_WORKER_THREADS	vendor\sqlite\sqlite3.c	8785;"	d	file:
SQLITE_MINIMUM_FILE_DESCRIPTOR	vendor\sqlite\sqlite3.c	25797;"	d	file:
SQLITE_MISMATCH	vendor\sqlite\sqlite3.c	628;"	d	file:
SQLITE_MISUSE	vendor\sqlite\sqlite3.c	629;"	d	file:
SQLITE_MISUSE_BKPT	vendor\sqlite\sqlite3.c	12802;"	d	file:
SQLITE_MIXED_ENDIAN_64BIT_FLOAT	vendor\sqlite\sqlite3.c	8722;"	d	file:
SQLITE_MUTEX_FAST	vendor\sqlite\sqlite3.c	6389;"	d	file:
SQLITE_MUTEX_NOOP	vendor\sqlite\sqlite3.c	10685;"	d	file:
SQLITE_MUTEX_NREF	vendor\sqlite\sqlite3.c	19316;"	d	file:
SQLITE_MUTEX_NREF	vendor\sqlite\sqlite3.c	19318;"	d	file:
SQLITE_MUTEX_OMIT	vendor\sqlite\sqlite3.c	10677;"	d	file:
SQLITE_MUTEX_PTHREADS	vendor\sqlite\sqlite3.c	10681;"	d	file:
SQLITE_MUTEX_RECURSIVE	vendor\sqlite\sqlite3.c	6390;"	d	file:
SQLITE_MUTEX_STATIC_APP1	vendor\sqlite\sqlite3.c	6399;"	d	file:
SQLITE_MUTEX_STATIC_APP2	vendor\sqlite\sqlite3.c	6400;"	d	file:
SQLITE_MUTEX_STATIC_APP3	vendor\sqlite\sqlite3.c	6401;"	d	file:
SQLITE_MUTEX_STATIC_LRU	vendor\sqlite\sqlite3.c	6396;"	d	file:
SQLITE_MUTEX_STATIC_LRU2	vendor\sqlite\sqlite3.c	6397;"	d	file:
SQLITE_MUTEX_STATIC_MASTER	vendor\sqlite\sqlite3.c	6391;"	d	file:
SQLITE_MUTEX_STATIC_MEM	vendor\sqlite\sqlite3.c	6392;"	d	file:
SQLITE_MUTEX_STATIC_MEM2	vendor\sqlite\sqlite3.c	6393;"	d	file:
SQLITE_MUTEX_STATIC_OPEN	vendor\sqlite\sqlite3.c	6394;"	d	file:
SQLITE_MUTEX_STATIC_PMEM	vendor\sqlite\sqlite3.c	6398;"	d	file:
SQLITE_MUTEX_STATIC_PRNG	vendor\sqlite\sqlite3.c	6395;"	d	file:
SQLITE_MUTEX_W32	vendor\sqlite\sqlite3.c	10683;"	d	file:
SQLITE_NOINLINE	vendor\sqlite\sqlite3.c	8230;"	d	file:
SQLITE_NOINLINE	vendor\sqlite\sqlite3.c	8232;"	d	file:
SQLITE_NOINLINE	vendor\sqlite\sqlite3.c	8234;"	d	file:
SQLITE_NOLFS	vendor\sqlite\sqlite3.c	630;"	d	file:
SQLITE_NOMEM	vendor\sqlite\sqlite3.c	615;"	d	file:
SQLITE_NOTADB	vendor\sqlite\sqlite3.c	634;"	d	file:
SQLITE_NOTFOUND	vendor\sqlite\sqlite3.c	620;"	d	file:
SQLITE_NOTICE	vendor\sqlite\sqlite3.c	635;"	d	file:
SQLITE_NOTICE_RECOVER_ROLLBACK	vendor\sqlite\sqlite3.c	707;"	d	file:
SQLITE_NOTICE_RECOVER_WAL	vendor\sqlite\sqlite3.c	706;"	d	file:
SQLITE_NOTNULL	vendor\sqlite\sqlite3.c	11301;"	d	file:
SQLITE_NULL	vendor\sqlite\sqlite3.c	4045;"	d	file:
SQLITE_NULLEQ	vendor\sqlite\sqlite3.c	11300;"	d	file:
SQLITE_N_BTREE_META	vendor\sqlite\sqlite3.c	9233;"	d	file:
SQLITE_N_COLCACHE	vendor\sqlite\sqlite3.c	12307;"	d	file:
SQLITE_N_KEYWORD	vendor\sqlite\sqlite3.c	126044;"	d	file:
SQLITE_N_LIMIT	vendor\sqlite\sqlite3.c	10784;"	d	file:
SQLITE_NullCallback	vendor\sqlite\sqlite3.c	11006;"	d	file:
SQLITE_OK	vendor\sqlite\sqlite3.c	607;"	d	file:
SQLITE_OMIT_DATETIME_FUNCS	vendor\sqlite\sqlite3.c	8720;"	d	file:
SQLITE_OMIT_LOAD_EXTENSION	vendor\sqlite\sqlite3.c	120;"	d	file:
SQLITE_OMIT_TRACE	vendor\sqlite\sqlite3.c	8721;"	d	file:
SQLITE_OPEN_AUTOPROXY	vendor\sqlite\sqlite3.c	723;"	d	file:
SQLITE_OPEN_CREATE	vendor\sqlite\sqlite3.c	720;"	d	file:
SQLITE_OPEN_DELETEONCLOSE	vendor\sqlite\sqlite3.c	721;"	d	file:
SQLITE_OPEN_EXCLUSIVE	vendor\sqlite\sqlite3.c	722;"	d	file:
SQLITE_OPEN_FULLMUTEX	vendor\sqlite\sqlite3.c	734;"	d	file:
SQLITE_OPEN_MAIN_DB	vendor\sqlite\sqlite3.c	726;"	d	file:
SQLITE_OPEN_MAIN_JOURNAL	vendor\sqlite\sqlite3.c	729;"	d	file:
SQLITE_OPEN_MASTER_JOURNAL	vendor\sqlite\sqlite3.c	732;"	d	file:
SQLITE_OPEN_MEMORY	vendor\sqlite\sqlite3.c	725;"	d	file:
SQLITE_OPEN_NOMUTEX	vendor\sqlite\sqlite3.c	733;"	d	file:
SQLITE_OPEN_PRIVATECACHE	vendor\sqlite\sqlite3.c	736;"	d	file:
SQLITE_OPEN_READONLY	vendor\sqlite\sqlite3.c	718;"	d	file:
SQLITE_OPEN_READWRITE	vendor\sqlite\sqlite3.c	719;"	d	file:
SQLITE_OPEN_SHAREDCACHE	vendor\sqlite\sqlite3.c	735;"	d	file:
SQLITE_OPEN_SUBJOURNAL	vendor\sqlite\sqlite3.c	731;"	d	file:
SQLITE_OPEN_TEMP_DB	vendor\sqlite\sqlite3.c	727;"	d	file:
SQLITE_OPEN_TEMP_JOURNAL	vendor\sqlite\sqlite3.c	730;"	d	file:
SQLITE_OPEN_TRANSIENT_DB	vendor\sqlite\sqlite3.c	728;"	d	file:
SQLITE_OPEN_URI	vendor\sqlite\sqlite3.c	724;"	d	file:
SQLITE_OPEN_WAL	vendor\sqlite\sqlite3.c	737;"	d	file:
SQLITE_OS_OTHER	vendor\sqlite\sqlite3.c	10423;"	d	file:
SQLITE_OS_OTHER	vendor\sqlite\sqlite3.c	10427;"	d	file:
SQLITE_OS_OTHER	vendor\sqlite\sqlite3.c	118;"	d	file:
SQLITE_OS_UNIX	vendor\sqlite\sqlite3.c	10418;"	d	file:
SQLITE_OS_UNIX	vendor\sqlite\sqlite3.c	10419;"	d	file:
SQLITE_OS_UNIX	vendor\sqlite\sqlite3.c	10432;"	d	file:
SQLITE_OS_UNIX	vendor\sqlite\sqlite3.c	10435;"	d	file:
SQLITE_OS_UNIX	vendor\sqlite\sqlite3.c	10438;"	d	file:
SQLITE_OS_WIN	vendor\sqlite\sqlite3.c	10420;"	d	file:
SQLITE_OS_WIN	vendor\sqlite\sqlite3.c	10421;"	d	file:
SQLITE_OS_WIN	vendor\sqlite\sqlite3.c	10431;"	d	file:
SQLITE_OS_WIN	vendor\sqlite\sqlite3.c	10434;"	d	file:
SQLITE_OS_WIN	vendor\sqlite\sqlite3.c	10442;"	d	file:
SQLITE_OS_WINCE	vendor\sqlite\sqlite3.c	19939;"	d	file:
SQLITE_OS_WINCE	vendor\sqlite\sqlite3.c	19941;"	d	file:
SQLITE_OS_WINNT	vendor\sqlite\sqlite3.c	19931;"	d	file:
SQLITE_OS_WINRT	vendor\sqlite\sqlite3.c	19949;"	d	file:
SQLITE_OS_WIN_THREADS	vendor\sqlite\sqlite3.c	19968;"	d	file:
SQLITE_OS_WIN_THREADS	vendor\sqlite\sqlite3.c	19970;"	d	file:
SQLITE_OmitNoopJoin	vendor\sqlite\sqlite3.c	11043;"	d	file:
SQLITE_OrderByIdxJoin	vendor\sqlite\sqlite3.c	11040;"	d	file:
SQLITE_PERM	vendor\sqlite\sqlite3.c	611;"	d	file:
SQLITE_POWERSAFE_OVERWRITE	vendor\sqlite\sqlite3.c	8261;"	d	file:
SQLITE_PRAGMA	vendor\sqlite\sqlite3.c	2839;"	d	file:
SQLITE_PRINTF_INTERNAL	vendor\sqlite\sqlite3.c	12931;"	d	file:
SQLITE_PRINTF_SQLFUNC	vendor\sqlite\sqlite3.c	12932;"	d	file:
SQLITE_PRINT_BUF_SIZE	vendor\sqlite\sqlite3.c	21314;"	d	file:
SQLITE_PRIVATE	vendor\sqlite\sqlite3.c	23;"	d	file:
SQLITE_PROTOCOL	vendor\sqlite\sqlite3.c	623;"	d	file:
SQLITE_PTR_TO_INT	vendor\sqlite\sqlite3.c	8213;"	d	file:
SQLITE_PTR_TO_INT	vendor\sqlite\sqlite3.c	8216;"	d	file:
SQLITE_PTR_TO_INT	vendor\sqlite\sqlite3.c	8219;"	d	file:
SQLITE_PTR_TO_INT	vendor\sqlite\sqlite3.c	8222;"	d	file:
SQLITE_PreferBuiltin	vendor\sqlite\sqlite3.c	11020;"	d	file:
SQLITE_QueryFlattener	vendor\sqlite\sqlite3.c	11033;"	d	file:
SQLITE_QueryOnly	vendor\sqlite\sqlite3.c	11024;"	d	file:
SQLITE_RANGE	vendor\sqlite\sqlite3.c	633;"	d	file:
SQLITE_READ	vendor\sqlite\sqlite3.c	2840;"	d	file:
SQLITE_READONLY	vendor\sqlite\sqlite3.c	616;"	d	file:
SQLITE_READONLY_CANTLOCK	vendor\sqlite\sqlite3.c	692;"	d	file:
SQLITE_READONLY_DBMOVED	vendor\sqlite\sqlite3.c	694;"	d	file:
SQLITE_READONLY_RECOVERY	vendor\sqlite\sqlite3.c	691;"	d	file:
SQLITE_READONLY_ROLLBACK	vendor\sqlite\sqlite3.c	693;"	d	file:
SQLITE_REALLOC	vendor\sqlite\sqlite3.c	16880;"	d	file:
SQLITE_REALLOC	vendor\sqlite\sqlite3.c	16892;"	d	file:
SQLITE_RECURSIVE	vendor\sqlite\sqlite3.c	2854;"	d	file:
SQLITE_REINDEX	vendor\sqlite\sqlite3.c	2847;"	d	file:
SQLITE_REPLACE	vendor\sqlite\sqlite3.c	7716;"	d	file:
SQLITE_ROLLBACK	vendor\sqlite\sqlite3.c	7712;"	d	file:
SQLITE_ROW	vendor\sqlite\sqlite3.c	637;"	d	file:
SQLITE_ReadUncommitted	vendor\sqlite\sqlite3.c	11013;"	d	file:
SQLITE_RecTriggers	vendor\sqlite\sqlite3.c	11017;"	d	file:
SQLITE_RecoveryMode	vendor\sqlite\sqlite3.c	11015;"	d	file:
SQLITE_ReverseOrder	vendor\sqlite\sqlite3.c	11016;"	d	file:
SQLITE_SAVEPOINT	vendor\sqlite\sqlite3.c	2852;"	d	file:
SQLITE_SCANSTAT_EST	vendor\sqlite\sqlite3.c	7767;"	d	file:
SQLITE_SCANSTAT_EXPLAIN	vendor\sqlite\sqlite3.c	7769;"	d	file:
SQLITE_SCANSTAT_NAME	vendor\sqlite\sqlite3.c	7768;"	d	file:
SQLITE_SCANSTAT_NLOOP	vendor\sqlite\sqlite3.c	7765;"	d	file:
SQLITE_SCANSTAT_NVISIT	vendor\sqlite\sqlite3.c	7766;"	d	file:
SQLITE_SCANSTAT_SELECTID	vendor\sqlite\sqlite3.c	7770;"	d	file:
SQLITE_SCHEMA	vendor\sqlite\sqlite3.c	625;"	d	file:
SQLITE_SELECT	vendor\sqlite\sqlite3.c	2841;"	d	file:
SQLITE_SET_LOCKPROXYFILE	vendor\sqlite\sqlite3.c	1189;"	d	file:
SQLITE_SHM_EXCLUSIVE	vendor\sqlite\sqlite3.c	1452;"	d	file:
SQLITE_SHM_LOCK	vendor\sqlite\sqlite3.c	1450;"	d	file:
SQLITE_SHM_NLOCK	vendor\sqlite\sqlite3.c	1462;"	d	file:
SQLITE_SHM_SHARED	vendor\sqlite\sqlite3.c	1451;"	d	file:
SQLITE_SHM_UNLOCK	vendor\sqlite\sqlite3.c	1449;"	d	file:
SQLITE_SKIP_UTF8	vendor\sqlite\sqlite3.c	12785;"	d	file:
SQLITE_SORTER_PMASZ	vendor\sqlite\sqlite3.c	13814;"	d	file:
SQLITE_SOURCE_ID	vendor\sqlite\sqlite3.c	321;"	d	file:
SQLITE_SO_ASC	vendor\sqlite\sqlite3.c	11258;"	d	file:
SQLITE_SO_DESC	vendor\sqlite\sqlite3.c	11259;"	d	file:
SQLITE_STAT4_SAMPLES	vendor\sqlite\sqlite3.c	87435;"	d	file:
SQLITE_STAT4_SAMPLES	vendor\sqlite\sqlite3.c	87436;"	d	file:
SQLITE_STAT4_SAMPLES	vendor\sqlite\sqlite3.c	87538;"	d	file:
SQLITE_STATIC	vendor\sqlite\sqlite3.c	4647;"	d	file:
SQLITE_STATUS_MALLOC_COUNT	vendor\sqlite\sqlite3.c	6625;"	d	file:
SQLITE_STATUS_MALLOC_SIZE	vendor\sqlite\sqlite3.c	6621;"	d	file:
SQLITE_STATUS_MEMORY_USED	vendor\sqlite\sqlite3.c	6616;"	d	file:
SQLITE_STATUS_PAGECACHE_OVERFLOW	vendor\sqlite\sqlite3.c	6618;"	d	file:
SQLITE_STATUS_PAGECACHE_SIZE	vendor\sqlite\sqlite3.c	6623;"	d	file:
SQLITE_STATUS_PAGECACHE_USED	vendor\sqlite\sqlite3.c	6617;"	d	file:
SQLITE_STATUS_PARSER_STACK	vendor\sqlite\sqlite3.c	6622;"	d	file:
SQLITE_STATUS_SCRATCH_OVERFLOW	vendor\sqlite\sqlite3.c	6620;"	d	file:
SQLITE_STATUS_SCRATCH_SIZE	vendor\sqlite\sqlite3.c	6624;"	d	file:
SQLITE_STATUS_SCRATCH_USED	vendor\sqlite\sqlite3.c	6619;"	d	file:
SQLITE_STMTSTATUS_AUTOINDEX	vendor\sqlite\sqlite3.c	6819;"	d	file:
SQLITE_STMTSTATUS_FULLSCAN_STEP	vendor\sqlite\sqlite3.c	6817;"	d	file:
SQLITE_STMTSTATUS_SORT	vendor\sqlite\sqlite3.c	6818;"	d	file:
SQLITE_STMTSTATUS_VM_STEP	vendor\sqlite\sqlite3.c	6820;"	d	file:
SQLITE_STOREP2	vendor\sqlite\sqlite3.c	11299;"	d	file:
SQLITE_SYNC_DATAONLY	vendor\sqlite\sqlite3.c	825;"	d	file:
SQLITE_SYNC_FULL	vendor\sqlite\sqlite3.c	824;"	d	file:
SQLITE_SYNC_MASK	vendor\sqlite\sqlite3.c	41278;"	d	file:
SQLITE_SYNC_NORMAL	vendor\sqlite\sqlite3.c	823;"	d	file:
SQLITE_SYSTEM_MALLOC	vendor\sqlite\sqlite3.c	8303;"	d	file:
SQLITE_ShortColNames	vendor\sqlite\sqlite3.c	11002;"	d	file:
SQLITE_SqlTrace	vendor\sqlite\sqlite3.c	11008;"	d	file:
SQLITE_Stat34	vendor\sqlite\sqlite3.c	11044;"	d	file:
SQLITE_SubqCoroutine	vendor\sqlite\sqlite3.c	11041;"	d	file:
SQLITE_TEMP_FILE_PREFIX	vendor\sqlite\sqlite3.c	10487;"	d	file:
SQLITE_TEMP_STORE	vendor\sqlite\sqlite3.c	8764;"	d	file:
SQLITE_TEMP_STORE_xc	vendor\sqlite\sqlite3.c	8765;"	d	file:
SQLITE_TESTCTRL_ALWAYS	vendor\sqlite\sqlite3.c	6487;"	d	file:
SQLITE_TESTCTRL_ASSERT	vendor\sqlite\sqlite3.c	6486;"	d	file:
SQLITE_TESTCTRL_BENIGN_MALLOC_HOOKS	vendor\sqlite\sqlite3.c	6484;"	d	file:
SQLITE_TESTCTRL_BITVEC_TEST	vendor\sqlite\sqlite3.c	6482;"	d	file:
SQLITE_TESTCTRL_BYTEORDER	vendor\sqlite\sqlite3.c	6496;"	d	file:
SQLITE_TESTCTRL_EXPLAIN_STMT	vendor\sqlite\sqlite3.c	6493;"	d	file:
SQLITE_TESTCTRL_FAULT_INSTALL	vendor\sqlite\sqlite3.c	6483;"	d	file:
SQLITE_TESTCTRL_FIRST	vendor\sqlite\sqlite3.c	6478;"	d	file:
SQLITE_TESTCTRL_IMPOSTER	vendor\sqlite\sqlite3.c	6499;"	d	file:
SQLITE_TESTCTRL_ISINIT	vendor\sqlite\sqlite3.c	6497;"	d	file:
SQLITE_TESTCTRL_ISKEYWORD	vendor\sqlite\sqlite3.c	6490;"	d	file:
SQLITE_TESTCTRL_LAST	vendor\sqlite\sqlite3.c	6500;"	d	file:
SQLITE_TESTCTRL_LOCALTIME_FAULT	vendor\sqlite\sqlite3.c	6492;"	d	file:
SQLITE_TESTCTRL_NEVER_CORRUPT	vendor\sqlite\sqlite3.c	6494;"	d	file:
SQLITE_TESTCTRL_OPTIMIZATIONS	vendor\sqlite\sqlite3.c	6489;"	d	file:
SQLITE_TESTCTRL_PENDING_BYTE	vendor\sqlite\sqlite3.c	6485;"	d	file:
SQLITE_TESTCTRL_PRNG_RESET	vendor\sqlite\sqlite3.c	6481;"	d	file:
SQLITE_TESTCTRL_PRNG_RESTORE	vendor\sqlite\sqlite3.c	6480;"	d	file:
SQLITE_TESTCTRL_PRNG_SAVE	vendor\sqlite\sqlite3.c	6479;"	d	file:
SQLITE_TESTCTRL_RESERVE	vendor\sqlite\sqlite3.c	6488;"	d	file:
SQLITE_TESTCTRL_SCRATCHMALLOC	vendor\sqlite\sqlite3.c	6491;"	d	file:
SQLITE_TESTCTRL_SORTER_MMAP	vendor\sqlite\sqlite3.c	6498;"	d	file:
SQLITE_TESTCTRL_VDBE_COVERAGE	vendor\sqlite\sqlite3.c	6495;"	d	file:
SQLITE_TEXT	vendor\sqlite\sqlite3.c	4047;"	d	file:
SQLITE_TEXT	vendor\sqlite\sqlite3.c	4049;"	d	file:
SQLITE_THREADSAFE	vendor\sqlite\sqlite3.c	8250;"	d	file:
SQLITE_THREADSAFE	vendor\sqlite\sqlite3.c	8252;"	d	file:
SQLITE_THREADS_IMPLEMENTED	vendor\sqlite\sqlite3.c	22462;"	d	file:
SQLITE_THREADS_IMPLEMENTED	vendor\sqlite\sqlite3.c	22530;"	d	file:
SQLITE_TOOBIG	vendor\sqlite\sqlite3.c	626;"	d	file:
SQLITE_TRANSACTION	vendor\sqlite\sqlite3.c	2842;"	d	file:
SQLITE_TRANSIENT	vendor\sqlite\sqlite3.c	4648;"	d	file:
SQLITE_Transitive	vendor\sqlite\sqlite3.c	11042;"	d	file:
SQLITE_UNIX_THREADS	vendor\sqlite\sqlite3.c	25160;"	d	file:
SQLITE_UPDATE	vendor\sqlite\sqlite3.c	2843;"	d	file:
SQLITE_USE_MALLOC_H	vendor\sqlite\sqlite3.c	16899;"	d	file:
SQLITE_USE_MALLOC_H	vendor\sqlite\sqlite3.c	16908;"	d	file:
SQLITE_USE_MALLOC_USABLE_SIZE	vendor\sqlite\sqlite3.c	16900;"	d	file:
SQLITE_USE_MSIZE	vendor\sqlite\sqlite3.c	16909;"	d	file:
SQLITE_USE_URI	vendor\sqlite\sqlite3.c	13799;"	d	file:
SQLITE_UTF16	vendor\sqlite\sqlite3.c	4417;"	d	file:
SQLITE_UTF16BE	vendor\sqlite\sqlite3.c	4416;"	d	file:
SQLITE_UTF16LE	vendor\sqlite\sqlite3.c	4415;"	d	file:
SQLITE_UTF16NATIVE	vendor\sqlite\sqlite3.c	8937;"	d	file:
SQLITE_UTF16NATIVE	vendor\sqlite\sqlite3.c	8944;"	d	file:
SQLITE_UTF16NATIVE	vendor\sqlite\sqlite3.c	8950;"	d	file:
SQLITE_UTF16_ALIGNED	vendor\sqlite\sqlite3.c	4419;"	d	file:
SQLITE_UTF8	vendor\sqlite\sqlite3.c	4414;"	d	file:
SQLITE_VERSION	vendor\sqlite\sqlite3.c	286;"	d	file:
SQLITE_VERSION	vendor\sqlite\sqlite3.c	319;"	d	file:
SQLITE_VERSION_NUMBER	vendor\sqlite\sqlite3.c	289;"	d	file:
SQLITE_VERSION_NUMBER	vendor\sqlite\sqlite3.c	320;"	d	file:
SQLITE_VTAB_CONSTRAINT_SUPPORT	vendor\sqlite\sqlite3.c	7686;"	d	file:
SQLITE_VdbeAddopTrace	vendor\sqlite\sqlite3.c	11011;"	d	file:
SQLITE_VdbeEQP	vendor\sqlite\sqlite3.c	11025;"	d	file:
SQLITE_VdbeListing	vendor\sqlite\sqlite3.c	11009;"	d	file:
SQLITE_VdbeTrace	vendor\sqlite\sqlite3.c	10996;"	d	file:
SQLITE_W32_MUTEX_INITIALIZER	vendor\sqlite\sqlite3.c	20003;"	d	file:
SQLITE_WARNING	vendor\sqlite\sqlite3.c	636;"	d	file:
SQLITE_WARNING_AUTOINDEX	vendor\sqlite\sqlite3.c	708;"	d	file:
SQLITE_WIN32_DATA_DIRECTORY_TYPE	vendor\sqlite\sqlite3.c	33294;"	d	file:
SQLITE_WIN32_DBG_BUF_SIZE	vendor\sqlite\sqlite3.c	33286;"	d	file:
SQLITE_WIN32_GETVERSIONEX	vendor\sqlite\sqlite3.c	33086;"	d	file:
SQLITE_WIN32_GETVERSIONEX	vendor\sqlite\sqlite3.c	33088;"	d	file:
SQLITE_WIN32_HAS_ANSI	vendor\sqlite\sqlite3.c	33048;"	d	file:
SQLITE_WIN32_HAS_WIDE	vendor\sqlite\sqlite3.c	33057;"	d	file:
SQLITE_WIN32_HEAP_CREATE	vendor\sqlite\sqlite3.c	33326;"	d	file:
SQLITE_WIN32_HEAP_FLAGS	vendor\sqlite\sqlite3.c	33349;"	d	file:
SQLITE_WIN32_HEAP_INIT_SIZE	vendor\sqlite\sqlite3.c	33333;"	d	file:
SQLITE_WIN32_HEAP_MAX_SIZE	vendor\sqlite\sqlite3.c	33341;"	d	file:
SQLITE_WIN32_IOERR_RETRY	vendor\sqlite\sqlite3.c	34902;"	d	file:
SQLITE_WIN32_IOERR_RETRY_DELAY	vendor\sqlite\sqlite3.c	34905;"	d	file:
SQLITE_WIN32_MAX_ERRMSG_CHARS	vendor\sqlite\sqlite3.c	33144;"	d	file:
SQLITE_WIN32_MAX_PATH_BYTES	vendor\sqlite\sqlite3.c	33128;"	d	file:
SQLITE_WIN32_MAX_PATH_CHARS	vendor\sqlite\sqlite3.c	33104;"	d	file:
SQLITE_WIN32_TEMP_DIRECTORY_TYPE	vendor\sqlite\sqlite3.c	33302;"	d	file:
SQLITE_WIN32_VOLATILE	vendor\sqlite\sqlite3.c	19957;"	d	file:
SQLITE_WIN32_VOLATILE	vendor\sqlite\sqlite3.c	19959;"	d	file:
SQLITE_WINNT_MAX_PATH_BYTES	vendor\sqlite\sqlite3.c	33136;"	d	file:
SQLITE_WINNT_MAX_PATH_CHARS	vendor\sqlite\sqlite3.c	33119;"	d	file:
SQLITE_WSD	vendor\sqlite\sqlite3.c	9125;"	d	file:
SQLITE_WSD	vendor\sqlite\sqlite3.c	9131;"	d	file:
SQLITE_WriteSchema	vendor\sqlite\sqlite3.c	11010;"	d	file:
SQL_CHOMP_SEGDIR	vendor\sqlite\sqlite3.c	141990;"	d	file:
SQL_CONTENT_INSERT	vendor\sqlite\sqlite3.c	141974;"	d	file:
SQL_DELETE_ALL_CONTENT	vendor\sqlite\sqlite3.c	141958;"	d	file:
SQL_DELETE_ALL_DOCSIZE	vendor\sqlite\sqlite3.c	141961;"	d	file:
SQL_DELETE_ALL_SEGDIR	vendor\sqlite\sqlite3.c	141960;"	d	file:
SQL_DELETE_ALL_SEGMENTS	vendor\sqlite\sqlite3.c	141959;"	d	file:
SQL_DELETE_ALL_STAT	vendor\sqlite\sqlite3.c	141962;"	d	file:
SQL_DELETE_ALL_TERMS_SEGDIR	vendor\sqlite\sqlite3.c	141982;"	d	file:
SQL_DELETE_CONTENT	vendor\sqlite\sqlite3.c	141956;"	d	file:
SQL_DELETE_DOCSIZE	vendor\sqlite\sqlite3.c	141975;"	d	file:
SQL_DELETE_SEGDIR_ENTRY	vendor\sqlite\sqlite3.c	141987;"	d	file:
SQL_DELETE_SEGDIR_LEVEL	vendor\sqlite\sqlite3.c	141972;"	d	file:
SQL_DELETE_SEGDIR_RANGE	vendor\sqlite\sqlite3.c	141983;"	d	file:
SQL_DELETE_SEGMENTS_RANGE	vendor\sqlite\sqlite3.c	141973;"	d	file:
SQL_FIND_MERGE_LEVEL	vendor\sqlite\sqlite3.c	141985;"	d	file:
SQL_INSERT_SEGDIR	vendor\sqlite\sqlite3.c	141967;"	d	file:
SQL_INSERT_SEGMENTS	vendor\sqlite\sqlite3.c	141965;"	d	file:
SQL_IS_EMPTY	vendor\sqlite\sqlite3.c	141957;"	d	file:
SQL_MAX_LEAF_NODE_ESTIMATE	vendor\sqlite\sqlite3.c	141986;"	d	file:
SQL_NEXT_SEGMENTS_ID	vendor\sqlite\sqlite3.c	141966;"	d	file:
SQL_NEXT_SEGMENT_INDEX	vendor\sqlite\sqlite3.c	141964;"	d	file:
SQL_REPLACE_DOCSIZE	vendor\sqlite\sqlite3.c	141976;"	d	file:
SQL_REPLACE_STAT	vendor\sqlite\sqlite3.c	141979;"	d	file:
SQL_SEGMENT_IS_APPENDABLE	vendor\sqlite\sqlite3.c	141991;"	d	file:
SQL_SELECT_ALL_LANGID	vendor\sqlite\sqlite3.c	141984;"	d	file:
SQL_SELECT_ALL_PREFIX_LEVEL	vendor\sqlite\sqlite3.c	141981;"	d	file:
SQL_SELECT_CONTENT_BY_ROWID	vendor\sqlite\sqlite3.c	141963;"	d	file:
SQL_SELECT_DOCSIZE	vendor\sqlite\sqlite3.c	141977;"	d	file:
SQL_SELECT_INDEXES	vendor\sqlite\sqlite3.c	141992;"	d	file:
SQL_SELECT_LEVEL	vendor\sqlite\sqlite3.c	141968;"	d	file:
SQL_SELECT_LEVEL_COUNT	vendor\sqlite\sqlite3.c	141970;"	d	file:
SQL_SELECT_LEVEL_RANGE	vendor\sqlite\sqlite3.c	141969;"	d	file:
SQL_SELECT_LEVEL_RANGE2	vendor\sqlite\sqlite3.c	141995;"	d	file:
SQL_SELECT_MXLEVEL	vendor\sqlite\sqlite3.c	141993;"	d	file:
SQL_SELECT_SEGDIR	vendor\sqlite\sqlite3.c	141989;"	d	file:
SQL_SELECT_SEGDIR_MAX_LEVEL	vendor\sqlite\sqlite3.c	141971;"	d	file:
SQL_SELECT_STAT	vendor\sqlite\sqlite3.c	141978;"	d	file:
SQL_SHIFT_SEGDIR_ENTRY	vendor\sqlite\sqlite3.c	141988;"	d	file:
SQL_UPDATE_LEVEL	vendor\sqlite\sqlite3.c	141997;"	d	file:
SQL_UPDATE_LEVEL_IDX	vendor\sqlite\sqlite3.c	141996;"	d	file:
SQLiteThread	vendor\sqlite\sqlite3.c	/^struct SQLiteThread {$/;"	s	file:
SQLiteThread	vendor\sqlite\sqlite3.c	/^typedef struct SQLiteThread SQLiteThread;$/;"	t	typeref:struct:SQLiteThread	file:
SRT_Coroutine	vendor\sqlite\sqlite3.c	12271;"	d	file:
SRT_Discard	vendor\sqlite\sqlite3.c	12258;"	d	file:
SRT_DistFifo	vendor\sqlite\sqlite3.c	12260;"	d	file:
SRT_DistQueue	vendor\sqlite\sqlite3.c	12262;"	d	file:
SRT_EphemTab	vendor\sqlite\sqlite3.c	12270;"	d	file:
SRT_Except	vendor\sqlite\sqlite3.c	12256;"	d	file:
SRT_Exists	vendor\sqlite\sqlite3.c	12257;"	d	file:
SRT_Fifo	vendor\sqlite\sqlite3.c	12259;"	d	file:
SRT_Mem	vendor\sqlite\sqlite3.c	12268;"	d	file:
SRT_Output	vendor\sqlite\sqlite3.c	12267;"	d	file:
SRT_Queue	vendor\sqlite\sqlite3.c	12261;"	d	file:
SRT_Set	vendor\sqlite\sqlite3.c	12269;"	d	file:
SRT_Table	vendor\sqlite\sqlite3.c	12272;"	d	file:
SRT_Union	vendor\sqlite\sqlite3.c	12255;"	d	file:
SRVAL	vendor\sqlite\sqlite3.c	77807;"	d	file:
STAT_GET_NDLT	vendor\sqlite\sqlite3.c	88075;"	d	file:
STAT_GET_NEQ	vendor\sqlite\sqlite3.c	88073;"	d	file:
STAT_GET_NLT	vendor\sqlite\sqlite3.c	88074;"	d	file:
STAT_GET_ROWID	vendor\sqlite\sqlite3.c	88072;"	d	file:
STAT_GET_STAT1	vendor\sqlite\sqlite3.c	88071;"	d	file:
STRACCUM_NOMEM	vendor\sqlite\sqlite3.c	12629;"	d	file:
STRACCUM_TOOBIG	vendor\sqlite\sqlite3.c	12630;"	d	file:
STRICMP	vendor\sqlite\sqlite3.c	91067;"	d	file:
STR_FUNCTION	vendor\sqlite\sqlite3.c	11170;"	d	file:
SWAP	vendor\sqlite\sqlite3.c	8806;"	d	file:
SYSCALL	vendor\sqlite\sqlite3.c	33426;"	d	file:
Savepoint	vendor\sqlite\sqlite3.c	/^struct Savepoint {$/;"	s	file:
Savepoint	vendor\sqlite\sqlite3.c	/^typedef struct Savepoint Savepoint;$/;"	t	typeref:struct:Savepoint	file:
ScanStatus	vendor\sqlite\sqlite3.c	/^struct ScanStatus {$/;"	s	file:
ScanStatus	vendor\sqlite\sqlite3.c	/^typedef struct ScanStatus ScanStatus;$/;"	t	typeref:struct:ScanStatus	file:
Schema	vendor\sqlite\sqlite3.c	/^struct Schema {$/;"	s	file:
Schema	vendor\sqlite\sqlite3.c	/^typedef struct Schema Schema;$/;"	t	typeref:struct:Schema	file:
ScratchFreeslot	vendor\sqlite\sqlite3.c	/^typedef struct ScratchFreeslot {$/;"	s	file:
ScratchFreeslot	vendor\sqlite\sqlite3.c	/^} ScratchFreeslot;$/;"	t	typeref:struct:ScratchFreeslot	file:
SegmentNode	vendor\sqlite\sqlite3.c	/^struct SegmentNode {$/;"	s	file:
SegmentNode	vendor\sqlite\sqlite3.c	/^typedef struct SegmentNode SegmentNode;$/;"	t	typeref:struct:SegmentNode	file:
SegmentWriter	vendor\sqlite\sqlite3.c	/^struct SegmentWriter {$/;"	s	file:
SegmentWriter	vendor\sqlite\sqlite3.c	/^typedef struct SegmentWriter SegmentWriter;$/;"	t	typeref:struct:SegmentWriter	file:
Select	vendor\sqlite\sqlite3.c	/^struct Select {$/;"	s	file:
Select	vendor\sqlite\sqlite3.c	/^typedef struct Select Select;$/;"	t	typeref:struct:Select	file:
SelectDest	vendor\sqlite\sqlite3.c	/^struct SelectDest {$/;"	s	file:
SelectDest	vendor\sqlite\sqlite3.c	/^typedef struct SelectDest SelectDest;$/;"	t	typeref:struct:SelectDest	file:
ShmRegion	vendor\sqlite\sqlite3.c	/^  struct ShmRegion {$/;"	s	struct:winShmNode	file:
SimulateDiskfullError	vendor\sqlite\sqlite3.c	19849;"	d	file:
SimulateDiskfullError	vendor\sqlite\sqlite3.c	19863;"	d	file:
SimulateDiskfullError	vendor\sqlite\sqlite3.c	25474;"	d	file:
SimulateDiskfullError	vendor\sqlite\sqlite3.c	25488;"	d	file:
SimulateDiskfullError	vendor\sqlite\sqlite3.c	32993;"	d	file:
SimulateDiskfullError	vendor\sqlite\sqlite3.c	33007;"	d	file:
SimulateIOError	vendor\sqlite\sqlite3.c	19840;"	d	file:
SimulateIOError	vendor\sqlite\sqlite3.c	19862;"	d	file:
SimulateIOError	vendor\sqlite\sqlite3.c	25465;"	d	file:
SimulateIOError	vendor\sqlite\sqlite3.c	25487;"	d	file:
SimulateIOError	vendor\sqlite\sqlite3.c	32984;"	d	file:
SimulateIOError	vendor\sqlite\sqlite3.c	33006;"	d	file:
SimulateIOErrorBenign	vendor\sqlite\sqlite3.c	19839;"	d	file:
SimulateIOErrorBenign	vendor\sqlite\sqlite3.c	19861;"	d	file:
SimulateIOErrorBenign	vendor\sqlite\sqlite3.c	25464;"	d	file:
SimulateIOErrorBenign	vendor\sqlite\sqlite3.c	25486;"	d	file:
SimulateIOErrorBenign	vendor\sqlite\sqlite3.c	32983;"	d	file:
SimulateIOErrorBenign	vendor\sqlite\sqlite3.c	33005;"	d	file:
SizeofArray	vendor\sqlite\sqlite3.c	131624;"	d	file:
SnippetFragment	vendor\sqlite\sqlite3.c	/^struct SnippetFragment {$/;"	s	file:
SnippetFragment	vendor\sqlite\sqlite3.c	/^typedef struct SnippetFragment SnippetFragment;$/;"	t	typeref:struct:SnippetFragment	file:
SnippetIter	vendor\sqlite\sqlite3.c	/^struct SnippetIter {$/;"	s	file:
SnippetIter	vendor\sqlite\sqlite3.c	/^typedef struct SnippetIter SnippetIter;$/;"	t	typeref:struct:SnippetIter	file:
SnippetPhrase	vendor\sqlite\sqlite3.c	/^struct SnippetPhrase {$/;"	s	file:
SnippetPhrase	vendor\sqlite\sqlite3.c	/^typedef struct SnippetPhrase SnippetPhrase;$/;"	t	typeref:struct:SnippetPhrase	file:
SortByDimension	vendor\sqlite\sqlite3.c	/^static void SortByDimension($/;"	f	file:
SortByDistance	vendor\sqlite\sqlite3.c	/^static void SortByDistance($/;"	f	file:
SortCtx	vendor\sqlite\sqlite3.c	/^struct SortCtx {$/;"	s	file:
SortCtx	vendor\sqlite\sqlite3.c	/^typedef struct SortCtx SortCtx;$/;"	t	typeref:struct:SortCtx	file:
SortSubtask	vendor\sqlite\sqlite3.c	/^struct SortSubtask {$/;"	s	file:
SortSubtask	vendor\sqlite\sqlite3.c	/^typedef struct SortSubtask SortSubtask;     \/* A sub-task in the sort process *\/$/;"	t	typeref:struct:SortSubtask	file:
SorterFile	vendor\sqlite\sqlite3.c	/^struct SorterFile {$/;"	s	file:
SorterFile	vendor\sqlite\sqlite3.c	/^typedef struct SorterFile SorterFile;       \/* Temporary file object wrapper *\/$/;"	t	typeref:struct:SorterFile	file:
SorterList	vendor\sqlite\sqlite3.c	/^struct SorterList {$/;"	s	file:
SorterList	vendor\sqlite\sqlite3.c	/^typedef struct SorterList SorterList;       \/* In-memory list of records *\/$/;"	t	typeref:struct:SorterList	file:
SorterRecord	vendor\sqlite\sqlite3.c	/^struct SorterRecord {$/;"	s	file:
SorterRecord	vendor\sqlite\sqlite3.c	/^typedef struct SorterRecord SorterRecord;   \/* A record being sorted *\/$/;"	t	typeref:struct:SorterRecord	file:
SplitNode	vendor\sqlite\sqlite3.c	/^static int SplitNode($/;"	f	file:
Sqlite3Config	vendor\sqlite\sqlite3.c	/^struct Sqlite3Config {$/;"	s	file:
SrcCount	vendor\sqlite\sqlite3.c	/^struct SrcCount {$/;"	s	file:
SrcList	vendor\sqlite\sqlite3.c	/^struct SrcList {$/;"	s	file:
SrcList	vendor\sqlite\sqlite3.c	/^typedef struct SrcList SrcList;$/;"	t	typeref:struct:SrcList	file:
SrcList_item	vendor\sqlite\sqlite3.c	/^  struct SrcList_item {$/;"	s	struct:SrcList	file:
Stat4Accum	vendor\sqlite\sqlite3.c	/^struct Stat4Accum {$/;"	s	file:
Stat4Accum	vendor\sqlite\sqlite3.c	/^typedef struct Stat4Accum Stat4Accum;$/;"	t	typeref:struct:Stat4Accum	file:
Stat4Sample	vendor\sqlite\sqlite3.c	/^struct Stat4Sample {$/;"	s	file:
Stat4Sample	vendor\sqlite\sqlite3.c	/^typedef struct Stat4Sample Stat4Sample;$/;"	t	typeref:struct:Stat4Sample	file:
StrAccum	vendor\sqlite\sqlite3.c	/^struct StrAccum {$/;"	s	file:
StrAccum	vendor\sqlite\sqlite3.c	/^typedef struct StrAccum StrAccum;$/;"	t	typeref:struct:StrAccum	file:
StrBuffer	vendor\sqlite\sqlite3.c	/^struct StrBuffer {$/;"	s	file:
StrBuffer	vendor\sqlite\sqlite3.c	/^typedef struct StrBuffer StrBuffer;$/;"	t	typeref:struct:StrBuffer	file:
Stringify	vendor\sqlite\sqlite3.c	70389;"	d	file:
SubProgram	vendor\sqlite\sqlite3.c	/^struct SubProgram {$/;"	s	file:
SubProgram	vendor\sqlite\sqlite3.c	/^typedef struct SubProgram SubProgram;$/;"	t	typeref:struct:SubProgram	file:
SumCtx	vendor\sqlite\sqlite3.c	/^struct SumCtx {$/;"	s	file:
SumCtx	vendor\sqlite\sqlite3.c	/^typedef struct SumCtx SumCtx;$/;"	t	typeref:struct:SumCtx	file:
TEMP_MASTER_NAME	vendor\sqlite\sqlite3.c	9077;"	d	file:
TERM_ANDINFO	vendor\sqlite\sqlite3.c	115131;"	d	file:
TERM_CODED	vendor\sqlite\sqlite3.c	115128;"	d	file:
TERM_COPIED	vendor\sqlite\sqlite3.c	115129;"	d	file:
TERM_DYNAMIC	vendor\sqlite\sqlite3.c	115126;"	d	file:
TERM_LIKE	vendor\sqlite\sqlite3.c	115140;"	d	file:
TERM_LIKECOND	vendor\sqlite\sqlite3.c	115139;"	d	file:
TERM_LIKEOPT	vendor\sqlite\sqlite3.c	115138;"	d	file:
TERM_ORINFO	vendor\sqlite\sqlite3.c	115130;"	d	file:
TERM_OR_OK	vendor\sqlite\sqlite3.c	115132;"	d	file:
TERM_VIRTUAL	vendor\sqlite\sqlite3.c	115127;"	d	file:
TERM_VNULL	vendor\sqlite\sqlite3.c	115134;"	d	file:
TERM_VNULL	vendor\sqlite\sqlite3.c	115136;"	d	file:
TESTBIT	vendor\sqlite\sqlite3.c	38893;"	d	file:
TESTONLY	vendor\sqlite\sqlite3.c	131717;"	d	file:
TESTONLY	vendor\sqlite\sqlite3.c	131719;"	d	file:
TESTONLY	vendor\sqlite\sqlite3.c	8376;"	d	file:
TESTONLY	vendor\sqlite\sqlite3.c	8378;"	d	file:
TF_Autoincrement	vendor\sqlite\sqlite3.c	11425;"	d	file:
TF_Ephemeral	vendor\sqlite\sqlite3.c	11423;"	d	file:
TF_HasPrimaryKey	vendor\sqlite\sqlite3.c	11424;"	d	file:
TF_Readonly	vendor\sqlite\sqlite3.c	11422;"	d	file:
TF_Virtual	vendor\sqlite\sqlite3.c	11426;"	d	file:
TF_WithoutRowid	vendor\sqlite\sqlite3.c	11427;"	d	file:
THREE_BYTE_INT	vendor\sqlite\sqlite3.c	67343;"	d	file:
TIMER_ELAPSED	vendor\sqlite\sqlite3.c	19819;"	d	file:
TIMER_ELAPSED	vendor\sqlite\sqlite3.c	19823;"	d	file:
TIMER_ELAPSED	vendor\sqlite\sqlite3.c	25444;"	d	file:
TIMER_ELAPSED	vendor\sqlite\sqlite3.c	25448;"	d	file:
TIMER_ELAPSED	vendor\sqlite\sqlite3.c	32963;"	d	file:
TIMER_ELAPSED	vendor\sqlite\sqlite3.c	32967;"	d	file:
TIMER_END	vendor\sqlite\sqlite3.c	19818;"	d	file:
TIMER_END	vendor\sqlite\sqlite3.c	19822;"	d	file:
TIMER_END	vendor\sqlite\sqlite3.c	25443;"	d	file:
TIMER_END	vendor\sqlite\sqlite3.c	25447;"	d	file:
TIMER_END	vendor\sqlite\sqlite3.c	32962;"	d	file:
TIMER_END	vendor\sqlite\sqlite3.c	32966;"	d	file:
TIMER_START	vendor\sqlite\sqlite3.c	19817;"	d	file:
TIMER_START	vendor\sqlite\sqlite3.c	19821;"	d	file:
TIMER_START	vendor\sqlite\sqlite3.c	25442;"	d	file:
TIMER_START	vendor\sqlite\sqlite3.c	25446;"	d	file:
TIMER_START	vendor\sqlite\sqlite3.c	32961;"	d	file:
TIMER_START	vendor\sqlite\sqlite3.c	32965;"	d	file:
TK_ABORT	vendor\sqlite\sqlite3.c	8569;"	d	file:
TK_ACTION	vendor\sqlite\sqlite3.c	8570;"	d	file:
TK_ADD	vendor\sqlite\sqlite3.c	8682;"	d	file:
TK_AFTER	vendor\sqlite\sqlite3.c	8571;"	d	file:
TK_AGG_COLUMN	vendor\sqlite\sqlite3.c	8696;"	d	file:
TK_AGG_FUNCTION	vendor\sqlite\sqlite3.c	8695;"	d	file:
TK_ALL	vendor\sqlite\sqlite3.c	8656;"	d	file:
TK_ALTER	vendor\sqlite\sqlite3.c	8681;"	d	file:
TK_ANALYZE	vendor\sqlite\sqlite3.c	8572;"	d	file:
TK_AND	vendor\sqlite\sqlite3.c	8612;"	d	file:
TK_ANY	vendor\sqlite\sqlite3.c	8610;"	d	file:
TK_AS	vendor\sqlite\sqlite3.c	8564;"	d	file:
TK_ASC	vendor\sqlite\sqlite3.c	8573;"	d	file:
TK_ATTACH	vendor\sqlite\sqlite3.c	8574;"	d	file:
TK_AUTOINCR	vendor\sqlite\sqlite3.c	8646;"	d	file:
TK_BEFORE	vendor\sqlite\sqlite3.c	8575;"	d	file:
TK_BEGIN	vendor\sqlite\sqlite3.c	8545;"	d	file:
TK_BETWEEN	vendor\sqlite\sqlite3.c	8614;"	d	file:
TK_BITAND	vendor\sqlite\sqlite3.c	8625;"	d	file:
TK_BITNOT	vendor\sqlite\sqlite3.c	8636;"	d	file:
TK_BITOR	vendor\sqlite\sqlite3.c	8626;"	d	file:
TK_BLOB	vendor\sqlite\sqlite3.c	8674;"	d	file:
TK_BY	vendor\sqlite\sqlite3.c	8576;"	d	file:
TK_CASCADE	vendor\sqlite\sqlite3.c	8577;"	d	file:
TK_CASE	vendor\sqlite\sqlite3.c	8676;"	d	file:
TK_CAST	vendor\sqlite\sqlite3.c	8578;"	d	file:
TK_CHECK	vendor\sqlite\sqlite3.c	8644;"	d	file:
TK_COLLATE	vendor\sqlite\sqlite3.c	8635;"	d	file:
TK_COLUMN	vendor\sqlite\sqlite3.c	8694;"	d	file:
TK_COLUMNKW	vendor\sqlite\sqlite3.c	8579;"	d	file:
TK_COMMA	vendor\sqlite\sqlite3.c	8566;"	d	file:
TK_COMMIT	vendor\sqlite\sqlite3.c	8550;"	d	file:
TK_CONCAT	vendor\sqlite\sqlite3.c	8634;"	d	file:
TK_CONFLICT	vendor\sqlite\sqlite3.c	8580;"	d	file:
TK_CONSTRAINT	vendor\sqlite\sqlite3.c	8639;"	d	file:
TK_CREATE	vendor\sqlite\sqlite3.c	8557;"	d	file:
TK_CTIME_KW	vendor\sqlite\sqlite3.c	8609;"	d	file:
TK_DATABASE	vendor\sqlite\sqlite3.c	8581;"	d	file:
TK_DEFAULT	vendor\sqlite\sqlite3.c	8640;"	d	file:
TK_DEFERRABLE	vendor\sqlite\sqlite3.c	8652;"	d	file:
TK_DEFERRED	vendor\sqlite\sqlite3.c	8547;"	d	file:
TK_DELETE	vendor\sqlite\sqlite3.c	8649;"	d	file:
TK_DESC	vendor\sqlite\sqlite3.c	8582;"	d	file:
TK_DETACH	vendor\sqlite\sqlite3.c	8583;"	d	file:
TK_DISTINCT	vendor\sqlite\sqlite3.c	8661;"	d	file:
TK_DOT	vendor\sqlite\sqlite3.c	8662;"	d	file:
TK_DROP	vendor\sqlite\sqlite3.c	8654;"	d	file:
TK_EACH	vendor\sqlite\sqlite3.c	8584;"	d	file:
TK_ELSE	vendor\sqlite\sqlite3.c	8679;"	d	file:
TK_END	vendor\sqlite\sqlite3.c	8551;"	d	file:
TK_END_OF_FILE	vendor\sqlite\sqlite3.c	8689;"	d	file:
TK_EQ	vendor\sqlite\sqlite3.c	8619;"	d	file:
TK_ESCAPE	vendor\sqlite\sqlite3.c	8624;"	d	file:
TK_EXCEPT	vendor\sqlite\sqlite3.c	8657;"	d	file:
TK_EXCLUSIVE	vendor\sqlite\sqlite3.c	8549;"	d	file:
TK_EXISTS	vendor\sqlite\sqlite3.c	8560;"	d	file:
TK_EXPLAIN	vendor\sqlite\sqlite3.c	8542;"	d	file:
TK_FAIL	vendor\sqlite\sqlite3.c	8585;"	d	file:
TK_FLOAT	vendor\sqlite\sqlite3.c	8673;"	d	file:
TK_FOR	vendor\sqlite\sqlite3.c	8586;"	d	file:
TK_FOREIGN	vendor\sqlite\sqlite3.c	8653;"	d	file:
TK_FROM	vendor\sqlite\sqlite3.c	8663;"	d	file:
TK_FUNCTION	vendor\sqlite\sqlite3.c	8693;"	d	file:
TK_GE	vendor\sqlite\sqlite3.c	8623;"	d	file:
TK_GROUP	vendor\sqlite\sqlite3.c	8667;"	d	file:
TK_GT	vendor\sqlite\sqlite3.c	8620;"	d	file:
TK_HAVING	vendor\sqlite\sqlite3.c	8668;"	d	file:
TK_ID	vendor\sqlite\sqlite3.c	8567;"	d	file:
TK_IF	vendor\sqlite\sqlite3.c	8558;"	d	file:
TK_IGNORE	vendor\sqlite\sqlite3.c	8587;"	d	file:
TK_ILLEGAL	vendor\sqlite\sqlite3.c	8690;"	d	file:
TK_IMMEDIATE	vendor\sqlite\sqlite3.c	8548;"	d	file:
TK_IN	vendor\sqlite\sqlite3.c	8615;"	d	file:
TK_INDEX	vendor\sqlite\sqlite3.c	8680;"	d	file:
TK_INDEXED	vendor\sqlite\sqlite3.c	8568;"	d	file:
TK_INITIALLY	vendor\sqlite\sqlite3.c	8588;"	d	file:
TK_INSERT	vendor\sqlite\sqlite3.c	8648;"	d	file:
TK_INSTEAD	vendor\sqlite\sqlite3.c	8589;"	d	file:
TK_INTEGER	vendor\sqlite\sqlite3.c	8672;"	d	file:
TK_INTERSECT	vendor\sqlite\sqlite3.c	8658;"	d	file:
TK_INTO	vendor\sqlite\sqlite3.c	8671;"	d	file:
TK_IS	vendor\sqlite\sqlite3.c	8613;"	d	file:
TK_ISNOT	vendor\sqlite\sqlite3.c	8688;"	d	file:
TK_ISNULL	vendor\sqlite\sqlite3.c	8616;"	d	file:
TK_JOIN	vendor\sqlite\sqlite3.c	8664;"	d	file:
TK_JOIN_KW	vendor\sqlite\sqlite3.c	8638;"	d	file:
TK_KEY	vendor\sqlite\sqlite3.c	8593;"	d	file:
TK_LE	vendor\sqlite\sqlite3.c	8621;"	d	file:
TK_LIKE_KW	vendor\sqlite\sqlite3.c	8590;"	d	file:
TK_LIMIT	vendor\sqlite\sqlite3.c	8669;"	d	file:
TK_LP	vendor\sqlite\sqlite3.c	8562;"	d	file:
TK_LSHIFT	vendor\sqlite\sqlite3.c	8627;"	d	file:
TK_LT	vendor\sqlite\sqlite3.c	8622;"	d	file:
TK_MATCH	vendor\sqlite\sqlite3.c	8591;"	d	file:
TK_MINUS	vendor\sqlite\sqlite3.c	8630;"	d	file:
TK_NE	vendor\sqlite\sqlite3.c	8618;"	d	file:
TK_NO	vendor\sqlite\sqlite3.c	8592;"	d	file:
TK_NOT	vendor\sqlite\sqlite3.c	8559;"	d	file:
TK_NOTNULL	vendor\sqlite\sqlite3.c	8617;"	d	file:
TK_NULL	vendor\sqlite\sqlite3.c	8641;"	d	file:
TK_OF	vendor\sqlite\sqlite3.c	8594;"	d	file:
TK_OFFSET	vendor\sqlite\sqlite3.c	8595;"	d	file:
TK_ON	vendor\sqlite\sqlite3.c	8647;"	d	file:
TK_OR	vendor\sqlite\sqlite3.c	8611;"	d	file:
TK_ORDER	vendor\sqlite\sqlite3.c	8666;"	d	file:
TK_PLAN	vendor\sqlite\sqlite3.c	8544;"	d	file:
TK_PLUS	vendor\sqlite\sqlite3.c	8629;"	d	file:
TK_PRAGMA	vendor\sqlite\sqlite3.c	8596;"	d	file:
TK_PRIMARY	vendor\sqlite\sqlite3.c	8642;"	d	file:
TK_QUERY	vendor\sqlite\sqlite3.c	8543;"	d	file:
TK_RAISE	vendor\sqlite\sqlite3.c	8597;"	d	file:
TK_RECURSIVE	vendor\sqlite\sqlite3.c	8598;"	d	file:
TK_REFERENCES	vendor\sqlite\sqlite3.c	8645;"	d	file:
TK_REGISTER	vendor\sqlite\sqlite3.c	8699;"	d	file:
TK_REINDEX	vendor\sqlite\sqlite3.c	8607;"	d	file:
TK_RELEASE	vendor\sqlite\sqlite3.c	8554;"	d	file:
TK_REM	vendor\sqlite\sqlite3.c	8633;"	d	file:
TK_RENAME	vendor\sqlite\sqlite3.c	8608;"	d	file:
TK_REPLACE	vendor\sqlite\sqlite3.c	8599;"	d	file:
TK_RESTRICT	vendor\sqlite\sqlite3.c	8600;"	d	file:
TK_ROLLBACK	vendor\sqlite\sqlite3.c	8552;"	d	file:
TK_ROW	vendor\sqlite\sqlite3.c	8601;"	d	file:
TK_RP	vendor\sqlite\sqlite3.c	8563;"	d	file:
TK_RSHIFT	vendor\sqlite\sqlite3.c	8628;"	d	file:
TK_SAVEPOINT	vendor\sqlite\sqlite3.c	8553;"	d	file:
TK_SELECT	vendor\sqlite\sqlite3.c	8659;"	d	file:
TK_SEMI	vendor\sqlite\sqlite3.c	8541;"	d	file:
TK_SET	vendor\sqlite\sqlite3.c	8651;"	d	file:
TK_SLASH	vendor\sqlite\sqlite3.c	8632;"	d	file:
TK_SPACE	vendor\sqlite\sqlite3.c	8691;"	d	file:
TK_STAR	vendor\sqlite\sqlite3.c	8631;"	d	file:
TK_STRING	vendor\sqlite\sqlite3.c	8637;"	d	file:
TK_TABLE	vendor\sqlite\sqlite3.c	8556;"	d	file:
TK_TEMP	vendor\sqlite\sqlite3.c	8561;"	d	file:
TK_THEN	vendor\sqlite\sqlite3.c	8678;"	d	file:
TK_TO	vendor\sqlite\sqlite3.c	8555;"	d	file:
TK_TO_BLOB	vendor\sqlite\sqlite3.c	8684;"	d	file:
TK_TO_INT	vendor\sqlite\sqlite3.c	8686;"	d	file:
TK_TO_NUMERIC	vendor\sqlite\sqlite3.c	8685;"	d	file:
TK_TO_REAL	vendor\sqlite\sqlite3.c	8687;"	d	file:
TK_TO_TEXT	vendor\sqlite\sqlite3.c	8683;"	d	file:
TK_TRANSACTION	vendor\sqlite\sqlite3.c	8546;"	d	file:
TK_TRIGGER	vendor\sqlite\sqlite3.c	8602;"	d	file:
TK_UMINUS	vendor\sqlite\sqlite3.c	8697;"	d	file:
TK_UNCLOSED_STRING	vendor\sqlite\sqlite3.c	8692;"	d	file:
TK_UNION	vendor\sqlite\sqlite3.c	8655;"	d	file:
TK_UNIQUE	vendor\sqlite\sqlite3.c	8643;"	d	file:
TK_UPDATE	vendor\sqlite\sqlite3.c	8650;"	d	file:
TK_UPLUS	vendor\sqlite\sqlite3.c	8698;"	d	file:
TK_USING	vendor\sqlite\sqlite3.c	8665;"	d	file:
TK_VACUUM	vendor\sqlite\sqlite3.c	8603;"	d	file:
TK_VALUES	vendor\sqlite\sqlite3.c	8660;"	d	file:
TK_VARIABLE	vendor\sqlite\sqlite3.c	8675;"	d	file:
TK_VIEW	vendor\sqlite\sqlite3.c	8604;"	d	file:
TK_VIRTUAL	vendor\sqlite\sqlite3.c	8605;"	d	file:
TK_WHEN	vendor\sqlite\sqlite3.c	8677;"	d	file:
TK_WHERE	vendor\sqlite\sqlite3.c	8670;"	d	file:
TK_WITH	vendor\sqlite\sqlite3.c	8606;"	d	file:
TK_WITHOUT	vendor\sqlite\sqlite3.c	8565;"	d	file:
TOKEN	vendor\sqlite\sqlite3.c	125505;"	d	file:
TRACE	vendor\sqlite\sqlite3.c	52813;"	d	file:
TRACE_IDX_INPUTS	vendor\sqlite\sqlite3.c	/^static void TRACE_IDX_INPUTS(sqlite3_index_info *p){$/;"	f	file:
TRACE_IDX_INPUTS	vendor\sqlite\sqlite3.c	116874;"	d	file:
TRACE_IDX_OUTPUTS	vendor\sqlite\sqlite3.c	/^static void TRACE_IDX_OUTPUTS(sqlite3_index_info *p){$/;"	f	file:
TRACE_IDX_OUTPUTS	vendor\sqlite\sqlite3.c	116875;"	d	file:
TRANS_NONE	vendor\sqlite\sqlite3.c	52182;"	d	file:
TRANS_READ	vendor\sqlite\sqlite3.c	52183;"	d	file:
TRANS_WRITE	vendor\sqlite\sqlite3.c	52184;"	d	file:
TRIGGER_AFTER	vendor\sqlite\sqlite3.c	12547;"	d	file:
TRIGGER_BEFORE	vendor\sqlite\sqlite3.c	12546;"	d	file:
TWOPOWER31	vendor\sqlite\sqlite3.c	24446;"	d	file:
TWOPOWER32	vendor\sqlite\sqlite3.c	24445;"	d	file:
TWO_BYTE_INT	vendor\sqlite\sqlite3.c	67342;"	d	file:
TabResult	vendor\sqlite\sqlite3.c	/^typedef struct TabResult {$/;"	s	file:
TabResult	vendor\sqlite\sqlite3.c	/^} TabResult;$/;"	t	typeref:struct:TabResult	file:
Table	vendor\sqlite\sqlite3.c	/^struct Table {$/;"	s	file:
Table	vendor\sqlite\sqlite3.c	/^typedef struct Table Table;$/;"	t	typeref:struct:Table	file:
TableLock	vendor\sqlite\sqlite3.c	/^struct TableLock {$/;"	s	file:
TableLock	vendor\sqlite\sqlite3.c	/^typedef struct TableLock TableLock;$/;"	t	typeref:struct:TableLock	file:
TermOffset	vendor\sqlite\sqlite3.c	/^struct TermOffset {$/;"	s	file:
TermOffset	vendor\sqlite\sqlite3.c	/^typedef struct TermOffset TermOffset;$/;"	t	typeref:struct:TermOffset	file:
TermOffsetCtx	vendor\sqlite\sqlite3.c	/^struct TermOffsetCtx {$/;"	s	file:
TermOffsetCtx	vendor\sqlite\sqlite3.c	/^typedef struct TermOffsetCtx TermOffsetCtx;$/;"	t	typeref:struct:TermOffsetCtx	file:
TermSelect	vendor\sqlite\sqlite3.c	/^struct TermSelect {$/;"	s	file:
TermSelect	vendor\sqlite\sqlite3.c	/^typedef struct TermSelect TermSelect;$/;"	t	typeref:struct:TermSelect	file:
Token	vendor\sqlite\sqlite3.c	/^struct Token {$/;"	s	file:
Token	vendor\sqlite\sqlite3.c	/^typedef struct Token Token;$/;"	t	typeref:struct:Token	file:
TokenDoclist	vendor\sqlite\sqlite3.c	/^struct TokenDoclist {$/;"	s	file:
TokenDoclist	vendor\sqlite\sqlite3.c	/^typedef struct TokenDoclist TokenDoclist;$/;"	t	typeref:struct:TokenDoclist	file:
TreeView	vendor\sqlite\sqlite3.c	/^struct TreeView {$/;"	s	file:
TreeView	vendor\sqlite\sqlite3.c	/^typedef struct TreeView TreeView;$/;"	t	typeref:struct:TreeView	file:
TrigEvent	vendor\sqlite\sqlite3.c	/^struct TrigEvent { int a; IdList * b; };$/;"	s	file:
Trigger	vendor\sqlite\sqlite3.c	/^struct Trigger {$/;"	s	file:
Trigger	vendor\sqlite\sqlite3.c	/^typedef struct Trigger Trigger;$/;"	t	typeref:struct:Trigger	file:
TriggerPrg	vendor\sqlite\sqlite3.c	/^struct TriggerPrg {$/;"	s	file:
TriggerPrg	vendor\sqlite\sqlite3.c	/^typedef struct TriggerPrg TriggerPrg;$/;"	t	typeref:struct:TriggerPrg	file:
TriggerStep	vendor\sqlite\sqlite3.c	/^struct TriggerStep {$/;"	s	file:
TriggerStep	vendor\sqlite\sqlite3.c	/^typedef struct TriggerStep TriggerStep;$/;"	t	typeref:struct:TriggerStep	file:
UAUTH_Admin	vendor\sqlite\sqlite3.c	10848;"	d	file:
UAUTH_Fail	vendor\sqlite\sqlite3.c	10846;"	d	file:
UAUTH_Unknown	vendor\sqlite\sqlite3.c	10845;"	d	file:
UAUTH_User	vendor\sqlite\sqlite3.c	10847;"	d	file:
UINT16_TYPE	vendor\sqlite\sqlite3.c	8834;"	d	file:
UINT16_TYPE	vendor\sqlite\sqlite3.c	8836;"	d	file:
UINT32_TYPE	vendor\sqlite\sqlite3.c	8827;"	d	file:
UINT32_TYPE	vendor\sqlite\sqlite3.c	8829;"	d	file:
UINT8_TYPE	vendor\sqlite\sqlite3.c	8848;"	d	file:
UINT8_TYPE	vendor\sqlite\sqlite3.c	8850;"	d	file:
UNICODE_STRING_MAX_CHARS	vendor\sqlite\sqlite3.c	33111;"	d	file:
UNIXFILE_DELETE	vendor\sqlite\sqlite3.c	25288;"	d	file:
UNIXFILE_DIRSYNC	vendor\sqlite\sqlite3.c	25283;"	d	file:
UNIXFILE_DIRSYNC	vendor\sqlite\sqlite3.c	25285;"	d	file:
UNIXFILE_EXCL	vendor\sqlite\sqlite3.c	25279;"	d	file:
UNIXFILE_NOLOCK	vendor\sqlite\sqlite3.c	25290;"	d	file:
UNIXFILE_PERSIST_WAL	vendor\sqlite\sqlite3.c	25281;"	d	file:
UNIXFILE_PSOW	vendor\sqlite\sqlite3.c	25287;"	d	file:
UNIXFILE_RDONLY	vendor\sqlite\sqlite3.c	25280;"	d	file:
UNIXFILE_URI	vendor\sqlite\sqlite3.c	25289;"	d	file:
UNIXFILE_WARNED	vendor\sqlite\sqlite3.c	25291;"	d	file:
UNIXVFS	vendor\sqlite\sqlite3.c	32710;"	d	file:
UNIX_SHM_BASE	vendor\sqlite\sqlite3.c	29332;"	d	file:
UNIX_SHM_DMS	vendor\sqlite\sqlite3.c	29333;"	d	file:
UNKNOWN_LOCK	vendor\sqlite\sqlite3.c	41776;"	d	file:
UNUSED_PARAMETER	vendor\sqlite\sqlite3.c	131702;"	d	file:
UNUSED_PARAMETER	vendor\sqlite\sqlite3.c	149754;"	d	file:
UNUSED_PARAMETER	vendor\sqlite\sqlite3.c	9152;"	d	file:
UNUSED_PARAMETER2	vendor\sqlite\sqlite3.c	9153;"	d	file:
UNUSED_VARIABLE_VALUE	vendor\sqlite\sqlite3.c	33160;"	d	file:
UPDATE_MAX_BLOBSIZE	vendor\sqlite\sqlite3.c	70346;"	d	file:
UPDATE_MAX_BLOBSIZE	vendor\sqlite\sqlite3.c	70348;"	d	file:
USEFETCH	vendor\sqlite\sqlite3.c	42158;"	d	file:
USEFETCH	vendor\sqlite\sqlite3.c	42160;"	d	file:
UnixUnusedFd	vendor\sqlite\sqlite3.c	/^struct UnixUnusedFd {$/;"	s	file:
UnixUnusedFd	vendor\sqlite\sqlite3.c	/^typedef struct UnixUnusedFd UnixUnusedFd;     \/* An unused file descriptor *\/$/;"	t	typeref:struct:UnixUnusedFd	file:
UnpackedRecord	vendor\sqlite\sqlite3.c	/^struct UnpackedRecord {$/;"	s	file:
UnpackedRecord	vendor\sqlite\sqlite3.c	/^typedef struct UnpackedRecord UnpackedRecord;$/;"	t	typeref:struct:UnpackedRecord	file:
UpperToLower	vendor\sqlite\sqlite3.c	23462;"	d	file:
VDBE_MAGIC_DEAD	vendor\sqlite\sqlite3.c	14763;"	d	file:
VDBE_MAGIC_HALT	vendor\sqlite\sqlite3.c	14762;"	d	file:
VDBE_MAGIC_INIT	vendor\sqlite\sqlite3.c	14760;"	d	file:
VDBE_MAGIC_RUN	vendor\sqlite\sqlite3.c	14761;"	d	file:
VDBE_OFFSET_LINENO	vendor\sqlite\sqlite3.c	9950;"	d	file:
VDBE_OFFSET_LINENO	vendor\sqlite\sqlite3.c	9956;"	d	file:
VFUNCTION	vendor\sqlite\sqlite3.c	11164;"	d	file:
VTable	vendor\sqlite\sqlite3.c	/^struct VTable {$/;"	s	file:
VTable	vendor\sqlite\sqlite3.c	/^typedef struct VTable VTable;$/;"	t	typeref:struct:VTable	file:
VVA_ONLY	vendor\sqlite\sqlite3.c	8390;"	d	file:
VVA_ONLY	vendor\sqlite\sqlite3.c	8392;"	d	file:
ValueNewStat4Ctx	vendor\sqlite\sqlite3.c	/^struct ValueNewStat4Ctx {$/;"	s	file:
Vdbe	vendor\sqlite\sqlite3.c	/^struct Vdbe {$/;"	s	file:
Vdbe	vendor\sqlite\sqlite3.c	/^typedef struct Vdbe Vdbe;$/;"	t	typeref:struct:Vdbe	file:
VdbeBranchTaken	vendor\sqlite\sqlite3.c	70368;"	d	file:
VdbeBranchTaken	vendor\sqlite\sqlite3.c	70370;"	d	file:
VdbeComment	vendor\sqlite\sqlite3.c	9908;"	d	file:
VdbeComment	vendor\sqlite\sqlite3.c	9917;"	d	file:
VdbeCoverage	vendor\sqlite\sqlite3.c	9946;"	d	file:
VdbeCoverage	vendor\sqlite\sqlite3.c	9952;"	d	file:
VdbeCoverageAlwaysTaken	vendor\sqlite\sqlite3.c	9948;"	d	file:
VdbeCoverageAlwaysTaken	vendor\sqlite\sqlite3.c	9954;"	d	file:
VdbeCoverageIf	vendor\sqlite\sqlite3.c	9947;"	d	file:
VdbeCoverageIf	vendor\sqlite\sqlite3.c	9953;"	d	file:
VdbeCoverageNeverTaken	vendor\sqlite\sqlite3.c	9949;"	d	file:
VdbeCoverageNeverTaken	vendor\sqlite\sqlite3.c	9955;"	d	file:
VdbeCursor	vendor\sqlite\sqlite3.c	/^struct VdbeCursor {$/;"	s	file:
VdbeCursor	vendor\sqlite\sqlite3.c	/^typedef struct VdbeCursor VdbeCursor;$/;"	t	typeref:struct:VdbeCursor	file:
VdbeFrame	vendor\sqlite\sqlite3.c	/^struct VdbeFrame {$/;"	s	file:
VdbeFrame	vendor\sqlite\sqlite3.c	/^typedef struct VdbeFrame VdbeFrame;$/;"	t	typeref:struct:VdbeFrame	file:
VdbeFrameMem	vendor\sqlite\sqlite3.c	14517;"	d	file:
VdbeMemDynamic	vendor\sqlite\sqlite3.c	14815;"	d	file:
VdbeModuleComment	vendor\sqlite\sqlite3.c	9912;"	d	file:
VdbeModuleComment	vendor\sqlite\sqlite3.c	9914;"	d	file:
VdbeModuleComment	vendor\sqlite\sqlite3.c	9919;"	d	file:
VdbeNoopComment	vendor\sqlite\sqlite3.c	9910;"	d	file:
VdbeNoopComment	vendor\sqlite\sqlite3.c	9918;"	d	file:
VdbeOp	vendor\sqlite\sqlite3.c	/^struct VdbeOp {$/;"	s	file:
VdbeOp	vendor\sqlite\sqlite3.c	/^typedef struct VdbeOp VdbeOp;$/;"	t	typeref:struct:VdbeOp	file:
VdbeOpIter	vendor\sqlite\sqlite3.c	/^struct VdbeOpIter {$/;"	s	file:
VdbeOpIter	vendor\sqlite\sqlite3.c	/^typedef struct VdbeOpIter VdbeOpIter;$/;"	t	typeref:struct:VdbeOpIter	file:
VdbeOpList	vendor\sqlite\sqlite3.c	/^struct VdbeOpList {$/;"	s	file:
VdbeOpList	vendor\sqlite\sqlite3.c	/^typedef struct VdbeOpList VdbeOpList;$/;"	t	typeref:struct:VdbeOpList	file:
VdbeSorter	vendor\sqlite\sqlite3.c	/^struct VdbeSorter {$/;"	s	file:
VdbeSorter	vendor\sqlite\sqlite3.c	/^typedef struct VdbeSorter VdbeSorter;$/;"	t	typeref:struct:VdbeSorter	file:
VtabCtx	vendor\sqlite\sqlite3.c	/^struct VtabCtx {$/;"	s	file:
VtabCtx	vendor\sqlite\sqlite3.c	/^typedef struct VtabCtx VtabCtx;$/;"	t	typeref:struct:VtabCtx	file:
WALINDEX_HDR_SIZE	vendor\sqlite\sqlite3.c	49021;"	d	file:
WALINDEX_LOCK_OFFSET	vendor\sqlite\sqlite3.c	49019;"	d	file:
WALINDEX_LOCK_RESERVED	vendor\sqlite\sqlite3.c	49020;"	d	file:
WALINDEX_MAX_VERSION	vendor\sqlite\sqlite3.c	48914;"	d	file:
WALINDEX_PGSZ	vendor\sqlite\sqlite3.c	49148;"	d	file:
WALTRACE	vendor\sqlite\sqlite3.c	48895;"	d	file:
WALTRACE	vendor\sqlite\sqlite3.c	48897;"	d	file:
WAL_ALL_BUT_WRITE	vendor\sqlite\sqlite3.c	48921;"	d	file:
WAL_CKPT_LOCK	vendor\sqlite\sqlite3.c	48922;"	d	file:
WAL_EXCLUSIVE_MODE	vendor\sqlite\sqlite3.c	49085;"	d	file:
WAL_FRAME_HDRSIZE	vendor\sqlite\sqlite3.c	49024;"	d	file:
WAL_HDRSIZE	vendor\sqlite\sqlite3.c	49028;"	d	file:
WAL_HEAPMEMORY_MODE	vendor\sqlite\sqlite3.c	49086;"	d	file:
WAL_MAGIC	vendor\sqlite\sqlite3.c	49039;"	d	file:
WAL_MAX_VERSION	vendor\sqlite\sqlite3.c	48913;"	d	file:
WAL_NORMAL_MODE	vendor\sqlite\sqlite3.c	49084;"	d	file:
WAL_NREADER	vendor\sqlite\sqlite3.c	48925;"	d	file:
WAL_RDONLY	vendor\sqlite\sqlite3.c	49092;"	d	file:
WAL_RDWR	vendor\sqlite\sqlite3.c	49091;"	d	file:
WAL_READ_LOCK	vendor\sqlite\sqlite3.c	48924;"	d	file:
WAL_RECOVER_LOCK	vendor\sqlite\sqlite3.c	48923;"	d	file:
WAL_RETRY	vendor\sqlite\sqlite3.c	50722;"	d	file:
WAL_SAVEPOINT_NDATA	vendor\sqlite\sqlite3.c	41301;"	d	file:
WAL_SHM_RDONLY	vendor\sqlite\sqlite3.c	49093;"	d	file:
WAL_SYNC_TRANSACTIONS	vendor\sqlite\sqlite3.c	41277;"	d	file:
WAL_WRITE_LOCK	vendor\sqlite\sqlite3.c	48920;"	d	file:
WHERETRACE	vendor\sqlite\sqlite3.c	114884;"	d	file:
WHERETRACE	vendor\sqlite\sqlite3.c	114887;"	d	file:
WHERETRACE_ENABLED	vendor\sqlite\sqlite3.c	114885;"	d	file:
WHERE_AUTO_INDEX	vendor\sqlite\sqlite3.c	115325;"	d	file:
WHERE_BOTH_LIMIT	vendor\sqlite\sqlite3.c	115317;"	d	file:
WHERE_BTM_LIMIT	vendor\sqlite\sqlite3.c	115316;"	d	file:
WHERE_COLUMN_EQ	vendor\sqlite\sqlite3.c	115310;"	d	file:
WHERE_COLUMN_IN	vendor\sqlite\sqlite3.c	115312;"	d	file:
WHERE_COLUMN_NULL	vendor\sqlite\sqlite3.c	115313;"	d	file:
WHERE_COLUMN_RANGE	vendor\sqlite\sqlite3.c	115311;"	d	file:
WHERE_CONSTRAINT	vendor\sqlite\sqlite3.c	115314;"	d	file:
WHERE_DISTINCTBY	vendor\sqlite\sqlite3.c	12072;"	d	file:
WHERE_DISTINCT_NOOP	vendor\sqlite\sqlite3.c	12079;"	d	file:
WHERE_DISTINCT_ORDERED	vendor\sqlite\sqlite3.c	12081;"	d	file:
WHERE_DISTINCT_UNIQUE	vendor\sqlite\sqlite3.c	12080;"	d	file:
WHERE_DISTINCT_UNORDERED	vendor\sqlite\sqlite3.c	12082;"	d	file:
WHERE_DUPLICATES_OK	vendor\sqlite\sqlite3.c	12066;"	d	file:
WHERE_FORCE_TABLE	vendor\sqlite\sqlite3.c	12068;"	d	file:
WHERE_GROUPBY	vendor\sqlite\sqlite3.c	12071;"	d	file:
WHERE_IDX_ONLY	vendor\sqlite\sqlite3.c	115318;"	d	file:
WHERE_INDEXED	vendor\sqlite\sqlite3.c	115320;"	d	file:
WHERE_IN_ABLE	vendor\sqlite\sqlite3.c	115322;"	d	file:
WHERE_IPK	vendor\sqlite\sqlite3.c	115319;"	d	file:
WHERE_LOOP_XFER_SZ	vendor\sqlite\sqlite3.c	114995;"	d	file:
WHERE_MULTI_OR	vendor\sqlite\sqlite3.c	115324;"	d	file:
WHERE_NO_AUTOINDEX	vendor\sqlite\sqlite3.c	12070;"	d	file:
WHERE_OMIT_OPEN_CLOSE	vendor\sqlite\sqlite3.c	12067;"	d	file:
WHERE_ONEPASS_DESIRED	vendor\sqlite\sqlite3.c	12065;"	d	file:
WHERE_ONEROW	vendor\sqlite\sqlite3.c	115323;"	d	file:
WHERE_ONETABLE_ONLY	vendor\sqlite\sqlite3.c	12069;"	d	file:
WHERE_ORDERBY_MAX	vendor\sqlite\sqlite3.c	12064;"	d	file:
WHERE_ORDERBY_MIN	vendor\sqlite\sqlite3.c	12063;"	d	file:
WHERE_ORDERBY_NORMAL	vendor\sqlite\sqlite3.c	12062;"	d	file:
WHERE_PARTIALIDX	vendor\sqlite\sqlite3.c	115328;"	d	file:
WHERE_REOPEN_IDX	vendor\sqlite\sqlite3.c	12075;"	d	file:
WHERE_SKIPSCAN	vendor\sqlite\sqlite3.c	115326;"	d	file:
WHERE_SORTBYGROUP	vendor\sqlite\sqlite3.c	12074;"	d	file:
WHERE_TOP_LIMIT	vendor\sqlite\sqlite3.c	115315;"	d	file:
WHERE_UNQ_WANTED	vendor\sqlite\sqlite3.c	115327;"	d	file:
WHERE_VIRTUALTABLE	vendor\sqlite\sqlite3.c	115321;"	d	file:
WHERE_WANT_DISTINCT	vendor\sqlite\sqlite3.c	12073;"	d	file:
WINCE_DELETION_ATTEMPTS	vendor\sqlite\sqlite3.c	35465;"	d	file:
WINFILE_PERSIST_WAL	vendor\sqlite\sqlite3.c	33279;"	d	file:
WINFILE_PSOW	vendor\sqlite\sqlite3.c	33280;"	d	file:
WINFILE_RDONLY	vendor\sqlite\sqlite3.c	33278;"	d	file:
WINMEM_MAGIC1	vendor\sqlite\sqlite3.c	33370;"	d	file:
WINMEM_MAGIC2	vendor\sqlite\sqlite3.c	33371;"	d	file:
WIN_SHM_BASE	vendor\sqlite\sqlite3.c	36432;"	d	file:
WIN_SHM_DMS	vendor\sqlite\sqlite3.c	36433;"	d	file:
WO_ALL	vendor\sqlite\sqlite3.c	115302;"	d	file:
WO_AND	vendor\sqlite\sqlite3.c	115298;"	d	file:
WO_EQ	vendor\sqlite\sqlite3.c	115290;"	d	file:
WO_EQUIV	vendor\sqlite\sqlite3.c	115299;"	d	file:
WO_GE	vendor\sqlite\sqlite3.c	115294;"	d	file:
WO_GT	vendor\sqlite\sqlite3.c	115293;"	d	file:
WO_IN	vendor\sqlite\sqlite3.c	115289;"	d	file:
WO_ISNULL	vendor\sqlite\sqlite3.c	115296;"	d	file:
WO_LE	vendor\sqlite\sqlite3.c	115292;"	d	file:
WO_LT	vendor\sqlite\sqlite3.c	115291;"	d	file:
WO_MATCH	vendor\sqlite\sqlite3.c	115295;"	d	file:
WO_NOOP	vendor\sqlite\sqlite3.c	115300;"	d	file:
WO_OR	vendor\sqlite\sqlite3.c	115297;"	d	file:
WO_SINGLE	vendor\sqlite\sqlite3.c	115303;"	d	file:
WRC_Abort	vendor\sqlite\sqlite3.c	12753;"	d	file:
WRC_Continue	vendor\sqlite\sqlite3.c	12751;"	d	file:
WRC_Prune	vendor\sqlite\sqlite3.c	12752;"	d	file:
WRITE_LOCK	vendor\sqlite\sqlite3.c	52136;"	d	file:
WRITE_UTF16BE	vendor\sqlite\sqlite3.c	22786;"	d	file:
WRITE_UTF16LE	vendor\sqlite\sqlite3.c	22774;"	d	file:
WRITE_UTF8	vendor\sqlite\sqlite3.c	148971;"	d	file:
WRITE_UTF8	vendor\sqlite\sqlite3.c	22754;"	d	file:
Wal	vendor\sqlite\sqlite3.c	/^struct Wal {$/;"	s	file:
Wal	vendor\sqlite\sqlite3.c	/^typedef struct Wal Wal;$/;"	t	typeref:struct:Wal	file:
WalCkptInfo	vendor\sqlite\sqlite3.c	/^struct WalCkptInfo {$/;"	s	file:
WalCkptInfo	vendor\sqlite\sqlite3.c	/^typedef struct WalCkptInfo WalCkptInfo;$/;"	t	typeref:struct:WalCkptInfo	file:
WalIndexHdr	vendor\sqlite\sqlite3.c	/^struct WalIndexHdr {$/;"	s	file:
WalIndexHdr	vendor\sqlite\sqlite3.c	/^typedef struct WalIndexHdr WalIndexHdr;$/;"	t	typeref:struct:WalIndexHdr	file:
WalIterator	vendor\sqlite\sqlite3.c	/^struct WalIterator {$/;"	s	file:
WalIterator	vendor\sqlite\sqlite3.c	/^typedef struct WalIterator WalIterator;$/;"	t	typeref:struct:WalIterator	file:
WalSegment	vendor\sqlite\sqlite3.c	/^  struct WalSegment {$/;"	s	struct:WalIterator	file:
WalWriter	vendor\sqlite\sqlite3.c	/^typedef struct WalWriter {$/;"	s	file:
WalWriter	vendor\sqlite\sqlite3.c	/^} WalWriter;$/;"	t	typeref:struct:WalWriter	file:
Walker	vendor\sqlite\sqlite3.c	/^struct Walker {$/;"	s	file:
Walker	vendor\sqlite\sqlite3.c	/^typedef struct Walker Walker;$/;"	t	typeref:struct:Walker	file:
WhereAndInfo	vendor\sqlite\sqlite3.c	/^struct WhereAndInfo {$/;"	s	file:
WhereAndInfo	vendor\sqlite\sqlite3.c	/^typedef struct WhereAndInfo WhereAndInfo;$/;"	t	typeref:struct:WhereAndInfo	file:
WhereClause	vendor\sqlite\sqlite3.c	/^struct WhereClause {$/;"	s	file:
WhereClause	vendor\sqlite\sqlite3.c	/^typedef struct WhereClause WhereClause;$/;"	t	typeref:struct:WhereClause	file:
WhereInfo	vendor\sqlite\sqlite3.c	/^struct WhereInfo {$/;"	s	file:
WhereInfo	vendor\sqlite\sqlite3.c	/^typedef struct WhereInfo WhereInfo;$/;"	t	typeref:struct:WhereInfo	file:
WhereLevel	vendor\sqlite\sqlite3.c	/^struct WhereLevel {$/;"	s	file:
WhereLevel	vendor\sqlite\sqlite3.c	/^typedef struct WhereLevel WhereLevel;$/;"	t	typeref:struct:WhereLevel	file:
WhereLoop	vendor\sqlite\sqlite3.c	/^struct WhereLoop {$/;"	s	file:
WhereLoop	vendor\sqlite\sqlite3.c	/^typedef struct WhereLoop WhereLoop;$/;"	t	typeref:struct:WhereLoop	file:
WhereLoopBuilder	vendor\sqlite\sqlite3.c	/^struct WhereLoopBuilder {$/;"	s	file:
WhereLoopBuilder	vendor\sqlite\sqlite3.c	/^typedef struct WhereLoopBuilder WhereLoopBuilder;$/;"	t	typeref:struct:WhereLoopBuilder	file:
WhereMaskSet	vendor\sqlite\sqlite3.c	/^struct WhereMaskSet {$/;"	s	file:
WhereMaskSet	vendor\sqlite\sqlite3.c	/^typedef struct WhereMaskSet WhereMaskSet;$/;"	t	typeref:struct:WhereMaskSet	file:
WhereOrCost	vendor\sqlite\sqlite3.c	/^struct WhereOrCost {$/;"	s	file:
WhereOrCost	vendor\sqlite\sqlite3.c	/^typedef struct WhereOrCost WhereOrCost;$/;"	t	typeref:struct:WhereOrCost	file:
WhereOrInfo	vendor\sqlite\sqlite3.c	/^struct WhereOrInfo {$/;"	s	file:
WhereOrInfo	vendor\sqlite\sqlite3.c	/^typedef struct WhereOrInfo WhereOrInfo;$/;"	t	typeref:struct:WhereOrInfo	file:
WhereOrSet	vendor\sqlite\sqlite3.c	/^struct WhereOrSet {$/;"	s	file:
WhereOrSet	vendor\sqlite\sqlite3.c	/^typedef struct WhereOrSet WhereOrSet;$/;"	t	typeref:struct:WhereOrSet	file:
WherePath	vendor\sqlite\sqlite3.c	/^struct WherePath {$/;"	s	file:
WherePath	vendor\sqlite\sqlite3.c	/^typedef struct WherePath WherePath;$/;"	t	typeref:struct:WherePath	file:
WhereScan	vendor\sqlite\sqlite3.c	/^struct WhereScan {$/;"	s	file:
WhereScan	vendor\sqlite\sqlite3.c	/^typedef struct WhereScan WhereScan;$/;"	t	typeref:struct:WhereScan	file:
WhereTerm	vendor\sqlite\sqlite3.c	/^struct WhereTerm {$/;"	s	file:
WhereTerm	vendor\sqlite\sqlite3.c	/^typedef struct WhereTerm WhereTerm;$/;"	t	typeref:struct:WhereTerm	file:
With	vendor\sqlite\sqlite3.c	/^struct With {$/;"	s	file:
With	vendor\sqlite\sqlite3.c	/^typedef struct With With;$/;"	t	typeref:struct:With	file:
Y	vendor\sqlite\sqlite3.c	/^  int Y, M, D;       \/* Year, month, and day *\/$/;"	m	struct:DateTime	file:
YYACTIONTYPE	vendor\sqlite\sqlite3.c	122322;"	d	file:
YYCODETYPE	vendor\sqlite\sqlite3.c	122320;"	d	file:
YYFALLBACK	vendor\sqlite\sqlite3.c	122353;"	d	file:
YYMINORTYPE	vendor\sqlite\sqlite3.c	/^} YYMINORTYPE;$/;"	t	typeref:union:__anon25	file:
YYNOCODE	vendor\sqlite\sqlite3.c	122321;"	d	file:
YYNOERRORRECOVERY	vendor\sqlite\sqlite3.c	122157;"	d	file:
YYNRULE	vendor\sqlite\sqlite3.c	122352;"	d	file:
YYNSTATE	vendor\sqlite\sqlite3.c	122351;"	d	file:
YYSTACKDEPTH	vendor\sqlite\sqlite3.c	122345;"	d	file:
YYWILDCARD	vendor\sqlite\sqlite3.c	122323;"	d	file:
YY_ACCEPT_ACTION	vendor\sqlite\sqlite3.c	122355;"	d	file:
YY_ACTTAB_COUNT	vendor\sqlite\sqlite3.c	122422;"	d	file:
YY_ERROR_ACTION	vendor\sqlite\sqlite3.c	122356;"	d	file:
YY_NO_ACTION	vendor\sqlite\sqlite3.c	122354;"	d	file:
YY_REDUCE_COUNT	vendor\sqlite\sqlite3.c	122777;"	d	file:
YY_REDUCE_MAX	vendor\sqlite\sqlite3.c	122779;"	d	file:
YY_REDUCE_MIN	vendor\sqlite\sqlite3.c	122778;"	d	file:
YY_REDUCE_USE_DFLT	vendor\sqlite\sqlite3.c	122776;"	d	file:
YY_SHIFT_COUNT	vendor\sqlite\sqlite3.c	122728;"	d	file:
YY_SHIFT_MAX	vendor\sqlite\sqlite3.c	122730;"	d	file:
YY_SHIFT_MIN	vendor\sqlite\sqlite3.c	122729;"	d	file:
YY_SHIFT_USE_DFLT	vendor\sqlite\sqlite3.c	122727;"	d	file:
_BSD_SOURCE	vendor\sqlite\sqlite3.c	169;"	d	file:
_BTREE_H_	vendor\sqlite\sqlite3.c	9228;"	d	file:
_FILE_OFFSET_BITS	vendor\sqlite\sqlite3.c	158;"	d	file:
_FTS3_HASH_H_	vendor\sqlite\sqlite3.c	131491;"	d	file:
_FTS3_TOKENIZER_H_	vendor\sqlite\sqlite3.c	131329;"	d	file:
_FTSINT_H	vendor\sqlite\sqlite3.c	131285;"	d	file:
_GNU_SOURCE	vendor\sqlite\sqlite3.c	165;"	d	file:
_HWTIME_H_	vendor\sqlite\sqlite3.c	19742;"	d	file:
_HWTIME_H_	vendor\sqlite\sqlite3.c	25367;"	d	file:
_HWTIME_H_	vendor\sqlite\sqlite3.c	32886;"	d	file:
_HWTIME_H_	vendor\sqlite\sqlite3.c	70752;"	d	file:
_LARGEFILE_SOURCE	vendor\sqlite\sqlite3.c	160;"	d	file:
_LARGE_FILE	vendor\sqlite\sqlite3.c	156;"	d	file:
_MSVC_H_	vendor\sqlite\sqlite3.c	69;"	d	file:
_OS_COMMON_H_	vendor\sqlite\sqlite3.c	19693;"	d	file:
_OS_COMMON_H_	vendor\sqlite\sqlite3.c	25318;"	d	file:
_OS_COMMON_H_	vendor\sqlite\sqlite3.c	32837;"	d	file:
_OS_SETUP_H_	vendor\sqlite\sqlite3.c	10406;"	d	file:
_OS_WIN_H_	vendor\sqlite\sqlite3.c	19901;"	d	file:
_PAGER_H_	vendor\sqlite\sqlite3.c	9988;"	d	file:
_SHM_RDLCK	vendor\sqlite\sqlite3.c	36439;"	d	file:
_SHM_UNLCK	vendor\sqlite\sqlite3.c	36438;"	d	file:
_SHM_WRLCK	vendor\sqlite\sqlite3.c	36440;"	d	file:
_SQLITE3EXT_H_	vendor\sqlite\sqlite3.c	101055;"	d	file:
_SQLITE3RTREE_H_	vendor\sqlite\sqlite3.c	7847;"	d	file:
_SQLITE3_H_	vendor\sqlite\sqlite3.c	243;"	d	file:
_SQLITEINT_H_	vendor\sqlite\sqlite3.c	44;"	d	file:
_SQLITE_HASH_H_	vendor\sqlite\sqlite3.c	8455;"	d	file:
_SQLITE_OS_C_	vendor\sqlite\sqlite3.c	16287;"	d	file:
_SQLITE_OS_C_	vendor\sqlite\sqlite3.c	16288;"	d	file:
_SQLITE_OS_H_	vendor\sqlite\sqlite3.c	10382;"	d	file:
_SQLITE_VDBE_H_	vendor\sqlite\sqlite3.c	9496;"	d	file:
_USE_32BIT_TIME_T	vendor\sqlite\sqlite3.c	201;"	d	file:
_VDBEINT_H_	vendor\sqlite\sqlite3.c	14384;"	d	file:
_WAL_H_	vendor\sqlite\sqlite3.c	41271;"	d	file:
_XOPEN_SOURCE	vendor\sqlite\sqlite3.c	8321;"	d	file:
__declspec	vendor\sqlite\sqlite3.c	/^  __declspec(naked) __inline sqlite_uint64 __cdecl sqlite3Hwtime(void){$/;"	f
__declspec	vendor\sqlite\sqlite3.c	/^__declspec(dllexport)$/;"	f
_fts3ht	vendor\sqlite\sqlite3.c	/^  struct _fts3ht {        \/* the hash table *\/$/;"	s	struct:Fts3Hash	file:
_ht	vendor\sqlite\sqlite3.c	/^  struct _ht {              \/* the hash table *\/$/;"	s	struct:Hash	file:
_sqliteZone_	vendor\sqlite\sqlite3.c	/^static malloc_zone_t* _sqliteZone_;$/;"	v	file:
a	vendor\sqlite\sqlite3.c	/^  FuncDef *a[23];       \/* Hash table for functions *\/$/;"	m	struct:FuncDefHash	file:
a	vendor\sqlite\sqlite3.c	/^  Stat4Sample *a;           \/* Array of mxSample Stat4Sample objects *\/$/;"	m	struct:Stat4Accum	file:
a	vendor\sqlite\sqlite3.c	/^  WhereLevel a[1];          \/* Information about each nest loop in WHERE *\/$/;"	m	struct:WhereInfo	file:
a	vendor\sqlite\sqlite3.c	/^  WhereOrCost a[N_OR_COST];   \/* Set of best costs *\/$/;"	m	struct:WhereOrSet	file:
a	vendor\sqlite\sqlite3.c	/^  WhereTerm *a;            \/* Each a[] describes a term of the WHERE cluase *\/$/;"	m	struct:WhereClause	file:
a	vendor\sqlite\sqlite3.c	/^  char *a;                        \/* Pointer to allocation *\/$/;"	m	struct:Blob	file:
a	vendor\sqlite\sqlite3.c	/^  } *a;                  \/* Alloc a power of two greater or equal to nExpr *\/$/;"	m	struct:ExprList	typeref:struct:ExprList::ExprList_item	file:
a	vendor\sqlite\sqlite3.c	/^  } *a;$/;"	m	struct:IdList	typeref:struct:IdList::IdList_item	file:
a	vendor\sqlite\sqlite3.c	/^  } a[1];             \/* One entry for each identifier on the list *\/$/;"	m	struct:SrcList	typeref:struct:SrcList::SrcList_item	file:
a	vendor\sqlite\sqlite3.c	/^  } a[1];$/;"	m	struct:With	typeref:struct:With::Cte	file:
a	vendor\sqlite\sqlite3.c	/^struct TrigEvent { int a; IdList * b; };$/;"	m	struct:TrigEvent	file:
aAction	vendor\sqlite\sqlite3.c	/^  u8 aAction[2];        \/* ON DELETE and ON UPDATE actions, respectively *\/$/;"	m	struct:FKey	file:
aAll	vendor\sqlite\sqlite3.c	/^  char *aAll;                    \/* Array containing doclist (or NULL) *\/$/;"	m	struct:Fts3Doclist	file:
aAlloc	vendor\sqlite\sqlite3.c	/^  u8 *aAlloc;                 \/* Space for aKey if aBuffer and pMap wont work *\/$/;"	m	struct:PmaReader	file:
aAvgEq	vendor\sqlite\sqlite3.c	/^  tRowcnt *aAvgEq;         \/* Average nEq values for keys not in aSample *\/$/;"	m	struct:Index	file:
aBest	vendor\sqlite\sqlite3.c	/^  Stat4Sample *aBest;       \/* Array of nCol best samples *\/$/;"	m	struct:Stat4Accum	file:
aBitmap	vendor\sqlite\sqlite3.c	/^    BITVEC_TELEM aBitmap[BITVEC_NELEM];    \/* Bitmap representation *\/$/;"	m	union:Bitvec::__anon16	file:
aBuffer	vendor\sqlite\sqlite3.c	/^  char *aBuffer;                  \/* Buffer to merge doclists in *\/$/;"	m	struct:Fts3MultiSegReader	file:
aBuffer	vendor\sqlite\sqlite3.c	/^  u8 *aBuffer;                    \/* Pointer to write buffer *\/$/;"	m	struct:PmaWriter	file:
aBuffer	vendor\sqlite\sqlite3.c	/^  u8 *aBuffer;                \/* Current read buffer *\/$/;"	m	struct:PmaReader	file:
aCellIdx	vendor\sqlite\sqlite3.c	/^  u8 *aCellIdx;        \/* The cell index area *\/$/;"	m	struct:MemPage	file:
aChar	vendor\sqlite\sqlite3.c	/^  UChar *aChar;               \/* Copy of input using utf-16 encoding *\/$/;"	m	struct:IcuCursor	file:
aCksum	vendor\sqlite\sqlite3.c	/^  u32 aCksum[2];                  \/* Checksum over all prior fields *\/$/;"	m	struct:WalIndexHdr	file:
aCol	vendor\sqlite\sqlite3.c	/^  Column *aCol;        \/* Information about each column *\/$/;"	m	struct:Table	file:
aCol	vendor\sqlite\sqlite3.c	/^  } *aCol;$/;"	m	struct:AggInfo	typeref:struct:AggInfo::AggInfo_col	file:
aCol	vendor\sqlite\sqlite3.c	/^  } aCol[1];            \/* One entry for each of nCol columns *\/$/;"	m	struct:FKey	typeref:struct:FKey::sColMap	file:
aColCache	vendor\sqlite\sqlite3.c	/^  } aColCache[SQLITE_N_COLCACHE];  \/* One for each column cache entry *\/$/;"	m	struct:Parse	typeref:struct:Parse::yColCache	file:
aColName	vendor\sqlite\sqlite3.c	/^  Mem *aColName;          \/* Column names to return *\/$/;"	m	struct:Vdbe	file:
aColl	vendor\sqlite\sqlite3.c	/^  CollSeq *aColl[1];  \/* Collating sequence for each term of the key *\/$/;"	m	struct:KeyInfo	file:
aCollSeq	vendor\sqlite\sqlite3.c	/^  Hash aCollSeq;                \/* All collating sequences *\/$/;"	m	struct:sqlite3	file:
aColmask	vendor\sqlite\sqlite3.c	/^  u32 aColmask[2];        \/* Masks of old.*, new.* columns accessed *\/$/;"	m	struct:TriggerPrg	file:
aConstraint	vendor\sqlite\sqlite3.c	/^  RtreeConstraint *aConstraint;     \/* Search constraints. *\/$/;"	m	struct:RtreeCursor	file:
aConstraint	vendor\sqlite\sqlite3.c	/^  } *aConstraint;            \/* Table of WHERE clause constraints *\/$/;"	m	struct:sqlite3_index_info	typeref:struct:sqlite3_index_info::sqlite3_index_constraint	file:
aConstraintUsage	vendor\sqlite\sqlite3.c	/^  } *aConstraintUsage;$/;"	m	struct:sqlite3_index_info	typeref:struct:sqlite3_index_info::sqlite3_index_constraint_usage	file:
aCoord	vendor\sqlite\sqlite3.c	/^  RtreeCoord aCoord[RTREE_MAX_DIMENSIONS*2];  \/* Bounding box coordinates *\/$/;"	m	struct:RtreeCell	file:
aCoord	vendor\sqlite\sqlite3.c	/^  sqlite3_rtree_dbl *aCoord;        \/* Coordinates of node or entry to check *\/$/;"	m	struct:sqlite3_rtree_query_info	file:
aCounter	vendor\sqlite\sqlite3.c	/^  u32 aCounter[5];        \/* Counters used by sqlite3_stmt_status() *\/$/;"	m	struct:Vdbe	file:
aCtrl	vendor\sqlite\sqlite3.c	/^  u8 *aCtrl;$/;"	m	struct:Mem5Global	file:
aData	vendor\sqlite\sqlite3.c	/^  char *aData;                    \/* Node data *\/$/;"	m	struct:SegmentNode	file:
aData	vendor\sqlite\sqlite3.c	/^  char *aData;                    \/* Pointer to block from malloc() *\/$/;"	m	struct:SegmentWriter	file:
aData	vendor\sqlite\sqlite3.c	/^  char *aData;$/;"	m	struct:PendingList	file:
aData	vendor\sqlite\sqlite3.c	/^  u8 *aData;           \/* Pointer to disk image of the page data *\/$/;"	m	struct:MemPage	file:
aDataEnd	vendor\sqlite\sqlite3.c	/^  u8 *aDataEnd;        \/* One byte past the end of usable data *\/$/;"	m	struct:MemPage	file:
aDb	vendor\sqlite\sqlite3.c	/^  Db *aDb;                      \/* All backends *\/$/;"	m	struct:sqlite3	file:
aDbStatic	vendor\sqlite\sqlite3.c	/^  Db aDbStatic[2];              \/* Static space for the 2 default backends *\/$/;"	m	struct:sqlite3	file:
aDigits	vendor\sqlite\sqlite3.c	/^static const char aDigits[] = "0123456789ABCDEF0123456789abcdef";$/;"	v	file:
aDoclist	vendor\sqlite\sqlite3.c	/^  char *aDoclist;                 \/* List of docids for full-text queries *\/$/;"	m	struct:Fts3Cursor	file:
aDoclist	vendor\sqlite\sqlite3.c	/^  char *aDoclist;                 \/* Pointer to doclist buffer *\/$/;"	m	struct:Fts3MultiSegReader	file:
aDoclist	vendor\sqlite\sqlite3.c	/^  char *aDoclist;                 \/* Pointer to doclist of current entry *\/$/;"	m	struct:Fts3SegReader	file:
aDoclist	vendor\sqlite\sqlite3.c	/^  const char *aDoclist;           \/* Pointer to doclist *\/$/;"	m	struct:NodeReader	file:
aEntry	vendor\sqlite\sqlite3.c	/^  struct RowSetEntry aEntry[ROWSET_ENTRY_PER_CHUNK]; \/* Allocated entries *\/$/;"	m	struct:RowSetChunk	typeref:struct:RowSetChunk::RowSetEntry	file:
aEquiv	vendor\sqlite\sqlite3.c	/^  int aEquiv[22];            \/* Cursor,Column pairs for equivalence classes *\/$/;"	m	struct:WhereScan	file:
aExt	vendor\sqlite\sqlite3.c	/^  void (**aExt)(void);   \/* Pointers to the extension init functions *\/$/;"	m	struct:sqlite3AutoExtList	file:
aExtension	vendor\sqlite\sqlite3.c	/^  void **aExtension;            \/* Array of shared library handles *\/$/;"	m	struct:sqlite3	file:
aFile	vendor\sqlite\sqlite3.c	/^  SorterFile aFile[2];            \/* aFile[0] for reading, [1] for writing *\/$/;"	m	struct:IncrMerger	file:
aFrameCksum	vendor\sqlite\sqlite3.c	/^  u32 aFrameCksum[2];             \/* Checksum of last frame in log *\/$/;"	m	struct:WalIndexHdr	file:
aFunc	vendor\sqlite\sqlite3.c	/^  FuncDefHash aFunc;            \/* Hash table of connection functions *\/$/;"	m	struct:sqlite3	file:
aFunc	vendor\sqlite\sqlite3.c	/^  } *aFunc;$/;"	m	struct:AggInfo	typeref:struct:AggInfo::AggInfo_func	file:
aHardLimit	vendor\sqlite\sqlite3.c	/^static const int aHardLimit[] = {$/;"	v	file:
aHash	vendor\sqlite\sqlite3.c	/^    u32 aHash[BITVEC_NINT];      \/* Hash table representation *\/$/;"	m	union:Bitvec::__anon16	file:
aHash	vendor\sqlite\sqlite3.c	/^  RtreeNode *aHash[HASHSIZE]; \/* Hash table of in-memory nodes. *\/ $/;"	m	struct:Rtree	file:
aInLoop	vendor\sqlite\sqlite3.c	/^      } *aInLoop;           \/* Information about each nested IN operator *\/$/;"	m	struct:WhereLevel::__anon19::__anon20	typeref:struct:WhereLevel::__anon19::__anon20::InLoop	file:
aIndent	vendor\sqlite\sqlite3.c	/^  u16 aIndent[100];  \/* Levels of indentation *\/$/;"	m	struct:Explain	file:
aIndex	vendor\sqlite\sqlite3.c	/^    ht_slot *aIndex;              \/* i0, i1, i2... such that aPgno[iN] ascend *\/$/;"	m	struct:WalIterator::WalSegment	file:
aIndex	vendor\sqlite\sqlite3.c	/^  } *aIndex;$/;"	m	struct:Fts3Table	typeref:struct:Fts3Table::Fts3Index	file:
aInput	vendor\sqlite\sqlite3.c	/^  const unsigned char *aInput;    \/* Input text being tokenized *\/$/;"	m	struct:unicode_cursor	file:
aJournalMagic	vendor\sqlite\sqlite3.c	/^static const unsigned char aJournalMagic[] = {$/;"	v	file:
aKey	vendor\sqlite\sqlite3.c	/^  u8 *aKey;                   \/* Pointer to current key *\/$/;"	m	struct:PmaReader	file:
aLTerm	vendor\sqlite\sqlite3.c	/^  WhereTerm **aLTerm;   \/* WhereTerms used *\/$/;"	m	struct:WhereLoop	file:
aLTermSpace	vendor\sqlite\sqlite3.c	/^  WhereTerm *aLTermSpace[3];  \/* Initial aLTerm[] space *\/$/;"	m	struct:WhereLoop	file:
aLabel	vendor\sqlite\sqlite3.c	/^  int *aLabel;         \/* Space to hold the labels *\/$/;"	m	struct:Parse	file:
aLimit	vendor\sqlite\sqlite3.c	/^  int aLimit[SQLITE_N_LIMIT];   \/* Limits *\/$/;"	m	struct:sqlite3	file:
aLoop	vendor\sqlite\sqlite3.c	/^  WhereLoop **aLoop;    \/* Array of WhereLoop objects implementing this path *\/$/;"	m	struct:WherePath	file:
aMI	vendor\sqlite\sqlite3.c	/^  u32 *aMI;$/;"	m	struct:Fts3Expr	file:
aMap	vendor\sqlite\sqlite3.c	/^  u8 *aMap;                   \/* Pointer to mapping of entire file *\/$/;"	m	struct:PmaReader	file:
aMatchinfo	vendor\sqlite\sqlite3.c	/^  u32 *aMatchinfo;                \/* Information about most recent match *\/$/;"	m	struct:Fts3Cursor	file:
aMatchinfo	vendor\sqlite\sqlite3.c	/^  u32 *aMatchinfo;                \/* Pre-allocated buffer *\/$/;"	m	struct:MatchInfo	file:
aMem	vendor\sqlite\sqlite3.c	/^  Mem *aMem;              \/* Array of memory cells for parent frame *\/$/;"	m	struct:VdbeFrame	file:
aMem	vendor\sqlite\sqlite3.c	/^  Mem *aMem;              \/* The memory locations *\/$/;"	m	struct:Vdbe	file:
aMem	vendor\sqlite\sqlite3.c	/^  Mem *aMem;          \/* Values *\/$/;"	m	struct:UnpackedRecord	file:
aMemory	vendor\sqlite\sqlite3.c	/^  u8 *aMemory;                    \/* If non-NULL, bulk memory to hold pList *\/$/;"	m	struct:SorterList	file:
aModule	vendor\sqlite\sqlite3.c	/^  Hash aModule;                 \/* populated by sqlite3_create_module() *\/$/;"	m	struct:sqlite3	file:
aNode	vendor\sqlite\sqlite3.c	/^  RtreeNode *aNode[RTREE_CACHE_SZ]; \/* Rtree node cache *\/$/;"	m	struct:RtreeCursor	file:
aNode	vendor\sqlite\sqlite3.c	/^  char *aNode;                    \/* Pointer to node data (or NULL) *\/$/;"	m	struct:Fts3SegReader	file:
aNode	vendor\sqlite\sqlite3.c	/^  const char *aNode;$/;"	m	struct:NodeReader	file:
aNodeWriter	vendor\sqlite\sqlite3.c	/^  NodeWriter aNodeWriter[FTS_MAX_APPENDABLE_HEIGHT];$/;"	m	struct:IncrmergeWriter	file:
aOffset	vendor\sqlite\sqlite3.c	/^  int *aOffset;               \/* Offsets of each character in utf-8 input *\/$/;"	m	struct:IcuCursor	file:
aOffset	vendor\sqlite\sqlite3.c	/^  u32 *aOffset;         \/* Pointer to aType[nField] *\/$/;"	m	struct:VdbeCursor	file:
aOnceFlag	vendor\sqlite\sqlite3.c	/^  u8 *aOnceFlag;          \/* Array of OP_Once flags for parent frame *\/$/;"	m	struct:VdbeFrame	file:
aOnceFlag	vendor\sqlite\sqlite3.c	/^  u8 *aOnceFlag;          \/* Flags for OP_Once *\/$/;"	m	struct:Vdbe	file:
aOp	vendor\sqlite\sqlite3.c	/^  Op *aOp;                \/* Program instructions for parent frame *\/$/;"	m	struct:VdbeFrame	file:
aOp	vendor\sqlite\sqlite3.c	/^  Op *aOp;                \/* Space to hold the virtual machine's program *\/$/;"	m	struct:Vdbe	file:
aOp	vendor\sqlite\sqlite3.c	/^  VdbeOp *aOp;                  \/* Array of opcodes for sub-program *\/$/;"	m	struct:SubProgram	file:
aOrderBy	vendor\sqlite\sqlite3.c	/^  } *aOrderBy;               \/* The ORDER BY clause *\/$/;"	m	struct:sqlite3_index_info	typeref:struct:sqlite3_index_info::sqlite3_index_orderby	file:
aOverflow	vendor\sqlite\sqlite3.c	/^  Pgno *aOverflow;          \/* Cache of overflow page locations *\/$/;"	m	struct:BtCursor	file:
aPadding	vendor\sqlite\sqlite3.c	/^  char aPadding[32];$/;"	m	struct:unixFile	file:
aParam	vendor\sqlite\sqlite3.c	/^  RtreeDValue aParam[1];      \/* Values for parameters to the SQL function *\/$/;"	m	struct:RtreeMatchArg	file:
aParam	vendor\sqlite\sqlite3.c	/^  sqlite3_rtree_dbl *aParam;        \/* value of function parameters *\/$/;"	m	struct:sqlite3_rtree_query_info	file:
aParam	vendor\sqlite\sqlite3.c	/^  sqlite3_rtree_dbl *aParam;      \/* Parameters passed to SQL geom function *\/$/;"	m	struct:sqlite3_rtree_geometry	file:
aPgRef	vendor\sqlite\sqlite3.c	/^  u8 *aPgRef;       \/* 1 bit per page in the db (see above) *\/$/;"	m	struct:IntegrityCk	file:
aPgno	vendor\sqlite\sqlite3.c	/^    u32 *aPgno;                   \/* Array of page numbers. *\/$/;"	m	struct:WalIterator::WalSegment	file:
aPhrase	vendor\sqlite\sqlite3.c	/^  SnippetPhrase *aPhrase;         \/* Array of size nPhrase *\/$/;"	m	struct:SnippetIter	file:
aPoint	vendor\sqlite\sqlite3.c	/^  RtreeSearchPoint *aPoint;         \/* Priority queue for search points *\/$/;"	m	struct:RtreeCursor	file:
aPool	vendor\sqlite\sqlite3.c	/^  Mem3Block *aPool;$/;"	m	struct:Mem3Global	file:
aPragmaNames	vendor\sqlite\sqlite3.c	/^} aPragmaNames[] = {$/;"	v	typeref:struct:sPragmaNames	file:
aPrefix	vendor\sqlite\sqlite3.c	/^static const char aPrefix[] = "-x0\\000X0";$/;"	v	file:
aReadMark	vendor\sqlite\sqlite3.c	/^  u32 aReadMark[WAL_NREADER];     \/* Reader marks *\/$/;"	m	struct:WalCkptInfo	file:
aReadr	vendor\sqlite\sqlite3.c	/^  PmaReader *aReadr;         \/* Array of PmaReaders to merge data from *\/$/;"	m	struct:MergeEngine	file:
aRegion	vendor\sqlite\sqlite3.c	/^  } *aRegion;$/;"	m	struct:winShmNode	typeref:struct:winShmNode::ShmRegion	file:
aRow	vendor\sqlite\sqlite3.c	/^  const u8 *aRow;       \/* Data for the current row, if all on one page *\/$/;"	m	struct:VdbeCursor	file:
aRowid	vendor\sqlite\sqlite3.c	/^    u8 *aRowid;                     \/* Key for WITHOUT ROWID tables *\/$/;"	m	union:Stat4Sample::__anon18	file:
aSalt	vendor\sqlite\sqlite3.c	/^  u32 aSalt[2];                   \/* Two salt values copied from WAL header *\/$/;"	m	struct:WalIndexHdr	file:
aSample	vendor\sqlite\sqlite3.c	/^  IndexSample *aSample;    \/* Samples of the left-most key *\/$/;"	m	struct:Index	file:
aSavepoint	vendor\sqlite\sqlite3.c	/^  PagerSavepoint *aSavepoint; \/* Array of active savepoints *\/$/;"	m	struct:Pager	file:
aScan	vendor\sqlite\sqlite3.c	/^  ScanStatus *aScan;      \/* Scan definitions for sqlite3_stmt_scanstatus() *\/$/;"	m	struct:Vdbe	file:
aSegment	vendor\sqlite\sqlite3.c	/^  } aSegment[1];                  \/* One for every 32KB page in the wal-index *\/$/;"	m	struct:WalIterator	typeref:struct:WalIterator::WalSegment	file:
aSemName	vendor\sqlite\sqlite3.c	/^  char aSemName[MAX_PATHNAME+2];  \/* Name of that semaphore *\/$/;"	m	struct:unixInodeInfo	file:
aSortOrder	vendor\sqlite\sqlite3.c	/^  u8 *aSortOrder;          \/* for each column: True==DESC, False==ASC *\/$/;"	m	struct:Index	file:
aSortOrder	vendor\sqlite\sqlite3.c	/^  u8 *aSortOrder;     \/* Sort order for each column. *\/$/;"	m	struct:KeyInfo	file:
aStat	vendor\sqlite\sqlite3.c	/^  int aStat[3];               \/* Total cache hits, misses and writes *\/$/;"	m	struct:Pager	file:
aStat	vendor\sqlite\sqlite3.c	/^  } *aStat;$/;"	m	struct:Fts3auxCursor	typeref:struct:Fts3auxCursor::Fts3auxColstats	file:
aStatic	vendor\sqlite\sqlite3.c	/^  WhereTerm aStatic[1];    \/* Initial static space for a[] *\/$/;"	m	struct:WhereClause	file:
aStatic	vendor\sqlite\sqlite3.c	/^  WhereTerm aStatic[8];    \/* Initial static space for a[] *\/$/;"	m	struct:WhereClause	file:
aStmt	vendor\sqlite\sqlite3.c	/^  sqlite3_stmt *aStmt[40];$/;"	m	struct:Fts3Table	file:
aSyscall	vendor\sqlite\sqlite3.c	/^} aSyscall[] = {$/;"	v	typeref:struct:unix_syscall	file:
aSyscall	vendor\sqlite\sqlite3.c	/^} aSyscall[] = {$/;"	v	typeref:struct:win_syscall	file:
aTableLock	vendor\sqlite\sqlite3.c	/^  TableLock *aTableLock; \/* Required table locks for shared-cache mode *\/$/;"	m	struct:Parse	file:
aTask	vendor\sqlite\sqlite3.c	/^  SortSubtask aTask[1];           \/* One or more subtasks *\/$/;"	m	struct:VdbeSorter	file:
aTempReg	vendor\sqlite\sqlite3.c	/^  int aTempReg[8];     \/* Holding area for temporary registers *\/$/;"	m	struct:Parse	file:
aTerm	vendor\sqlite\sqlite3.c	/^  TermOffset *aTerm;$/;"	m	struct:TermOffsetCtx	file:
aToken	vendor\sqlite\sqlite3.c	/^  Fts3PhraseToken aToken[1]; \/* One entry for each token in the phrase *\/$/;"	m	struct:Fts3Phrase	file:
aTree	vendor\sqlite\sqlite3.c	/^  int *aTree;                \/* Current state of incremental merge *\/$/;"	m	struct:MergeEngine	file:
aType	vendor\sqlite\sqlite3.c	/^  u32 aType[1];         \/* Type values for all entries in the record *\/$/;"	m	struct:VdbeCursor	file:
aVTrans	vendor\sqlite\sqlite3.c	/^  VTable **aVTrans;             \/* Virtual tables with open transactions *\/$/;"	m	struct:sqlite3	file:
aVar	vendor\sqlite\sqlite3.c	/^  Mem *aVar;              \/* Values for the OP_Variable opcode. *\/$/;"	m	struct:Vdbe	file:
aWalData	vendor\sqlite\sqlite3.c	/^  u32 aWalData[WAL_SAVEPOINT_NDATA];        \/* WAL savepoint context *\/$/;"	m	struct:PagerSavepoint	file:
aaOutput	vendor\sqlite\sqlite3.c	/^  char *aaOutput[16];             \/* Malloc'd output buffers *\/$/;"	m	struct:TermSelect	file:
abNotindexed	vendor\sqlite\sqlite3.c	/^  u8 *abNotindexed;               \/* True for 'notindexed' columns *\/$/;"	m	struct:Fts3Table	file:
absFunc	vendor\sqlite\sqlite3.c	/^static void absFunc(sqlite3_context *context, int argc, sqlite3_value **argv){$/;"	f	file:
accError	vendor\sqlite\sqlite3.c	/^  u8   accError;       \/* STRACCUM_NOMEM or STRACCUM_TOOBIG *\/$/;"	m	struct:StrAccum	file:
accessPayload	vendor\sqlite\sqlite3.c	/^static int accessPayload($/;"	f	file:
actionName	vendor\sqlite\sqlite3.c	/^static const char *actionName(u8 action){$/;"	f	file:
addAggInfoColumn	vendor\sqlite\sqlite3.c	/^static int addAggInfoColumn(sqlite3 *db, AggInfo *pInfo){$/;"	f	file:
addAggInfoFunc	vendor\sqlite\sqlite3.c	/^static int addAggInfoFunc(sqlite3 *db, AggInfo *pInfo){$/;"	f	file:
addArgumentToVtab	vendor\sqlite\sqlite3.c	/^static void addArgumentToVtab(Parse *pParse){$/;"	f	file:
addColOffset	vendor\sqlite\sqlite3.c	/^  int addColOffset;    \/* Offset in CREATE TABLE stmt to add a new column *\/$/;"	m	struct:Table	file:
addModuleArgument	vendor\sqlite\sqlite3.c	/^static void addModuleArgument(sqlite3 *db, Table *pTable, char *zArg){$/;"	f	file:
addScanStatus	vendor\sqlite\sqlite3.c	/^static void addScanStatus($/;"	f	file:
addScanStatus	vendor\sqlite\sqlite3.c	118323;"	d	file:
addToBlockedList	vendor\sqlite\sqlite3.c	/^static void addToBlockedList(sqlite3 *db){$/;"	f	file:
addToSavepointBitvecs	vendor\sqlite\sqlite3.c	/^static int addToSavepointBitvecs(Pager *pPager, Pgno pgno){$/;"	f	file:
addToVTrans	vendor\sqlite\sqlite3.c	/^static void addToVTrans(sqlite3 *db, VTable *pVTab){$/;"	f	file:
addWhereTerm	vendor\sqlite\sqlite3.c	/^static void addWhereTerm($/;"	f	file:
addrBody	vendor\sqlite\sqlite3.c	/^  int addrBody;         \/* Beginning of the body of this loop *\/$/;"	m	struct:WhereLevel	file:
addrBrk	vendor\sqlite\sqlite3.c	/^  int addrBrk;          \/* Jump here to break out of the loop *\/$/;"	m	struct:WhereLevel	file:
addrCont	vendor\sqlite\sqlite3.c	/^  int addrCont;         \/* Jump here to continue with the next loop cycle *\/$/;"	m	struct:WhereLevel	file:
addrCrTab	vendor\sqlite\sqlite3.c	/^  int addrCrTab;       \/* Address of OP_CreateTable opcode on CREATE TABLE *\/$/;"	m	struct:Parse	file:
addrExplain	vendor\sqlite\sqlite3.c	/^  int addrExplain;                \/* OP_Explain for loop *\/$/;"	m	struct:ScanStatus	file:
addrFillSub	vendor\sqlite\sqlite3.c	/^    int addrFillSub;  \/* Address of subroutine to manifest a subquery *\/$/;"	m	struct:SrcList::SrcList_item	file:
addrFirst	vendor\sqlite\sqlite3.c	/^  int addrFirst;        \/* First instruction of interior of the loop *\/$/;"	m	struct:WhereLevel	file:
addrInTop	vendor\sqlite\sqlite3.c	/^        int addrInTop;         \/* Top of the IN loop *\/$/;"	m	struct:WhereLevel::__anon19::__anon20::InLoop	file:
addrLikeRep	vendor\sqlite\sqlite3.c	/^  int addrLikeRep;      \/* LIKE range processing address *\/$/;"	m	struct:WhereLevel	file:
addrLoop	vendor\sqlite\sqlite3.c	/^  int addrLoop;                   \/* Address of "loops" counter *\/$/;"	m	struct:ScanStatus	file:
addrNxt	vendor\sqlite\sqlite3.c	/^  int addrNxt;          \/* Jump here to start the next IN combination *\/$/;"	m	struct:WhereLevel	file:
addrOpenEphm	vendor\sqlite\sqlite3.c	/^  int addrOpenEphm[2];   \/* OP_OpenEphem opcodes related to this select *\/$/;"	m	struct:Select	file:
addrSkip	vendor\sqlite\sqlite3.c	/^  int addrSkip;         \/* Jump here for next iteration of skip-scan *\/$/;"	m	struct:WhereLevel	file:
addrSkipPK	vendor\sqlite\sqlite3.c	/^  int addrSkipPK;      \/* Address of instruction to skip PRIMARY KEY index *\/$/;"	m	struct:Parse	file:
addrSortIndex	vendor\sqlite\sqlite3.c	/^  int addrSortIndex;    \/* Address of the OP_SorterOpen or OP_OpenEphemeral *\/$/;"	m	struct:SortCtx	file:
addrTnct	vendor\sqlite\sqlite3.c	/^  int addrTnct;   \/* Address of OP_OpenEphemeral opcode for tabTnct *\/$/;"	m	struct:DistinctCtx	file:
addrVisit	vendor\sqlite\sqlite3.c	/^  int addrVisit;                  \/* Address of "rows visited" counter *\/$/;"	m	struct:ScanStatus	file:
addrVisit	vendor\sqlite\sqlite3.c	/^  int addrVisit;        \/* Address at which row is visited *\/$/;"	m	struct:WhereLevel	file:
adjustStats	vendor\sqlite\sqlite3.c	/^static void adjustStats(int iSize, int increment){$/;"	f	file:
affSdst	vendor\sqlite\sqlite3.c	/^  char affSdst;        \/* Affinity used when eDest==SRT_Set *\/$/;"	m	struct:SelectDest	file:
affinity	vendor\sqlite\sqlite3.c	/^  char affinity;         \/* The affinity of the column or 0 if not a column *\/$/;"	m	struct:Expr	file:
affinity	vendor\sqlite\sqlite3.c	/^  char affinity;   \/* One of the SQLITE_AFF_... values *\/$/;"	m	struct:Column	file:
afpCheckReservedLock	vendor\sqlite\sqlite3.c	/^static int afpCheckReservedLock(sqlite3_file *id, int *pResOut){$/;"	f	file:
afpClose	vendor\sqlite\sqlite3.c	/^static int afpClose(sqlite3_file *id) {$/;"	f	file:
afpLock	vendor\sqlite\sqlite3.c	/^static int afpLock(sqlite3_file *id, int eFileLock){$/;"	f	file:
afpLockingContext	vendor\sqlite\sqlite3.c	/^struct afpLockingContext {$/;"	s	file:
afpLockingContext	vendor\sqlite\sqlite3.c	/^typedef struct afpLockingContext afpLockingContext;$/;"	t	typeref:struct:afpLockingContext	file:
afpSetLock	vendor\sqlite\sqlite3.c	/^static int afpSetLock($/;"	f	file:
afpUnlock	vendor\sqlite\sqlite3.c	/^static int afpUnlock(sqlite3_file *id, int eFileLock) {$/;"	f	file:
afpfsByteRangeLock2FSCTL	vendor\sqlite\sqlite3.c	27889;"	d	file:
aggregate_context	vendor\sqlite\sqlite3.c	/^  void * (*aggregate_context)(sqlite3_context*,int nBytes);$/;"	m	struct:sqlite3_api_routines	file:
aggregate_count	vendor\sqlite\sqlite3.c	/^  int  (*aggregate_count)(sqlite3_context*);$/;"	m	struct:sqlite3_api_routines	file:
ai	vendor\sqlite\sqlite3.c	/^    int *ai;               \/* Used when p4type is P4_INTARRAY *\/$/;"	m	union:VdbeOp::__anon4	file:
aiColumn	vendor\sqlite\sqlite3.c	/^  i16 *aiColumn;           \/* Which columns are used by this index.  1st is 0 *\/$/;"	m	struct:Index	file:
aiCurOnePass	vendor\sqlite\sqlite3.c	/^  int aiCurOnePass[2];      \/* OP_OpenWrite cursors for the ONEPASS opt *\/$/;"	m	struct:WhereInfo	file:
aiException	vendor\sqlite\sqlite3.c	/^  int *aiException;$/;"	m	struct:unicode_tokenizer	file:
aiFreelist	vendor\sqlite\sqlite3.c	/^  int aiFreelist[LOGMAX+1];$/;"	m	struct:Mem5Global	file:
aiHash	vendor\sqlite\sqlite3.c	/^  u32 aiHash[N_HASH];        \/* For sizes MX_SMALL+1 and larger *\/$/;"	m	struct:Mem3Global	file:
aiIdx	vendor\sqlite\sqlite3.c	/^  u16 aiIdx[BTCURSOR_MAX_DEPTH];        \/* Current index in apPage[i] *\/$/;"	m	struct:BtCursor	file:
aiOvfl	vendor\sqlite\sqlite3.c	/^  u16 aiOvfl[5];       \/* Insert the i-th overflow cell before the aiOvfl-th$/;"	m	struct:MemPage	file:
aiRowEst	vendor\sqlite\sqlite3.c	/^  tRowcnt *aiRowEst;       \/* Non-logarithmic stat1 data for this index *\/$/;"	m	struct:Index	file:
aiRowLogEst	vendor\sqlite\sqlite3.c	/^  LogEst *aiRowLogEst;     \/* From ANALYZE: Est. rows selected by each column *\/$/;"	m	struct:Index	file:
aiSmall	vendor\sqlite\sqlite3.c	/^  u32 aiSmall[MX_SMALL-1];   \/* For sizes 2 through MX_SMALL, inclusive *\/$/;"	m	struct:Mem3Global	file:
alarmArg	vendor\sqlite\sqlite3.c	/^  void *alarmArg;$/;"	m	struct:Mem0Global	file:
alarmBusy	vendor\sqlite\sqlite3.c	/^  int alarmBusy;$/;"	m	struct:Mem3Global	file:
alarmCallback	vendor\sqlite\sqlite3.c	/^  void (*alarmCallback)(void*, sqlite3_int64,int);$/;"	m	struct:Mem0Global	file:
alarmThreshold	vendor\sqlite\sqlite3.c	/^  sqlite3_int64 alarmThreshold;$/;"	m	struct:Mem0Global	file:
allSpaces	vendor\sqlite\sqlite3.c	/^static int allSpaces(const char *z, int n){$/;"	f	file:
allocSpace	vendor\sqlite\sqlite3.c	/^static void *allocSpace($/;"	f	file:
allocateBtreePage	vendor\sqlite\sqlite3.c	/^static int allocateBtreePage($/;"	f	file:
allocateCursor	vendor\sqlite\sqlite3.c	/^static VdbeCursor *allocateCursor($/;"	f	file:
allocateIndexInfo	vendor\sqlite\sqlite3.c	/^static sqlite3_index_info *allocateIndexInfo($/;"	f	file:
allocateSpace	vendor\sqlite\sqlite3.c	/^static int allocateSpace(MemPage *pPage, int nByte, int *pIdx){$/;"	f	file:
allocateTempSpace	vendor\sqlite\sqlite3.c	/^static void allocateTempSpace(BtShared *pBt){$/;"	f	file:
allowedOp	vendor\sqlite\sqlite3.c	/^static int allowedOp(int op){$/;"	f	file:
anDLt	vendor\sqlite\sqlite3.c	/^  tRowcnt *anDLt;                 \/* sqlite_stat4.nDLt *\/$/;"	m	struct:Stat4Sample	file:
anDLt	vendor\sqlite\sqlite3.c	/^  tRowcnt *anDLt;   \/* Est. number of distinct keys less than this sample *\/$/;"	m	struct:IndexSample	file:
anEq	vendor\sqlite\sqlite3.c	/^  tRowcnt *anEq;                  \/* sqlite_stat4.nEq *\/$/;"	m	struct:Stat4Sample	file:
anEq	vendor\sqlite\sqlite3.c	/^  tRowcnt *anEq;    \/* Est. number of rows where the key equals this sample *\/$/;"	m	struct:IndexSample	file:
anExec	vendor\sqlite\sqlite3.c	/^  i64 *anExec;            \/* Event counters from parent frame *\/$/;"	m	struct:VdbeFrame	file:
anExec	vendor\sqlite\sqlite3.c	/^  i64 *anExec;            \/* Number of times each op has been executed *\/$/;"	m	struct:Vdbe	file:
anLt	vendor\sqlite\sqlite3.c	/^  tRowcnt *anLt;                  \/* sqlite_stat4.nLt *\/$/;"	m	struct:Stat4Sample	file:
anLt	vendor\sqlite\sqlite3.c	/^  tRowcnt *anLt;    \/* Est. number of rows where key is less than this sample *\/$/;"	m	struct:IndexSample	file:
anOutput	vendor\sqlite\sqlite3.c	/^  int anOutput[16];               \/* Size each output buffer in bytes *\/$/;"	m	struct:TermSelect	file:
anQueue	vendor\sqlite\sqlite3.c	/^  u32 anQueue[RTREE_MAX_DEPTH+1];   \/* Number of queued entries by iLevel *\/$/;"	m	struct:RtreeCursor	file:
anQueue	vendor\sqlite\sqlite3.c	/^  unsigned int *anQueue;            \/* Number of pending entries in the queue *\/$/;"	m	struct:sqlite3_rtree_query_info	file:
anStat	vendor\sqlite\sqlite3.c	/^  int anStat[3];          \/* 0: hits.  1: size misses.  2: full misses *\/$/;"	m	struct:Lookaside	file:
analysisInfo	vendor\sqlite\sqlite3.c	/^struct analysisInfo {$/;"	s	file:
analysisInfo	vendor\sqlite\sqlite3.c	/^typedef struct analysisInfo analysisInfo;$/;"	t	typeref:struct:analysisInfo	file:
analysisLoader	vendor\sqlite\sqlite3.c	/^static int analysisLoader(void *pData, int argc, char **argv, char **NotUsed){$/;"	f	file:
analyzeAggregate	vendor\sqlite\sqlite3.c	/^static int analyzeAggregate(Walker *pWalker, Expr *pExpr){$/;"	f	file:
analyzeAggregatesInSelect	vendor\sqlite\sqlite3.c	/^static int analyzeAggregatesInSelect(Walker *pWalker, Select *pSelect){$/;"	f	file:
analyzeDatabase	vendor\sqlite\sqlite3.c	/^static void analyzeDatabase(Parse *pParse, int iDb){$/;"	f	file:
analyzeOneTable	vendor\sqlite\sqlite3.c	/^static void analyzeOneTable($/;"	f	file:
analyzeTable	vendor\sqlite\sqlite3.c	/^static void analyzeTable(Parse *pParse, Table *pTab, Index *pOnlyIdx){$/;"	f	file:
apArg	vendor\sqlite\sqlite3.c	/^  Mem **apArg;            \/* Arguments to currently executing user function *\/$/;"	m	struct:Vdbe	file:
apArg	vendor\sqlite\sqlite3.c	/^  sqlite3_value **apArg;   \/* The argument values *\/$/;"	m	struct:PrintfArguments	file:
apCsr	vendor\sqlite\sqlite3.c	/^  VdbeCursor **apCsr;     \/* Array of Vdbe cursors for parent frame *\/$/;"	m	struct:VdbeFrame	file:
apCsr	vendor\sqlite\sqlite3.c	/^  VdbeCursor **apCsr;     \/* One element of this array for each open cursor *\/$/;"	m	struct:Vdbe	file:
apHash	vendor\sqlite\sqlite3.c	/^  PgHdr1 **apHash;                    \/* Hash table for fast lookup by key *\/$/;"	m	struct:PCache1	file:
apOvfl	vendor\sqlite\sqlite3.c	/^  u8 *apOvfl[5];       \/* Pointers to the body of overflow cells *\/$/;"	m	struct:MemPage	file:
apPage	vendor\sqlite\sqlite3.c	/^  MemPage *apPage[BTCURSOR_MAX_DEPTH];  \/* Pages from root to current page *\/$/;"	m	struct:BtCursor	file:
apRegion	vendor\sqlite\sqlite3.c	/^  char **apRegion;           \/* Array of mapped shared-memory regions *\/$/;"	m	struct:unixShmNode	file:
apSegment	vendor\sqlite\sqlite3.c	/^  Fts3SegReader **apSegment;      \/* Array of Fts3SegReader objects *\/$/;"	m	struct:Fts3MultiSegReader	file:
apSub	vendor\sqlite\sqlite3.c	/^    Bitvec *apSub[BITVEC_NPTR];  \/* Recursive representation *\/$/;"	m	union:Bitvec::__anon16	file:
apSub	vendor\sqlite\sqlite3.c	/^  SubProgram **apSub;        \/* Array of subprograms *\/$/;"	m	struct:VdbeOpIter	file:
apTrigger	vendor\sqlite\sqlite3.c	/^  Trigger *apTrigger[2];\/* Triggers for aAction[] actions *\/$/;"	m	struct:FKey	file:
apVtabLock	vendor\sqlite\sqlite3.c	/^  Table **apVtabLock;       \/* Pointer to virtual tables needing locking *\/$/;"	m	struct:Parse	file:
apWiData	vendor\sqlite\sqlite3.c	/^  volatile u32 **apWiData;   \/* Pointer to wal-index content in memory *\/$/;"	m	struct:Wal	file:
apiOomError	vendor\sqlite\sqlite3.c	/^static SQLITE_NOINLINE int apiOomError(sqlite3 *db){$/;"	f	file:
applyAffinity	vendor\sqlite\sqlite3.c	/^static void applyAffinity($/;"	f	file:
applyNumericAffinity	vendor\sqlite\sqlite3.c	/^static void applyNumericAffinity(Mem *pRec, int bTryForInt){$/;"	f	file:
approx	vendor\sqlite\sqlite3.c	/^  u8 approx;        \/* True if non-integer value was input to the sum *\/$/;"	m	struct:SumCtx	file:
argvIndex	vendor\sqlite\sqlite3.c	/^    int argvIndex;           \/* if >0, constraint is part of argv to xFilter *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_constraint_usage	file:
assertCellInfo	vendor\sqlite\sqlite3.c	/^  static void assertCellInfo(BtCursor *pCur){$/;"	f	file:
assertCellInfo	vendor\sqlite\sqlite3.c	56744;"	d	file:
assertMutexHeld	vendor\sqlite\sqlite3.c	130674;"	d	file:
assertParentIndex	vendor\sqlite\sqlite3.c	57310;"	d	file:
assertTruncateConstraint	vendor\sqlite\sqlite3.c	/^static void assertTruncateConstraint(Pager *pPager){$/;"	f	file:
assertTruncateConstraint	vendor\sqlite\sqlite3.c	45197;"	d	file:
assertTruncateConstraintCb	vendor\sqlite\sqlite3.c	/^static void assertTruncateConstraintCb(PgHdr *pPg){$/;"	f	file:
assert_pager_state	vendor\sqlite\sqlite3.c	/^static int assert_pager_state(Pager *p){$/;"	f	file:
atEOF	vendor\sqlite\sqlite3.c	/^  u8 atEOF;                         \/* True if at end of search *\/$/;"	m	struct:RtreeCursor	file:
attachBackupObject	vendor\sqlite\sqlite3.c	/^static void attachBackupObject(sqlite3_backup *p){$/;"	f	file:
attachFunc	vendor\sqlite\sqlite3.c	/^static void attachFunc($/;"	f	file:
auth	vendor\sqlite\sqlite3.c	/^  sqlite3_userauth auth;        \/* User authentication information *\/$/;"	m	struct:sqlite3	file:
authLevel	vendor\sqlite\sqlite3.c	/^  u8 authLevel;                 \/* Current authentication level *\/$/;"	m	struct:sqlite3_userauth	file:
autoCommit	vendor\sqlite\sqlite3.c	/^  u8 autoCommit;                \/* The auto-commit flag. *\/$/;"	m	struct:sqlite3	file:
autoIncBegin	vendor\sqlite\sqlite3.c	/^static int autoIncBegin($/;"	f	file:
autoIncBegin	vendor\sqlite\sqlite3.c	99174;"	d	file:
autoIncStep	vendor\sqlite\sqlite3.c	/^static void autoIncStep(Parse *pParse, int memId, int regRowid){$/;"	f	file:
autoIncStep	vendor\sqlite\sqlite3.c	99175;"	d	file:
autoVacuum	vendor\sqlite\sqlite3.c	/^  u8 autoVacuum;        \/* True if auto-vacuum is enabled *\/$/;"	m	struct:BtShared	file:
autoVacuumCommit	vendor\sqlite\sqlite3.c	/^static int autoVacuumCommit(BtShared *pBt){$/;"	f	file:
auto_extension	vendor\sqlite\sqlite3.c	/^  int (*auto_extension)(void(*)(void));$/;"	m	struct:sqlite3_api_routines	file:
autolockIoFinder	vendor\sqlite\sqlite3.c	/^  *(*const autolockIoFinder)(const char*,unixFile*) = autolockIoFinderImpl;$/;"	v	file:
autolockIoFinderImpl	vendor\sqlite\sqlite3.c	/^static const sqlite3_io_methods *autolockIoFinderImpl($/;"	f	file:
avgFinalize	vendor\sqlite\sqlite3.c	/^static void avgFinalize(sqlite3_context *context){$/;"	f	file:
azCol	vendor\sqlite\sqlite3.c	/^  const char **azCol;                 \/* Array of column names for fts3 table *\/$/;"	m	struct:ParseContext	file:
azColl	vendor\sqlite\sqlite3.c	/^  char **azColl;           \/* Array of collation sequence names for index *\/$/;"	m	struct:Index	file:
azColumn	vendor\sqlite\sqlite3.c	/^  char **azColumn;                \/* column names.  malloced *\/$/;"	m	struct:Fts3Table	file:
azCompileOpt	vendor\sqlite\sqlite3.c	/^static const char * const azCompileOpt[] = {$/;"	v	file:
azFileLock	vendor\sqlite\sqlite3.c	/^static const char *azFileLock(int eFileLock){$/;"	f	file:
azModuleArg	vendor\sqlite\sqlite3.c	/^  char **azModuleArg;  \/* Text of all module args. [0] is module name *\/$/;"	m	struct:Table	file:
azResult	vendor\sqlite\sqlite3.c	/^  char **azResult;   \/* Accumulated output *\/$/;"	m	struct:TabResult	file:
azVar	vendor\sqlite\sqlite3.c	/^  char **azVar;             \/* Pointers to names of parameters *\/$/;"	m	struct:Parse	file:
azVar	vendor\sqlite\sqlite3.c	/^  char **azVar;           \/* Name of variables *\/$/;"	m	struct:Vdbe	file:
b	vendor\sqlite\sqlite3.c	/^struct TrigEvent { int a; IdList * b; };$/;"	m	struct:TrigEvent	file:
bConstraint	vendor\sqlite\sqlite3.c	/^  u8 bConstraint;           \/* True if constraints are supported *\/$/;"	m	struct:VTable	file:
bCoreMutex	vendor\sqlite\sqlite3.c	/^  int bCoreMutex;                   \/* True to enable core mutexing *\/$/;"	m	struct:Sqlite3Config	file:
bDeferred	vendor\sqlite\sqlite3.c	/^  u8 bDeferred;              \/* True if this expression is entirely deferred *\/$/;"	m	struct:Fts3Expr	file:
bDesc	vendor\sqlite\sqlite3.c	/^  u8 bDesc;                       \/* True to sort in descending order *\/$/;"	m	struct:Fts3Cursor	file:
bDescIdx	vendor\sqlite\sqlite3.c	/^  u8 bDescIdx;                    \/* True if doclists are in reverse order *\/$/;"	m	struct:Fts3Table	file:
bDestLocked	vendor\sqlite\sqlite3.c	/^  int bDestLocked;         \/* True once a write-transaction is open on pDest *\/$/;"	m	struct:sqlite3_backup	file:
bDoTruncate	vendor\sqlite\sqlite3.c	/^  u8 bDoTruncate;       \/* True to truncate db on commit *\/$/;"	m	struct:BtShared	file:
bDone	vendor\sqlite\sqlite3.c	/^  int bDone;                      \/* Set if thread is finished but not joined *\/$/;"	m	struct:SortSubtask	file:
bEnabled	vendor\sqlite\sqlite3.c	/^  u8 bEnabled;            \/* False to disable new lookaside allocations *\/$/;"	m	struct:Lookaside	file:
bEof	vendor\sqlite\sqlite3.c	/^  int bEof;                       \/* Set to true when merge is finished *\/$/;"	m	struct:IncrMerger	file:
bEof	vendor\sqlite\sqlite3.c	/^  u8 bEof;                   \/* True this expression is at EOF already *\/$/;"	m	struct:Fts3Expr	file:
bExclusive	vendor\sqlite\sqlite3.c	/^  BOOL bExclusive;    \/* Indicates an exclusive lock has been obtained *\/$/;"	m	struct:winceLock	file:
bFirst	vendor\sqlite\sqlite3.c	/^  int bFirst;                     \/* True if token must appear at position 0 *\/$/;"	m	struct:Fts3PhraseToken	file:
bFreeList	vendor\sqlite\sqlite3.c	/^  int bFreeList;                 \/* True if pList should be sqlite3_free()d *\/$/;"	m	struct:Fts3Doclist	file:
bFreeWith	vendor\sqlite\sqlite3.c	/^  u8 bFreeWith;             \/* True if pWith should be freed with parser *\/$/;"	m	struct:Parse	file:
bFts4	vendor\sqlite\sqlite3.c	/^  int bFts4;                          \/* True to allow FTS4-only syntax *\/$/;"	m	struct:ParseContext	file:
bFts4	vendor\sqlite\sqlite3.c	/^  u8 bFts4;                       \/* True for FTS4, false for FTS3 *\/$/;"	m	struct:Fts3Table	file:
bFullMutex	vendor\sqlite\sqlite3.c	/^  int bFullMutex;                   \/* True to enable full mutexing *\/$/;"	m	struct:Sqlite3Config	file:
bHasDocsize	vendor\sqlite\sqlite3.c	/^  u8 bHasDocsize;                 \/* True if %_docsize table exists *\/$/;"	m	struct:Fts3Table	file:
bHasStat	vendor\sqlite\sqlite3.c	/^  u8 bHasStat;                    \/* True if %_stat table exists (2==unknown) *\/$/;"	m	struct:Fts3Table	file:
bIgnore	vendor\sqlite\sqlite3.c	/^  int bIgnore;$/;"	m	struct:TokenDoclist	file:
bIgnoreSavepoint	vendor\sqlite\sqlite3.c	/^  u8 bIgnoreSavepoint;            \/* True to ignore xSavepoint invocations *\/$/;"	m	struct:Fts3Table	file:
bIncr	vendor\sqlite\sqlite3.c	/^  int bIncr;                 \/* True if doclist is loaded incrementally *\/$/;"	m	struct:Fts3Phrase	file:
bIsReader	vendor\sqlite\sqlite3.c	/^  bft bIsReader:1;        \/* True for statements that read *\/$/;"	m	struct:Vdbe	file:
bLine	vendor\sqlite\sqlite3.c	/^  u8  bLine[100];         \/* Draw vertical in column i if bLine[i] is true *\/$/;"	m	struct:TreeView	file:
bLocaltimeFault	vendor\sqlite\sqlite3.c	/^  int bLocaltimeFault;              \/* True to fail localtime() calls *\/$/;"	m	struct:Sqlite3Config	file:
bLookup	vendor\sqlite\sqlite3.c	/^  int bLookup;                    \/* True if a lookup of a single entry. *\/$/;"	m	struct:Fts3MultiSegReader	file:
bLookup	vendor\sqlite\sqlite3.c	/^  u8 bLookup;                     \/* True for a lookup only *\/$/;"	m	struct:Fts3SegReader	file:
bMalloced	vendor\sqlite\sqlite3.c	/^  u8 bMalloced;           \/* True if pStart obtained from sqlite3_malloc() *\/$/;"	m	struct:Lookaside	file:
bMemstat	vendor\sqlite\sqlite3.c	/^  int bMemstat;                     \/* True to enable memory status *\/$/;"	m	struct:Sqlite3Config	file:
bNoIncrDoclist	vendor\sqlite\sqlite3.c	/^  int bNoIncrDoclist;$/;"	m	struct:Fts3Table	file:
bNoLeafData	vendor\sqlite\sqlite3.c	/^  u8 bNoLeafData;                 \/* If true, store 0 for segment size *\/$/;"	m	struct:IncrmergeWriter	file:
bNot	vendor\sqlite\sqlite3.c	/^  int bNot;         \/* True if the NOT keyword is present *\/$/;"	m	struct:LikeOp	file:
bOpenUri	vendor\sqlite\sqlite3.c	/^  int bOpenUri;                     \/* True to interpret filenames as URIs *\/$/;"	m	struct:Sqlite3Config	file:
bOwned	vendor\sqlite\sqlite3.c	/^  BOOL bOwned;  \/* Do we own the heap (i.e. destroy it on shutdown)? *\/$/;"	m	struct:winMemData	file:
bPending	vendor\sqlite\sqlite3.c	/^  BOOL bPending;      \/* Indicates a pending lock has been obtained *\/$/;"	m	struct:winceLock	file:
bPoint	vendor\sqlite\sqlite3.c	/^  u8 bPoint;                        \/* True if sPoint is valid *\/$/;"	m	struct:RtreeCursor	file:
bProcessLock	vendor\sqlite\sqlite3.c	/^  unsigned char bProcessLock;     \/* An exclusive process lock is held *\/$/;"	m	struct:unixInodeInfo	file:
bPurgeable	vendor\sqlite\sqlite3.c	/^  int bPurgeable;                     \/* True if cache is purgeable *\/$/;"	m	struct:PCache1	file:
bPurgeable	vendor\sqlite\sqlite3.c	/^  u8 bPurgeable;                      \/* True if pages are on backing store *\/$/;"	m	struct:PCache	file:
bRemoveDiacritic	vendor\sqlite\sqlite3.c	/^  int bRemoveDiacritic;$/;"	m	struct:unicode_tokenizer	file:
bReserved	vendor\sqlite\sqlite3.c	/^  BOOL bReserved;     \/* Indicates a reserved lock has been obtained *\/$/;"	m	struct:winceLock	file:
bRestart	vendor\sqlite\sqlite3.c	/^  int bRestart;$/;"	m	struct:Fts3MultiSegReader	file:
bSpanIsTab	vendor\sqlite\sqlite3.c	/^    unsigned bSpanIsTab :1; \/* zSpan holds DB.TABLE.COLUMN *\/$/;"	m	struct:ExprList::ExprList_item	file:
bStart	vendor\sqlite\sqlite3.c	/^  u8 bStart;                 \/* True if iDocid is valid *\/$/;"	m	struct:Fts3Expr	file:
bUnderPressure	vendor\sqlite\sqlite3.c	/^  int bUnderPressure;            \/* True if low on PAGECACHE memory *\/$/;"	m	struct:PCacheGlobal	file:
bUnordered	vendor\sqlite\sqlite3.c	/^  unsigned bUnordered:1;   \/* Use this index for == or IN queries only *\/$/;"	m	struct:Index	file:
bUseCis	vendor\sqlite\sqlite3.c	/^  int bUseCis;                      \/* Use covering indices for full-scans *\/$/;"	m	struct:Sqlite3Config	file:
bUseFetch	vendor\sqlite\sqlite3.c	/^  u8 bUseFetch;               \/* True to use xFetch() *\/$/;"	m	struct:Pager	file:
bUsePMA	vendor\sqlite\sqlite3.c	/^  u8 bUsePMA;                     \/* True if one or more PMAs created *\/$/;"	m	struct:VdbeSorter	file:
bUseThread	vendor\sqlite\sqlite3.c	/^  int bUseThread;                 \/* True to use a bg thread for this object *\/$/;"	m	struct:IncrMerger	file:
bUseThreads	vendor\sqlite\sqlite3.c	/^  u8 bUseThreads;                 \/* True to use background threads *\/$/;"	m	struct:VdbeSorter	file:
bVarOnly	vendor\sqlite\sqlite3.c	/^  int bVarOnly;       \/* Check for variable references only *\/$/;"	m	struct:DbFixer	file:
backtrace	vendor\sqlite\sqlite3.c	17150;"	d	file:
backtrace_symbols_fd	vendor\sqlite\sqlite3.c	17151;"	d	file:
backupOnePage	vendor\sqlite\sqlite3.c	/^static int backupOnePage($/;"	f	file:
backupTruncateFile	vendor\sqlite\sqlite3.c	/^static int backupTruncateFile(sqlite3_file *pFile, i64 iSize){$/;"	f	file:
backup_finish	vendor\sqlite\sqlite3.c	/^  int (*backup_finish)(sqlite3_backup*);$/;"	m	struct:sqlite3_api_routines	file:
backup_init	vendor\sqlite\sqlite3.c	/^  sqlite3_backup *(*backup_init)(sqlite3*,const char*,sqlite3*,const char*);$/;"	m	struct:sqlite3_api_routines	file:
backup_pagecount	vendor\sqlite\sqlite3.c	/^  int (*backup_pagecount)(sqlite3_backup*);$/;"	m	struct:sqlite3_api_routines	file:
backup_remaining	vendor\sqlite\sqlite3.c	/^  int (*backup_remaining)(sqlite3_backup*);$/;"	m	struct:sqlite3_api_routines	file:
backup_step	vendor\sqlite\sqlite3.c	/^  int (*backup_step)(sqlite3_backup*,int);$/;"	m	struct:sqlite3_api_routines	file:
balance	vendor\sqlite\sqlite3.c	/^static int balance(BtCursor *pCur){$/;"	f	file:
balance_deeper	vendor\sqlite\sqlite3.c	/^static int balance_deeper(MemPage *pRoot, MemPage **ppChild){$/;"	f	file:
balance_nonroot	vendor\sqlite\sqlite3.c	/^static int balance_nonroot($/;"	f	file:
balance_quick	vendor\sqlite\sqlite3.c	/^static int balance_quick(MemPage *pParent, MemPage *pPage, u8 *pSpace){$/;"	f	file:
base	vendor\sqlite\sqlite3.c	/^  etByte base;             \/* The base for radix conversion *\/$/;"	m	struct:et_info	file:
base	vendor\sqlite\sqlite3.c	/^  sqlite3_tokenizer base;      \/* Base class *\/$/;"	m	struct:porter_tokenizer	file:
base	vendor\sqlite\sqlite3.c	/^  sqlite3_tokenizer base;$/;"	m	struct:IcuTokenizer	file:
base	vendor\sqlite\sqlite3.c	/^  sqlite3_tokenizer base;$/;"	m	struct:simple_tokenizer	file:
base	vendor\sqlite\sqlite3.c	/^  sqlite3_tokenizer base;$/;"	m	struct:unicode_tokenizer	file:
base	vendor\sqlite\sqlite3.c	/^  sqlite3_tokenizer_cursor base;$/;"	m	struct:IcuCursor	file:
base	vendor\sqlite\sqlite3.c	/^  sqlite3_tokenizer_cursor base;$/;"	m	struct:porter_tokenizer_cursor	file:
base	vendor\sqlite\sqlite3.c	/^  sqlite3_tokenizer_cursor base;$/;"	m	struct:simple_tokenizer_cursor	file:
base	vendor\sqlite\sqlite3.c	/^  sqlite3_tokenizer_cursor base;$/;"	m	struct:unicode_cursor	file:
base	vendor\sqlite\sqlite3.c	/^  sqlite3_vtab base;              \/* Base class used by SQLite core *\/$/;"	m	struct:Fts3Table	file:
base	vendor\sqlite\sqlite3.c	/^  sqlite3_vtab base;              \/* Base class used by SQLite core *\/$/;"	m	struct:Fts3auxTable	file:
base	vendor\sqlite\sqlite3.c	/^  sqlite3_vtab base;              \/* Base class used by SQLite core *\/$/;"	m	struct:Fts3tokTable	file:
base	vendor\sqlite\sqlite3.c	/^  sqlite3_vtab base;          \/* Base class.  Must be first *\/$/;"	m	struct:Rtree	file:
base	vendor\sqlite\sqlite3.c	/^  sqlite3_vtab_cursor base;         \/* Base class.  Must be first *\/$/;"	m	struct:RtreeCursor	file:
base	vendor\sqlite\sqlite3.c	/^  sqlite3_vtab_cursor base;       \/* Base class used by SQLite core *\/$/;"	m	struct:Fts3Cursor	file:
base	vendor\sqlite\sqlite3.c	/^  sqlite3_vtab_cursor base;       \/* Base class used by SQLite core *\/$/;"	m	struct:Fts3auxCursor	file:
base	vendor\sqlite\sqlite3.c	/^  sqlite3_vtab_cursor base;       \/* Base class used by SQLite core *\/$/;"	m	struct:Fts3tokCursor	file:
bft	vendor\sqlite\sqlite3.c	/^typedef unsigned bft;  \/* Bit Field Type *\/$/;"	t	file:
bigEndCksum	vendor\sqlite\sqlite3.c	/^  u8 bigEndCksum;                 \/* True if checksums in WAL are big-endian *\/$/;"	m	struct:WalIndexHdr	file:
binCollFunc	vendor\sqlite\sqlite3.c	/^static int binCollFunc($/;"	f	file:
binaryCompareP5	vendor\sqlite\sqlite3.c	/^static u8 binaryCompareP5(Expr *pExpr1, Expr *pExpr2, int jumpIfNull){$/;"	f	file:
binaryToUnaryIfNull	vendor\sqlite\sqlite3.c	/^  static void binaryToUnaryIfNull(Parse *pParse, Expr *pY, Expr *pA, int op){$/;"	f	file:
bindText	vendor\sqlite\sqlite3.c	/^static int bindText($/;"	f	file:
bind_blob	vendor\sqlite\sqlite3.c	/^  int  (*bind_blob)(sqlite3_stmt*,int,const void*,int n,void(*)(void*));$/;"	m	struct:sqlite3_api_routines	file:
bind_blob64	vendor\sqlite\sqlite3.c	/^  int (*bind_blob64)(sqlite3_stmt*,int,const void*,sqlite3_uint64,$/;"	m	struct:sqlite3_api_routines	file:
bind_double	vendor\sqlite\sqlite3.c	/^  int  (*bind_double)(sqlite3_stmt*,int,double);$/;"	m	struct:sqlite3_api_routines	file:
bind_int	vendor\sqlite\sqlite3.c	/^  int  (*bind_int)(sqlite3_stmt*,int,int);$/;"	m	struct:sqlite3_api_routines	file:
bind_int64	vendor\sqlite\sqlite3.c	/^  int  (*bind_int64)(sqlite3_stmt*,int,sqlite_int64);$/;"	m	struct:sqlite3_api_routines	file:
bind_null	vendor\sqlite\sqlite3.c	/^  int  (*bind_null)(sqlite3_stmt*,int);$/;"	m	struct:sqlite3_api_routines	file:
bind_parameter_count	vendor\sqlite\sqlite3.c	/^  int  (*bind_parameter_count)(sqlite3_stmt*);$/;"	m	struct:sqlite3_api_routines	file:
bind_parameter_index	vendor\sqlite\sqlite3.c	/^  int  (*bind_parameter_index)(sqlite3_stmt*,const char*zName);$/;"	m	struct:sqlite3_api_routines	file:
bind_parameter_name	vendor\sqlite\sqlite3.c	/^  const char * (*bind_parameter_name)(sqlite3_stmt*,int);$/;"	m	struct:sqlite3_api_routines	file:
bind_text	vendor\sqlite\sqlite3.c	/^  int  (*bind_text)(sqlite3_stmt*,int,const char*,int n,void(*)(void*));$/;"	m	struct:sqlite3_api_routines	file:
bind_text16	vendor\sqlite\sqlite3.c	/^  int  (*bind_text16)(sqlite3_stmt*,int,const void*,int,void(*)(void*));$/;"	m	struct:sqlite3_api_routines	file:
bind_text64	vendor\sqlite\sqlite3.c	/^  int (*bind_text64)(sqlite3_stmt*,int,const char*,sqlite3_uint64,$/;"	m	struct:sqlite3_api_routines	file:
bind_value	vendor\sqlite\sqlite3.c	/^  int  (*bind_value)(sqlite3_stmt*,int,const sqlite3_value*);$/;"	m	struct:sqlite3_api_routines	file:
bind_zeroblob	vendor\sqlite\sqlite3.c	/^  int (*bind_zeroblob)(sqlite3_stmt*,int,int);$/;"	m	struct:sqlite3_api_routines	file:
blobGrowBuffer	vendor\sqlite\sqlite3.c	/^static void blobGrowBuffer(Blob *pBlob, int nMin, int *pRc){$/;"	f	file:
blobReadWrite	vendor\sqlite\sqlite3.c	/^static int blobReadWrite($/;"	f	file:
blobSeekToRow	vendor\sqlite\sqlite3.c	/^static int blobSeekToRow(Incrblob *p, sqlite3_int64 iRow, char **pzErr){$/;"	f	file:
blob_bytes	vendor\sqlite\sqlite3.c	/^  int (*blob_bytes)(sqlite3_blob*);$/;"	m	struct:sqlite3_api_routines	file:
blob_close	vendor\sqlite\sqlite3.c	/^  int (*blob_close)(sqlite3_blob*);$/;"	m	struct:sqlite3_api_routines	file:
blob_open	vendor\sqlite\sqlite3.c	/^  int (*blob_open)(sqlite3*,const char*,const char*,const char*,sqlite3_int64,$/;"	m	struct:sqlite3_api_routines	file:
blob_read	vendor\sqlite\sqlite3.c	/^  int (*blob_read)(sqlite3_blob*,void*,int,int);$/;"	m	struct:sqlite3_api_routines	file:
blob_reopen	vendor\sqlite\sqlite3.c	/^  int (*blob_reopen)(sqlite3_blob*,sqlite3_int64);$/;"	m	struct:sqlite3_api_routines	file:
blob_write	vendor\sqlite\sqlite3.c	/^  int (*blob_write)(sqlite3_blob*,const void*,int,int);$/;"	m	struct:sqlite3_api_routines	file:
block	vendor\sqlite\sqlite3.c	/^  Blob block;                     \/* Current block image *\/$/;"	m	struct:NodeWriter	file:
btree	vendor\sqlite\sqlite3.c	/^    } btree;$/;"	m	union:WhereLoop::__anon21	typeref:struct:WhereLoop::__anon21::__anon22	file:
btreeClearHasContent	vendor\sqlite\sqlite3.c	/^static void btreeClearHasContent(BtShared *pBt){$/;"	f	file:
btreeCreateTable	vendor\sqlite\sqlite3.c	/^static int btreeCreateTable(Btree *p, int *piTable, int createTabFlags){$/;"	f	file:
btreeCursor	vendor\sqlite\sqlite3.c	/^static int btreeCursor($/;"	f	file:
btreeDropTable	vendor\sqlite\sqlite3.c	/^static int btreeDropTable(Btree *p, Pgno iTable, int *piMoved){$/;"	f	file:
btreeEndTransaction	vendor\sqlite\sqlite3.c	/^static void btreeEndTransaction(Btree *p){$/;"	f	file:
btreeGetHasContent	vendor\sqlite\sqlite3.c	/^static int btreeGetHasContent(BtShared *pBt, Pgno pgno){$/;"	f	file:
btreeGetPage	vendor\sqlite\sqlite3.c	/^static int btreeGetPage($/;"	f	file:
btreeInitPage	vendor\sqlite\sqlite3.c	/^static int btreeInitPage(MemPage *pPage){$/;"	f	file:
btreeIntegrity	vendor\sqlite\sqlite3.c	52445;"	d	file:
btreeInvokeBusyHandler	vendor\sqlite\sqlite3.c	/^static int btreeInvokeBusyHandler(void *pArg){$/;"	f	file:
btreeLockCarefully	vendor\sqlite\sqlite3.c	/^static void SQLITE_NOINLINE btreeLockCarefully(Btree *p){$/;"	f	file:
btreeMask	vendor\sqlite\sqlite3.c	/^  yDbMask btreeMask;      \/* Bitmask of db->aDb[] entries referenced *\/$/;"	m	struct:Vdbe	file:
btreeMoveto	vendor\sqlite\sqlite3.c	/^static int btreeMoveto($/;"	f	file:
btreeNext	vendor\sqlite\sqlite3.c	/^static SQLITE_NOINLINE int btreeNext(BtCursor *pCur, int *pRes){$/;"	f	file:
btreePageFromDbPage	vendor\sqlite\sqlite3.c	/^static MemPage *btreePageFromDbPage(DbPage *pDbPage, Pgno pgno, BtShared *pBt){$/;"	f	file:
btreePageLookup	vendor\sqlite\sqlite3.c	/^static MemPage *btreePageLookup(BtShared *pBt, Pgno pgno){$/;"	f	file:
btreePagecount	vendor\sqlite\sqlite3.c	/^static Pgno btreePagecount(BtShared *pBt){$/;"	f	file:
btreeParseCell	vendor\sqlite\sqlite3.c	/^static void btreeParseCell($/;"	f	file:
btreeParseCellPtr	vendor\sqlite\sqlite3.c	/^static void btreeParseCellPtr($/;"	f	file:
btreePrevious	vendor\sqlite\sqlite3.c	/^static SQLITE_NOINLINE int btreePrevious(BtCursor *pCur, int *pRes){$/;"	f	file:
btreeReleaseAllCursorPages	vendor\sqlite\sqlite3.c	/^static void btreeReleaseAllCursorPages(BtCursor *pCur){$/;"	f	file:
btreeRestoreCursorPosition	vendor\sqlite\sqlite3.c	/^static int btreeRestoreCursorPosition(BtCursor *pCur){$/;"	f	file:
btreeSetHasContent	vendor\sqlite\sqlite3.c	/^static int btreeSetHasContent(BtShared *pBt, Pgno pgno){$/;"	f	file:
btsFlags	vendor\sqlite\sqlite3.c	/^  u16 btsFlags;         \/* Boolean parameters.  See BTS_* macros below *\/$/;"	m	struct:BtShared	file:
busy	vendor\sqlite\sqlite3.c	/^    u8 busy;                    \/* TRUE if currently initializing *\/$/;"	m	struct:sqlite3::sqlite3InitInfo	file:
busyHandler	vendor\sqlite\sqlite3.c	/^  BusyHandler busyHandler;      \/* Busy callback *\/$/;"	m	struct:sqlite3	file:
busyTimeout	vendor\sqlite\sqlite3.c	/^  int busyTimeout;              \/* Busy handler timeout, in msec *\/$/;"	m	struct:sqlite3	file:
busy_handler	vendor\sqlite\sqlite3.c	/^  int  (*busy_handler)(sqlite3*,int(*)(void*,int),void*);$/;"	m	struct:sqlite3_api_routines	file:
busy_timeout	vendor\sqlite\sqlite3.c	/^  int  (*busy_timeout)(sqlite3*,int ms);$/;"	m	struct:sqlite3_api_routines	file:
cId	vendor\sqlite\sqlite3.c	/^  char cId;             \/* Symbolic ID of this loop for debugging use *\/$/;"	m	struct:WhereLoop	file:
cType	vendor\sqlite\sqlite3.c	/^static const char cType[] = {$/;"	v	file:
cacheCtr	vendor\sqlite\sqlite3.c	/^  u32 cacheCtr;           \/* VdbeCursor row cache generation counter *\/$/;"	m	struct:Vdbe	file:
cacheEntryClear	vendor\sqlite\sqlite3.c	/^static void cacheEntryClear(Parse *pParse, struct yColCache *p){$/;"	f	file:
cacheStatus	vendor\sqlite\sqlite3.c	/^  u32 cacheStatus;      \/* Cache is valid if this matches Vdbe.cacheCtr *\/$/;"	m	struct:VdbeCursor	file:
cache_size	vendor\sqlite\sqlite3.c	/^  int cache_size;      \/* Number of pages to use in the cache *\/$/;"	m	struct:Schema	file:
callCollNeeded	vendor\sqlite\sqlite3.c	/^static void callCollNeeded(sqlite3 *db, int enc, const char *zName){$/;"	f	file:
callFinaliser	vendor\sqlite\sqlite3.c	/^static void callFinaliser(sqlite3 *db, int offset){$/;"	f	file:
callStatGet	vendor\sqlite\sqlite3.c	/^static void callStatGet(Vdbe *v, int regStat4, int iParam, int regOut){$/;"	f	file:
cancel_auto_extension	vendor\sqlite\sqlite3.c	/^  int (*cancel_auto_extension)(void(*)(void));$/;"	m	struct:sqlite3_api_routines	file:
cb	vendor\sqlite\sqlite3.c	/^  RtreeGeomCallback cb;       \/* Info about the callback functions *\/$/;"	m	struct:RtreeMatchArg	file:
cdateFunc	vendor\sqlite\sqlite3.c	/^static void cdateFunc($/;"	f	file:
cellArea	vendor\sqlite\sqlite3.c	/^static RtreeDValue cellArea(Rtree *pRtree, RtreeCell *p){$/;"	f	file:
cellContains	vendor\sqlite\sqlite3.c	/^static int cellContains(Rtree *pRtree, RtreeCell *p1, RtreeCell *p2){$/;"	f	file:
cellGrowth	vendor\sqlite\sqlite3.c	/^static RtreeDValue cellGrowth(Rtree *pRtree, RtreeCell *p, RtreeCell *pCell){$/;"	f	file:
cellMargin	vendor\sqlite\sqlite3.c	/^static RtreeDValue cellMargin(Rtree *pRtree, RtreeCell *p){$/;"	f	file:
cellOffset	vendor\sqlite\sqlite3.c	/^  u16 cellOffset;      \/* Index in aData of first cell pointer *\/$/;"	m	struct:MemPage	file:
cellOverlap	vendor\sqlite\sqlite3.c	/^static RtreeDValue cellOverlap($/;"	f	file:
cellSize	vendor\sqlite\sqlite3.c	/^static u16 cellSize(MemPage *pPage, int iCell){$/;"	f	file:
cellSizePtr	vendor\sqlite\sqlite3.c	/^static u16 cellSizePtr(MemPage *pPage, u8 *pCell){$/;"	f	file:
cellUnion	vendor\sqlite\sqlite3.c	/^static void cellUnion(Rtree *pRtree, RtreeCell *p1, RtreeCell *p2){$/;"	f	file:
chain	vendor\sqlite\sqlite3.c	/^    Fts3HashElem *chain;     \/* Pointer to first entry with this hash *\/$/;"	m	struct:Fts3Hash::_fts3ht	file:
chain	vendor\sqlite\sqlite3.c	/^    HashElem *chain;           \/* Pointer to first entry with this hash *\/$/;"	m	struct:Hash::_ht	file:
changeCntOn	vendor\sqlite\sqlite3.c	/^  bft changeCntOn:1;      \/* True to update the change-counter *\/$/;"	m	struct:Vdbe	file:
changeCountDone	vendor\sqlite\sqlite3.c	/^  u8 changeCountDone;         \/* Set after incrementing the change-counter *\/$/;"	m	struct:Pager	file:
changeTempStorage	vendor\sqlite\sqlite3.c	/^static int changeTempStorage(Parse *pParse, const char *zStorageType){$/;"	f	file:
changes	vendor\sqlite\sqlite3.c	/^  int  (*changes)(sqlite3*);$/;"	m	struct:sqlite3_api_routines	file:
changes	vendor\sqlite\sqlite3.c	/^static void changes($/;"	f	file:
charFunc	vendor\sqlite\sqlite3.c	/^static void charFunc($/;"	f	file:
charMap	vendor\sqlite\sqlite3.c	125733;"	d	file:
charMap	vendor\sqlite\sqlite3.c	125736;"	d	file:
charset	vendor\sqlite\sqlite3.c	/^  etByte charset;          \/* Offset into aDigits[] of the digits string *\/$/;"	m	struct:et_info	file:
checkActiveVdbeCnt	vendor\sqlite\sqlite3.c	/^static void checkActiveVdbeCnt(sqlite3 *db){$/;"	f	file:
checkActiveVdbeCnt	vendor\sqlite\sqlite3.c	66517;"	d	file:
checkAppendMsg	vendor\sqlite\sqlite3.c	/^static void checkAppendMsg($/;"	f	file:
checkColumnOverlap	vendor\sqlite\sqlite3.c	/^static int checkColumnOverlap(IdList *pIdList, ExprList *pEList){$/;"	f	file:
checkForMultiColumnSelectError	vendor\sqlite\sqlite3.c	/^static int checkForMultiColumnSelectError($/;"	f	file:
checkList	vendor\sqlite\sqlite3.c	/^static void checkList($/;"	f	file:
checkListProperties	vendor\sqlite\sqlite3.c	/^static void checkListProperties(sqlite3 *db){$/;"	f	file:
checkListProperties	vendor\sqlite\sqlite3.c	130719;"	d	file:
checkPage	vendor\sqlite\sqlite3.c	/^static void checkPage(PgHdr *pPg){$/;"	f	file:
checkPtrmap	vendor\sqlite\sqlite3.c	/^static void checkPtrmap($/;"	f	file:
checkReadTransaction	vendor\sqlite\sqlite3.c	/^static int checkReadTransaction(sqlite3 *db, Btree *p){$/;"	f	file:
checkRef	vendor\sqlite\sqlite3.c	/^static int checkRef(IntegrityCk *pCheck, Pgno iPage){$/;"	f	file:
checkSavepointCount	vendor\sqlite\sqlite3.c	/^static int checkSavepointCount(sqlite3 *db){$/;"	f	file:
checkSchema	vendor\sqlite\sqlite3.c	/^  u8 checkSchema;      \/* Causes schema cookie check after an error *\/$/;"	m	struct:Parse	file:
checkTreePage	vendor\sqlite\sqlite3.c	/^static int checkTreePage($/;"	f	file:
childPtrSize	vendor\sqlite\sqlite3.c	/^  u8 childPtrSize;     \/* 0 if leaf==1.  4 if leaf==0 *\/$/;"	m	struct:MemPage	file:
ckBase	vendor\sqlite\sqlite3.c	/^  int ckBase;          \/* Base register of data during check constraints *\/$/;"	m	struct:Parse	file:
ckptLock	vendor\sqlite\sqlite3.c	/^  u8 ckptLock;               \/* True if holding a checkpoint lock *\/$/;"	m	struct:Wal	file:
ckptSyncFlags	vendor\sqlite\sqlite3.c	/^  u8 ckptSyncFlags;           \/* SYNC_NORMAL or SYNC_FULL for checkpoint *\/$/;"	m	struct:Pager	file:
cksumInit	vendor\sqlite\sqlite3.c	/^  u32 cksumInit;              \/* Quasi-random value added to every checksum *\/$/;"	m	struct:Pager	file:
clearAllSharedCacheTableLocks	vendor\sqlite\sqlite3.c	/^static void clearAllSharedCacheTableLocks(Btree *p){$/;"	f	file:
clearAllSharedCacheTableLocks	vendor\sqlite\sqlite3.c	52890;"	d	file:
clearCell	vendor\sqlite\sqlite3.c	/^static int clearCell($/;"	f	file:
clearDatabasePage	vendor\sqlite\sqlite3.c	/^static int clearDatabasePage($/;"	f	file:
clearSelect	vendor\sqlite\sqlite3.c	/^static void clearSelect(sqlite3 *db, Select *p, int bFree){$/;"	f	file:
clearYMD_HMS_TZ	vendor\sqlite\sqlite3.c	/^static void clearYMD_HMS_TZ(DateTime *p){$/;"	f	file:
clear_bindings	vendor\sqlite\sqlite3.c	/^  int (*clear_bindings)(sqlite3_stmt*);$/;"	m	struct:sqlite3_api_routines	file:
close	vendor\sqlite\sqlite3.c	/^  int  (*close)(sqlite3*);$/;"	m	struct:sqlite3_api_routines	file:
closeAllCursors	vendor\sqlite\sqlite3.c	/^static void closeAllCursors(Vdbe *p){$/;"	f	file:
closePendingFds	vendor\sqlite\sqlite3.c	/^static void closePendingFds(unixFile *pFile){$/;"	f	file:
closeUnixFile	vendor\sqlite\sqlite3.c	/^static int closeUnixFile(sqlite3_file *id){$/;"	f	file:
close_v2	vendor\sqlite\sqlite3.c	/^  int (*close_v2)(sqlite3*);$/;"	m	struct:sqlite3_api_routines	file:
cnt	vendor\sqlite\sqlite3.c	/^  i64 cnt;          \/* Number of elements summed *\/$/;"	m	struct:SumCtx	file:
cnt	vendor\sqlite\sqlite3.c	/^  int cnt;    \/* Number of entries without a matching leave *\/$/;"	m	struct:sqlite3_debug_mutex	file:
cnt	vendor\sqlite\sqlite3.c	/^  u32 cnt;                 \/* Number of times this instruction was executed *\/$/;"	m	struct:VdbeOp	file:
codeAllEqualityTerms	vendor\sqlite\sqlite3.c	/^static int codeAllEqualityTerms($/;"	f	file:
codeApplyAffinity	vendor\sqlite\sqlite3.c	/^static void codeApplyAffinity(Parse *pParse, int base, int n, char *zAff){$/;"	f	file:
codeAttach	vendor\sqlite\sqlite3.c	/^static void codeAttach($/;"	f	file:
codeCompare	vendor\sqlite\sqlite3.c	/^static int codeCompare($/;"	f	file:
codeDistinct	vendor\sqlite\sqlite3.c	/^static void codeDistinct($/;"	f	file:
codeEqualityTerm	vendor\sqlite\sqlite3.c	/^static int codeEqualityTerm($/;"	f	file:
codeInteger	vendor\sqlite\sqlite3.c	/^static void codeInteger(Parse *pParse, Expr *pExpr, int negFlag, int iMem){$/;"	f	file:
codeOffset	vendor\sqlite\sqlite3.c	/^static void codeOffset($/;"	f	file:
codeOneLoopStart	vendor\sqlite\sqlite3.c	/^static Bitmask codeOneLoopStart($/;"	f	file:
codeReal	vendor\sqlite\sqlite3.c	/^static void codeReal(Vdbe *v, const char *z, int negateFlag, int iMem){$/;"	f	file:
codeRowTrigger	vendor\sqlite\sqlite3.c	/^static TriggerPrg *codeRowTrigger($/;"	f	file:
codeTableLocks	vendor\sqlite\sqlite3.c	/^static void codeTableLocks(Parse *pParse){$/;"	f	file:
codeTableLocks	vendor\sqlite\sqlite3.c	90134;"	d	file:
codeTriggerProgram	vendor\sqlite\sqlite3.c	/^static int codeTriggerProgram($/;"	f	file:
colFlags	vendor\sqlite\sqlite3.c	/^  u8 colFlags;     \/* Boolean properties.  See COLFLAG_ defines below *\/$/;"	m	struct:Column	file:
colNamesSet	vendor\sqlite\sqlite3.c	/^  u8 colNamesSet;      \/* TRUE after OP_ColumnName has been issued to pVdbe *\/$/;"	m	struct:Parse	file:
colUsed	vendor\sqlite\sqlite3.c	/^    Bitmask colUsed;  \/* Bit N (1<<N) set if column N of pTab is used *\/$/;"	m	struct:SrcList::SrcList_item	file:
collationMatch	vendor\sqlite\sqlite3.c	/^static int collationMatch(const char *zColl, Index *pIndex){$/;"	f	file:
collation_needed	vendor\sqlite\sqlite3.c	/^  int  (*collation_needed)(sqlite3*,void*,void(*)(void*,sqlite3*,$/;"	m	struct:sqlite3_api_routines	file:
collation_needed16	vendor\sqlite\sqlite3.c	/^  int  (*collation_needed16)(sqlite3*,void*,void(*)(void*,sqlite3*,$/;"	m	struct:sqlite3_api_routines	file:
columnIndex	vendor\sqlite\sqlite3.c	/^static int columnIndex(Table *pTab, const char *zCol){$/;"	f	file:
columnMallocFailure	vendor\sqlite\sqlite3.c	/^static void columnMallocFailure(sqlite3_stmt *pStmt)$/;"	f	file:
columnMem	vendor\sqlite\sqlite3.c	/^static Mem *columnMem(sqlite3_stmt *pStmt, int i){$/;"	f	file:
columnName	vendor\sqlite\sqlite3.c	/^static const void *columnName($/;"	f	file:
columnNullValue	vendor\sqlite\sqlite3.c	/^static const Mem *columnNullValue(void){$/;"	f	file:
columnType	vendor\sqlite\sqlite3.c	106954;"	d	file:
columnTypeImpl	vendor\sqlite\sqlite3.c	/^static const char *columnTypeImpl($/;"	f	file:
column_blob	vendor\sqlite\sqlite3.c	/^  const void * (*column_blob)(sqlite3_stmt*,int iCol);$/;"	m	struct:sqlite3_api_routines	file:
column_bytes	vendor\sqlite\sqlite3.c	/^  int  (*column_bytes)(sqlite3_stmt*,int iCol);$/;"	m	struct:sqlite3_api_routines	file:
column_bytes16	vendor\sqlite\sqlite3.c	/^  int  (*column_bytes16)(sqlite3_stmt*,int iCol);$/;"	m	struct:sqlite3_api_routines	file:
column_count	vendor\sqlite\sqlite3.c	/^  int  (*column_count)(sqlite3_stmt*pStmt);$/;"	m	struct:sqlite3_api_routines	file:
column_database_name	vendor\sqlite\sqlite3.c	/^  const char * (*column_database_name)(sqlite3_stmt*,int);$/;"	m	struct:sqlite3_api_routines	file:
column_database_name16	vendor\sqlite\sqlite3.c	/^  const void * (*column_database_name16)(sqlite3_stmt*,int);$/;"	m	struct:sqlite3_api_routines	file:
column_decltype	vendor\sqlite\sqlite3.c	/^  const char * (*column_decltype)(sqlite3_stmt*,int i);$/;"	m	struct:sqlite3_api_routines	file:
column_decltype16	vendor\sqlite\sqlite3.c	/^  const void * (*column_decltype16)(sqlite3_stmt*,int);$/;"	m	struct:sqlite3_api_routines	file:
column_double	vendor\sqlite\sqlite3.c	/^  double  (*column_double)(sqlite3_stmt*,int iCol);$/;"	m	struct:sqlite3_api_routines	file:
column_int	vendor\sqlite\sqlite3.c	/^  int  (*column_int)(sqlite3_stmt*,int iCol);$/;"	m	struct:sqlite3_api_routines	file:
column_int64	vendor\sqlite\sqlite3.c	/^  sqlite_int64  (*column_int64)(sqlite3_stmt*,int iCol);$/;"	m	struct:sqlite3_api_routines	file:
column_name	vendor\sqlite\sqlite3.c	/^  const char * (*column_name)(sqlite3_stmt*,int);$/;"	m	struct:sqlite3_api_routines	file:
column_name16	vendor\sqlite\sqlite3.c	/^  const void * (*column_name16)(sqlite3_stmt*,int);$/;"	m	struct:sqlite3_api_routines	file:
column_origin_name	vendor\sqlite\sqlite3.c	/^  const char * (*column_origin_name)(sqlite3_stmt*,int);$/;"	m	struct:sqlite3_api_routines	file:
column_origin_name16	vendor\sqlite\sqlite3.c	/^  const void * (*column_origin_name16)(sqlite3_stmt*,int);$/;"	m	struct:sqlite3_api_routines	file:
column_table_name	vendor\sqlite\sqlite3.c	/^  const char * (*column_table_name)(sqlite3_stmt*,int);$/;"	m	struct:sqlite3_api_routines	file:
column_table_name16	vendor\sqlite\sqlite3.c	/^  const void * (*column_table_name16)(sqlite3_stmt*,int);$/;"	m	struct:sqlite3_api_routines	file:
column_text	vendor\sqlite\sqlite3.c	/^  const unsigned char * (*column_text)(sqlite3_stmt*,int iCol);$/;"	m	struct:sqlite3_api_routines	file:
column_text16	vendor\sqlite\sqlite3.c	/^  const void * (*column_text16)(sqlite3_stmt*,int iCol);$/;"	m	struct:sqlite3_api_routines	file:
column_type	vendor\sqlite\sqlite3.c	/^  int  (*column_type)(sqlite3_stmt*,int iCol);$/;"	m	struct:sqlite3_api_routines	file:
column_value	vendor\sqlite\sqlite3.c	/^  sqlite3_value* (*column_value)(sqlite3_stmt*,int iCol);$/;"	m	struct:sqlite3_api_routines	file:
columnsInIndex	vendor\sqlite\sqlite3.c	/^static Bitmask columnsInIndex(Index *pIdx){$/;"	f	file:
commit_hook	vendor\sqlite\sqlite3.c	/^  void * (*commit_hook)(sqlite3*,int(*)(void*),void*);$/;"	m	struct:sqlite3_api_routines	file:
compare2pow63	vendor\sqlite\sqlite3.c	/^static int compare2pow63(const char *zNum, int incr){$/;"	f	file:
compareInfo	vendor\sqlite\sqlite3.c	/^struct compareInfo {$/;"	s	file:
comparisonAffinity	vendor\sqlite\sqlite3.c	/^static char comparisonAffinity(Expr *pExpr){$/;"	f	file:
compileoption_get	vendor\sqlite\sqlite3.c	/^  const char *(*compileoption_get)(int);$/;"	m	struct:sqlite3_api_routines	file:
compileoption_used	vendor\sqlite\sqlite3.c	/^  int (*compileoption_used)(const char*);$/;"	m	struct:sqlite3_api_routines	file:
compileoptiongetFunc	vendor\sqlite\sqlite3.c	/^static void compileoptiongetFunc($/;"	f	file:
compileoptionusedFunc	vendor\sqlite\sqlite3.c	/^static void compileoptionusedFunc($/;"	f	file:
complete	vendor\sqlite\sqlite3.c	/^  int  (*complete)(const char*sql);$/;"	m	struct:sqlite3_api_routines	file:
complete16	vendor\sqlite\sqlite3.c	/^  int  (*complete16)(const void*sql);$/;"	m	struct:sqlite3_api_routines	file:
computeHMS	vendor\sqlite\sqlite3.c	/^static void computeHMS(DateTime *p){$/;"	f	file:
computeJD	vendor\sqlite\sqlite3.c	/^static void computeJD(DateTime *p){$/;"	f	file:
computeLimitRegisters	vendor\sqlite\sqlite3.c	/^static void computeLimitRegisters(Parse *pParse, Select *p, int iBreak){$/;"	f	file:
computeNumericType	vendor\sqlite\sqlite3.c	/^static u16 SQLITE_NOINLINE computeNumericType(Mem *pMem){$/;"	f	file:
computeYMD	vendor\sqlite\sqlite3.c	/^static void computeYMD(DateTime *p){$/;"	f	file:
computeYMD_HMS	vendor\sqlite\sqlite3.c	/^static void computeYMD_HMS(DateTime *p){$/;"	f	file:
conchFile	vendor\sqlite\sqlite3.c	/^  unixFile *conchFile;         \/* Open conch file *\/$/;"	m	struct:proxyLockingContext	file:
conchFilePath	vendor\sqlite\sqlite3.c	/^  char *conchFilePath;         \/* Name of the conch file *\/$/;"	m	struct:proxyLockingContext	file:
conchHeld	vendor\sqlite\sqlite3.c	/^  int conchHeld;               \/* 1 if the conch is held, -1 if lockless *\/$/;"	m	struct:proxyLockingContext	file:
connectionIsBusy	vendor\sqlite\sqlite3.c	/^static int connectionIsBusy(sqlite3 *db){$/;"	f	file:
constraintName	vendor\sqlite\sqlite3.c	/^  Token constraintName;\/* Name of the constraint currently being parsed *\/$/;"	m	struct:Parse	file:
constructAutomaticIndex	vendor\sqlite\sqlite3.c	/^static void constructAutomaticIndex($/;"	f	file:
contextMalloc	vendor\sqlite\sqlite3.c	/^static void *contextMalloc(sqlite3_context *context, i64 nByte){$/;"	f	file:
context_db_handle	vendor\sqlite\sqlite3.c	/^  sqlite3 *(*context_db_handle)(sqlite3_context*);$/;"	m	struct:sqlite3_api_routines	file:
convertCompoundSelectToSubquery	vendor\sqlite\sqlite3.c	/^static int convertCompoundSelectToSubquery(Walker *pWalker, Select *p){$/;"	f	file:
convertToWithoutRowidTable	vendor\sqlite\sqlite3.c	/^static void convertToWithoutRowidTable(Parse *pParse, Table *pTab){$/;"	f	file:
cookieMask	vendor\sqlite\sqlite3.c	/^  yDbMask cookieMask;  \/* Bitmask of schema verified databases *\/$/;"	m	struct:Parse	file:
cookieValue	vendor\sqlite\sqlite3.c	/^  int cookieValue[SQLITE_MAX_ATTACHED+2];  \/* Values of cookies to verify *\/$/;"	m	struct:Parse	file:
copyKey	vendor\sqlite\sqlite3.c	/^  char copyKey;           \/* True if copy of key made on insert *\/$/;"	m	struct:Fts3Hash	file:
copyNodeContent	vendor\sqlite\sqlite3.c	/^static void copyNodeContent(MemPage *pFrom, MemPage *pTo, int *pRC){$/;"	f	file:
copyPayload	vendor\sqlite\sqlite3.c	/^static int copyPayload($/;"	f	file:
copy_stemmer	vendor\sqlite\sqlite3.c	/^static void copy_stemmer(const char *zIn, int nIn, char *zOut, int *pnOut){$/;"	f	file:
corruptSchema	vendor\sqlite\sqlite3.c	/^static void corruptSchema($/;"	f	file:
costMult	vendor\sqlite\sqlite3.c	/^  LogEst costMult;     \/* Cost multiplier for using this table *\/$/;"	m	struct:Table	file:
count	vendor\sqlite\sqlite3.c	/^    int count;                 \/* Number of entries with this hash *\/$/;"	m	struct:Hash::_ht	file:
count	vendor\sqlite\sqlite3.c	/^    int count;               \/* Number of entries with this hash *\/$/;"	m	struct:Fts3Hash::_fts3ht	file:
count	vendor\sqlite\sqlite3.c	/^  int count;              \/* Number of entries in this table *\/$/;"	m	struct:Fts3Hash	file:
count	vendor\sqlite\sqlite3.c	/^  unsigned int count;       \/* Number of entries in this table *\/$/;"	m	struct:Hash	file:
countFinalize	vendor\sqlite\sqlite3.c	/^static void countFinalize(sqlite3_context *context){$/;"	f	file:
countStep	vendor\sqlite\sqlite3.c	/^static void countStep(sqlite3_context *context, int argc, sqlite3_value **argv){$/;"	f	file:
countValidCursors	vendor\sqlite\sqlite3.c	/^static int countValidCursors(BtShared *pBt, int wrOnly){$/;"	f	file:
covered	vendor\sqlite\sqlite3.c	/^  u64 covered;                    \/* Mask of query phrases covered *\/$/;"	m	struct:SnippetFragment	file:
createAggContext	vendor\sqlite\sqlite3.c	/^static SQLITE_NOINLINE void *createAggContext(sqlite3_context *p, int nByte){$/;"	f	file:
createCollation	vendor\sqlite\sqlite3.c	/^static int createCollation($/;"	f	file:
createFile	vendor\sqlite\sqlite3.c	/^static int createFile(JournalFile *p){$/;"	f	file:
createMask	vendor\sqlite\sqlite3.c	/^static void createMask(WhereMaskSet *pMaskSet, int iCursor){$/;"	f	file:
createModule	vendor\sqlite\sqlite3.c	/^static int createModule($/;"	f	file:
createTableStmt	vendor\sqlite\sqlite3.c	/^static char *createTableStmt(sqlite3 *db, Table *p){$/;"	f	file:
create_collation	vendor\sqlite\sqlite3.c	/^  int  (*create_collation)(sqlite3*,const char*,int,void*,$/;"	m	struct:sqlite3_api_routines	file:
create_collation16	vendor\sqlite\sqlite3.c	/^  int  (*create_collation16)(sqlite3*,const void*,int,void*,$/;"	m	struct:sqlite3_api_routines	file:
create_collation_v2	vendor\sqlite\sqlite3.c	/^  int (*create_collation_v2)(sqlite3*,const char*,int,void*,$/;"	m	struct:sqlite3_api_routines	file:
create_function	vendor\sqlite\sqlite3.c	/^  int  (*create_function)(sqlite3*,const char*,int,int,void*,$/;"	m	struct:sqlite3_api_routines	file:
create_function16	vendor\sqlite\sqlite3.c	/^  int  (*create_function16)(sqlite3*,const void*,int,int,void*,$/;"	m	struct:sqlite3_api_routines	file:
create_function_v2	vendor\sqlite\sqlite3.c	/^  int (*create_function_v2)(sqlite3*,const char*,int,int,void*,$/;"	m	struct:sqlite3_api_routines	file:
create_module	vendor\sqlite\sqlite3.c	/^  int (*create_module)(sqlite3*,const char*,const sqlite3_module*,void*);$/;"	m	struct:sqlite3_api_routines	file:
create_module_v2	vendor\sqlite\sqlite3.c	/^  int (*create_module_v2)(sqlite3*,const char*,const sqlite3_module*,void*,$/;"	m	struct:sqlite3_api_routines	file:
csr	vendor\sqlite\sqlite3.c	/^  Fts3MultiSegReader csr;        \/* Must be right after "base" *\/$/;"	m	struct:Fts3auxCursor	file:
ctimeFunc	vendor\sqlite\sqlite3.c	/^static void ctimeFunc($/;"	f	file:
ctimestampFunc	vendor\sqlite\sqlite3.c	/^static void ctimestampFunc($/;"	f	file:
ctrlFlags	vendor\sqlite\sqlite3.c	/^  u8 ctrlFlags;           \/* Flags.  See WINFILE_* below *\/$/;"	m	struct:winFile	file:
ctrlFlags	vendor\sqlite\sqlite3.c	/^  unsigned short int ctrlFlags;       \/* Behavioral bits.  UNIXFILE_* flags *\/$/;"	m	struct:unixFile	file:
curFlags	vendor\sqlite\sqlite3.c	/^  u8 curFlags;              \/* zero or more BTCF_* flags defined below *\/$/;"	m	struct:BtCursor	file:
current	vendor\sqlite\sqlite3.c	/^  Stat4Sample current;      \/* Current row as a Stat4Sample *\/$/;"	m	struct:Stat4Accum	file:
currentCount	vendor\sqlite\sqlite3.c	/^  u32 currentCount;   \/* Current number of distinct checkouts *\/$/;"	m	struct:Mem5Global	file:
currentOut	vendor\sqlite\sqlite3.c	/^  u32 currentOut;     \/* Current checkout, including internal fragmentation *\/$/;"	m	struct:Mem5Global	file:
currentTimeFunc	vendor\sqlite\sqlite3.c	/^static void currentTimeFunc($/;"	f	file:
cursorHoldsMutex	vendor\sqlite\sqlite3.c	/^static int cursorHoldsMutex(BtCursor *p){$/;"	f	file:
cycles	vendor\sqlite\sqlite3.c	/^  u64 cycles;              \/* Total time spent executing this instruction *\/$/;"	m	struct:VdbeOp	file:
data	vendor\sqlite\sqlite3.c	/^  void *data;                  \/* Data associated with this element *\/$/;"	m	struct:HashElem	file:
data	vendor\sqlite\sqlite3.c	/^  void *data;                \/* Data associated with this element *\/$/;"	m	struct:Fts3HashElem	file:
data_count	vendor\sqlite\sqlite3.c	/^  int  (*data_count)(sqlite3_stmt*pStmt);$/;"	m	struct:sqlite3_api_routines	file:
databaseIsUnmoved	vendor\sqlite\sqlite3.c	/^static int databaseIsUnmoved(Pager *pPager){$/;"	f	file:
dateFunc	vendor\sqlite\sqlite3.c	/^static void dateFunc($/;"	f	file:
datetimeFunc	vendor\sqlite\sqlite3.c	/^static void datetimeFunc($/;"	f	file:
db	vendor\sqlite\sqlite3.c	/^  sqlite3 *db;                    \/* Database connection *\/$/;"	m	struct:VdbeSorter	file:
db	vendor\sqlite\sqlite3.c	/^  sqlite3 *db;                    \/* The database connection *\/$/;"	m	struct:Fts3Table	file:
db	vendor\sqlite\sqlite3.c	/^  sqlite3 *db;                   \/* The database connection *\/$/;"	m	struct:RowSet	file:
db	vendor\sqlite\sqlite3.c	/^  sqlite3 *db;                \/* Host database connection *\/$/;"	m	struct:Rtree	file:
db	vendor\sqlite\sqlite3.c	/^  sqlite3 *db;              \/* Database connection associated with this table *\/$/;"	m	struct:VTable	file:
db	vendor\sqlite\sqlite3.c	/^  sqlite3 *db;              \/* Database connection, for malloc() *\/$/;"	m	struct:Stat4Accum	file:
db	vendor\sqlite\sqlite3.c	/^  sqlite3 *db;            \/* The associated database *\/$/;"	m	struct:Incrblob	file:
db	vendor\sqlite\sqlite3.c	/^  sqlite3 *db;            \/* The database connection that owns this statement *\/$/;"	m	struct:Vdbe	file:
db	vendor\sqlite\sqlite3.c	/^  sqlite3 *db;          \/* Database connection currently using this Btree *\/$/;"	m	struct:BtShared	file:
db	vendor\sqlite\sqlite3.c	/^  sqlite3 *db;         \/* Optional database for lookaside.  Can be NULL *\/$/;"	m	struct:StrAccum	file:
db	vendor\sqlite\sqlite3.c	/^  sqlite3 *db;         \/* The main database structure *\/$/;"	m	struct:Parse	file:
db	vendor\sqlite\sqlite3.c	/^  sqlite3 *db;        \/* The associated database connection *\/$/;"	m	struct:Mem	file:
db	vendor\sqlite\sqlite3.c	/^  sqlite3 *db;        \/* The database being initialized *\/$/;"	m	struct:__anon10	file:
db	vendor\sqlite\sqlite3.c	/^  sqlite3 *db;        \/* The database connection *\/$/;"	m	struct:KeyInfo	file:
db	vendor\sqlite\sqlite3.c	/^  sqlite3 *db;       \/* The database connection holding this btree *\/$/;"	m	struct:Btree	file:
db	vendor\sqlite\sqlite3.c	/^  sqlite3 *db;$/;"	m	struct:analysisInfo	file:
dbFileSize	vendor\sqlite\sqlite3.c	/^  Pgno dbFileSize;            \/* Number of pages in the database file *\/$/;"	m	struct:Pager	file:
dbFileVers	vendor\sqlite\sqlite3.c	/^  char dbFileVers[16];        \/* Changes whenever database file changes *\/$/;"	m	struct:Pager	file:
dbHintSize	vendor\sqlite\sqlite3.c	/^  Pgno dbHintSize;            \/* Value passed to FCNTL_SIZE_HINT call *\/$/;"	m	struct:Pager	file:
dbOptFlags	vendor\sqlite\sqlite3.c	/^  u16 dbOptFlags;               \/* Flags to enable\/disable optimizations *\/$/;"	m	struct:sqlite3	file:
dbOrigSize	vendor\sqlite\sqlite3.c	/^  Pgno dbOrigSize;            \/* dbSize before the current transaction *\/$/;"	m	struct:Pager	file:
dbPath	vendor\sqlite\sqlite3.c	/^  char *dbPath;                \/* Name of the open file *\/$/;"	m	struct:proxyLockingContext	file:
dbPath	vendor\sqlite\sqlite3.c	/^  const char *dbPath;             \/* Name of the open file *\/$/;"	m	struct:afpLockingContext	file:
dbSize	vendor\sqlite\sqlite3.c	/^  Pgno dbSize;                \/* Number of pages in the database *\/$/;"	m	struct:Pager	file:
dbUpdate	vendor\sqlite\sqlite3.c	/^  unsigned char dbUpdate;        \/* True if any part of database file changed *\/$/;"	m	struct:unixFile	file:
db_config	vendor\sqlite\sqlite3.c	/^  int (*db_config)(sqlite3*,int,...);$/;"	m	struct:sqlite3_api_routines	file:
db_filename	vendor\sqlite\sqlite3.c	/^  const char *(*db_filename)(sqlite3*,const char*);$/;"	m	struct:sqlite3_api_routines	file:
db_handle	vendor\sqlite\sqlite3.c	/^  sqlite3 * (*db_handle)(sqlite3_stmt*);$/;"	m	struct:sqlite3_api_routines	file:
db_mutex	vendor\sqlite\sqlite3.c	/^  sqlite3_mutex *(*db_mutex)(sqlite3*);$/;"	m	struct:sqlite3_api_routines	file:
db_readonly	vendor\sqlite\sqlite3.c	/^  int (*db_readonly)(sqlite3*,const char*);$/;"	m	struct:sqlite3_api_routines	file:
db_release_memory	vendor\sqlite\sqlite3.c	/^  int (*db_release_memory)(sqlite3*);$/;"	m	struct:sqlite3_api_routines	file:
db_status	vendor\sqlite\sqlite3.c	/^  int (*db_status)(sqlite3*,int,int*,int*,int);$/;"	m	struct:sqlite3_api_routines	file:
debugMutexAlloc	vendor\sqlite\sqlite3.c	/^static sqlite3_mutex *debugMutexAlloc(int id){$/;"	f	file:
debugMutexEnd	vendor\sqlite\sqlite3.c	/^static int debugMutexEnd(void){ return SQLITE_OK; }$/;"	f	file:
debugMutexEnter	vendor\sqlite\sqlite3.c	/^static void debugMutexEnter(sqlite3_mutex *pX){$/;"	f	file:
debugMutexFree	vendor\sqlite\sqlite3.c	/^static void debugMutexFree(sqlite3_mutex *pX){$/;"	f	file:
debugMutexHeld	vendor\sqlite\sqlite3.c	/^static int debugMutexHeld(sqlite3_mutex *pX){$/;"	f	file:
debugMutexInit	vendor\sqlite\sqlite3.c	/^static int debugMutexInit(void){ return SQLITE_OK; }$/;"	f	file:
debugMutexLeave	vendor\sqlite\sqlite3.c	/^static void debugMutexLeave(sqlite3_mutex *pX){$/;"	f	file:
debugMutexNotheld	vendor\sqlite\sqlite3.c	/^static int debugMutexNotheld(sqlite3_mutex *pX){$/;"	f	file:
debugMutexTry	vendor\sqlite\sqlite3.c	/^static int debugMutexTry(sqlite3_mutex *pX){$/;"	f	file:
declareVtab	vendor\sqlite\sqlite3.c	/^  u8 declareVtab;           \/* True if inside sqlite3_declare_vtab() *\/$/;"	m	struct:Parse	file:
declare_vtab	vendor\sqlite\sqlite3.c	/^  int (*declare_vtab)(sqlite3*,const char*);$/;"	m	struct:sqlite3_api_routines	file:
decodeFlags	vendor\sqlite\sqlite3.c	/^static int decodeFlags(MemPage *pPage, int flagByte){$/;"	f	file:
decodeIntArray	vendor\sqlite\sqlite3.c	/^static void decodeIntArray($/;"	f	file:
default_rc	vendor\sqlite\sqlite3.c	/^  i8 default_rc;      \/* Comparison result if keys are equal *\/$/;"	m	struct:UnpackedRecord	file:
deferredMoveto	vendor\sqlite\sqlite3.c	/^  u8 deferredMoveto;    \/* A call to sqlite3BtreeMoveto() is needed *\/$/;"	m	struct:VdbeCursor	file:
defragmentPage	vendor\sqlite\sqlite3.c	/^static int defragmentPage(MemPage *pPage){$/;"	f	file:
deleteCell	vendor\sqlite\sqlite3.c	/^static int deleteCell(Rtree *pRtree, RtreeNode *pNode, int iCell, int iHeight){$/;"	f	file:
delim	vendor\sqlite\sqlite3.c	/^  char delim[128];             \/* flag ASCII delimiters *\/$/;"	m	struct:simple_tokenizer	file:
desc	vendor\sqlite\sqlite3.c	/^     unsigned char desc;       \/* True for DESC.  False for ASC. *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_orderby	file:
deserializeGeometry	vendor\sqlite\sqlite3.c	/^static int deserializeGeometry(sqlite3_value *pValue, RtreeConstraint *pCons){$/;"	f	file:
destroyRootPage	vendor\sqlite\sqlite3.c	/^static void destroyRootPage(Parse *pParse, int iTable, int iDb){$/;"	f	file:
destroyTable	vendor\sqlite\sqlite3.c	/^static void destroyTable(Parse *pParse, Table *pTab){$/;"	f	file:
detachFunc	vendor\sqlite\sqlite3.c	/^static void detachFunc($/;"	f	file:
dev	vendor\sqlite\sqlite3.c	/^  dev_t dev;                  \/* Device number *\/$/;"	m	struct:unixFileId	file:
deviceCharacteristics	vendor\sqlite\sqlite3.c	/^  int deviceCharacteristics;          \/* Precomputed device characteristics *\/$/;"	m	struct:unixFile	file:
dfltLockMode	vendor\sqlite\sqlite3.c	/^  u8 dfltLockMode;              \/* Default locking-mode for attached dbs *\/$/;"	m	struct:sqlite3	file:
directMode	vendor\sqlite\sqlite3.c	/^  u8 directMode;          \/* Direct rendering mode means take data directly$/;"	m	struct:AggInfo	file:
disableTerm	vendor\sqlite\sqlite3.c	/^static void disableTerm(WhereLevel *pLevel, WhereTerm *pTerm){$/;"	f	file:
disableTriggers	vendor\sqlite\sqlite3.c	/^  u8 disableTriggers;  \/* True to disable triggers *\/$/;"	m	struct:Parse	file:
disable_simulated_io_errors	vendor\sqlite\sqlite3.c	/^void disable_simulated_io_errors(void){$/;"	f
disable_simulated_io_errors	vendor\sqlite\sqlite3.c	10179;"	d	file:
disable_simulated_io_errors	vendor\sqlite\sqlite3.c	45080;"	d	file:
disallow	vendor\sqlite\sqlite3.c	/^  int disallow; \/* Do not allow memory allocation *\/$/;"	m	struct:__anon12	file:
disconnectAllVtab	vendor\sqlite\sqlite3.c	/^static void disconnectAllVtab(sqlite3 *db){$/;"	f	file:
displayComment	vendor\sqlite\sqlite3.c	/^static int displayComment($/;"	f	file:
displayP4	vendor\sqlite\sqlite3.c	/^static char *displayP4(Op *pOp, char *zTemp, int nTemp){$/;"	f	file:
doNotSpill	vendor\sqlite\sqlite3.c	/^  u8 doNotSpill;              \/* Do not spill the cache when non-zero *\/$/;"	m	struct:Pager	file:
doWalCallbacks	vendor\sqlite\sqlite3.c	/^static int doWalCallbacks(sqlite3 *db){$/;"	f	file:
doclist	vendor\sqlite\sqlite3.c	/^  Fts3Doclist doclist;$/;"	m	struct:Fts3Phrase	file:
doingRerun	vendor\sqlite\sqlite3.c	/^  bft doingRerun:1;       \/* True if rerunning after an auto-reprepare *\/$/;"	m	struct:Vdbe	file:
done	vendor\sqlite\sqlite3.c	/^    unsigned done :1;       \/* A flag to indicate when processing is finished *\/$/;"	m	struct:ExprList::ExprList_item	file:
done	vendor\sqlite\sqlite3.c	/^  int done;                      \/* Set to true when thread finishes *\/$/;"	m	struct:SQLiteThread	file:
dotlockCheckReservedLock	vendor\sqlite\sqlite3.c	/^static int dotlockCheckReservedLock(sqlite3_file *id, int *pResOut) {$/;"	f	file:
dotlockClose	vendor\sqlite\sqlite3.c	/^static int dotlockClose(sqlite3_file *id) {$/;"	f	file:
dotlockLock	vendor\sqlite\sqlite3.c	/^static int dotlockLock(sqlite3_file *id, int eFileLock) {$/;"	f	file:
dotlockUnlock	vendor\sqlite\sqlite3.c	/^static int dotlockUnlock(sqlite3_file *id, int eFileLock) {$/;"	f	file:
double	vendor\sqlite\sqlite3.c	473;"	d	file:
double	vendor\sqlite\sqlite3.c	7825;"	d	file:
double	vendor\sqlite\sqlite3.c	8714;"	d	file:
doubleConsonant	vendor\sqlite\sqlite3.c	/^static int doubleConsonant(const char *z){$/;"	f	file:
doubleToInt64	vendor\sqlite\sqlite3.c	/^static i64 doubleToInt64(double r){$/;"	f	file:
downgradeAllSharedCacheTableLocks	vendor\sqlite\sqlite3.c	/^static void downgradeAllSharedCacheTableLocks(Btree *p){$/;"	f	file:
downgradeAllSharedCacheTableLocks	vendor\sqlite\sqlite3.c	52891;"	d	file:
dropCell	vendor\sqlite\sqlite3.c	/^static void dropCell(MemPage *pPage, int idx, int sz, int *pRC){$/;"	f	file:
dup8bytes	vendor\sqlite\sqlite3.c	/^static char *dup8bytes(Vdbe *v, const char *in){$/;"	f	file:
dupedExprNodeSize	vendor\sqlite\sqlite3.c	/^static int dupedExprNodeSize(Expr *p, int flags){$/;"	f	file:
dupedExprSize	vendor\sqlite\sqlite3.c	/^static int dupedExprSize(Expr *p, int flags){$/;"	f	file:
dupedExprStructSize	vendor\sqlite\sqlite3.c	/^static int dupedExprStructSize(Expr *p, int flags){$/;"	f	file:
eCode	vendor\sqlite\sqlite3.c	/^  u8 eCode;                                 \/* A small processing code *\/$/;"	m	struct:Walker	file:
eCoordType	vendor\sqlite\sqlite3.c	/^  u8 eCoordType;              \/* RTREE_COORD_REAL32 or RTREE_COORD_INT32 *\/$/;"	m	struct:Rtree	file:
eCreate	vendor\sqlite\sqlite3.c	/^  u8 eCreate;                         \/* eCreate value for for xFetch() *\/$/;"	m	struct:PCache	file:
eDest	vendor\sqlite\sqlite3.c	/^  u8 eDest;            \/* How to dispose of the results.  On of SRT_* above. *\/$/;"	m	struct:SelectDest	file:
eDistinct	vendor\sqlite\sqlite3.c	/^  u8 eDistinct;             \/* One of the WHERE_DISTINCT_* values below *\/$/;"	m	struct:WhereInfo	file:
eEndLoopOp	vendor\sqlite\sqlite3.c	/^        u8 eEndLoopOp;         \/* IN Loop terminator. OP_Next or OP_Prev *\/$/;"	m	struct:WhereLevel::__anon19::__anon20::InLoop	file:
eEvalmode	vendor\sqlite\sqlite3.c	/^  int eEvalmode;                  \/* An FTS3_EVAL_XX constant *\/$/;"	m	struct:Fts3Cursor	file:
eFWErr	vendor\sqlite\sqlite3.c	/^  int eFWErr;                     \/* Non-zero if in an error state *\/$/;"	m	struct:PmaWriter	file:
eFileLock	vendor\sqlite\sqlite3.c	/^  unsigned char eFileLock;            \/* The type of lock held on this fd *\/$/;"	m	struct:unixFile	file:
eFileLock	vendor\sqlite\sqlite3.c	/^  unsigned char eFileLock;        \/* One of SHARED_LOCK, RESERVED_LOCK etc. *\/$/;"	m	struct:unixInodeInfo	file:
eLock	vendor\sqlite\sqlite3.c	/^  u8 eLock;                   \/* Current lock held on database file *\/$/;"	m	struct:Pager	file:
eLock	vendor\sqlite\sqlite3.c	/^  u8 eLock;             \/* READ_LOCK or WRITE_LOCK *\/$/;"	m	struct:BtLock	file:
eOperator	vendor\sqlite\sqlite3.c	/^  Token eOperator;  \/* "like" or "glob" or "regexp" *\/$/;"	m	struct:LikeOp	file:
eOperator	vendor\sqlite\sqlite3.c	/^  u16 eOperator;          \/* A WO_xx value describing <op> *\/$/;"	m	struct:WhereTerm	file:
eOrconf	vendor\sqlite\sqlite3.c	/^  u8 eOrconf;          \/* Default ON CONFLICT policy for trigger steps *\/$/;"	m	struct:Parse	file:
eParentWithin	vendor\sqlite\sqlite3.c	/^  int eParentWithin;                \/* Visibility of parent node *\/$/;"	m	struct:sqlite3_rtree_query_info	file:
ePragTyp	vendor\sqlite\sqlite3.c	/^  u8 ePragTyp;              \/* PragTyp_XXX value *\/$/;"	m	struct:sPragmaNames	file:
eSearch	vendor\sqlite\sqlite3.c	/^  i16 eSearch;                    \/* Search strategy (see below) *\/$/;"	m	struct:Fts3Cursor	file:
eState	vendor\sqlite\sqlite3.c	/^  u8 eState;                  \/* Pager state (OPEN, READER, WRITER_LOCKED..) *\/$/;"	m	struct:Pager	file:
eState	vendor\sqlite\sqlite3.c	/^  u8 eState;                \/* One of the CURSOR_XXX constants (see below) *\/$/;"	m	struct:BtCursor	file:
eTnctType	vendor\sqlite\sqlite3.c	/^  u8 eTnctType;   \/* One of the WHERE_DISTINCT_* operators *\/$/;"	m	struct:DistinctCtx	file:
eTriggerOp	vendor\sqlite\sqlite3.c	/^  u8 eTriggerOp;       \/* TK_UPDATE, TK_INSERT or TK_DELETE *\/$/;"	m	struct:Parse	file:
eType	vendor\sqlite\sqlite3.c	/^  int eType;                 \/* One of the FTSQUERY_XXX values defined below *\/$/;"	m	struct:Fts3Expr	file:
eType	vendor\sqlite\sqlite3.c	/^  u8 eType;                           \/* Allocation type code *\/$/;"	m	struct:MemBlockHdr	file:
eWithin	vendor\sqlite\sqlite3.c	/^  int eWithin;                      \/* OUT: Visiblity *\/$/;"	m	struct:sqlite3_rtree_query_info	file:
eWithin	vendor\sqlite\sqlite3.c	/^  u8 eWithin;            \/* PARTLY_WITHIN or FULLY_WITHIN *\/$/;"	m	struct:RtreeSearchPoint	file:
ebcdicToAscii	vendor\sqlite\sqlite3.c	/^const unsigned char ebcdicToAscii[] = {$/;"	v
editPage	vendor\sqlite\sqlite3.c	/^static void editPage($/;"	f	file:
enable_shared_cache	vendor\sqlite\sqlite3.c	/^  int  (*enable_shared_cache)(int);$/;"	m	struct:sqlite3_api_routines	file:
enable_simulated_io_errors	vendor\sqlite\sqlite3.c	/^void enable_simulated_io_errors(void){$/;"	f
enable_simulated_io_errors	vendor\sqlite\sqlite3.c	10180;"	d	file:
enable_simulated_io_errors	vendor\sqlite\sqlite3.c	45081;"	d	file:
enc	vendor\sqlite\sqlite3.c	/^  u8  enc;            \/* SQLITE_UTF8, SQLITE_UTF16BE, SQLITE_UTF16LE *\/$/;"	m	struct:Mem	file:
enc	vendor\sqlite\sqlite3.c	/^  u8 enc;                       \/* Text encoding *\/$/;"	m	struct:sqlite3	file:
enc	vendor\sqlite\sqlite3.c	/^  u8 enc;               \/* Text encoding handled by xCmp() *\/$/;"	m	struct:CollSeq	file:
enc	vendor\sqlite\sqlite3.c	/^  u8 enc;              \/* Text encoding used by this database *\/$/;"	m	struct:Schema	file:
enc	vendor\sqlite\sqlite3.c	/^  u8 enc;             \/* Text encoding - one of the SQLITE_UTF* values *\/$/;"	m	struct:KeyInfo	file:
endpoint	vendor\sqlite\sqlite3.c	/^  FilePoint endpoint;             \/* Pointer to the end of the file *\/$/;"	m	struct:MemJournal	file:
enlargeAndAppend	vendor\sqlite\sqlite3.c	/^static void SQLITE_NOINLINE enlargeAndAppend(StrAccum *p, const char *z, int N){$/;"	f	file:
enterMutex	vendor\sqlite\sqlite3.c	/^static void enterMutex(void){$/;"	f	file:
errCode	vendor\sqlite\sqlite3.c	/^  int errCode;                  \/* Most recent error code (SQLITE_*) *\/$/;"	m	struct:sqlite3	file:
errCode	vendor\sqlite\sqlite3.c	/^  int errCode;                \/* One of several kinds of errors *\/$/;"	m	struct:Pager	file:
errCode	vendor\sqlite\sqlite3.c	/^  u8 errCode;         \/* Error detected by xRecordCompare (CORRUPT or NOMEM) *\/$/;"	m	struct:UnpackedRecord	file:
errMask	vendor\sqlite\sqlite3.c	/^  int errMask;                  \/* & result codes with this before returning *\/$/;"	m	struct:sqlite3	file:
errMsg	vendor\sqlite\sqlite3.c	/^  StrAccum errMsg;  \/* Accumulate the error message text here *\/$/;"	m	struct:IntegrityCk	file:
errcode	vendor\sqlite\sqlite3.c	/^  int  (*errcode)(sqlite3*db);$/;"	m	struct:sqlite3_api_routines	file:
errlogFunc	vendor\sqlite\sqlite3.c	/^static void errlogFunc($/;"	f	file:
errmsg	vendor\sqlite\sqlite3.c	/^  const char * (*errmsg)(sqlite3*);$/;"	m	struct:sqlite3_api_routines	file:
errmsg16	vendor\sqlite\sqlite3.c	/^  const void * (*errmsg16)(sqlite3*);$/;"	m	struct:sqlite3_api_routines	file:
errorAction	vendor\sqlite\sqlite3.c	/^  u8 errorAction;         \/* Recovery action to do in case of an error *\/$/;"	m	struct:Vdbe	file:
errstr	vendor\sqlite\sqlite3.c	/^  const char *(*errstr)(int);$/;"	m	struct:sqlite3_api_routines	file:
estLog	vendor\sqlite\sqlite3.c	/^static LogEst estLog(LogEst N){$/;"	f	file:
estimateIndexWidth	vendor\sqlite\sqlite3.c	/^static void estimateIndexWidth(Index *pIdx){$/;"	f	file:
estimateTableWidth	vendor\sqlite\sqlite3.c	/^static void estimateTableWidth(Table *pTab){$/;"	f	file:
estimatedCost	vendor\sqlite\sqlite3.c	/^  double estimatedCost;           \/* Estimated cost of using this index *\/$/;"	m	struct:sqlite3_index_info	file:
estimatedRows	vendor\sqlite\sqlite3.c	/^  sqlite3_int64 estimatedRows;    \/* Estimated number of rows returned *\/$/;"	m	struct:sqlite3_index_info	file:
etBUFSIZE	vendor\sqlite\sqlite3.c	21316;"	d	file:
etByte	vendor\sqlite\sqlite3.c	/^typedef unsigned char etByte;$/;"	t	file:
etCHARX	vendor\sqlite\sqlite3.c	21176;"	d	file:
etDYNSTRING	vendor\sqlite\sqlite3.c	21174;"	d	file:
etEXP	vendor\sqlite\sqlite3.c	21170;"	d	file:
etFLOAT	vendor\sqlite\sqlite3.c	21169;"	d	file:
etGENERIC	vendor\sqlite\sqlite3.c	21171;"	d	file:
etINVALID	vendor\sqlite\sqlite3.c	21187;"	d	file:
etORDINAL	vendor\sqlite\sqlite3.c	21185;"	d	file:
etPERCENT	vendor\sqlite\sqlite3.c	21175;"	d	file:
etPOINTER	vendor\sqlite\sqlite3.c	21183;"	d	file:
etRADIX	vendor\sqlite\sqlite3.c	21168;"	d	file:
etSIZE	vendor\sqlite\sqlite3.c	21172;"	d	file:
etSQLESCAPE	vendor\sqlite\sqlite3.c	21178;"	d	file:
etSQLESCAPE2	vendor\sqlite\sqlite3.c	21179;"	d	file:
etSQLESCAPE3	vendor\sqlite\sqlite3.c	21184;"	d	file:
etSRCLIST	vendor\sqlite\sqlite3.c	21182;"	d	file:
etSTRING	vendor\sqlite\sqlite3.c	21173;"	d	file:
etTOKEN	vendor\sqlite\sqlite3.c	21181;"	d	file:
et_getdigit	vendor\sqlite\sqlite3.c	/^static char et_getdigit(LONGDOUBLE_TYPE *val, int *cnt){$/;"	f	file:
et_info	vendor\sqlite\sqlite3.c	/^typedef struct et_info {   \/* Information about each format field *\/$/;"	s	file:
et_info	vendor\sqlite\sqlite3.c	/^} et_info;$/;"	t	typeref:struct:et_info	file:
exclMask	vendor\sqlite\sqlite3.c	/^  u16 exclMask;              \/* Mask of exclusive locks held *\/$/;"	m	struct:unixShm	file:
exclMask	vendor\sqlite\sqlite3.c	/^  u16 exclMask;              \/* Mask of exclusive locks held *\/$/;"	m	struct:winShm	file:
exclMask	vendor\sqlite\sqlite3.c	/^  u8 exclMask;               \/* Mask of exclusive locks held *\/$/;"	m	struct:unixShmNode	file:
exclusiveMode	vendor\sqlite\sqlite3.c	/^  u8 exclusiveMode;           \/* Boolean. True if locking_mode==EXCLUSIVE *\/$/;"	m	struct:Pager	file:
exclusiveMode	vendor\sqlite\sqlite3.c	/^  u8 exclusiveMode;          \/* Non-zero if connection is in exclusive mode *\/$/;"	m	struct:Wal	file:
exec	vendor\sqlite\sqlite3.c	/^  int  (*exec)(sqlite3*,const char*,sqlite3_callback,void*,char**);$/;"	m	struct:sqlite3_api_routines	file:
execExecSql	vendor\sqlite\sqlite3.c	/^static int execExecSql(sqlite3 *db, char **pzErrMsg, const char *zSql){$/;"	f	file:
execSql	vendor\sqlite\sqlite3.c	/^static int execSql(sqlite3 *db, char **pzErrMsg, const char *zSql){$/;"	f	file:
expired	vendor\sqlite\sqlite3.c	/^  bft expired:1;          \/* True if the VM needs to be recompiled *\/$/;"	m	struct:Vdbe	file:
expired	vendor\sqlite\sqlite3.c	/^  int  (*expired)(sqlite3_stmt*);$/;"	m	struct:sqlite3_api_routines	file:
explain	vendor\sqlite\sqlite3.c	/^  bft explain:2;          \/* True if EXPLAIN present on SQL command *\/$/;"	m	struct:Vdbe	file:
explain	vendor\sqlite\sqlite3.c	/^  u8 explain;               \/* True if the EXPLAIN flag is found on the query *\/$/;"	m	struct:Parse	file:
explainAppendTerm	vendor\sqlite\sqlite3.c	/^static void explainAppendTerm($/;"	f	file:
explainComposite	vendor\sqlite\sqlite3.c	/^static void explainComposite($/;"	f	file:
explainComposite	vendor\sqlite\sqlite3.c	106799;"	d	file:
explainIndexRange	vendor\sqlite\sqlite3.c	/^static void explainIndexRange(StrAccum *pStr, WhereLoop *pLoop, Table *pTab){$/;"	f	file:
explainOneScan	vendor\sqlite\sqlite3.c	/^static int explainOneScan($/;"	f	file:
explainOneScan	vendor\sqlite\sqlite3.c	118292;"	d	file:
explainSetInteger	vendor\sqlite\sqlite3.c	106757;"	d	file:
explainSetInteger	vendor\sqlite\sqlite3.c	106762;"	d	file:
explainSimpleCount	vendor\sqlite\sqlite3.c	/^static void explainSimpleCount($/;"	f	file:
explainSimpleCount	vendor\sqlite\sqlite3.c	110328;"	d	file:
explainTempTable	vendor\sqlite\sqlite3.c	/^static void explainTempTable(Parse *pParse, const char *zUsage){$/;"	f	file:
explainTempTable	vendor\sqlite\sqlite3.c	106761;"	d	file:
expmask	vendor\sqlite\sqlite3.c	/^  u32 expmask;            \/* Binding to these vars invalidates VM *\/$/;"	m	struct:Vdbe	file:
exprAlwaysFalse	vendor\sqlite\sqlite3.c	/^static int exprAlwaysFalse(Expr *p){$/;"	f	file:
exprAlwaysTrue	vendor\sqlite\sqlite3.c	/^static int exprAlwaysTrue(Expr *p){$/;"	f	file:
exprAnalyze	vendor\sqlite\sqlite3.c	/^static void exprAnalyze($/;"	f	file:
exprAnalyzeAll	vendor\sqlite\sqlite3.c	/^static void exprAnalyzeAll($/;"	f	file:
exprAnalyzeOrTerm	vendor\sqlite\sqlite3.c	/^static void exprAnalyzeOrTerm($/;"	f	file:
exprCodeBetween	vendor\sqlite\sqlite3.c	/^static void exprCodeBetween($/;"	f	file:
exprCommute	vendor\sqlite\sqlite3.c	/^static void exprCommute(Parse *pParse, Expr *pExpr){$/;"	f	file:
exprDup	vendor\sqlite\sqlite3.c	/^static Expr *exprDup(sqlite3 *db, Expr *p, int flags, u8 **pzBuffer){$/;"	f	file:
exprIsConst	vendor\sqlite\sqlite3.c	/^static int exprIsConst(Expr *p, int initFlag, int iCur){$/;"	f	file:
exprListTableUsage	vendor\sqlite\sqlite3.c	/^static Bitmask exprListTableUsage(WhereMaskSet *pMaskSet, ExprList *pList){$/;"	f	file:
exprNodeIsConstant	vendor\sqlite\sqlite3.c	/^static int exprNodeIsConstant(Walker *pWalker, Expr *pExpr){$/;"	f	file:
exprProbability	vendor\sqlite\sqlite3.c	/^static int exprProbability(Expr *p){$/;"	f	file:
exprSelectTableUsage	vendor\sqlite\sqlite3.c	/^static Bitmask exprSelectTableUsage(WhereMaskSet *pMaskSet, Select *pS){$/;"	f	file:
exprSetHeight	vendor\sqlite\sqlite3.c	/^static void exprSetHeight(Expr *p){$/;"	f	file:
exprSetHeight	vendor\sqlite\sqlite3.c	82453;"	d	file:
exprSrcCount	vendor\sqlite\sqlite3.c	/^static int exprSrcCount(Walker *pWalker, Expr *pExpr){$/;"	f	file:
exprStructSize	vendor\sqlite\sqlite3.c	/^static int exprStructSize(Expr *p){$/;"	f	file:
exprTableColumn	vendor\sqlite\sqlite3.c	/^static Expr *exprTableColumn($/;"	f	file:
exprTableRegister	vendor\sqlite\sqlite3.c	/^static Expr *exprTableRegister($/;"	f	file:
exprTableUsage	vendor\sqlite\sqlite3.c	/^static Bitmask exprTableUsage(WhereMaskSet *pMaskSet, Expr *p){$/;"	f	file:
exprToRegister	vendor\sqlite\sqlite3.c	/^static void exprToRegister(Expr *p, int iReg){$/;"	f	file:
exprToString	vendor\sqlite\sqlite3.c	/^static char *exprToString(Fts3Expr *pExpr, char *zBuf){$/;"	f	file:
exprWalkNoop	vendor\sqlite\sqlite3.c	/^static int exprWalkNoop(Walker *NotUsed, Expr *NotUsed2){$/;"	f	file:
extended_errcode	vendor\sqlite\sqlite3.c	/^  int (*extended_errcode)(sqlite3*);$/;"	m	struct:sqlite3_api_routines	file:
extended_result_codes	vendor\sqlite\sqlite3.c	/^  int (*extended_result_codes)(sqlite3*,int);$/;"	m	struct:sqlite3_api_routines	file:
f	vendor\sqlite\sqlite3.c	/^  RtreeValue f;      \/* Floating point value *\/$/;"	m	union:RtreeCoord	file:
fErrorOrAux	vendor\sqlite\sqlite3.c	/^  u8 fErrorOrAux;       \/* isError!=0 or pVdbe->pAuxData modified *\/$/;"	m	struct:sqlite3_context	file:
fcntlSizeHint	vendor\sqlite\sqlite3.c	/^static int fcntlSizeHint(unixFile *pFile, i64 nByte){$/;"	f	file:
fd	vendor\sqlite\sqlite3.c	/^  int fd;                           \/* file desc to assoc this lock with *\/$/;"	m	struct:ByteRangeLockPB2	file:
fd	vendor\sqlite\sqlite3.c	/^  int fd;                   \/* File descriptor to close *\/$/;"	m	struct:UnixUnusedFd	file:
fd	vendor\sqlite\sqlite3.c	/^  sqlite3_file *fd;           \/* File descriptor for database *\/$/;"	m	struct:Pager	file:
fdatasync	vendor\sqlite\sqlite3.c	28641;"	d	file:
fetchPayload	vendor\sqlite\sqlite3.c	/^static const void *fetchPayload($/;"	f	file:
file	vendor\sqlite\sqlite3.c	/^  SorterFile file;                \/* Temp file for level-0 PMAs *\/$/;"	m	struct:SortSubtask	file:
file2	vendor\sqlite\sqlite3.c	/^  SorterFile file2;               \/* Space for other PMAs *\/$/;"	m	struct:SortSubtask	file:
fileHasMoved	vendor\sqlite\sqlite3.c	/^static int fileHasMoved(unixFile *pFile){$/;"	f	file:
fileId	vendor\sqlite\sqlite3.c	/^  struct unixFileId fileId;       \/* The lookup key *\/$/;"	m	struct:unixInodeInfo	typeref:struct:unixInodeInfo::unixFileId	file:
file_control	vendor\sqlite\sqlite3.c	/^  int (*file_control)(sqlite3*,const char*,int,void*);$/;"	m	struct:sqlite3_api_routines	file:
file_format	vendor\sqlite\sqlite3.c	/^  u8 file_format;      \/* Schema format version for this file *\/$/;"	m	struct:Schema	file:
fillInCell	vendor\sqlite\sqlite3.c	/^static int fillInCell($/;"	f	file:
fillInUnixFile	vendor\sqlite\sqlite3.c	/^static int fillInUnixFile($/;"	f	file:
filter	vendor\sqlite\sqlite3.c	/^  Fts3SegFilter filter;$/;"	m	struct:Fts3auxCursor	file:
finalDbSize	vendor\sqlite\sqlite3.c	/^static Pgno finalDbSize(BtShared *pBt, Pgno nOrig, Pgno nFree){$/;"	f	file:
finalize	vendor\sqlite\sqlite3.c	/^  int  (*finalize)(sqlite3_stmt*pStmt);$/;"	m	struct:sqlite3_api_routines	file:
finalizeAggFunctions	vendor\sqlite\sqlite3.c	/^static void finalizeAggFunctions(Parse *pParse, AggInfo *pAggInfo){$/;"	f	file:
findBtree	vendor\sqlite\sqlite3.c	/^static Btree *findBtree(sqlite3 *pErrorDb, sqlite3 *pDb, const char *zDb){$/;"	f	file:
findCell	vendor\sqlite\sqlite3.c	53730;"	d	file:
findCellv2	vendor\sqlite\sqlite3.c	53732;"	d	file:
findCollSeqEntry	vendor\sqlite\sqlite3.c	/^static CollSeq *findCollSeqEntry($/;"	f	file:
findCreateFileMode	vendor\sqlite\sqlite3.c	/^static int findCreateFileMode($/;"	f	file:
findElementWithHash	vendor\sqlite\sqlite3.c	/^static HashElem *findElementWithHash($/;"	f	file:
findIndexCol	vendor\sqlite\sqlite3.c	/^static int findIndexCol($/;"	f	file:
findIndexOrPrimaryKey	vendor\sqlite\sqlite3.c	/^static Index *findIndexOrPrimaryKey($/;"	f	file:
findInodeInfo	vendor\sqlite\sqlite3.c	/^static int findInodeInfo($/;"	f	file:
findLeafNode	vendor\sqlite\sqlite3.c	/^static int findLeafNode($/;"	f	file:
findNextHostParameter	vendor\sqlite\sqlite3.c	/^static int findNextHostParameter(const char *zSql, int *pnToken){$/;"	f	file:
findOverflowCell	vendor\sqlite\sqlite3.c	/^static u8 *findOverflowCell(MemPage *pPage, int iCell){$/;"	f	file:
findReusableFd	vendor\sqlite\sqlite3.c	/^static UnixUnusedFd *findReusableFd(const char *zPath, int flags){$/;"	f	file:
findRightmost	vendor\sqlite\sqlite3.c	/^static Select *findRightmost(Select *p){$/;"	f	file:
findTerm	vendor\sqlite\sqlite3.c	/^static WhereTerm *findTerm($/;"	f	file:
finder_type	vendor\sqlite\sqlite3.c	/^typedef const sqlite3_io_methods *(*finder_type)(const char*,unixFile*);$/;"	t	file:
first	vendor\sqlite\sqlite3.c	/^  Fts3HashElem *first;    \/* The first element of the array *\/$/;"	m	struct:Fts3Hash	file:
first	vendor\sqlite\sqlite3.c	/^  HashElem *first;          \/* The first element of the array *\/$/;"	m	struct:Hash	file:
fixBoundingBox	vendor\sqlite\sqlite3.c	/^static int fixBoundingBox(Rtree *pRtree, RtreeNode *pNode){$/;"	f	file:
fixLeafParent	vendor\sqlite\sqlite3.c	/^static int fixLeafParent(Rtree *pRtree, RtreeNode *pLeaf){$/;"	f	file:
fkActionTrigger	vendor\sqlite\sqlite3.c	/^static Trigger *fkActionTrigger($/;"	f	file:
fkChildIsModified	vendor\sqlite\sqlite3.c	/^static int fkChildIsModified($/;"	f	file:
fkLookupParent	vendor\sqlite\sqlite3.c	/^static void fkLookupParent($/;"	f	file:
fkParentIsModified	vendor\sqlite\sqlite3.c	/^static int fkParentIsModified($/;"	f	file:
fkScanChildren	vendor\sqlite\sqlite3.c	/^static void fkScanChildren($/;"	f	file:
fkTriggerDelete	vendor\sqlite\sqlite3.c	/^static void fkTriggerDelete(sqlite3 *dbMem, Trigger *p){$/;"	f	file:
fkeyHash	vendor\sqlite\sqlite3.c	/^  Hash fkeyHash;       \/* All foreign keys by referenced table name *\/$/;"	m	struct:Schema	file:
flags	vendor\sqlite\sqlite3.c	/^  etByte flags;            \/* One or more of FLAG_ constants below *\/$/;"	m	struct:et_info	file:
flags	vendor\sqlite\sqlite3.c	/^  int flags;                      \/* xOpen flags *\/$/;"	m	struct:JournalFile	file:
flags	vendor\sqlite\sqlite3.c	/^  int flags;                    \/* Miscellaneous flags. See below *\/$/;"	m	struct:sqlite3	file:
flags	vendor\sqlite\sqlite3.c	/^  int flags;                \/* Flags this file descriptor was opened with *\/$/;"	m	struct:UnixUnusedFd	file:
flags	vendor\sqlite\sqlite3.c	/^  int flags;              \/* Copy of "flags" passed to sqlite3_blob_open() *\/$/;"	m	struct:Incrblob	file:
flags	vendor\sqlite\sqlite3.c	/^  int flags;$/;"	m	struct:Fts3SegFilter	file:
flags	vendor\sqlite\sqlite3.c	/^  u16 flags;                     \/* PGHDR flags defined below *\/$/;"	m	struct:PgHdr	file:
flags	vendor\sqlite\sqlite3.c	/^  u16 flags;          \/* Some combination of MEM_Null, MEM_Str, MEM_Dyn, etc. *\/$/;"	m	struct:Mem	file:
flags	vendor\sqlite\sqlite3.c	/^  u32 flags;             \/* Various flags.  EP_* See below *\/$/;"	m	struct:Expr	file:
flattenSubquery	vendor\sqlite\sqlite3.c	/^static int flattenSubquery($/;"	f	file:
float	vendor\sqlite\sqlite3.c	8715;"	d	file:
floatSwap	vendor\sqlite\sqlite3.c	/^static u64 floatSwap(u64 in){$/;"	f	file:
flockCheckReservedLock	vendor\sqlite\sqlite3.c	/^static int flockCheckReservedLock(sqlite3_file *id, int *pResOut){$/;"	f	file:
flockClose	vendor\sqlite\sqlite3.c	/^static int flockClose(sqlite3_file *id) {$/;"	f	file:
flockLock	vendor\sqlite\sqlite3.c	/^static int flockLock(sqlite3_file *id, int eFileLock) {$/;"	f	file:
flockUnlock	vendor\sqlite\sqlite3.c	/^static int flockUnlock(sqlite3_file *id, int eFileLock) {$/;"	f	file:
fmtinfo	vendor\sqlite\sqlite3.c	/^static const et_info fmtinfo[] = {$/;"	v	file:
fmttype	vendor\sqlite\sqlite3.c	/^  char fmttype;            \/* The format field code letter *\/$/;"	m	struct:et_info	file:
free	vendor\sqlite\sqlite3.c	/^  void  (*free)(void*);$/;"	m	struct:sqlite3_api_routines	file:
freeCursorConstraints	vendor\sqlite\sqlite3.c	/^static void freeCursorConstraints(RtreeCursor *pCsr){$/;"	f	file:
freeEphemeralFunction	vendor\sqlite\sqlite3.c	/^static void freeEphemeralFunction(sqlite3 *db, FuncDef *pDef){$/;"	f	file:
freeIndex	vendor\sqlite\sqlite3.c	/^static void freeIndex(sqlite3 *db, Index *p){$/;"	f	file:
freeP4	vendor\sqlite\sqlite3.c	/^static void freeP4(sqlite3 *db, int p4type, void *p4){$/;"	f	file:
freePage	vendor\sqlite\sqlite3.c	/^static void freePage(MemPage *pPage, int *pRC){$/;"	f	file:
freePage2	vendor\sqlite\sqlite3.c	/^static int freePage2(BtShared *pBt, MemPage *pMemPage, Pgno iPage){$/;"	f	file:
freeSpace	vendor\sqlite\sqlite3.c	/^static int freeSpace(MemPage *pPage, u16 iStart, u16 iSize){$/;"	f	file:
freeTempSpace	vendor\sqlite\sqlite3.c	/^static void freeTempSpace(BtShared *pBt){$/;"	f	file:
free_table	vendor\sqlite\sqlite3.c	/^  void  (*free_table)(char**result);$/;"	m	struct:sqlite3_api_routines	file:
fsFlags	vendor\sqlite\sqlite3.c	/^  unsigned fsFlags;                   \/* cached details from statfs() *\/$/;"	m	struct:unixFile	file:
fts3AllocateSegdirIdx	vendor\sqlite\sqlite3.c	/^static int fts3AllocateSegdirIdx($/;"	f	file:
fts3AppendToNode	vendor\sqlite\sqlite3.c	/^static int fts3AppendToNode($/;"	f	file:
fts3Appendf	vendor\sqlite\sqlite3.c	/^static void fts3Appendf($/;"	f	file:
fts3BeginMethod	vendor\sqlite\sqlite3.c	/^static int fts3BeginMethod(sqlite3_vtab *pVtab){$/;"	f	file:
fts3BestIndexMethod	vendor\sqlite\sqlite3.c	/^static int fts3BestIndexMethod(sqlite3_vtab *pVTab, sqlite3_index_info *pInfo){$/;"	f	file:
fts3BestSnippet	vendor\sqlite\sqlite3.c	/^static int fts3BestSnippet($/;"	f	file:
fts3BinCompare	vendor\sqlite\sqlite3.c	/^static int fts3BinCompare(const void *pKey1, int n1, const void *pKey2, int n2){$/;"	f	file:
fts3BinHash	vendor\sqlite\sqlite3.c	/^static int fts3BinHash(const void *pKey, int nKey){$/;"	f	file:
fts3ChecksumEntry	vendor\sqlite\sqlite3.c	/^static u64 fts3ChecksumEntry($/;"	f	file:
fts3ChecksumIndex	vendor\sqlite\sqlite3.c	/^static u64 fts3ChecksumIndex($/;"	f	file:
fts3CloseMethod	vendor\sqlite\sqlite3.c	/^static int fts3CloseMethod(sqlite3_vtab_cursor *pCursor){$/;"	f	file:
fts3ColumnFilter	vendor\sqlite\sqlite3.c	/^static void fts3ColumnFilter($/;"	f	file:
fts3ColumnMethod	vendor\sqlite\sqlite3.c	/^static int fts3ColumnMethod($/;"	f	file:
fts3ColumnlistCopy	vendor\sqlite\sqlite3.c	/^static void fts3ColumnlistCopy(char **pp, char **ppPoslist){$/;"	f	file:
fts3ColumnlistCount	vendor\sqlite\sqlite3.c	/^static int fts3ColumnlistCount(char **ppCollist){$/;"	f	file:
fts3CommitMethod	vendor\sqlite\sqlite3.c	/^static int fts3CommitMethod(sqlite3_vtab *pVtab){$/;"	f	file:
fts3CompareElemByTerm	vendor\sqlite\sqlite3.c	/^static int fts3CompareElemByTerm(const void *lhs, const void *rhs){$/;"	f	file:
fts3ConnectMethod	vendor\sqlite\sqlite3.c	/^static int fts3ConnectMethod($/;"	f	file:
fts3ContentColumns	vendor\sqlite\sqlite3.c	/^static int fts3ContentColumns($/;"	f	file:
fts3CreateMethod	vendor\sqlite\sqlite3.c	/^static int fts3CreateMethod($/;"	f	file:
fts3CreateTables	vendor\sqlite\sqlite3.c	/^static int fts3CreateTables(Fts3Table *p){$/;"	f	file:
fts3CursorSeek	vendor\sqlite\sqlite3.c	/^static int fts3CursorSeek(sqlite3_context *pContext, Fts3Cursor *pCsr){$/;"	f	file:
fts3CursorSeekStmt	vendor\sqlite\sqlite3.c	/^static int fts3CursorSeekStmt(Fts3Cursor *pCsr, sqlite3_stmt **ppStmt){$/;"	f	file:
fts3DatabasePageSize	vendor\sqlite\sqlite3.c	/^static void fts3DatabasePageSize(int *pRc, Fts3Table *p){$/;"	f	file:
fts3DbExec	vendor\sqlite\sqlite3.c	/^static void fts3DbExec($/;"	f	file:
fts3DeclareVtab	vendor\sqlite\sqlite3.c	/^static void fts3DeclareVtab(int *pRc, Fts3Table *p){$/;"	f	file:
fts3DecodeIntArray	vendor\sqlite\sqlite3.c	/^static void fts3DecodeIntArray($/;"	f	file:
fts3DeleteAll	vendor\sqlite\sqlite3.c	/^static int fts3DeleteAll(Fts3Table *p, int bContent){$/;"	f	file:
fts3DeleteByRowid	vendor\sqlite\sqlite3.c	/^static int fts3DeleteByRowid($/;"	f	file:
fts3DeleteSegdir	vendor\sqlite\sqlite3.c	/^static int fts3DeleteSegdir($/;"	f	file:
fts3DeleteSegment	vendor\sqlite\sqlite3.c	/^static int fts3DeleteSegment($/;"	f	file:
fts3DeleteTerms	vendor\sqlite\sqlite3.c	/^static void fts3DeleteTerms( $/;"	f	file:
fts3DestroyMethod	vendor\sqlite\sqlite3.c	/^static int fts3DestroyMethod(sqlite3_vtab *pVtab){$/;"	f	file:
fts3DisconnectMethod	vendor\sqlite\sqlite3.c	/^static int fts3DisconnectMethod(sqlite3_vtab *pVtab){$/;"	f	file:
fts3DoAutoincrmerge	vendor\sqlite\sqlite3.c	/^static int fts3DoAutoincrmerge($/;"	f	file:
fts3DoIncrmerge	vendor\sqlite\sqlite3.c	/^static int fts3DoIncrmerge($/;"	f	file:
fts3DoIntegrityCheck	vendor\sqlite\sqlite3.c	/^static int fts3DoIntegrityCheck($/;"	f	file:
fts3DoOptimize	vendor\sqlite\sqlite3.c	/^static int fts3DoOptimize(Fts3Table *p, int bReturnDone){$/;"	f	file:
fts3DoRebuild	vendor\sqlite\sqlite3.c	/^static int fts3DoRebuild(Fts3Table *p){$/;"	f	file:
fts3DocidRange	vendor\sqlite\sqlite3.c	/^static sqlite3_int64 fts3DocidRange(sqlite3_value *pVal, i64 iDefault){$/;"	f	file:
fts3DoclistCountDocids	vendor\sqlite\sqlite3.c	/^static int fts3DoclistCountDocids(char *aList, int nList){$/;"	f	file:
fts3DoclistOrMerge	vendor\sqlite\sqlite3.c	/^static int fts3DoclistOrMerge($/;"	f	file:
fts3DoclistPhraseMerge	vendor\sqlite\sqlite3.c	/^static void fts3DoclistPhraseMerge($/;"	f	file:
fts3EncodeIntArray	vendor\sqlite\sqlite3.c	/^static void fts3EncodeIntArray($/;"	f	file:
fts3EofMethod	vendor\sqlite\sqlite3.c	/^static int fts3EofMethod(sqlite3_vtab_cursor *pCursor){$/;"	f	file:
fts3EvalAllocateReaders	vendor\sqlite\sqlite3.c	/^static void fts3EvalAllocateReaders($/;"	f	file:
fts3EvalAverageDocsize	vendor\sqlite\sqlite3.c	/^static int fts3EvalAverageDocsize(Fts3Cursor *pCsr, int *pnPage){$/;"	f	file:
fts3EvalDeferredPhrase	vendor\sqlite\sqlite3.c	/^static int fts3EvalDeferredPhrase(Fts3Cursor *pCsr, Fts3Phrase *pPhrase){$/;"	f	file:
fts3EvalDlPhraseNext	vendor\sqlite\sqlite3.c	/^static void fts3EvalDlPhraseNext($/;"	f	file:
fts3EvalGatherStats	vendor\sqlite\sqlite3.c	/^static int fts3EvalGatherStats($/;"	f	file:
fts3EvalIncrPhraseNext	vendor\sqlite\sqlite3.c	/^static int fts3EvalIncrPhraseNext($/;"	f	file:
fts3EvalInvalidatePoslist	vendor\sqlite\sqlite3.c	/^static void fts3EvalInvalidatePoslist(Fts3Phrase *pPhrase){$/;"	f	file:
fts3EvalNearTest	vendor\sqlite\sqlite3.c	/^static int fts3EvalNearTest(Fts3Expr *pExpr, int *pRc){$/;"	f	file:
fts3EvalNearTrim	vendor\sqlite\sqlite3.c	/^static int fts3EvalNearTrim($/;"	f	file:
fts3EvalNext	vendor\sqlite\sqlite3.c	/^static int fts3EvalNext(Fts3Cursor *pCsr){$/;"	f	file:
fts3EvalNextRow	vendor\sqlite\sqlite3.c	/^static void fts3EvalNextRow($/;"	f	file:
fts3EvalPhraseLoad	vendor\sqlite\sqlite3.c	/^static int fts3EvalPhraseLoad($/;"	f	file:
fts3EvalPhraseMergeToken	vendor\sqlite\sqlite3.c	/^static void fts3EvalPhraseMergeToken($/;"	f	file:
fts3EvalPhraseNext	vendor\sqlite\sqlite3.c	/^static int fts3EvalPhraseNext($/;"	f	file:
fts3EvalPhraseStart	vendor\sqlite\sqlite3.c	/^static int fts3EvalPhraseStart(Fts3Cursor *pCsr, int bOptOk, Fts3Phrase *p){$/;"	f	file:
fts3EvalRestart	vendor\sqlite\sqlite3.c	/^static void fts3EvalRestart($/;"	f	file:
fts3EvalSelectDeferred	vendor\sqlite\sqlite3.c	/^static int fts3EvalSelectDeferred($/;"	f	file:
fts3EvalStart	vendor\sqlite\sqlite3.c	/^static int fts3EvalStart(Fts3Cursor *pCsr){$/;"	f	file:
fts3EvalStartReaders	vendor\sqlite\sqlite3.c	/^static void fts3EvalStartReaders($/;"	f	file:
fts3EvalTestDeferredAndNear	vendor\sqlite\sqlite3.c	/^static int fts3EvalTestDeferredAndNear(Fts3Cursor *pCsr, int *pRc){$/;"	f	file:
fts3EvalTestExpr	vendor\sqlite\sqlite3.c	/^static int fts3EvalTestExpr($/;"	f	file:
fts3EvalTokenCosts	vendor\sqlite\sqlite3.c	/^static void fts3EvalTokenCosts($/;"	f	file:
fts3EvalUpdateCounts	vendor\sqlite\sqlite3.c	/^static void fts3EvalUpdateCounts(Fts3Expr *pExpr){$/;"	f	file:
fts3ExprBalance	vendor\sqlite\sqlite3.c	/^static int fts3ExprBalance(Fts3Expr **pp, int nMaxDepth){$/;"	f	file:
fts3ExprCheckDepth	vendor\sqlite\sqlite3.c	/^static int fts3ExprCheckDepth(Fts3Expr *p, int nMaxDepth){$/;"	f	file:
fts3ExprGlobalHitsCb	vendor\sqlite\sqlite3.c	/^static int fts3ExprGlobalHitsCb($/;"	f	file:
fts3ExprIterate	vendor\sqlite\sqlite3.c	/^static int fts3ExprIterate($/;"	f	file:
fts3ExprIterate2	vendor\sqlite\sqlite3.c	/^static int fts3ExprIterate2($/;"	f	file:
fts3ExprLoadDoclists	vendor\sqlite\sqlite3.c	/^static int fts3ExprLoadDoclists($/;"	f	file:
fts3ExprLoadDoclistsCb	vendor\sqlite\sqlite3.c	/^static int fts3ExprLoadDoclistsCb(Fts3Expr *pExpr, int iPhrase, void *ctx){$/;"	f	file:
fts3ExprLocalHitsCb	vendor\sqlite\sqlite3.c	/^static int fts3ExprLocalHitsCb($/;"	f	file:
fts3ExprParse	vendor\sqlite\sqlite3.c	/^static int fts3ExprParse($/;"	f	file:
fts3ExprParseUnbalanced	vendor\sqlite\sqlite3.c	/^static int fts3ExprParseUnbalanced($/;"	f	file:
fts3ExprPhraseCount	vendor\sqlite\sqlite3.c	/^static int fts3ExprPhraseCount(Fts3Expr *pExpr){$/;"	f	file:
fts3ExprPhraseCountCb	vendor\sqlite\sqlite3.c	/^static int fts3ExprPhraseCountCb(Fts3Expr *pExpr, int iPhrase, void *ctx){$/;"	f	file:
fts3ExprTermOffsetInit	vendor\sqlite\sqlite3.c	/^static int fts3ExprTermOffsetInit(Fts3Expr *pExpr, int iPhrase, void *ctx){$/;"	f	file:
fts3ExprTest	vendor\sqlite\sqlite3.c	/^static void fts3ExprTest($/;"	f	file:
fts3FilterMethod	vendor\sqlite\sqlite3.c	/^static int fts3FilterMethod($/;"	f	file:
fts3FindElementByHash	vendor\sqlite\sqlite3.c	/^static Fts3HashElem *fts3FindElementByHash($/;"	f	file:
fts3FindFunctionMethod	vendor\sqlite\sqlite3.c	/^static int fts3FindFunctionMethod($/;"	f	file:
fts3FreeExprNode	vendor\sqlite\sqlite3.c	/^static void fts3FreeExprNode(Fts3Expr *p){$/;"	f	file:
fts3FunctionArg	vendor\sqlite\sqlite3.c	/^static int fts3FunctionArg($/;"	f	file:
fts3GetDeltaPosition	vendor\sqlite\sqlite3.c	/^static void fts3GetDeltaPosition(char **pp, int *piPos){$/;"	f	file:
fts3GetDeltaVarint	vendor\sqlite\sqlite3.c	/^static void fts3GetDeltaVarint(char **pp, sqlite3_int64 *pVal){$/;"	f	file:
fts3GetDeltaVarint3	vendor\sqlite\sqlite3.c	/^static void fts3GetDeltaVarint3($/;"	f	file:
fts3GetMatchinfo	vendor\sqlite\sqlite3.c	/^static int fts3GetMatchinfo($/;"	f	file:
fts3GetReverseVarint	vendor\sqlite\sqlite3.c	/^static void fts3GetReverseVarint($/;"	f	file:
fts3GetVarint32	vendor\sqlite\sqlite3.c	132080;"	d	file:
fts3Getint	vendor\sqlite\sqlite3.c	/^static int fts3Getint(const char **pz){$/;"	f	file:
fts3GobbleInt	vendor\sqlite\sqlite3.c	/^static int fts3GobbleInt(const char **pp, int *pnOut){$/;"	f	file:
fts3HashClear	vendor\sqlite\sqlite3.c	131559;"	d	file:
fts3HashCount	vendor\sqlite\sqlite3.c	131583;"	d	file:
fts3HashData	vendor\sqlite\sqlite3.c	131576;"	d	file:
fts3HashFind	vendor\sqlite\sqlite3.c	131558;"	d	file:
fts3HashFindElem	vendor\sqlite\sqlite3.c	131560;"	d	file:
fts3HashFirst	vendor\sqlite\sqlite3.c	131574;"	d	file:
fts3HashFree	vendor\sqlite\sqlite3.c	/^static void fts3HashFree(void *p){$/;"	f	file:
fts3HashInit	vendor\sqlite\sqlite3.c	131556;"	d	file:
fts3HashInsert	vendor\sqlite\sqlite3.c	131557;"	d	file:
fts3HashInsertElement	vendor\sqlite\sqlite3.c	/^static void fts3HashInsertElement($/;"	f	file:
fts3HashKey	vendor\sqlite\sqlite3.c	131577;"	d	file:
fts3HashKeysize	vendor\sqlite\sqlite3.c	131578;"	d	file:
fts3HashMalloc	vendor\sqlite\sqlite3.c	/^static void *fts3HashMalloc(int n){$/;"	f	file:
fts3HashNext	vendor\sqlite\sqlite3.c	131575;"	d	file:
fts3IncrmergeAppend	vendor\sqlite\sqlite3.c	/^static int fts3IncrmergeAppend($/;"	f	file:
fts3IncrmergeChomp	vendor\sqlite\sqlite3.c	/^static int fts3IncrmergeChomp($/;"	f	file:
fts3IncrmergeCsr	vendor\sqlite\sqlite3.c	/^static int fts3IncrmergeCsr($/;"	f	file:
fts3IncrmergeHintLoad	vendor\sqlite\sqlite3.c	/^static int fts3IncrmergeHintLoad(Fts3Table *p, Blob *pHint){$/;"	f	file:
fts3IncrmergeHintPop	vendor\sqlite\sqlite3.c	/^static int fts3IncrmergeHintPop(Blob *pHint, i64 *piAbsLevel, int *pnInput){$/;"	f	file:
fts3IncrmergeHintPush	vendor\sqlite\sqlite3.c	/^static void fts3IncrmergeHintPush($/;"	f	file:
fts3IncrmergeHintStore	vendor\sqlite\sqlite3.c	/^static int fts3IncrmergeHintStore(Fts3Table *p, Blob *pHint){$/;"	f	file:
fts3IncrmergeLoad	vendor\sqlite\sqlite3.c	/^static int fts3IncrmergeLoad($/;"	f	file:
fts3IncrmergeOutputIdx	vendor\sqlite\sqlite3.c	/^static int fts3IncrmergeOutputIdx( $/;"	f	file:
fts3IncrmergePush	vendor\sqlite\sqlite3.c	/^static int fts3IncrmergePush($/;"	f	file:
fts3IncrmergeRelease	vendor\sqlite\sqlite3.c	/^static void fts3IncrmergeRelease($/;"	f	file:
fts3IncrmergeWriter	vendor\sqlite\sqlite3.c	/^static int fts3IncrmergeWriter( $/;"	f	file:
fts3InitVtab	vendor\sqlite\sqlite3.c	/^static int fts3InitVtab($/;"	f	file:
fts3InsertData	vendor\sqlite\sqlite3.c	/^static int fts3InsertData($/;"	f	file:
fts3InsertDocsize	vendor\sqlite\sqlite3.c	/^static void fts3InsertDocsize($/;"	f	file:
fts3InsertTerms	vendor\sqlite\sqlite3.c	/^static int fts3InsertTerms($/;"	f	file:
fts3IntegrityCheck	vendor\sqlite\sqlite3.c	/^static int fts3IntegrityCheck(Fts3Table *p, int *pbOk){$/;"	f	file:
fts3IsAppendable	vendor\sqlite\sqlite3.c	/^static int fts3IsAppendable(Fts3Table *p, sqlite3_int64 iEnd, int *pbRes){$/;"	f	file:
fts3IsEmpty	vendor\sqlite\sqlite3.c	/^static int fts3IsEmpty(Fts3Table *p, sqlite3_value *pRowid, int *pisEmpty){$/;"	f	file:
fts3IsSpecialColumn	vendor\sqlite\sqlite3.c	/^static int fts3IsSpecialColumn($/;"	f	file:
fts3LcsIteratorAdvance	vendor\sqlite\sqlite3.c	/^static int fts3LcsIteratorAdvance(LcsIterator *pIter){$/;"	f	file:
fts3LogMerge	vendor\sqlite\sqlite3.c	/^static void fts3LogMerge(int nMerge, sqlite3_int64 iAbsLevel){$/;"	f	file:
fts3LogMerge	vendor\sqlite\sqlite3.c	141811;"	d	file:
fts3MallocZero	vendor\sqlite\sqlite3.c	/^static void *fts3MallocZero(int nByte){$/;"	f	file:
fts3MatchinfoCheck	vendor\sqlite\sqlite3.c	/^static int fts3MatchinfoCheck($/;"	f	file:
fts3MatchinfoFunc	vendor\sqlite\sqlite3.c	/^static void fts3MatchinfoFunc($/;"	f	file:
fts3MatchinfoLcs	vendor\sqlite\sqlite3.c	/^static int fts3MatchinfoLcs(Fts3Cursor *pCsr, MatchInfo *pInfo){$/;"	f	file:
fts3MatchinfoLcsCb	vendor\sqlite\sqlite3.c	/^static int fts3MatchinfoLcsCb($/;"	f	file:
fts3MatchinfoSelectDoctotal	vendor\sqlite\sqlite3.c	/^static int fts3MatchinfoSelectDoctotal($/;"	f	file:
fts3MatchinfoSize	vendor\sqlite\sqlite3.c	/^static int fts3MatchinfoSize(MatchInfo *pInfo, char cArg){$/;"	f	file:
fts3MatchinfoValues	vendor\sqlite\sqlite3.c	/^static int fts3MatchinfoValues($/;"	f	file:
fts3Module	vendor\sqlite\sqlite3.c	/^static const sqlite3_module fts3Module = {$/;"	v	file:
fts3MsrBufferData	vendor\sqlite\sqlite3.c	/^static int fts3MsrBufferData($/;"	f	file:
fts3NextMethod	vendor\sqlite\sqlite3.c	/^static int fts3NextMethod(sqlite3_vtab_cursor *pCursor){$/;"	f	file:
fts3NodeAddTerm	vendor\sqlite\sqlite3.c	/^static int fts3NodeAddTerm($/;"	f	file:
fts3NodeFree	vendor\sqlite\sqlite3.c	/^static void fts3NodeFree(SegmentNode *pTree){$/;"	f	file:
fts3NodeWrite	vendor\sqlite\sqlite3.c	/^static int fts3NodeWrite($/;"	f	file:
fts3OffsetsFunc	vendor\sqlite\sqlite3.c	/^static void fts3OffsetsFunc($/;"	f	file:
fts3OpenMethod	vendor\sqlite\sqlite3.c	/^static int fts3OpenMethod(sqlite3_vtab *pVTab, sqlite3_vtab_cursor **ppCsr){$/;"	f	file:
fts3OptimizeFunc	vendor\sqlite\sqlite3.c	/^static void fts3OptimizeFunc($/;"	f	file:
fts3PendingListAppend	vendor\sqlite\sqlite3.c	/^static int fts3PendingListAppend($/;"	f	file:
fts3PendingListAppendVarint	vendor\sqlite\sqlite3.c	/^static int fts3PendingListAppendVarint($/;"	f	file:
fts3PendingListDelete	vendor\sqlite\sqlite3.c	/^static void fts3PendingListDelete(PendingList *pList){$/;"	f	file:
fts3PendingTermsAdd	vendor\sqlite\sqlite3.c	/^static int fts3PendingTermsAdd($/;"	f	file:
fts3PendingTermsAddOne	vendor\sqlite\sqlite3.c	/^static int fts3PendingTermsAddOne($/;"	f	file:
fts3PendingTermsDocid	vendor\sqlite\sqlite3.c	/^static int fts3PendingTermsDocid($/;"	f	file:
fts3PoslistCopy	vendor\sqlite\sqlite3.c	/^static void fts3PoslistCopy(char **pp, char **ppPoslist){$/;"	f	file:
fts3PoslistMerge	vendor\sqlite\sqlite3.c	/^static void fts3PoslistMerge($/;"	f	file:
fts3PoslistNearMerge	vendor\sqlite\sqlite3.c	/^static int fts3PoslistNearMerge($/;"	f	file:
fts3PoslistPhraseMerge	vendor\sqlite\sqlite3.c	/^static int fts3PoslistPhraseMerge($/;"	f	file:
fts3PrefixCompress	vendor\sqlite\sqlite3.c	/^static int fts3PrefixCompress($/;"	f	file:
fts3PrefixParameter	vendor\sqlite\sqlite3.c	/^static int fts3PrefixParameter($/;"	f	file:
fts3PromoteSegments	vendor\sqlite\sqlite3.c	/^static int fts3PromoteSegments($/;"	f	file:
fts3PutColNumber	vendor\sqlite\sqlite3.c	/^static int fts3PutColNumber(char **pp, int iCol){$/;"	f	file:
fts3PutDeltaVarint	vendor\sqlite\sqlite3.c	/^static void fts3PutDeltaVarint($/;"	f	file:
fts3PutDeltaVarint3	vendor\sqlite\sqlite3.c	/^static void fts3PutDeltaVarint3($/;"	f	file:
fts3QuoteId	vendor\sqlite\sqlite3.c	/^static char *fts3QuoteId(char const *zInput){$/;"	f	file:
fts3ReadEndBlockField	vendor\sqlite\sqlite3.c	/^static void fts3ReadEndBlockField($/;"	f	file:
fts3ReadExprList	vendor\sqlite\sqlite3.c	/^static char *fts3ReadExprList(Fts3Table *p, const char *zFunc, int *pRc){$/;"	f	file:
fts3ReadNextPos	vendor\sqlite\sqlite3.c	/^static void fts3ReadNextPos($/;"	f	file:
fts3ReallocOrFree	vendor\sqlite\sqlite3.c	/^static void *fts3ReallocOrFree(void *pOrig, int nNew){$/;"	f	file:
fts3Rehash	vendor\sqlite\sqlite3.c	/^static int fts3Rehash(Fts3Hash *pH, int new_size){$/;"	f	file:
fts3ReleaseMethod	vendor\sqlite\sqlite3.c	/^static int fts3ReleaseMethod(sqlite3_vtab *pVtab, int iSavepoint){$/;"	f	file:
fts3RemoveElementByHash	vendor\sqlite\sqlite3.c	/^static void fts3RemoveElementByHash($/;"	f	file:
fts3RemoveSegdirEntry	vendor\sqlite\sqlite3.c	/^static int fts3RemoveSegdirEntry($/;"	f	file:
fts3RenameMethod	vendor\sqlite\sqlite3.c	/^static int fts3RenameMethod($/;"	f	file:
fts3RepackSegdirLevel	vendor\sqlite\sqlite3.c	/^static int fts3RepackSegdirLevel($/;"	f	file:
fts3ReversePoslist	vendor\sqlite\sqlite3.c	/^static void fts3ReversePoslist(char *pStart, char **ppPoslist){$/;"	f	file:
fts3RollbackMethod	vendor\sqlite\sqlite3.c	/^static int fts3RollbackMethod(sqlite3_vtab *pVtab){$/;"	f	file:
fts3RollbackToMethod	vendor\sqlite\sqlite3.c	/^static int fts3RollbackToMethod(sqlite3_vtab *pVtab, int iSavepoint){$/;"	f	file:
fts3RowidMethod	vendor\sqlite\sqlite3.c	/^static int fts3RowidMethod(sqlite3_vtab_cursor *pCursor, sqlite_int64 *pRowid){$/;"	f	file:
fts3SavepointMethod	vendor\sqlite\sqlite3.c	/^static int fts3SavepointMethod(sqlite3_vtab *pVtab, int iSavepoint){$/;"	f	file:
fts3ScanInteriorNode	vendor\sqlite\sqlite3.c	/^static int fts3ScanInteriorNode($/;"	f	file:
fts3SegReaderCmp	vendor\sqlite\sqlite3.c	/^static int fts3SegReaderCmp(Fts3SegReader *pLhs, Fts3SegReader *pRhs){$/;"	f	file:
fts3SegReaderCursor	vendor\sqlite\sqlite3.c	/^static int fts3SegReaderCursor($/;"	f	file:
fts3SegReaderCursorAddZero	vendor\sqlite\sqlite3.c	/^static int fts3SegReaderCursorAddZero($/;"	f	file:
fts3SegReaderCursorAppend	vendor\sqlite\sqlite3.c	/^static int fts3SegReaderCursorAppend($/;"	f	file:
fts3SegReaderCursorFree	vendor\sqlite\sqlite3.c	/^static void fts3SegReaderCursorFree(Fts3MultiSegReader *pSegcsr){$/;"	f	file:
fts3SegReaderDoclistCmp	vendor\sqlite\sqlite3.c	/^static int fts3SegReaderDoclistCmp(Fts3SegReader *pLhs, Fts3SegReader *pRhs){$/;"	f	file:
fts3SegReaderDoclistCmpRev	vendor\sqlite\sqlite3.c	/^static int fts3SegReaderDoclistCmpRev(Fts3SegReader *pLhs, Fts3SegReader *pRhs){$/;"	f	file:
fts3SegReaderFirstDocid	vendor\sqlite\sqlite3.c	/^static int fts3SegReaderFirstDocid(Fts3Table *pTab, Fts3SegReader *pReader){$/;"	f	file:
fts3SegReaderIncrRead	vendor\sqlite\sqlite3.c	/^static int fts3SegReaderIncrRead(Fts3SegReader *pReader){$/;"	f	file:
fts3SegReaderIsPending	vendor\sqlite\sqlite3.c	141896;"	d	file:
fts3SegReaderIsRootOnly	vendor\sqlite\sqlite3.c	141897;"	d	file:
fts3SegReaderNext	vendor\sqlite\sqlite3.c	/^static int fts3SegReaderNext($/;"	f	file:
fts3SegReaderNextDocid	vendor\sqlite\sqlite3.c	/^static int fts3SegReaderNextDocid($/;"	f	file:
fts3SegReaderRequire	vendor\sqlite\sqlite3.c	/^static int fts3SegReaderRequire(Fts3SegReader *pReader, char *pFrom, int nByte){$/;"	f	file:
fts3SegReaderSetEof	vendor\sqlite\sqlite3.c	/^static void fts3SegReaderSetEof(Fts3SegReader *pSeg){$/;"	f	file:
fts3SegReaderSort	vendor\sqlite\sqlite3.c	/^static void fts3SegReaderSort($/;"	f	file:
fts3SegReaderStart	vendor\sqlite\sqlite3.c	/^static int fts3SegReaderStart($/;"	f	file:
fts3SegReaderTermCmp	vendor\sqlite\sqlite3.c	/^static int fts3SegReaderTermCmp($/;"	f	file:
fts3SegWriterAdd	vendor\sqlite\sqlite3.c	/^static int fts3SegWriterAdd($/;"	f	file:
fts3SegWriterFlush	vendor\sqlite\sqlite3.c	/^static int fts3SegWriterFlush($/;"	f	file:
fts3SegWriterFree	vendor\sqlite\sqlite3.c	/^static void fts3SegWriterFree(SegmentWriter *pWriter){$/;"	f	file:
fts3SegmentIsMaxLevel	vendor\sqlite\sqlite3.c	/^static int fts3SegmentIsMaxLevel(Fts3Table *p, i64 iAbsLevel, int *pbMax){$/;"	f	file:
fts3SegmentMaxLevel	vendor\sqlite\sqlite3.c	/^static int fts3SegmentMaxLevel($/;"	f	file:
fts3SegmentMerge	vendor\sqlite\sqlite3.c	/^static int fts3SegmentMerge($/;"	f	file:
fts3SelectDocsize	vendor\sqlite\sqlite3.c	/^static int fts3SelectDocsize($/;"	f	file:
fts3SelectLeaf	vendor\sqlite\sqlite3.c	/^static int fts3SelectLeaf($/;"	f	file:
fts3SetEstimatedRows	vendor\sqlite\sqlite3.c	/^static void fts3SetEstimatedRows(sqlite3_index_info *pIdxInfo, i64 nRow){$/;"	f	file:
fts3SetHasStat	vendor\sqlite\sqlite3.c	/^static int fts3SetHasStat(Fts3Table *p){$/;"	f	file:
fts3SnippetAdvance	vendor\sqlite\sqlite3.c	/^static void fts3SnippetAdvance(char **ppIter, int *piIter, int iNext){$/;"	f	file:
fts3SnippetDetails	vendor\sqlite\sqlite3.c	/^static void fts3SnippetDetails($/;"	f	file:
fts3SnippetFindPositions	vendor\sqlite\sqlite3.c	/^static int fts3SnippetFindPositions(Fts3Expr *pExpr, int iPhrase, void *ctx){$/;"	f	file:
fts3SnippetFunc	vendor\sqlite\sqlite3.c	/^static void fts3SnippetFunc($/;"	f	file:
fts3SnippetNextCandidate	vendor\sqlite\sqlite3.c	/^static int fts3SnippetNextCandidate(SnippetIter *pIter){$/;"	f	file:
fts3SnippetShift	vendor\sqlite\sqlite3.c	/^static int fts3SnippetShift($/;"	f	file:
fts3SnippetText	vendor\sqlite\sqlite3.c	/^static int fts3SnippetText($/;"	f	file:
fts3SpecialInsert	vendor\sqlite\sqlite3.c	/^static int fts3SpecialInsert(Fts3Table *p, sqlite3_value *pVal){$/;"	f	file:
fts3SqlExec	vendor\sqlite\sqlite3.c	/^static void fts3SqlExec($/;"	f	file:
fts3SqlStmt	vendor\sqlite\sqlite3.c	/^static int fts3SqlStmt($/;"	f	file:
fts3StartNode	vendor\sqlite\sqlite3.c	/^static void fts3StartNode(Blob *pNode, int iHeight, sqlite3_int64 iChild){$/;"	f	file:
fts3StrCompare	vendor\sqlite\sqlite3.c	/^static int fts3StrCompare(const void *pKey1, int n1, const void *pKey2, int n2){$/;"	f	file:
fts3StrHash	vendor\sqlite\sqlite3.c	/^static int fts3StrHash(const void *pKey, int nKey){$/;"	f	file:
fts3StringAppend	vendor\sqlite\sqlite3.c	/^static int fts3StringAppend($/;"	f	file:
fts3SyncMethod	vendor\sqlite\sqlite3.c	/^static int fts3SyncMethod(sqlite3_vtab *pVtab){$/;"	f	file:
fts3TermCmp	vendor\sqlite\sqlite3.c	/^static int fts3TermCmp($/;"	f	file:
fts3TermSegReaderCursor	vendor\sqlite\sqlite3.c	/^static int fts3TermSegReaderCursor($/;"	f	file:
fts3TermSelect	vendor\sqlite\sqlite3.c	/^static int fts3TermSelect($/;"	f	file:
fts3TermSelectFinishMerge	vendor\sqlite\sqlite3.c	/^static int fts3TermSelectFinishMerge(Fts3Table *p, TermSelect *pTS){$/;"	f	file:
fts3TermSelectMerge	vendor\sqlite\sqlite3.c	/^static int fts3TermSelectMerge($/;"	f	file:
fts3TreeFinishNode	vendor\sqlite\sqlite3.c	/^static int fts3TreeFinishNode($/;"	f	file:
fts3TruncateNode	vendor\sqlite\sqlite3.c	/^static int fts3TruncateNode($/;"	f	file:
fts3TruncateSegment	vendor\sqlite\sqlite3.c	/^static int fts3TruncateSegment($/;"	f	file:
fts3UpdateDocTotals	vendor\sqlite\sqlite3.c	/^static void fts3UpdateDocTotals($/;"	f	file:
fts3UpdateMethod	vendor\sqlite\sqlite3.c	/^static int fts3UpdateMethod($/;"	f	file:
fts3WriteExprList	vendor\sqlite\sqlite3.c	/^static char *fts3WriteExprList(Fts3Table *p, const char *zFunc, int *pRc){$/;"	f	file:
fts3WriteSegdir	vendor\sqlite\sqlite3.c	/^static int fts3WriteSegdir($/;"	f	file:
fts3WriteSegment	vendor\sqlite\sqlite3.c	/^static int fts3WriteSegment($/;"	f	file:
fts3Writelock	vendor\sqlite\sqlite3.c	/^static int fts3Writelock(Fts3Table *p){$/;"	f	file:
fts3_isalnum	vendor\sqlite\sqlite3.c	/^static int fts3_isalnum(int x){$/;"	f	file:
fts3auxBestIndexMethod	vendor\sqlite\sqlite3.c	/^static int fts3auxBestIndexMethod($/;"	f	file:
fts3auxCloseMethod	vendor\sqlite\sqlite3.c	/^static int fts3auxCloseMethod(sqlite3_vtab_cursor *pCursor){$/;"	f	file:
fts3auxColumnMethod	vendor\sqlite\sqlite3.c	/^static int fts3auxColumnMethod($/;"	f	file:
fts3auxConnectMethod	vendor\sqlite\sqlite3.c	/^static int fts3auxConnectMethod($/;"	f	file:
fts3auxDisconnectMethod	vendor\sqlite\sqlite3.c	/^static int fts3auxDisconnectMethod(sqlite3_vtab *pVtab){$/;"	f	file:
fts3auxEofMethod	vendor\sqlite\sqlite3.c	/^static int fts3auxEofMethod(sqlite3_vtab_cursor *pCursor){$/;"	f	file:
fts3auxFilterMethod	vendor\sqlite\sqlite3.c	/^static int fts3auxFilterMethod($/;"	f	file:
fts3auxGrowStatArray	vendor\sqlite\sqlite3.c	/^static int fts3auxGrowStatArray(Fts3auxCursor *pCsr, int nSize){$/;"	f	file:
fts3auxNextMethod	vendor\sqlite\sqlite3.c	/^static int fts3auxNextMethod(sqlite3_vtab_cursor *pCursor){$/;"	f	file:
fts3auxOpenMethod	vendor\sqlite\sqlite3.c	/^static int fts3auxOpenMethod(sqlite3_vtab *pVTab, sqlite3_vtab_cursor **ppCsr){$/;"	f	file:
fts3auxRowidMethod	vendor\sqlite\sqlite3.c	/^static int fts3auxRowidMethod($/;"	f	file:
fts3isspace	vendor\sqlite\sqlite3.c	/^static int fts3isspace(char c){$/;"	f	file:
fts3tokBestIndexMethod	vendor\sqlite\sqlite3.c	/^static int fts3tokBestIndexMethod($/;"	f	file:
fts3tokCloseMethod	vendor\sqlite\sqlite3.c	/^static int fts3tokCloseMethod(sqlite3_vtab_cursor *pCursor){$/;"	f	file:
fts3tokColumnMethod	vendor\sqlite\sqlite3.c	/^static int fts3tokColumnMethod($/;"	f	file:
fts3tokConnectMethod	vendor\sqlite\sqlite3.c	/^static int fts3tokConnectMethod($/;"	f	file:
fts3tokDequoteArray	vendor\sqlite\sqlite3.c	/^static int fts3tokDequoteArray($/;"	f	file:
fts3tokDisconnectMethod	vendor\sqlite\sqlite3.c	/^static int fts3tokDisconnectMethod(sqlite3_vtab *pVtab){$/;"	f	file:
fts3tokEofMethod	vendor\sqlite\sqlite3.c	/^static int fts3tokEofMethod(sqlite3_vtab_cursor *pCursor){$/;"	f	file:
fts3tokFilterMethod	vendor\sqlite\sqlite3.c	/^static int fts3tokFilterMethod($/;"	f	file:
fts3tokNextMethod	vendor\sqlite\sqlite3.c	/^static int fts3tokNextMethod(sqlite3_vtab_cursor *pCursor){$/;"	f	file:
fts3tokOpenMethod	vendor\sqlite\sqlite3.c	/^static int fts3tokOpenMethod(sqlite3_vtab *pVTab, sqlite3_vtab_cursor **ppCsr){$/;"	f	file:
fts3tokQueryTokenizer	vendor\sqlite\sqlite3.c	/^static int fts3tokQueryTokenizer($/;"	f	file:
fts3tokResetCursor	vendor\sqlite\sqlite3.c	/^static void fts3tokResetCursor(Fts3tokCursor *pCsr){$/;"	f	file:
fts3tokRowidMethod	vendor\sqlite\sqlite3.c	/^static int fts3tokRowidMethod($/;"	f	file:
ftsCompareFunction	vendor\sqlite\sqlite3.c	/^static int (*ftsCompareFunction(int keyClass))(const void*,int,const void*,int){$/;"	f	file:
ftsHashFunction	vendor\sqlite\sqlite3.c	/^static int (*ftsHashFunction(int keyClass))(const void*,int){$/;"	f	file:
fullSync	vendor\sqlite\sqlite3.c	/^  u8 fullSync;                \/* Do extra syncs of the journal for robustness *\/$/;"	m	struct:Pager	file:
full_fsync	vendor\sqlite\sqlite3.c	/^static int full_fsync(int fd, int fullSync, int dataOnly){$/;"	f	file:
funcFlags	vendor\sqlite\sqlite3.c	/^  u16 funcFlags;       \/* Some combination of SQLITE_FUNC_* *\/$/;"	m	struct:FuncDef	file:
functionDestroy	vendor\sqlite\sqlite3.c	/^static void functionDestroy(sqlite3 *db, FuncDef *p){$/;"	f	file:
functionSearch	vendor\sqlite\sqlite3.c	/^static FuncDef *functionSearch($/;"	f	file:
g_elapsed	vendor\sqlite\sqlite3.c	/^static sqlite_uint64 g_elapsed;$/;"	v	file:
g_start	vendor\sqlite\sqlite3.c	/^static sqlite_uint64 g_start;$/;"	v	file:
generateColumnNames	vendor\sqlite\sqlite3.c	/^static void generateColumnNames($/;"	f	file:
generateColumnTypes	vendor\sqlite\sqlite3.c	/^static void generateColumnTypes($/;"	f	file:
generateOutputSubroutine	vendor\sqlite\sqlite3.c	/^static int generateOutputSubroutine($/;"	f	file:
generateSortTail	vendor\sqlite\sqlite3.c	/^static void generateSortTail($/;"	f	file:
generateWithRecursiveQuery	vendor\sqlite\sqlite3.c	/^static void generateWithRecursiveQuery($/;"	f	file:
geomCallback	vendor\sqlite\sqlite3.c	/^static void geomCallback(sqlite3_context *ctx, int nArg, sqlite3_value **aArg){$/;"	f	file:
get2byte	vendor\sqlite\sqlite3.c	52491;"	d	file:
get2byteNotZero	vendor\sqlite\sqlite3.c	52825;"	d	file:
get4byte	vendor\sqlite\sqlite3.c	52493;"	d	file:
getAbsoluteLevel	vendor\sqlite\sqlite3.c	/^static sqlite3_int64 getAbsoluteLevel($/;"	f	file:
getAndInitPage	vendor\sqlite\sqlite3.c	/^static int getAndInitPage($/;"	f	file:
getAutoVacuum	vendor\sqlite\sqlite3.c	/^static int getAutoVacuum(const char *z){$/;"	f	file:
getCellInfo	vendor\sqlite\sqlite3.c	/^  static void getCellInfo(BtCursor *pCur){$/;"	f	file:
getCellInfo	vendor\sqlite\sqlite3.c	56759;"	d	file:
getDigits	vendor\sqlite\sqlite3.c	/^static int getDigits(const char *zDate, ...){$/;"	f	file:
getDoubleArg	vendor\sqlite\sqlite3.c	/^static double getDoubleArg(PrintfArguments *p){$/;"	f	file:
getIntArg	vendor\sqlite\sqlite3.c	/^static sqlite3_int64 getIntArg(PrintfArguments *p){$/;"	f	file:
getIntFromStmt	vendor\sqlite\sqlite3.c	/^static int getIntFromStmt(sqlite3 *db, const char *zSql, int *piVal){$/;"	f	file:
getLockingMode	vendor\sqlite\sqlite3.c	/^static int getLockingMode(const char *z){$/;"	f	file:
getMask	vendor\sqlite\sqlite3.c	/^static Bitmask getMask(WhereMaskSet *pMaskSet, int iCursor){$/;"	f	file:
getNextNode	vendor\sqlite\sqlite3.c	/^static int getNextNode($/;"	f	file:
getNextString	vendor\sqlite\sqlite3.c	/^static int getNextString($/;"	f	file:
getNextToken	vendor\sqlite\sqlite3.c	/^static int getNextToken($/;"	f	file:
getNodeSize	vendor\sqlite\sqlite3.c	/^static int getNodeSize($/;"	f	file:
getOverflowPage	vendor\sqlite\sqlite3.c	/^static int getOverflowPage($/;"	f	file:
getPageReferenced	vendor\sqlite\sqlite3.c	/^static int getPageReferenced(IntegrityCk *pCheck, Pgno iPg){$/;"	f	file:
getRowTrigger	vendor\sqlite\sqlite3.c	/^static TriggerPrg *getRowTrigger($/;"	f	file:
getSafetyLevel	vendor\sqlite\sqlite3.c	/^static u8 getSafetyLevel(const char *z, int omitFull, u8 dflt){$/;"	f	file:
getTempStore	vendor\sqlite\sqlite3.c	/^static int getTempStore(const char *z){$/;"	f	file:
getTextArg	vendor\sqlite\sqlite3.c	/^static char *getTextArg(PrintfArguments *p){$/;"	f	file:
getVarint	vendor\sqlite\sqlite3.c	13268;"	d	file:
getVarint32	vendor\sqlite\sqlite3.c	13263;"	d	file:
get_autocommit	vendor\sqlite\sqlite3.c	/^  int  (*get_autocommit)(sqlite3*);$/;"	m	struct:sqlite3_api_routines	file:
get_auxdata	vendor\sqlite\sqlite3.c	/^  void * (*get_auxdata)(sqlite3_context*,int);$/;"	m	struct:sqlite3_api_routines	file:
get_table	vendor\sqlite\sqlite3.c	/^  int  (*get_table)(sqlite3*,const char*,char***,int*,int*,char**);$/;"	m	struct:sqlite3_api_routines	file:
globInfo	vendor\sqlite\sqlite3.c	/^static const struct compareInfo globInfo = { '*', '?', '[', 0 };$/;"	v	typeref:struct:compareInfo	file:
global_recover	vendor\sqlite\sqlite3.c	/^  int  (*global_recover)(void);$/;"	m	struct:sqlite3_api_routines	file:
groupConcatFinalize	vendor\sqlite\sqlite3.c	/^static void groupConcatFinalize(sqlite3_context *context){$/;"	f	file:
groupConcatStep	vendor\sqlite\sqlite3.c	/^static void groupConcatStep($/;"	f	file:
growOpArray	vendor\sqlite\sqlite3.c	/^static int growOpArray(Vdbe *v, int nOp){$/;"	f	file:
growVTrans	vendor\sqlite\sqlite3.c	/^static int growVTrans(sqlite3 *db){$/;"	f	file:
grp	vendor\sqlite\sqlite3.c	/^  PGroup grp;                    \/* The global PGroup for mode (2) *\/$/;"	m	struct:PCacheGlobal	file:
h	vendor\sqlite\sqlite3.c	/^  HANDLE h;               \/* Handle for accessing the file *\/$/;"	m	struct:winFile	file:
h	vendor\sqlite\sqlite3.c	/^  int h, m;          \/* Hour and minutes *\/$/;"	m	struct:DateTime	file:
h	vendor\sqlite\sqlite3.c	/^  int h;                              \/* The file descriptor *\/$/;"	m	struct:unixFile	file:
h	vendor\sqlite\sqlite3.c	/^  int h;                     \/* Open file descriptor *\/$/;"	m	struct:unixShmNode	file:
hFile	vendor\sqlite\sqlite3.c	/^  winFile hFile;             \/* File handle from winOpen *\/$/;"	m	struct:winShmNode	file:
hHeap	vendor\sqlite\sqlite3.c	/^  HANDLE hHeap; \/* The handle to our heap. *\/$/;"	m	struct:winMemData	file:
hMap	vendor\sqlite\sqlite3.c	/^    HANDLE hMap;             \/* File handle from CreateFileMapping *\/$/;"	m	struct:winShmNode::ShmRegion	file:
hMap	vendor\sqlite\sqlite3.c	/^  HANDLE hMap;                  \/* Handle for accessing memory mapping *\/$/;"	m	struct:winFile	file:
hMutex	vendor\sqlite\sqlite3.c	/^  HANDLE hMutex;          \/* Mutex used to control access to shared lock *\/$/;"	m	struct:winFile	file:
hPending	vendor\sqlite\sqlite3.c	/^    Fts3Hash hPending;            \/* Pending terms table for this index *\/$/;"	m	struct:Fts3Table::Fts3Index	file:
hShared	vendor\sqlite\sqlite3.c	/^  HANDLE hShared;         \/* Shared memory segment used for locking *\/$/;"	m	struct:winFile	file:
handleDeferredMoveto	vendor\sqlite\sqlite3.c	/^static int SQLITE_NOINLINE handleDeferredMoveto(VdbeCursor *p){$/;"	f	file:
handleMovedCursor	vendor\sqlite\sqlite3.c	/^static int SQLITE_NOINLINE handleMovedCursor(VdbeCursor *p){$/;"	f	file:
hasBeenUsed	vendor\sqlite\sqlite3.c	/^  u8 hasBeenUsed;             \/* True if any content previously read from this pager*\/$/;"	m	struct:Pager	file:
hasColumn	vendor\sqlite\sqlite3.c	/^static int hasColumn(const i16 *aiCol, int nCol, int x){$/;"	f	file:
hasCompound	vendor\sqlite\sqlite3.c	/^  u8 hasCompound;      \/* Need to invoke convertCompoundSelectToSubquery() *\/$/;"	m	struct:Parse	file:
hasHotJournal	vendor\sqlite\sqlite3.c	/^static int hasHotJournal(Pager *pPager, int *pExists){$/;"	f	file:
hasMutex	vendor\sqlite\sqlite3.c	/^  u8 hasMutex;               \/* True if holding the unixShmNode mutex *\/$/;"	m	struct:unixShm	file:
hasMutex	vendor\sqlite\sqlite3.c	/^  u8 hasMutex;               \/* True if holding the winShmNode mutex *\/$/;"	m	struct:winShm	file:
hasReadConflicts	vendor\sqlite\sqlite3.c	/^static int hasReadConflicts(Btree *pBtree, Pgno iRoot){$/;"	f	file:
hasReadConflicts	vendor\sqlite\sqlite3.c	52893;"	d	file:
hasSharedCacheTableLock	vendor\sqlite\sqlite3.c	/^static int hasSharedCacheTableLock($/;"	f	file:
hasSharedCacheTableLock	vendor\sqlite\sqlite3.c	52892;"	d	file:
hasVowel	vendor\sqlite\sqlite3.c	/^static int hasVowel(const char *z){$/;"	f	file:
hashDestroy	vendor\sqlite\sqlite3.c	/^static void hashDestroy(void *p){$/;"	f	file:
hdr	vendor\sqlite\sqlite3.c	/^    } hdr;$/;"	m	union:Mem3Block::__anon13	typeref:struct:Mem3Block::__anon13::__anon14	file:
hdr	vendor\sqlite\sqlite3.c	/^  WalIndexHdr hdr;           \/* Wal-index header for current transaction *\/$/;"	m	struct:Wal	file:
hdrOffset	vendor\sqlite\sqlite3.c	/^  u8 hdrOffset;        \/* 100 for page 1.  0 otherwise *\/$/;"	m	struct:MemPage	file:
heightOfExpr	vendor\sqlite\sqlite3.c	/^static void heightOfExpr(Expr *p, int *pnHeight){$/;"	f	file:
heightOfExprList	vendor\sqlite\sqlite3.c	/^static void heightOfExprList(ExprList *p, int *pnHeight){$/;"	f	file:
heightOfSelect	vendor\sqlite\sqlite3.c	/^static void heightOfSelect(Select *p, int *pnHeight){$/;"	f	file:
hexFunc	vendor\sqlite\sqlite3.c	/^static void hexFunc($/;"	f	file:
hexdigits	vendor\sqlite\sqlite3.c	/^static const char hexdigits[] = {$/;"	v	file:
hints	vendor\sqlite\sqlite3.c	/^  u8 hints;                             \/* As configured by CursorSetHints() *\/$/;"	m	struct:BtCursor	file:
hlmask	vendor\sqlite\sqlite3.c	/^  u64 hlmask;                     \/* Mask of snippet terms to highlight *\/$/;"	m	struct:SnippetFragment	file:
ht	vendor\sqlite\sqlite3.c	/^  } *ht;$/;"	m	struct:Fts3Hash	typeref:struct:Fts3Hash::_fts3ht	file:
ht	vendor\sqlite\sqlite3.c	/^  } *ht;$/;"	m	struct:Hash	typeref:struct:Hash::_ht	file:
ht_slot	vendor\sqlite\sqlite3.c	/^typedef u16 ht_slot;$/;"	t	file:
htsize	vendor\sqlite\sqlite3.c	/^  int htsize;             \/* Number of buckets in the hash table *\/$/;"	m	struct:Fts3Hash	file:
htsize	vendor\sqlite\sqlite3.c	/^  unsigned int htsize;      \/* Number of buckets in the hash table *\/$/;"	m	struct:Hash	file:
i	vendor\sqlite\sqlite3.c	/^    i64 i;              \/* Integer value used when MEM_Int is set in flags *\/$/;"	m	union:Mem::MemValue	file:
i	vendor\sqlite\sqlite3.c	/^    int i;                 \/* Integer value if p4type==P4_INT32 *\/$/;"	m	union:VdbeOp::__anon4	file:
i	vendor\sqlite\sqlite3.c	/^  int i;             \/* Integer value *\/$/;"	m	union:RtreeCoord	file:
i	vendor\sqlite\sqlite3.c	/^  unsigned char i, j;            \/* State variables *\/$/;"	m	struct:sqlite3PrngType	file:
i16	vendor\sqlite\sqlite3.c	/^typedef INT16_TYPE i16;            \/* 2-byte signed integer *\/$/;"	t	file:
i16	vendor\sqlite\sqlite3.c	/^typedef short int i16;            \/* 2-byte (or larger) signed integer *\/$/;"	t	file:
i64	vendor\sqlite\sqlite3.c	/^typedef sqlite3_int64 i64;        \/* 8-byte signed integer *\/$/;"	t	file:
i64	vendor\sqlite\sqlite3.c	/^typedef sqlite3_int64 i64;$/;"	t	file:
i64	vendor\sqlite\sqlite3.c	/^typedef sqlite_int64 i64;          \/* 8-byte signed integer *\/$/;"	t	file:
i8	vendor\sqlite\sqlite3.c	/^typedef INT8_TYPE i8;              \/* 1-byte signed integer *\/$/;"	t	file:
iAbsLevel	vendor\sqlite\sqlite3.c	/^  sqlite3_int64 iAbsLevel;        \/* Absolute level of input segments *\/$/;"	m	struct:IncrmergeWriter	file:
iAddr	vendor\sqlite\sqlite3.c	/^  int iAddr;                 \/* Address of next instruction to return *\/$/;"	m	struct:VdbeOpIter	file:
iAgg	vendor\sqlite\sqlite3.c	/^  i16 iAgg;              \/* Which entry in pAggInfo->aCol[] or ->aFunc[] *\/$/;"	m	struct:Expr	file:
iAlias	vendor\sqlite\sqlite3.c	/^        u16 iAlias;           \/* Index into Parse.aAlias[] for zName *\/$/;"	m	struct:ExprList::ExprList_item::__anon8::__anon9	file:
iArg	vendor\sqlite\sqlite3.c	/^  int iArg;                       \/* Index of function argument. *\/$/;"	m	struct:AuxData	file:
iArg	vendor\sqlite\sqlite3.c	/^  u32 iArg;                 \/* Extra argument *\/$/;"	m	struct:sPragmaNames	file:
iBatch	vendor\sqlite\sqlite3.c	/^  int iBatch;                    \/* Current insert batch *\/$/;"	m	struct:RowSet	file:
iBlock	vendor\sqlite\sqlite3.c	/^  sqlite3_int64 iBlock;           \/* Current block id *\/$/;"	m	struct:NodeWriter	file:
iBreak	vendor\sqlite\sqlite3.c	/^  int iBreak;               \/* Jump here to break out of the loop *\/$/;"	m	struct:WhereInfo	file:
iBufEnd	vendor\sqlite\sqlite3.c	/^  int iBufEnd;                    \/* Last byte of buffer to write *\/$/;"	m	struct:PmaWriter	file:
iBufStart	vendor\sqlite\sqlite3.c	/^  int iBufStart;                  \/* First byte of buffer to write *\/$/;"	m	struct:PmaWriter	file:
iCacheCnt	vendor\sqlite\sqlite3.c	/^  int iCacheCnt;       \/* Counter used to generate aColCache[].lru values *\/$/;"	m	struct:Parse	file:
iCacheLevel	vendor\sqlite\sqlite3.c	/^  int iCacheLevel;     \/* ColCache valid when aColCache[].iLevel<=iCacheLevel *\/$/;"	m	struct:Parse	file:
iCallback	vendor\sqlite\sqlite3.c	/^  u32 iCallback;             \/* Value to pass to log callback (or 0) *\/$/;"	m	struct:Wal	file:
iCell	vendor\sqlite\sqlite3.c	/^  u8 iCell;              \/* Cell index within the node *\/$/;"	m	struct:RtreeSearchPoint	file:
iChange	vendor\sqlite\sqlite3.c	/^  u32 iChange;                    \/* Counter incremented each transaction *\/$/;"	m	struct:WalIndexHdr	file:
iChild	vendor\sqlite\sqlite3.c	/^  sqlite3_int64 iChild;           \/* Pointer to child node *\/$/;"	m	struct:NodeReader	file:
iCol	vendor\sqlite\sqlite3.c	/^  int iCol;                       \/* Column of table to populate aTerm for *\/$/;"	m	struct:TermOffsetCtx	file:
iCol	vendor\sqlite\sqlite3.c	/^  int iCol;                       \/* Column snippet is extracted from *\/$/;"	m	struct:SnippetFragment	file:
iCol	vendor\sqlite\sqlite3.c	/^  int iCol;                       \/* Column token must occur in *\/$/;"	m	struct:Fts3DeferredToken	file:
iCol	vendor\sqlite\sqlite3.c	/^  int iCol;                       \/* Current value of 'col' column *\/$/;"	m	struct:Fts3auxCursor	file:
iCol	vendor\sqlite\sqlite3.c	/^  int iCol;                       \/* Extract snippet from this column *\/$/;"	m	struct:SnippetIter	file:
iCol	vendor\sqlite\sqlite3.c	/^  int iCol;                       \/* If !isPSample, the reason for inclusion *\/$/;"	m	struct:Stat4Sample	file:
iCol	vendor\sqlite\sqlite3.c	/^  int iCol;                       \/* The column the token must match *\/$/;"	m	struct:Fts3TokenAndCost	file:
iCol	vendor\sqlite\sqlite3.c	/^  int iCol;               \/* Table column this handle is open on *\/$/;"	m	struct:Incrblob	file:
iCol	vendor\sqlite\sqlite3.c	/^  int iCol;$/;"	m	struct:Fts3SegFilter	file:
iColFilter	vendor\sqlite\sqlite3.c	/^  int iColFilter;                 \/* If >=0, filter for this column *\/$/;"	m	struct:Fts3MultiSegReader	file:
iColumn	vendor\sqlite\sqlite3.c	/^     int iColumn;              \/* Column number *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_orderby	file:
iColumn	vendor\sqlite\sqlite3.c	/^     int iColumn;              \/* Column on left-hand side of constraint *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_constraint	file:
iColumn	vendor\sqlite\sqlite3.c	/^    i16 iColumn;          \/* Table column number *\/$/;"	m	struct:Parse::yColCache	file:
iColumn	vendor\sqlite\sqlite3.c	/^    int iColumn;             \/* Column number within the source table *\/$/;"	m	struct:AggInfo::AggInfo_col	file:
iColumn	vendor\sqlite\sqlite3.c	/^  int iColumn;               \/* Index of column this phrase must match *\/$/;"	m	struct:Fts3Phrase	file:
iColumn	vendor\sqlite\sqlite3.c	/^  ynVar iColumn;         \/* TK_COLUMN: column index.  -1 for rowid.$/;"	m	struct:Expr	file:
iConstExprReg	vendor\sqlite\sqlite3.c	/^      int iConstExprReg;      \/* Register in which Expr value is cached *\/$/;"	m	union:ExprList::ExprList_item::__anon8	file:
iContinue	vendor\sqlite\sqlite3.c	/^  int iContinue;            \/* Jump here to continue with next record *\/$/;"	m	struct:WhereInfo	file:
iCoord	vendor\sqlite\sqlite3.c	/^  int iCoord;                     \/* Index of constrained coordinate *\/$/;"	m	struct:RtreeConstraint	file:
iCur	vendor\sqlite\sqlite3.c	/^        int iCur;              \/* The VDBE cursor used by this IN operator *\/$/;"	m	struct:WhereLevel::__anon19::__anon20::InLoop	file:
iCur	vendor\sqlite\sqlite3.c	/^    int iCur;                                  \/* A cursor number *\/$/;"	m	union:Walker::__anon11	file:
iCurrent	vendor\sqlite\sqlite3.c	/^  int iCurrent;                   \/* First token of current snippet *\/$/;"	m	struct:SnippetIter	file:
iCurrentBlock	vendor\sqlite\sqlite3.c	/^  sqlite3_int64 iCurrentBlock;    \/* Current leaf block (or 0) *\/$/;"	m	struct:Fts3SegReader	file:
iCurrentTime	vendor\sqlite\sqlite3.c	/^  i64 iCurrentTime;       \/* Value of julianday('now') for this statement *\/$/;"	m	struct:Vdbe	file:
iCursor	vendor\sqlite\sqlite3.c	/^    int iCursor;      \/* The VDBE cursor number used to access this table *\/$/;"	m	struct:SrcList::SrcList_item	file:
iDataVersion	vendor\sqlite\sqlite3.c	/^  u32 iDataVersion;           \/* Changes whenever database content changes *\/$/;"	m	struct:Pager	file:
iDataVersion	vendor\sqlite\sqlite3.c	/^  u32 iDataVersion;  \/* Combines with pBt->pPager->iDataVersion *\/$/;"	m	struct:Btree	file:
iDb	vendor\sqlite\sqlite3.c	/^    u8 iDb;                     \/* Which db file is being initialized *\/$/;"	m	struct:sqlite3::sqlite3InitInfo	file:
iDb	vendor\sqlite\sqlite3.c	/^  i8 iDb;               \/* Index of cursor database in db->aDb[] (or -1) *\/$/;"	m	struct:VdbeCursor	file:
iDb	vendor\sqlite\sqlite3.c	/^  int iDb;              \/* Index in sqlite3.aDb[] of database holding pTab *\/$/;"	m	struct:AutoincInfo	file:
iDb	vendor\sqlite\sqlite3.c	/^  int iDb;             \/* The database containing the table to be locked *\/$/;"	m	struct:TableLock	file:
iDb	vendor\sqlite\sqlite3.c	/^  int iDb;            \/* 0 for main database.  1 for TEMP, 2.. for ATTACHed *\/$/;"	m	struct:__anon10	file:
iDefaultCol	vendor\sqlite\sqlite3.c	/^  int iDefaultCol;                    \/* Default column to query *\/$/;"	m	struct:ParseContext	file:
iDepth	vendor\sqlite\sqlite3.c	/^  int iDepth;                 \/* Current depth of the r-tree structure *\/$/;"	m	struct:Rtree	file:
iDestSchema	vendor\sqlite\sqlite3.c	/^  u32 iDestSchema;         \/* Original schema cookie in destination *\/$/;"	m	struct:sqlite3_backup	file:
iDistinct	vendor\sqlite\sqlite3.c	/^    int iDistinct;           \/* Ephemeral table used to enforce DISTINCT *\/$/;"	m	struct:AggInfo::AggInfo_func	file:
iDivisor	vendor\sqlite\sqlite3.c	/^  u32 iDivisor;   \/* Number of bits handled by each apSub[] entry. *\/$/;"	m	struct:Bitvec	file:
iDocid	vendor\sqlite\sqlite3.c	/^  sqlite3_int64 iDocid;          \/* Current docid (if pList!=0) *\/$/;"	m	struct:Fts3Doclist	file:
iDocid	vendor\sqlite\sqlite3.c	/^  sqlite3_int64 iDocid;      \/* Current docid *\/$/;"	m	struct:Fts3Expr	file:
iDocid	vendor\sqlite\sqlite3.c	/^  sqlite3_int64 iDocid;$/;"	m	struct:Fts3SegReader	file:
iDocid	vendor\sqlite\sqlite3.c	/^  sqlite3_int64 iDocid;$/;"	m	struct:TermOffsetCtx	file:
iDocid	vendor\sqlite\sqlite3.c	/^  sqlite3_int64 iDocid;$/;"	m	struct:TokenDoclist	file:
iDoclistToken	vendor\sqlite\sqlite3.c	/^  int iDoclistToken;$/;"	m	struct:Fts3Phrase	file:
iECursor	vendor\sqlite\sqlite3.c	/^  int iECursor;         \/* Cursor number for the sorter *\/$/;"	m	struct:SortCtx	file:
iEnd	vendor\sqlite\sqlite3.c	/^  int iEnd;                       \/* Current 'end' value *\/$/;"	m	struct:Fts3tokCursor	file:
iEnd	vendor\sqlite\sqlite3.c	/^  sqlite3_int64 iEnd;             \/* Block number of last allocated block *\/$/;"	m	struct:IncrmergeWriter	file:
iEndBlock	vendor\sqlite\sqlite3.c	/^  sqlite3_int64 iEndBlock;        \/* Rowid of final block in segment (or 0) *\/$/;"	m	struct:Fts3SegReader	file:
iEof	vendor\sqlite\sqlite3.c	/^  i64 iEof;                       \/* Bytes of data stored in pFd *\/$/;"	m	struct:SorterFile	file:
iEof	vendor\sqlite\sqlite3.c	/^  i64 iEof;                   \/* 1 byte past EOF for this PmaReader *\/$/;"	m	struct:PmaReader	file:
iEquiv	vendor\sqlite\sqlite3.c	/^  unsigned char iEquiv;      \/* Next unused slot in aEquiv[] *\/$/;"	m	struct:WhereScan	file:
iFirst	vendor\sqlite\sqlite3.c	/^  sqlite3_int64 iFirst;           \/* First slot in %_segments written *\/$/;"	m	struct:SegmentWriter	file:
iFixedOp	vendor\sqlite\sqlite3.c	/^  int iFixedOp;        \/* Never back out opcodes iFixedOp-1 or earlier *\/$/;"	m	struct:Parse	file:
iForeGuard	vendor\sqlite\sqlite3.c	/^  int iForeGuard;                     \/* Guard word for sanity *\/$/;"	m	struct:MemBlockHdr	file:
iFree	vendor\sqlite\sqlite3.c	/^  sqlite3_int64 iFree;            \/* Next free slot in %_segments *\/$/;"	m	struct:SegmentWriter	file:
iFrom	vendor\sqlite\sqlite3.c	/^    int iFrom;            \/* Index of column in pFrom *\/$/;"	m	struct:FKey::sColMap	file:
iFrom	vendor\sqlite\sqlite3.c	/^  u8 iFrom;             \/* Which entry in the FROM clause *\/$/;"	m	struct:WhereLevel	file:
iGeneration	vendor\sqlite\sqlite3.c	/^  int iGeneration;     \/* Generation counter.  Incremented with each change *\/$/;"	m	struct:Schema	file:
iGet	vendor\sqlite\sqlite3.c	/^  int iGet;                 \/* Index of current sample accessed by stat_get() *\/$/;"	m	struct:Stat4Accum	file:
iHash	vendor\sqlite\sqlite3.c	/^  u32 iHash;                      \/* Tiebreaker hash *\/$/;"	m	struct:Stat4Sample	file:
iHdrOffset	vendor\sqlite\sqlite3.c	/^  i64 iHdrOffset;              \/* See above *\/$/;"	m	struct:PagerSavepoint	file:
iHdrOffset	vendor\sqlite\sqlite3.c	/^  u32 iHdrOffset;       \/* Offset to next unparsed byte of the header *\/$/;"	m	struct:VdbeCursor	file:
iHead	vendor\sqlite\sqlite3.c	/^  int iHead;                      \/* Next value in position list *\/$/;"	m	struct:SnippetPhrase	file:
iIdx	vendor\sqlite\sqlite3.c	/^  int iIdx;                       \/* Index of *output* segment in iAbsLevel+1 *\/$/;"	m	struct:IncrmergeWriter	file:
iIdx	vendor\sqlite\sqlite3.c	/^  int iIdx;                       \/* Index within level, or 0x7FFFFFFF for PT *\/$/;"	m	struct:Fts3SegReader	file:
iIdxCur	vendor\sqlite\sqlite3.c	/^  int iIdxCur;          \/* The VDBE cursor used to access pIdx *\/$/;"	m	struct:WhereLevel	file:
iJD	vendor\sqlite\sqlite3.c	/^  sqlite3_int64 iJD; \/* The julian day number times 86400000 *\/$/;"	m	struct:DateTime	file:
iKey	vendor\sqlite\sqlite3.c	/^  unsigned int iKey;             \/* Key value (page number) *\/$/;"	m	struct:PgHdr1	file:
iLangid	vendor\sqlite\sqlite3.c	/^  int iLangid;                        \/* Language id used with tokenizer *\/$/;"	m	struct:ParseContext	file:
iLangid	vendor\sqlite\sqlite3.c	/^  int iLangid;                    \/* Language being queried for *\/$/;"	m	struct:Fts3Cursor	file:
iLangid	vendor\sqlite\sqlite3.c	/^  int iLangid;                    \/* Language id to query *\/$/;"	m	struct:Fts3auxCursor	file:
iLastCol	vendor\sqlite\sqlite3.c	/^  sqlite3_int64 iLastCol;$/;"	m	struct:PendingList	file:
iLastDocid	vendor\sqlite\sqlite3.c	/^  sqlite3_int64 iLastDocid;$/;"	m	struct:PendingList	file:
iLastPos	vendor\sqlite\sqlite3.c	/^  sqlite3_int64 iLastPos;$/;"	m	struct:PendingList	file:
iLeafEndBlock	vendor\sqlite\sqlite3.c	/^  sqlite3_int64 iLeafEndBlock;    \/* Rowid of final leaf block to traverse *\/$/;"	m	struct:Fts3SegReader	file:
iLeftJoin	vendor\sqlite\sqlite3.c	/^  int iLeftJoin;        \/* Memory cell used to implement LEFT OUTER JOIN *\/$/;"	m	struct:WhereLevel	file:
iLevel	vendor\sqlite\sqlite3.c	/^    int iLevel;           \/* Nesting level *\/$/;"	m	struct:Parse::yColCache	file:
iLevel	vendor\sqlite\sqlite3.c	/^  int iLevel;                       \/* Level of current node or entry *\/$/;"	m	struct:sqlite3_rtree_query_info	file:
iLevel	vendor\sqlite\sqlite3.c	/^  int iLevel;             \/* Which level of the tree we are on *\/$/;"	m	struct:TreeView	file:
iLevel	vendor\sqlite\sqlite3.c	/^  u8 iLevel;             \/* 0=entries.  1=leaf node.  2+ for higher *\/$/;"	m	struct:RtreeSearchPoint	file:
iLikeRepCntr	vendor\sqlite\sqlite3.c	/^  int iLikeRepCntr;     \/* LIKE range processing counter register *\/$/;"	m	struct:WhereLevel	file:
iLimit	vendor\sqlite\sqlite3.c	/^  int iLimit, iOffset;   \/* Memory registers holding LIMIT & OFFSET counters *\/$/;"	m	struct:Select	file:
iMaster	vendor\sqlite\sqlite3.c	/^  u32 iMaster;$/;"	m	struct:Mem3Global	file:
iMaxDocid	vendor\sqlite\sqlite3.c	/^  i64 iMaxDocid;                  \/* Maximum docid to return *\/$/;"	m	struct:Fts3Cursor	file:
iMaxKey	vendor\sqlite\sqlite3.c	/^  unsigned int iMaxKey;               \/* Largest key seen since xTruncate() *\/$/;"	m	struct:PCache1	file:
iMem	vendor\sqlite\sqlite3.c	/^    int iMem;                \/* Memory location that acts as accumulator *\/$/;"	m	struct:AggInfo::AggInfo_col	file:
iMem	vendor\sqlite\sqlite3.c	/^    int iMem;                \/* Memory location that acts as accumulator *\/$/;"	m	struct:AggInfo::AggInfo_func	file:
iMemory	vendor\sqlite\sqlite3.c	/^  int iMemory;                    \/* Offset of free space in list.aMemory *\/$/;"	m	struct:VdbeSorter	file:
iMin	vendor\sqlite\sqlite3.c	/^  int iMin;                 \/* Index in a[] of entry with minimum score *\/$/;"	m	struct:Stat4Accum	file:
iMinDocid	vendor\sqlite\sqlite3.c	/^  i64 iMinDocid;                  \/* Minimum docid to return *\/$/;"	m	struct:Fts3Cursor	file:
iNext	vendor\sqlite\sqlite3.c	/^    int iNext;                    \/* Next slot in aIndex[] not yet returned *\/$/;"	m	struct:WalIterator::WalSegment	file:
iNext	vendor\sqlite\sqlite3.c	/^    int iNext;                    \/* Offset within aMemory of next record *\/$/;"	m	union:SorterRecord::__anon17	file:
iNext	vendor\sqlite\sqlite3.c	/^  Pgno iNext;              \/* Page number of the next source page to copy *\/$/;"	m	struct:sqlite3_backup	file:
iNextSelectId	vendor\sqlite\sqlite3.c	/^  int iNextSelectId;        \/* Next available select ID for EXPLAIN output *\/$/;"	m	struct:Parse	file:
iNode	vendor\sqlite\sqlite3.c	/^  i64 iNode;                  \/* The node number *\/$/;"	m	struct:RtreeNode	file:
iNodeSize	vendor\sqlite\sqlite3.c	/^  int iNodeSize;              \/* Size in bytes of each node in the node table *\/$/;"	m	struct:Rtree	file:
iOff	vendor\sqlite\sqlite3.c	/^  int iOff;                       \/* Current offset within aInput[] *\/$/;"	m	struct:unicode_cursor	file:
iOff	vendor\sqlite\sqlite3.c	/^  int iOff;                       \/* Current offset within aNode[] *\/$/;"	m	struct:NodeReader	file:
iOff	vendor\sqlite\sqlite3.c	/^  int iOff;                       \/* Offset of this term from read positions *\/$/;"	m	struct:TermOffset	file:
iOffset	vendor\sqlite\sqlite3.c	/^  i64 iOffset;                 \/* Starting offset in main journal *\/$/;"	m	struct:PagerSavepoint	file:
iOffset	vendor\sqlite\sqlite3.c	/^  int iLimit, iOffset;   \/* Memory registers holding LIMIT & OFFSET counters *\/$/;"	m	struct:Select	file:
iOffset	vendor\sqlite\sqlite3.c	/^  int iOffset;                 \/* current position in pInput *\/$/;"	m	struct:simple_tokenizer_cursor	file:
iOffset	vendor\sqlite\sqlite3.c	/^  int iOffset;                 \/* current position in zInput *\/$/;"	m	struct:porter_tokenizer_cursor	file:
iOffset	vendor\sqlite\sqlite3.c	/^  int iOffset;            \/* Byte offset of blob in cursor data *\/$/;"	m	struct:Incrblob	file:
iOffset	vendor\sqlite\sqlite3.c	/^  sqlite3_int64 iOffset;          \/* Offset from the beginning of the file *\/$/;"	m	struct:FilePoint	file:
iOp	vendor\sqlite\sqlite3.c	/^  int iOp;                        \/* Instruction number of OP_Function opcode *\/$/;"	m	struct:AuxData	file:
iOp	vendor\sqlite\sqlite3.c	/^  int iOp;              \/* Instruction number of OP_Function *\/$/;"	m	struct:sqlite3_context	file:
iOrDocid	vendor\sqlite\sqlite3.c	/^  i64 iOrDocid;$/;"	m	struct:Fts3Phrase	file:
iOrderByCol	vendor\sqlite\sqlite3.c	/^        u16 iOrderByCol;      \/* For ORDER BY, column number in result set *\/$/;"	m	struct:ExprList::ExprList_item::__anon8::__anon9	file:
iOverflow	vendor\sqlite\sqlite3.c	/^  u16 iOverflow; \/* Offset to overflow page number.  Zero if no overflow *\/$/;"	m	struct:CellInfo	file:
iPKey	vendor\sqlite\sqlite3.c	/^  i16 iPKey;           \/* If not negative, use aCol[iPKey] as the primary key *\/$/;"	m	struct:Table	file:
iPage	vendor\sqlite\sqlite3.c	/^  i16 iPage;                            \/* Index of current page in apPage *\/$/;"	m	struct:BtCursor	file:
iParent	vendor\sqlite\sqlite3.c	/^  int iParent;            \/* Disable pWC->a[iParent] when this term disabled *\/$/;"	m	struct:WhereTerm	file:
iPartIdxTab	vendor\sqlite\sqlite3.c	/^  int iPartIdxTab;     \/* Table corresponding to a partial index *\/$/;"	m	struct:Parse	file:
iPkSortOrder	vendor\sqlite\sqlite3.c	/^  u8 iPkSortOrder;          \/* ASC or DESC for INTEGER PRIMARY KEY *\/$/;"	m	struct:Parse	file:
iPos	vendor\sqlite\sqlite3.c	/^  int iPos;                       \/* Current 'pos' value *\/$/;"	m	struct:Fts3tokCursor	file:
iPos	vendor\sqlite\sqlite3.c	/^  int iPos;                       \/* Current position *\/$/;"	m	struct:LcsIterator	file:
iPos	vendor\sqlite\sqlite3.c	/^  int iPos;                       \/* Index of first token in snippet *\/$/;"	m	struct:SnippetFragment	file:
iPos	vendor\sqlite\sqlite3.c	/^  int iPos;                       \/* Position just read from pList *\/$/;"	m	struct:TermOffset	file:
iPosOffset	vendor\sqlite\sqlite3.c	/^  int iPosOffset;                 \/* Tokens count up to end of this phrase *\/$/;"	m	struct:LcsIterator	file:
iPrev	vendor\sqlite\sqlite3.c	/^  u8 iPrev;                       \/* Previous thread used to flush PMA *\/$/;"	m	struct:VdbeSorter	file:
iPrevDocid	vendor\sqlite\sqlite3.c	/^  sqlite_int64 iPrevDocid;        \/* Docid of most recently inserted document *\/$/;"	m	struct:Fts3Table	file:
iPrevId	vendor\sqlite\sqlite3.c	/^  sqlite3_int64 iPrevId;          \/* Previous id read from aDoclist *\/$/;"	m	struct:Fts3Cursor	file:
iPrevLangid	vendor\sqlite\sqlite3.c	/^  int iPrevLangid;                \/* Langid of recently inserted document *\/$/;"	m	struct:Fts3Table	file:
iPrior	vendor\sqlite\sqlite3.c	/^  int iPrior;                     \/* Last result returned from the iterator *\/$/;"	m	struct:WalIterator	file:
iPrn	vendor\sqlite\sqlite3.c	/^  u32 iPrn;                 \/* Pseudo-random number used for sampling *\/$/;"	m	struct:Stat4Accum	file:
iRangeReg	vendor\sqlite\sqlite3.c	/^  int iRangeReg;       \/* First register in temporary register block *\/$/;"	m	struct:Parse	file:
iReadOff	vendor\sqlite\sqlite3.c	/^  i64 iReadOff;               \/* Current read offset *\/$/;"	m	struct:PmaReader	file:
iReg	vendor\sqlite\sqlite3.c	/^    int iReg;             \/* Reg with value of this column. 0 means none. *\/$/;"	m	struct:Parse::yColCache	file:
iReinsertHeight	vendor\sqlite\sqlite3.c	/^  int iReinsertHeight;        \/* Height of sub-trees Reinsert() has run on *\/$/;"	m	struct:Rtree	file:
iRightJoinTable	vendor\sqlite\sqlite3.c	/^  i16 iRightJoinTable;   \/* If EP_FromJoin, the right table of the join *\/$/;"	m	struct:Expr	file:
iRowid	vendor\sqlite\sqlite3.c	/^    i64 iRowid;                     \/* Rowid in main table of the key *\/$/;"	m	union:Stat4Sample::__anon18	file:
iRowid	vendor\sqlite\sqlite3.c	/^  i64 iRowid;                                 \/* Node or entry ID *\/$/;"	m	struct:RtreeCell	file:
iRowid	vendor\sqlite\sqlite3.c	/^  int iRowid;                     \/* Current 'rowid' value *\/$/;"	m	struct:Fts3tokCursor	file:
iRowid	vendor\sqlite\sqlite3.c	/^  sqlite3_int64 iRowid;             \/* Rowid for current entry *\/$/;"	m	struct:sqlite3_rtree_query_info	file:
iRowid	vendor\sqlite\sqlite3.c	/^  sqlite3_int64 iRowid;           \/* Current rowid *\/$/;"	m	struct:Fts3auxCursor	file:
iSDParm	vendor\sqlite\sqlite3.c	/^  int iSDParm;         \/* A parameter used by the eDest disposal method *\/$/;"	m	struct:SelectDest	file:
iSavepoint	vendor\sqlite\sqlite3.c	/^  int iSavepoint;           \/* Depth of the SAVEPOINT stack *\/$/;"	m	struct:VTable	file:
iSdst	vendor\sqlite\sqlite3.c	/^  int iSdst;           \/* Base register where results are written *\/$/;"	m	struct:SelectDest	file:
iSelectID	vendor\sqlite\sqlite3.c	/^  int iSelectID;                  \/* The "Select-ID" for this loop *\/$/;"	m	struct:ScanStatus	file:
iSelectId	vendor\sqlite\sqlite3.c	/^    u8 iSelectId;     \/* If pSelect!=0, the id of the sub-select in EQP *\/$/;"	m	struct:SrcList::SrcList_item	file:
iSelectId	vendor\sqlite\sqlite3.c	/^  int iSelectId;            \/* ID of current select for EXPLAIN output *\/$/;"	m	struct:Parse	file:
iSize	vendor\sqlite\sqlite3.c	/^  i64 iSize;                          \/* Size of this allocation *\/$/;"	m	struct:MemBlockHdr	file:
iSize	vendor\sqlite\sqlite3.c	/^  int iSize;                      \/* Amount of zBuf[] currently used *\/$/;"	m	struct:JournalFile	file:
iSize	vendor\sqlite\sqlite3.c	/^  u32 iSize;      \/* Maximum bit index.  Max iSize is 4,294,967,296. *\/$/;"	m	struct:Bitvec	file:
iSortIdx	vendor\sqlite\sqlite3.c	/^  u8 iSortIdx;          \/* Sorting index number.  0==None *\/$/;"	m	struct:WhereLoop	file:
iSorterColumn	vendor\sqlite\sqlite3.c	/^    int iSorterColumn;       \/* Column number in the sorting index *\/$/;"	m	struct:AggInfo::AggInfo_col	file:
iSrcLine	vendor\sqlite\sqlite3.c	/^  int iSrcLine;            \/* Source-code line that generated this opcode *\/$/;"	m	struct:VdbeOp	file:
iStart	vendor\sqlite\sqlite3.c	/^  int iStart;                     \/* Current 'start' value *\/$/;"	m	struct:Fts3tokCursor	file:
iStart	vendor\sqlite\sqlite3.c	/^  sqlite3_int64 iStart;           \/* Block number of first allocated block *\/$/;"	m	struct:IncrmergeWriter	file:
iStartBlock	vendor\sqlite\sqlite3.c	/^  sqlite3_int64 iStartBlock;      \/* Rowid of first leaf block to traverse *\/$/;"	m	struct:Fts3SegReader	file:
iStartOff	vendor\sqlite\sqlite3.c	/^  i64 iStartOff;                  \/* Offset to start writing file at *\/$/;"	m	struct:IncrMerger	file:
iStatement	vendor\sqlite\sqlite3.c	/^  int iStatement;         \/* Statement number (or 0 if has not opened stmt) *\/$/;"	m	struct:Vdbe	file:
iStrategy	vendor\sqlite\sqlite3.c	/^  int iStrategy;                    \/* Copy of idxNum search parameter *\/$/;"	m	struct:RtreeCursor	file:
iSub	vendor\sqlite\sqlite3.c	/^  int iSub;                  \/* 0 = main program, 1 = first sub-program etc. *\/$/;"	m	struct:VdbeOpIter	file:
iSubRec	vendor\sqlite\sqlite3.c	/^  Pgno iSubRec;                \/* Index of first record in sub-journal *\/$/;"	m	struct:PagerSavepoint	file:
iSum	vendor\sqlite\sqlite3.c	/^  i64 iSum;         \/* Integer sum *\/   $/;"	m	struct:SumCtx	file:
iSyncPoint	vendor\sqlite\sqlite3.c	/^  sqlite3_int64 iSyncPoint;    \/* Fsync at this offset *\/$/;"	m	struct:WalWriter	file:
iTab	vendor\sqlite\sqlite3.c	/^  int iTab;            \/* The root page of the table to be locked *\/$/;"	m	struct:TableLock	file:
iTab	vendor\sqlite\sqlite3.c	/^  u8 iTab;              \/* Position in FROM clause of table for this loop *\/$/;"	m	struct:WhereLoop	file:
iTabCur	vendor\sqlite\sqlite3.c	/^  int iTabCur;          \/* The VDBE cursor used to access the table *\/$/;"	m	struct:WhereLevel	file:
iTable	vendor\sqlite\sqlite3.c	/^    int iTable;              \/* Cursor number of the source table *\/$/;"	m	struct:AggInfo::AggInfo_col	file:
iTable	vendor\sqlite\sqlite3.c	/^    int iTable;           \/* Table cursor number *\/$/;"	m	struct:Parse::yColCache	file:
iTable	vendor\sqlite\sqlite3.c	/^  Pgno iTable;          \/* Root page of table *\/$/;"	m	struct:BtLock	file:
iTable	vendor\sqlite\sqlite3.c	/^  int iTable;            \/* TK_COLUMN: cursor number of table holding column$/;"	m	struct:Expr	file:
iTail	vendor\sqlite\sqlite3.c	/^  int iTail;                      \/* Next value in trailing position list *\/$/;"	m	struct:SnippetPhrase	file:
iTerm	vendor\sqlite\sqlite3.c	/^  int iTerm;$/;"	m	struct:TermOffsetCtx	file:
iTermOffset	vendor\sqlite\sqlite3.c	/^     int iTermOffset;          \/* Used internally - xBestIndex should ignore *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_constraint	file:
iToken	vendor\sqlite\sqlite3.c	/^  int iToken;                     \/* Index of next token to be returned *\/$/;"	m	struct:unicode_cursor	file:
iToken	vendor\sqlite\sqlite3.c	/^  int iToken;                     \/* Position of token in phrase *\/$/;"	m	struct:Fts3TokenAndCost	file:
iToken	vendor\sqlite\sqlite3.c	/^  int iToken;                  \/* index of next token to be returned *\/$/;"	m	struct:porter_tokenizer_cursor	file:
iToken	vendor\sqlite\sqlite3.c	/^  int iToken;                  \/* index of next token to be returned *\/$/;"	m	struct:simple_tokenizer_cursor	file:
iToken	vendor\sqlite\sqlite3.c	/^  int iToken;$/;"	m	struct:IcuCursor	file:
iTop	vendor\sqlite\sqlite3.c	/^  int iTop;                 \/* The very beginning of the WHERE loop *\/$/;"	m	struct:WhereInfo	file:
iVal	vendor\sqlite\sqlite3.c	/^  int iVal;$/;"	m	struct:ValueNewStat4Ctx	file:
iValue	vendor\sqlite\sqlite3.c	/^    int iValue;            \/* Non-negative integer value if EP_IntValue *\/$/;"	m	union:Expr::__anon6	file:
iVersion	vendor\sqlite\sqlite3.c	/^  int iVersion;            \/* Structure version number (currently 3) *\/$/;"	m	struct:sqlite3_vfs	file:
iVersion	vendor\sqlite\sqlite3.c	/^  int iVersion;$/;"	m	struct:sqlite3_io_methods	file:
iVersion	vendor\sqlite\sqlite3.c	/^  int iVersion;$/;"	m	struct:sqlite3_module	file:
iVersion	vendor\sqlite\sqlite3.c	/^  int iVersion;$/;"	m	struct:sqlite3_pcache_methods2	file:
iVersion	vendor\sqlite\sqlite3.c	/^  int iVersion;$/;"	m	struct:sqlite3_tokenizer_module	file:
iVersion	vendor\sqlite\sqlite3.c	/^  u32 iVersion;                   \/* Wal-index version *\/$/;"	m	struct:WalIndexHdr	file:
iWriteOff	vendor\sqlite\sqlite3.c	/^  i64 iWriteOff;                  \/* Offset of start of buffer in file *\/$/;"	m	struct:PmaWriter	file:
iZero	vendor\sqlite\sqlite3.c	/^    int iZero;                    \/* Frame number associated with aPgno[0] *\/$/;"	m	struct:WalIterator::WalSegment	file:
icuCaseFunc16	vendor\sqlite\sqlite3.c	/^static void icuCaseFunc16(sqlite3_context *p, int nArg, sqlite3_value **apArg){$/;"	f	file:
icuClose	vendor\sqlite\sqlite3.c	/^static int icuClose(sqlite3_tokenizer_cursor *pCursor){$/;"	f	file:
icuCollationColl	vendor\sqlite\sqlite3.c	/^static int icuCollationColl($/;"	f	file:
icuCollationDel	vendor\sqlite\sqlite3.c	/^static void icuCollationDel(void *pCtx){$/;"	f	file:
icuCreate	vendor\sqlite\sqlite3.c	/^static int icuCreate($/;"	f	file:
icuDestroy	vendor\sqlite\sqlite3.c	/^static int icuDestroy(sqlite3_tokenizer *pTokenizer){$/;"	f	file:
icuFunctionError	vendor\sqlite\sqlite3.c	/^static void icuFunctionError($/;"	f	file:
icuLikeCompare	vendor\sqlite\sqlite3.c	/^static int icuLikeCompare($/;"	f	file:
icuLikeFunc	vendor\sqlite\sqlite3.c	/^static void icuLikeFunc($/;"	f	file:
icuLoadCollation	vendor\sqlite\sqlite3.c	/^static void icuLoadCollation($/;"	f	file:
icuNext	vendor\sqlite\sqlite3.c	/^static int icuNext($/;"	f	file:
icuOpen	vendor\sqlite\sqlite3.c	/^static int icuOpen($/;"	f	file:
icuRegexpDelete	vendor\sqlite\sqlite3.c	/^static void icuRegexpDelete(void *p){$/;"	f	file:
icuRegexpFunc	vendor\sqlite\sqlite3.c	/^static void icuRegexpFunc(sqlite3_context *p, int nArg, sqlite3_value **apArg){$/;"	f	file:
icuTokenizerModule	vendor\sqlite\sqlite3.c	/^static const sqlite3_tokenizer_module icuTokenizerModule = {$/;"	v	file:
id	vendor\sqlite\sqlite3.c	/^  int id;                    \/* Mutex type *\/$/;"	m	struct:sqlite3_mutex	file:
id	vendor\sqlite\sqlite3.c	/^  int id;     \/* The mutex type *\/$/;"	m	struct:sqlite3_debug_mutex	file:
id	vendor\sqlite\sqlite3.c	/^  sqlite3_int64 id;      \/* Node ID *\/$/;"	m	struct:RtreeSearchPoint	file:
id	vendor\sqlite\sqlite3.c	/^  u8 id;                     \/* Id of this connection with its winShmNode *\/$/;"	m	struct:winShm	file:
id	vendor\sqlite\sqlite3.c	/^  u8 id;                     \/* Id of this connection within its unixShmNode *\/$/;"	m	struct:unixShm	file:
id	vendor\sqlite\sqlite3.c	/^  unsigned id;             \/* The thread identifier *\/$/;"	m	struct:SQLiteThread	file:
identLength	vendor\sqlite\sqlite3.c	/^static int identLength(const char *z){$/;"	f	file:
identPut	vendor\sqlite\sqlite3.c	/^static void identPut(char *z, int *pIdx, char *zSignedIdent){$/;"	f	file:
idx	vendor\sqlite\sqlite3.c	/^    int idx;          \/* Index in some Table.aCol[] of a column named zName *\/$/;"	m	struct:IdList::IdList_item	file:
idxHash	vendor\sqlite\sqlite3.c	/^  Hash idxHash;        \/* All (named) indices indexed by name *\/$/;"	m	struct:Schema	file:
idxNum	vendor\sqlite\sqlite3.c	/^      int idxNum;            \/* Index number *\/$/;"	m	struct:WhereLoop::__anon21::__anon23	file:
idxNum	vendor\sqlite\sqlite3.c	/^  int idxNum;                \/* Number used to identify the index *\/$/;"	m	struct:sqlite3_index_info	file:
idxStr	vendor\sqlite\sqlite3.c	/^      char *idxStr;          \/* Index identifier string *\/$/;"	m	struct:WhereLoop::__anon21::__anon23	file:
idxStr	vendor\sqlite\sqlite3.c	/^  char *idxStr;              \/* String, possibly obtained from sqlite3_malloc *\/$/;"	m	struct:sqlite3_index_info	file:
idxType	vendor\sqlite\sqlite3.c	/^  unsigned idxType:2;      \/* 1==UNIQUE, 2==PRIMARY KEY, 0==CREATE INDEX *\/$/;"	m	struct:Index	file:
idxaff	vendor\sqlite\sqlite3.c	/^  char idxaff;               \/* Must match this affinity, if zCollName!=NULL *\/$/;"	m	struct:WhereScan	file:
imposterTable	vendor\sqlite\sqlite3.c	/^    u8 imposterTable;           \/* Building an imposter table *\/$/;"	m	struct:sqlite3::sqlite3InitInfo	file:
in	vendor\sqlite\sqlite3.c	/^    } in;                 \/* Used when pWLoop->wsFlags&WHERE_IN_ABLE *\/$/;"	m	union:WhereLevel::__anon19	typeref:struct:WhereLevel::__anon19::__anon20	file:
inNormalWrite	vendor\sqlite\sqlite3.c	/^  unsigned char inNormalWrite;   \/* True if in a normal write operation *\/$/;"	m	struct:unixFile	file:
inProgress	vendor\sqlite\sqlite3.c	/^  int inProgress;                   \/* True while initialization in progress *\/$/;"	m	struct:Sqlite3Config	file:
inTrans	vendor\sqlite\sqlite3.c	/^  u8 inTrans;        \/* TRANS_NONE, TRANS_READ or TRANS_WRITE *\/$/;"	m	struct:Btree	file:
inTransaction	vendor\sqlite\sqlite3.c	/^  int inTransaction;     \/* True after xBegin but before xCommit\/xRollback *\/$/;"	m	struct:Fts3Table	file:
inTransaction	vendor\sqlite\sqlite3.c	/^  u8 inTransaction;     \/* Transaction state *\/$/;"	m	struct:BtShared	file:
inVtabMethod	vendor\sqlite\sqlite3.c	/^  bft inVtabMethod:2;     \/* See comments above *\/$/;"	m	struct:Vdbe	file:
incrAggDepth	vendor\sqlite\sqlite3.c	/^static int incrAggDepth(Walker *pWalker, Expr *pExpr){$/;"	f	file:
incrAggFunctionDepth	vendor\sqlite\sqlite3.c	/^static void incrAggFunctionDepth(Expr *pExpr, int N){$/;"	f	file:
incrPhraseTokenNext	vendor\sqlite\sqlite3.c	/^static int incrPhraseTokenNext($/;"	f	file:
incrVacuum	vendor\sqlite\sqlite3.c	/^  u8 incrVacuum;        \/* True if incr-vacuum is enabled *\/$/;"	m	struct:BtShared	file:
incrVacuumStep	vendor\sqlite\sqlite3.c	/^static int incrVacuumStep(BtShared *pBt, Pgno nFin, Pgno iLastPg, int bCommit){$/;"	f	file:
indexMightHelpWithOrderBy	vendor\sqlite\sqlite3.c	/^static int indexMightHelpWithOrderBy($/;"	f	file:
indexable	vendor\sqlite\sqlite3.c	/^  Bitmask indexable;       \/* Bitmask of all indexable tables in the clause *\/$/;"	m	struct:WhereOrInfo	file:
info	vendor\sqlite\sqlite3.c	/^  CellInfo info;            \/* A parse of the cell we are pointing at *\/$/;"	m	struct:BtCursor	file:
init	vendor\sqlite\sqlite3.c	/^  } init;$/;"	m	struct:sqlite3	typeref:struct:sqlite3::sqlite3InitInfo	file:
initAvgEq	vendor\sqlite\sqlite3.c	/^static void initAvgEq(Index *pIdx){$/;"	f	file:
initMaskSet	vendor\sqlite\sqlite3.c	115582;"	d	file:
ino	vendor\sqlite\sqlite3.c	/^  ino_t ino;                  \/* Inode number *\/$/;"	m	struct:unixFileId	file:
inodeList	vendor\sqlite\sqlite3.c	/^static unixInodeInfo *inodeList = 0;$/;"	v	file:
insertBinaryOperator	vendor\sqlite\sqlite3.c	/^static void insertBinaryOperator($/;"	f	file:
insertCell	vendor\sqlite\sqlite3.c	/^static void insertCell($/;"	f	file:
insertElement	vendor\sqlite\sqlite3.c	/^static void insertElement($/;"	f	file:
instrFunc	vendor\sqlite\sqlite3.c	/^static void instrFunc($/;"	f	file:
intKey	vendor\sqlite\sqlite3.c	/^  u8 intKey;           \/* True if table b-trees.  False for index b-trees *\/$/;"	m	struct:MemPage	file:
intKeyLeaf	vendor\sqlite\sqlite3.c	/^  u8 intKeyLeaf;       \/* True if the leaf of an intKey table *\/$/;"	m	struct:MemPage	file:
intTestFunc	vendor\sqlite\sqlite3.c	/^static void intTestFunc($/;"	f	file:
interruptx	vendor\sqlite\sqlite3.c	/^  void  (*interruptx)(sqlite3*);$/;"	m	struct:sqlite3_api_routines	file:
invalidateAllOverflowCache	vendor\sqlite\sqlite3.c	/^static void invalidateAllOverflowCache(BtShared *pBt){$/;"	f	file:
invalidateIncrblobCursors	vendor\sqlite\sqlite3.c	/^static void invalidateIncrblobCursors($/;"	f	file:
invalidateIncrblobCursors	vendor\sqlite\sqlite3.c	53287;"	d	file:
invalidateOverflowCache	vendor\sqlite\sqlite3.c	53240;"	d	file:
invalidateTempStorage	vendor\sqlite\sqlite3.c	/^static int invalidateTempStorage(Parse *pParse){$/;"	f	file:
invokeValueDestructor	vendor\sqlite\sqlite3.c	/^static int invokeValueDestructor($/;"	f	file:
isAttached	vendor\sqlite\sqlite3.c	/^  int isAttached;          \/* True once backup has been registered with pager *\/$/;"	m	struct:sqlite3_backup	file:
isCandidateForInOpt	vendor\sqlite\sqlite3.c	/^static int isCandidateForInOpt(Select *p){$/;"	f	file:
isConsonant	vendor\sqlite\sqlite3.c	/^static int isConsonant(const char *z){$/;"	f	file:
isCorrelated	vendor\sqlite\sqlite3.c	/^    unsigned isCorrelated :1;  \/* True if sub-query is correlated *\/$/;"	m	struct:SrcList::SrcList_item	file:
isCovering	vendor\sqlite\sqlite3.c	/^  unsigned isCovering:1;   \/* True if this is a covering index *\/$/;"	m	struct:Index	file:
isDate	vendor\sqlite\sqlite3.c	/^static int isDate($/;"	f	file:
isDeferred	vendor\sqlite\sqlite3.c	/^  u8 isDeferred;       \/* True if constraint checking is deferred till COMMIT *\/$/;"	m	struct:FKey	file:
isDelim	vendor\sqlite\sqlite3.c	140466;"	d	file:
isDirty	vendor\sqlite\sqlite3.c	/^  int isDirty;                \/* True if the node needs to be written to disk *\/$/;"	m	struct:RtreeNode	file:
isDistinctRedundant	vendor\sqlite\sqlite3.c	/^static int isDistinctRedundant($/;"	f	file:
isEof	vendor\sqlite\sqlite3.c	/^  int isEof;                      \/* True if cursor is at EOF *\/$/;"	m	struct:Fts3auxCursor	file:
isEof	vendor\sqlite\sqlite3.c	/^  u8 isEof;                       \/* True if at End Of Results *\/$/;"	m	struct:Fts3Cursor	file:
isEphemeral	vendor\sqlite\sqlite3.c	/^  Bool isEphemeral:1;   \/* True for an ephemeral table *\/$/;"	m	struct:VdbeCursor	file:
isError	vendor\sqlite\sqlite3.c	/^  int isError;          \/* Error code returned by the function. *\/$/;"	m	struct:sqlite3_context	file:
isFatalError	vendor\sqlite\sqlite3.c	/^static int isFatalError(int rc){$/;"	f	file:
isInit	vendor\sqlite\sqlite3.c	/^  int isInit;                       \/* True after initialization has finished *\/$/;"	m	struct:Sqlite3Config	file:
isInit	vendor\sqlite\sqlite3.c	/^  int isInit;                    \/* True if initialized *\/$/;"	m	struct:PCacheGlobal	file:
isInit	vendor\sqlite\sqlite3.c	/^  u8 isInit;                      \/* 1 when initialized *\/$/;"	m	struct:WalIndexHdr	file:
isInit	vendor\sqlite\sqlite3.c	/^  u8 isInit;           \/* True if previously initialized. MUST BE FIRST! *\/$/;"	m	struct:MemPage	file:
isInit	vendor\sqlite\sqlite3.c	/^  unsigned char isInit;          \/* True if initialized *\/$/;"	m	struct:sqlite3PrngType	file:
isInterrupted	vendor\sqlite\sqlite3.c	/^    volatile int isInterrupted; \/* True if sqlite3_interrupt has been called *\/$/;"	m	union:sqlite3::__anon5	file:
isLikeOrGlob	vendor\sqlite\sqlite3.c	/^static int isLikeOrGlob($/;"	f	file:
isLookaside	vendor\sqlite\sqlite3.c	/^static int isLookaside(sqlite3 *db, void *p){$/;"	f	file:
isLookaside	vendor\sqlite\sqlite3.c	20771;"	d	file:
isMallocInit	vendor\sqlite\sqlite3.c	/^  int isMallocInit;                 \/* True after malloc is initialized *\/$/;"	m	struct:Sqlite3Config	file:
isMatchOfColumn	vendor\sqlite\sqlite3.c	/^static int isMatchOfColumn($/;"	f	file:
isMatchinfoNeeded	vendor\sqlite\sqlite3.c	/^  int isMatchinfoNeeded;          \/* True when aMatchinfo[] needs filling in *\/$/;"	m	struct:Fts3Cursor	file:
isMultiWrite	vendor\sqlite\sqlite3.c	/^  u8 isMultiWrite;     \/* True if statement may modify\/insert multiple rows *\/$/;"	m	struct:Parse	file:
isMutexInit	vendor\sqlite\sqlite3.c	/^  int isMutexInit;                  \/* True after mutexes are initialized *\/$/;"	m	struct:Sqlite3Config	file:
isNot	vendor\sqlite\sqlite3.c	/^  int isNot;                          \/* True if getNextNode() sees a unary - *\/$/;"	m	struct:ParseContext	file:
isOpen	vendor\sqlite\sqlite3.c	42180;"	d	file:
isOrdered	vendor\sqlite\sqlite3.c	/^      i8 isOrdered;          \/* True if satisfies ORDER BY *\/$/;"	m	struct:WhereLoop::__anon21::__anon23	file:
isOrdered	vendor\sqlite\sqlite3.c	/^  Bool isOrdered:1;     \/* True if the underlying table is BTREE_UNORDERED *\/$/;"	m	struct:VdbeCursor	file:
isOrdered	vendor\sqlite\sqlite3.c	/^  i8 isOrdered;         \/* No. of ORDER BY terms satisfied. -1 for unknown *\/$/;"	m	struct:WherePath	file:
isPCacheInit	vendor\sqlite\sqlite3.c	/^  int isPCacheInit;                 \/* True after malloc is initialized *\/$/;"	m	struct:Sqlite3Config	file:
isPSample	vendor\sqlite\sqlite3.c	/^  u8 isPSample;                   \/* True if a periodic sample *\/$/;"	m	struct:Stat4Sample	file:
isPinned	vendor\sqlite\sqlite3.c	/^  u8 isPinned;                   \/* Page in use, not on the LRU list *\/$/;"	m	struct:PgHdr1	file:
isPrefix	vendor\sqlite\sqlite3.c	/^  int isPrefix;                   \/* True if token ends with a "*" character *\/$/;"	m	struct:Fts3PhraseToken	file:
isPrepareV2	vendor\sqlite\sqlite3.c	/^  bft isPrepareV2:1;      \/* True if prepared with prepare_v2() *\/$/;"	m	struct:Vdbe	file:
isReadonly	vendor\sqlite\sqlite3.c	/^  u8 isReadonly;             \/* True if read-only *\/$/;"	m	struct:unixShmNode	file:
isRecursive	vendor\sqlite\sqlite3.c	/^    unsigned isRecursive :1;   \/* True for recursive reference in WITH *\/$/;"	m	struct:SrcList::SrcList_item	file:
isRequireSeek	vendor\sqlite\sqlite3.c	/^  u8 isRequireSeek;               \/* True if must seek pStmt to %_content row *\/$/;"	m	struct:Fts3Cursor	file:
isResized	vendor\sqlite\sqlite3.c	/^  unsigned isResized:1;    \/* True if resizeIndexObject() has been called *\/$/;"	m	struct:Index	file:
isSetNullAction	vendor\sqlite\sqlite3.c	/^static int isSetNullAction(Parse *pParse, FKey *pFKey){$/;"	f	file:
isSimpleCount	vendor\sqlite\sqlite3.c	/^static Table *isSimpleCount(Select *p, AggInfo *pAggInfo){$/;"	f	file:
isSorter	vendor\sqlite\sqlite3.c	70409;"	d	file:
isSystemTable	vendor\sqlite\sqlite3.c	/^static int isSystemTable(Parse *pParse, const char *zName){$/;"	f	file:
isTable	vendor\sqlite\sqlite3.c	/^  Bool isTable:1;       \/* True if a table requiring integer keys *\/$/;"	m	struct:VdbeCursor	file:
isTnct	vendor\sqlite\sqlite3.c	/^  u8 isTnct;      \/* True if the DISTINCT keyword is present *\/$/;"	m	struct:DistinctCtx	file:
isTransactionSavepoint	vendor\sqlite\sqlite3.c	/^  u8 isTransactionSavepoint;    \/* True if the outermost savepoint is a TS *\/$/;"	m	struct:sqlite3	file:
isView	vendor\sqlite\sqlite3.c	112741;"	d	file:
isView	vendor\sqlite\sqlite3.c	112742;"	d	file:
isView	vendor\sqlite\sqlite3.c	113245;"	d	file:
isView	vendor\sqlite\sqlite3.c	95085;"	d	file:
isView	vendor\sqlite\sqlite3.c	95086;"	d	file:
isView	vendor\sqlite\sqlite3.c	95364;"	d	file:
isView	vendor\sqlite\sqlite3.c	99376;"	d	file:
isView	vendor\sqlite\sqlite3.c	99377;"	d	file:
isView	vendor\sqlite\sqlite3.c	99879;"	d	file:
isVowel	vendor\sqlite\sqlite3.c	/^static int isVowel(const char *z){$/;"	f	file:
isWriteLock	vendor\sqlite\sqlite3.c	/^  u8 isWriteLock;      \/* True for write lock.  False for a read lock *\/$/;"	m	struct:TableLock	file:
ix	vendor\sqlite\sqlite3.c	/^  int ix[BMS];                  \/* Cursor assigned to each bit *\/$/;"	m	struct:WhereMaskSet	file:
j	vendor\sqlite\sqlite3.c	/^  unsigned char i, j;            \/* State variables *\/$/;"	m	struct:sqlite3PrngType	file:
jfd	vendor\sqlite\sqlite3.c	/^  sqlite3_file *jfd;          \/* File descriptor for main journal *\/$/;"	m	struct:Pager	file:
jointype	vendor\sqlite\sqlite3.c	/^    u8 jointype;      \/* Type of join between this able and the previous *\/$/;"	m	struct:SrcList::SrcList_item	file:
journalHdr	vendor\sqlite\sqlite3.c	/^  i64 journalHdr;             \/* Byte offset to previous journal header *\/$/;"	m	struct:Pager	file:
journalHdrOffset	vendor\sqlite\sqlite3.c	/^static i64 journalHdrOffset(Pager *pPager){$/;"	f	file:
journalMode	vendor\sqlite\sqlite3.c	/^  u8 journalMode;             \/* One of the PAGER_JOURNALMODE_* values *\/$/;"	m	struct:Pager	file:
journalOff	vendor\sqlite\sqlite3.c	/^  i64 journalOff;             \/* Current write offset in the journal file *\/$/;"	m	struct:Pager	file:
journalSizeLimit	vendor\sqlite\sqlite3.c	/^  i64 journalSizeLimit;       \/* Size limit for persistent journal files *\/$/;"	m	struct:Pager	file:
jrnlBufferSize	vendor\sqlite\sqlite3.c	/^static int jrnlBufferSize(Pager *pPager){$/;"	f	file:
jrnlClose	vendor\sqlite\sqlite3.c	/^static int jrnlClose(sqlite3_file *pJfd){$/;"	f	file:
jrnlFileSize	vendor\sqlite\sqlite3.c	/^static int jrnlFileSize(sqlite3_file *pJfd, sqlite_int64 *pSize){$/;"	f	file:
jrnlRead	vendor\sqlite\sqlite3.c	/^static int jrnlRead($/;"	f	file:
jrnlSync	vendor\sqlite\sqlite3.c	/^static int jrnlSync(sqlite3_file *pJfd, int flags){$/;"	f	file:
jrnlTruncate	vendor\sqlite\sqlite3.c	/^static int jrnlTruncate(sqlite3_file *pJfd, sqlite_int64 size){$/;"	f	file:
jrnlWrite	vendor\sqlite\sqlite3.c	/^static int jrnlWrite($/;"	f	file:
juliandayFunc	vendor\sqlite\sqlite3.c	/^static void juliandayFunc($/;"	f	file:
k	vendor\sqlite\sqlite3.c	/^  int k;                     \/* Resume scanning at this->pWC->a[this->k] *\/$/;"	m	struct:WhereScan	file:
key	vendor\sqlite\sqlite3.c	/^  Blob key;                       \/* Last key written to the current block *\/$/;"	m	struct:NodeWriter	file:
key	vendor\sqlite\sqlite3.c	/^struct AttachKey { int type;  Token key; };$/;"	m	struct:AttachKey	file:
keyClass	vendor\sqlite\sqlite3.c	/^  char keyClass;          \/* HASH_INT, _POINTER, _STRING, _BINARY *\/$/;"	m	struct:Fts3Hash	file:
keyConf	vendor\sqlite\sqlite3.c	/^  u8 keyConf;          \/* What to do in case of uniqueness conflict on iPKey *\/$/;"	m	struct:Table	file:
keyInfoFromExprList	vendor\sqlite\sqlite3.c	/^static KeyInfo *keyInfoFromExprList($/;"	f	file:
keywordCode	vendor\sqlite\sqlite3.c	/^static int keywordCode(const char *z, int n){$/;"	f	file:
labelBkOut	vendor\sqlite\sqlite3.c	/^  int labelBkOut;       \/* Start label for the block-output subroutine *\/$/;"	m	struct:SortCtx	file:
langidFromSelect	vendor\sqlite\sqlite3.c	/^static int langidFromSelect(Fts3Table *p, sqlite3_stmt *pSelect){$/;"	f	file:
lastErrno	vendor\sqlite\sqlite3.c	/^  DWORD lastErrno;           \/* The Windows errno from the last I\/O error *\/$/;"	m	struct:winShmNode	file:
lastErrno	vendor\sqlite\sqlite3.c	/^  DWORD lastErrno;        \/* The Windows errno from the last I\/O error *\/$/;"	m	struct:winFile	file:
lastErrno	vendor\sqlite\sqlite3.c	/^  int lastErrno;                      \/* The unix errno from last I\/O error *\/$/;"	m	struct:unixFile	file:
lastRowid	vendor\sqlite\sqlite3.c	/^  i64 lastRowid;                \/* ROWID of most recent insert (see above) *\/$/;"	m	struct:sqlite3	file:
lastRowid	vendor\sqlite\sqlite3.c	/^  i64 lastRowid;          \/* Last insert rowid (sqlite3.lastRowid) *\/$/;"	m	struct:VdbeFrame	file:
last_insert_rowid	vendor\sqlite\sqlite3.c	/^  sqlite_int64  (*last_insert_rowid)(sqlite3*);$/;"	m	struct:sqlite3_api_routines	file:
last_insert_rowid	vendor\sqlite\sqlite3.c	/^static void last_insert_rowid($/;"	f	file:
leaf	vendor\sqlite\sqlite3.c	/^  u8 leaf;             \/* True if a leaf page *\/$/;"	m	struct:MemPage	file:
leaveMutex	vendor\sqlite\sqlite3.c	/^static void leaveMutex(void){$/;"	f	file:
leftColumn	vendor\sqlite\sqlite3.c	/^    int leftColumn;         \/* Column number of X in "X <op> <expr>" *\/$/;"	m	union:WhereTerm::__anon24	file:
leftCursor	vendor\sqlite\sqlite3.c	/^  int leftCursor;         \/* Cursor number of X in "X <op> <expr>" *\/$/;"	m	struct:WhereTerm	file:
length	vendor\sqlite\sqlite3.c	/^  unsigned long long length;        \/* nbr of bytes to lock *\/$/;"	m	struct:ByteRangeLockPB2	file:
lengthFunc	vendor\sqlite\sqlite3.c	/^static void lengthFunc($/;"	f	file:
lhs	vendor\sqlite\sqlite3.c	/^  YYCODETYPE lhs;         \/* Symbol on the left-hand side of the rule *\/$/;"	m	struct:__anon27	file:
libversion	vendor\sqlite\sqlite3.c	/^  const char * (*libversion)(void);$/;"	m	struct:sqlite3_api_routines	file:
libversion_number	vendor\sqlite\sqlite3.c	/^  int  (*libversion_number)(void);$/;"	m	struct:sqlite3_api_routines	file:
likeFunc	vendor\sqlite\sqlite3.c	/^static void likeFunc($/;"	f	file:
likeInfoAlt	vendor\sqlite\sqlite3.c	/^static const struct compareInfo likeInfoAlt = { '%', '_',   0, 0 };$/;"	v	typeref:struct:compareInfo	file:
likeInfoNorm	vendor\sqlite\sqlite3.c	/^static const struct compareInfo likeInfoNorm = { '%', '_',   0, 1 };$/;"	v	typeref:struct:compareInfo	file:
likely	vendor\sqlite\sqlite3.c	8435;"	d	file:
limit	vendor\sqlite\sqlite3.c	/^  int (*limit)(sqlite3*,int,int);$/;"	m	struct:sqlite3_api_routines	file:
list	vendor\sqlite\sqlite3.c	/^    } list;$/;"	m	union:Mem3Block::__anon13	typeref:struct:Mem3Block::__anon13::__anon15	file:
list	vendor\sqlite\sqlite3.c	/^  SorterList list;                \/* List for thread to write to a PMA *\/$/;"	m	struct:SortSubtask	file:
list	vendor\sqlite\sqlite3.c	/^  SorterList list;                \/* List of in-memory records *\/$/;"	m	struct:VdbeSorter	file:
loadAnalysis	vendor\sqlite\sqlite3.c	/^static void loadAnalysis(Parse *pParse, int iDb){$/;"	f	file:
loadExt	vendor\sqlite\sqlite3.c	/^static void loadExt(sqlite3_context *context, int argc, sqlite3_value **argv){$/;"	f	file:
loadStat4	vendor\sqlite\sqlite3.c	/^static int loadStat4(sqlite3 *db, const char *zDb){$/;"	f	file:
loadStatTbl	vendor\sqlite\sqlite3.c	/^static int loadStatTbl($/;"	f	file:
load_extension	vendor\sqlite\sqlite3.c	/^  int (*load_extension)(sqlite3*,const char*,const char*,char**);$/;"	m	struct:sqlite3_api_routines	file:
local	vendor\sqlite\sqlite3.c	/^  winceLock local;        \/* Locks obtained by this instance of winFile *\/$/;"	m	struct:winFile	file:
local_ioerr	vendor\sqlite\sqlite3.c	/^static void local_ioerr(){$/;"	f	file:
localtime	vendor\sqlite\sqlite3.c	/^struct tm *__cdecl localtime(const time_t *t)$/;"	f
localtimeOffset	vendor\sqlite\sqlite3.c	/^static sqlite3_int64 localtimeOffset($/;"	f	file:
lock	vendor\sqlite\sqlite3.c	/^  BtLock lock;       \/* Object used to lock page 1 *\/$/;"	m	struct:Btree	file:
lockBtree	vendor\sqlite\sqlite3.c	/^static int lockBtree(BtShared *pBt){$/;"	f	file:
lockBtreeMutex	vendor\sqlite\sqlite3.c	/^static void lockBtreeMutex(Btree *p){$/;"	f	file:
lockError	vendor\sqlite\sqlite3.c	/^  u8 lockError;              \/* True if a locking error has occurred *\/$/;"	m	struct:Wal	file:
lockMask	vendor\sqlite\sqlite3.c	/^  yDbMask lockMask;       \/* Subset of btreeMask that requires a lock *\/$/;"	m	struct:Vdbe	file:
lockProxy	vendor\sqlite\sqlite3.c	/^  unixFile *lockProxy;         \/* Open proxy lock file *\/$/;"	m	struct:proxyLockingContext	file:
lockProxyPath	vendor\sqlite\sqlite3.c	/^  char *lockProxyPath;         \/* Name of the proxy lock file *\/$/;"	m	struct:proxyLockingContext	file:
lockTrace	vendor\sqlite\sqlite3.c	/^static int lockTrace(int fd, int op, struct flock *p){$/;"	f	file:
locked	vendor\sqlite\sqlite3.c	/^  u8 locked;         \/* True if db currently has pBt locked *\/$/;"	m	struct:Btree	file:
lockingContext	vendor\sqlite\sqlite3.c	/^  void *lockingContext;               \/* Locking style specific state *\/$/;"	m	struct:unixFile	file:
locktype	vendor\sqlite\sqlite3.c	/^  u8 locktype;            \/* Type of lock currently held on this file *\/$/;"	m	struct:winFile	file:
log	vendor\sqlite\sqlite3.c	/^  void (*log)(int,const char*,...);$/;"	m	struct:sqlite3_api_routines	file:
logBadConnection	vendor\sqlite\sqlite3.c	/^static void logBadConnection(const char *zType){$/;"	f	file:
lookaside	vendor\sqlite\sqlite3.c	/^  Lookaside lookaside;          \/* Lookaside malloc configuration *\/$/;"	m	struct:sqlite3	file:
lookupName	vendor\sqlite\sqlite3.c	/^static int lookupName($/;"	f	file:
lowerFunc	vendor\sqlite\sqlite3.c	/^static void lowerFunc(sqlite3_context *context, int argc, sqlite3_value **argv){$/;"	f	file:
lru	vendor\sqlite\sqlite3.c	/^    int lru;              \/* Least recently used entry has the smallest value *\/$/;"	m	struct:Parse::yColCache	file:
lseek	vendor\sqlite\sqlite3.c	25549;"	d	file:
m	vendor\sqlite\sqlite3.c	/^  int h, m;          \/* Hour and minutes *\/$/;"	m	struct:DateTime	file:
m	vendor\sqlite\sqlite3.c	/^  sqlite3_mem_methods m;            \/* Low-level memory allocation interface *\/$/;"	m	struct:Sqlite3Config	file:
mPragFlag	vendor\sqlite\sqlite3.c	/^  u8 mPragFlag;             \/* Zero or more PragFlag_XXX values *\/$/;"	m	struct:sPragmaNames	file:
m_eq_1	vendor\sqlite\sqlite3.c	/^static int m_eq_1(const char *z){$/;"	f	file:
m_gt_0	vendor\sqlite\sqlite3.c	/^static int m_gt_0(const char *z){$/;"	f	file:
m_gt_1	vendor\sqlite\sqlite3.c	/^static int m_gt_1(const char *z){$/;"	f	file:
magic	vendor\sqlite\sqlite3.c	/^  u32 magic;                    \/* Magic number for detect library misuse *\/$/;"	m	struct:sqlite3	file:
magic	vendor\sqlite\sqlite3.c	/^  u32 magic;                  \/* Always RTREE_GEOMETRY_MAGIC *\/$/;"	m	struct:RtreeMatchArg	file:
magic	vendor\sqlite\sqlite3.c	/^  u32 magic;              \/* Magic number for sanity checking *\/$/;"	m	struct:Vdbe	file:
magic1	vendor\sqlite\sqlite3.c	/^  u32 magic1;   \/* Magic number to detect structure corruption. *\/$/;"	m	struct:winMemData	file:
magic2	vendor\sqlite\sqlite3.c	/^  u32 magic2;   \/* Magic number to detect structure corruption. *\/$/;"	m	struct:winMemData	file:
major	vendor\sqlite\sqlite3.c	/^  YYCODETYPE major;      \/* The major token value.  This is the code$/;"	m	struct:yyStackEntry	file:
malloc	vendor\sqlite\sqlite3.c	/^  void *(*malloc)(int);$/;"	m	struct:sqlite3_api_routines	file:
malloc64	vendor\sqlite\sqlite3.c	/^  void *(*malloc64)(sqlite3_uint64);$/;"	m	struct:sqlite3_api_routines	file:
mallocFailed	vendor\sqlite\sqlite3.c	/^  int mallocFailed; \/* A memory allocation error has occurred *\/$/;"	m	struct:IntegrityCk	file:
mallocFailed	vendor\sqlite\sqlite3.c	/^  u8 mallocFailed;              \/* True if we have seen a malloc failure *\/$/;"	m	struct:sqlite3	file:
mallocWithAlarm	vendor\sqlite\sqlite3.c	/^static int mallocWithAlarm(int n, void **pp){$/;"	f	file:
markTermAsChild	vendor\sqlite\sqlite3.c	/^static void markTermAsChild(WhereClause *pWC, int iChild, int iParent){$/;"	f	file:
mask	vendor\sqlite\sqlite3.c	/^  struct {int value; int mask;} yy429;$/;"	m	struct:__anon25::__anon26	file:
maskLoop	vendor\sqlite\sqlite3.c	/^  Bitmask maskLoop;     \/* Bitmask of all WhereLoop objects in this path *\/$/;"	m	struct:WherePath	file:
maskPage	vendor\sqlite\sqlite3.c	/^  u16 maskPage;        \/* Mask for page offset *\/$/;"	m	struct:MemPage	file:
maskSelf	vendor\sqlite\sqlite3.c	/^  Bitmask maskSelf;     \/* Bitmask identifying table iTab *\/$/;"	m	struct:WhereLoop	file:
matchAll	vendor\sqlite\sqlite3.c	/^  u8 matchAll;$/;"	m	struct:compareInfo	file:
matchOne	vendor\sqlite\sqlite3.c	/^  u8 matchOne;$/;"	m	struct:compareInfo	file:
matchQuality	vendor\sqlite\sqlite3.c	/^static int matchQuality($/;"	f	file:
matchSet	vendor\sqlite\sqlite3.c	/^  u8 matchSet;$/;"	m	struct:compareInfo	file:
max1bytePayload	vendor\sqlite\sqlite3.c	/^  u8 max1bytePayload;   \/* Maximum first byte of cell for a 1-byte payload *\/$/;"	m	struct:BtShared	file:
max1bytePayload	vendor\sqlite\sqlite3.c	/^  u8 max1bytePayload;  \/* min(maxLocal,127) *\/$/;"	m	struct:MemPage	file:
maxCount	vendor\sqlite\sqlite3.c	/^  u32 maxCount;       \/* Maximum instantaneous currentCount *\/$/;"	m	struct:Mem5Global	file:
maxLeaf	vendor\sqlite\sqlite3.c	/^  u16 maxLeaf;          \/* Maximum local payload in a LEAFDATA table *\/$/;"	m	struct:BtShared	file:
maxLocal	vendor\sqlite\sqlite3.c	/^  u16 maxLocal;         \/* Maximum local payload in non-LEAFDATA tables *\/$/;"	m	struct:BtShared	file:
maxLocal	vendor\sqlite\sqlite3.c	/^  u16 maxLocal;        \/* Copy of BtShared.maxLocal or BtShared.maxLeaf *\/$/;"	m	struct:MemPage	file:
maxOut	vendor\sqlite\sqlite3.c	/^  u32 maxOut;         \/* Maximum instantaneous currentOut *\/$/;"	m	struct:Mem5Global	file:
maxRequest	vendor\sqlite\sqlite3.c	/^  u32 maxRequest;     \/* Largest allocation (exclusive of internal frag) *\/$/;"	m	struct:Mem5Global	file:
mayAbort	vendor\sqlite\sqlite3.c	/^  u8 mayAbort;         \/* True if statement may throw an ABORT exception *\/$/;"	m	struct:Parse	file:
measureAllocationSize	vendor\sqlite\sqlite3.c	/^static SQLITE_NOINLINE void measureAllocationSize(sqlite3 *db, void *p){$/;"	f	file:
mem	vendor\sqlite\sqlite3.c	/^} mem;$/;"	v	typeref:struct:__anon12	file:
mem0	vendor\sqlite\sqlite3.c	/^} mem0 = { 0, 0, 0, 0, 0, 0, 0, 0 };$/;"	v	typeref:struct:Mem0Global	file:
mem0	vendor\sqlite\sqlite3.c	20405;"	d	file:
mem3	vendor\sqlite\sqlite3.c	/^} mem3 = { 97535575 };$/;"	v	typeref:struct:Mem3Global	file:
mem3	vendor\sqlite\sqlite3.c	17784;"	d	file:
mem5	vendor\sqlite\sqlite3.c	/^} mem5;$/;"	v	typeref:struct:Mem5Global	file:
mem5	vendor\sqlite\sqlite3.c	18467;"	d	file:
memAboutToChange	vendor\sqlite\sqlite3.c	70275;"	d	file:
memAboutToChange	vendor\sqlite\sqlite3.c	70277;"	d	file:
memDb	vendor\sqlite\sqlite3.c	/^  u8 memDb;                   \/* True to inhibit all file I\/O *\/$/;"	m	struct:Pager	file:
memIsValid	vendor\sqlite\sqlite3.c	14606;"	d	file:
memTracePrint	vendor\sqlite\sqlite3.c	/^static void memTracePrint(Mem *p){$/;"	f	file:
memjrnlClose	vendor\sqlite\sqlite3.c	/^static int memjrnlClose(sqlite3_file *pJfd){$/;"	f	file:
memjrnlFileSize	vendor\sqlite\sqlite3.c	/^static int memjrnlFileSize(sqlite3_file *pJfd, sqlite_int64 *pSize){$/;"	f	file:
memjrnlRead	vendor\sqlite\sqlite3.c	/^static int memjrnlRead($/;"	f	file:
memjrnlSync	vendor\sqlite\sqlite3.c	/^static int memjrnlSync(sqlite3_file *NotUsed, int NotUsed2){$/;"	f	file:
memjrnlTruncate	vendor\sqlite\sqlite3.c	/^static int memjrnlTruncate(sqlite3_file *pJfd, sqlite_int64 size){$/;"	f	file:
memjrnlWrite	vendor\sqlite\sqlite3.c	/^static int memjrnlWrite($/;"	f	file:
memory_highwater	vendor\sqlite\sqlite3.c	/^  sqlite3_int64 (*memory_highwater)(int);$/;"	m	struct:sqlite3_api_routines	file:
memory_used	vendor\sqlite\sqlite3.c	/^  sqlite3_int64 (*memory_used)(void);$/;"	m	struct:sqlite3_api_routines	file:
memsys3Checkout	vendor\sqlite\sqlite3.c	/^static void *memsys3Checkout(u32 i, u32 nBlock){$/;"	f	file:
memsys3Enter	vendor\sqlite\sqlite3.c	/^static void memsys3Enter(void){$/;"	f	file:
memsys3Free	vendor\sqlite\sqlite3.c	/^static void memsys3Free(void *pPrior){$/;"	f	file:
memsys3FreeUnsafe	vendor\sqlite\sqlite3.c	/^static void memsys3FreeUnsafe(void *pOld){$/;"	f	file:
memsys3FromMaster	vendor\sqlite\sqlite3.c	/^static void *memsys3FromMaster(u32 nBlock){$/;"	f	file:
memsys3Init	vendor\sqlite\sqlite3.c	/^static int memsys3Init(void *NotUsed){$/;"	f	file:
memsys3Leave	vendor\sqlite\sqlite3.c	/^static void memsys3Leave(void){$/;"	f	file:
memsys3Link	vendor\sqlite\sqlite3.c	/^static void memsys3Link(u32 i){$/;"	f	file:
memsys3LinkIntoList	vendor\sqlite\sqlite3.c	/^static void memsys3LinkIntoList(u32 i, u32 *pRoot){$/;"	f	file:
memsys3Malloc	vendor\sqlite\sqlite3.c	/^static void *memsys3Malloc(int nBytes){$/;"	f	file:
memsys3MallocUnsafe	vendor\sqlite\sqlite3.c	/^static void *memsys3MallocUnsafe(int nByte){$/;"	f	file:
memsys3Merge	vendor\sqlite\sqlite3.c	/^static void memsys3Merge(u32 *pRoot){$/;"	f	file:
memsys3OutOfMemory	vendor\sqlite\sqlite3.c	/^static void memsys3OutOfMemory(int nByte){$/;"	f	file:
memsys3Realloc	vendor\sqlite\sqlite3.c	/^static void *memsys3Realloc(void *pPrior, int nBytes){$/;"	f	file:
memsys3Roundup	vendor\sqlite\sqlite3.c	/^static int memsys3Roundup(int n){$/;"	f	file:
memsys3Shutdown	vendor\sqlite\sqlite3.c	/^static void memsys3Shutdown(void *NotUsed){$/;"	f	file:
memsys3Size	vendor\sqlite\sqlite3.c	/^static int memsys3Size(void *p){$/;"	f	file:
memsys3Unlink	vendor\sqlite\sqlite3.c	/^static void memsys3Unlink(u32 i){$/;"	f	file:
memsys3UnlinkFromList	vendor\sqlite\sqlite3.c	/^static void memsys3UnlinkFromList(u32 i, u32 *pRoot){$/;"	f	file:
memsys5Enter	vendor\sqlite\sqlite3.c	/^static void memsys5Enter(void){$/;"	f	file:
memsys5Free	vendor\sqlite\sqlite3.c	/^static void memsys5Free(void *pPrior){$/;"	f	file:
memsys5FreeUnsafe	vendor\sqlite\sqlite3.c	/^static void memsys5FreeUnsafe(void *pOld){$/;"	f	file:
memsys5Init	vendor\sqlite\sqlite3.c	/^static int memsys5Init(void *NotUsed){$/;"	f	file:
memsys5Leave	vendor\sqlite\sqlite3.c	/^static void memsys5Leave(void){$/;"	f	file:
memsys5Link	vendor\sqlite\sqlite3.c	/^static void memsys5Link(int i, int iLogsize){$/;"	f	file:
memsys5Log	vendor\sqlite\sqlite3.c	/^static int memsys5Log(int iValue){$/;"	f	file:
memsys5Malloc	vendor\sqlite\sqlite3.c	/^static void *memsys5Malloc(int nBytes){$/;"	f	file:
memsys5MallocUnsafe	vendor\sqlite\sqlite3.c	/^static void *memsys5MallocUnsafe(int nByte){$/;"	f	file:
memsys5Realloc	vendor\sqlite\sqlite3.c	/^static void *memsys5Realloc(void *pPrior, int nBytes){$/;"	f	file:
memsys5Roundup	vendor\sqlite\sqlite3.c	/^static int memsys5Roundup(int n){$/;"	f	file:
memsys5Shutdown	vendor\sqlite\sqlite3.c	/^static void memsys5Shutdown(void *NotUsed){$/;"	f	file:
memsys5Size	vendor\sqlite\sqlite3.c	/^static int memsys5Size(void *p){$/;"	f	file:
memsys5Unlink	vendor\sqlite\sqlite3.c	/^static void memsys5Unlink(int i, int iLogsize){$/;"	f	file:
minLeaf	vendor\sqlite\sqlite3.c	/^  u16 minLeaf;          \/* Minimum local payload in a LEAFDATA table *\/$/;"	m	struct:BtShared	file:
minLocal	vendor\sqlite\sqlite3.c	/^  u16 minLocal;         \/* Minimum local payload in non-LEAFDATA tables *\/$/;"	m	struct:BtShared	file:
minLocal	vendor\sqlite\sqlite3.c	/^  u16 minLocal;        \/* Copy of BtShared.minLocal or BtShared.minLeaf *\/$/;"	m	struct:MemPage	file:
minMaxFinalize	vendor\sqlite\sqlite3.c	/^static void minMaxFinalize(sqlite3_context *context){$/;"	f	file:
minMaxQuery	vendor\sqlite\sqlite3.c	/^static u8 minMaxQuery(AggInfo *pAggInfo, ExprList **ppMinMax){$/;"	f	file:
minWriteFileFormat	vendor\sqlite\sqlite3.c	/^  u8 minWriteFileFormat;  \/* Minimum file format for writable database files *\/$/;"	m	struct:Vdbe	file:
minmaxFunc	vendor\sqlite\sqlite3.c	/^static void minmaxFunc($/;"	f	file:
minmaxStep	vendor\sqlite\sqlite3.c	/^static void minmaxStep($/;"	f	file:
minor	vendor\sqlite\sqlite3.c	/^  YYMINORTYPE minor;     \/* The user-supplied minor token value.  This$/;"	m	struct:yyStackEntry	file:
mmapSize	vendor\sqlite\sqlite3.c	/^  sqlite3_int64 mmapSize;             \/* Usable size of mapping at pMapRegion *\/$/;"	m	struct:unixFile	file:
mmapSize	vendor\sqlite\sqlite3.c	/^  sqlite3_int64 mmapSize;       \/* Usable size of mapped region *\/$/;"	m	struct:winFile	file:
mmapSizeActual	vendor\sqlite\sqlite3.c	/^  sqlite3_int64 mmapSizeActual;       \/* Actual size of mapping at pMapRegion *\/$/;"	m	struct:unixFile	file:
mmapSizeActual	vendor\sqlite\sqlite3.c	/^  sqlite3_int64 mmapSizeActual; \/* Actual size of mapped region *\/$/;"	m	struct:winFile	file:
mmapSizeMax	vendor\sqlite\sqlite3.c	/^  sqlite3_int64 mmapSizeMax;          \/* Configured FCNTL_MMAP_SIZE value *\/$/;"	m	struct:unixFile	file:
mmapSizeMax	vendor\sqlite\sqlite3.c	/^  sqlite3_int64 mmapSizeMax;    \/* Configured FCNTL_MMAP_SIZE value *\/$/;"	m	struct:winFile	file:
mnMaster	vendor\sqlite\sqlite3.c	/^  u32 mnMaster;$/;"	m	struct:Mem3Global	file:
mnPmaSize	vendor\sqlite\sqlite3.c	/^  int mnPmaSize;                  \/* Minimum PMA size, in bytes *\/$/;"	m	struct:VdbeSorter	file:
mnReg	vendor\sqlite\sqlite3.c	/^  int mnReg, mxReg;       \/* Range of registers allocated for aCol and aFunc *\/$/;"	m	struct:AggInfo	file:
mnReq	vendor\sqlite\sqlite3.c	/^  int mnReq, mxReq;                 \/* Min and max heap requests sizes *\/$/;"	m	struct:Sqlite3Config	file:
modifyPagePointer	vendor\sqlite\sqlite3.c	/^static int modifyPagePointer(MemPage *pPage, Pgno iFrom, Pgno iTo, u8 eType){$/;"	f	file:
moveToChild	vendor\sqlite\sqlite3.c	/^static int moveToChild(BtCursor *pCur, u32 newPgno){$/;"	f	file:
moveToLeftmost	vendor\sqlite\sqlite3.c	/^static int moveToLeftmost(BtCursor *pCur){$/;"	f	file:
moveToParent	vendor\sqlite\sqlite3.c	/^static void moveToParent(BtCursor *pCur){$/;"	f	file:
moveToRightmost	vendor\sqlite\sqlite3.c	/^static int moveToRightmost(BtCursor *pCur){$/;"	f	file:
moveToRoot	vendor\sqlite\sqlite3.c	/^static int moveToRoot(BtCursor *pCur){$/;"	f	file:
movetoTarget	vendor\sqlite\sqlite3.c	/^  i64 movetoTarget;     \/* Argument to the deferred sqlite3BtreeMoveto() *\/$/;"	m	struct:VdbeCursor	file:
mprintf	vendor\sqlite\sqlite3.c	/^  char * (*mprintf)(const char*,...);$/;"	m	struct:sqlite3_api_routines	file:
msize	vendor\sqlite\sqlite3.c	/^  sqlite3_uint64 (*msize)(void*);$/;"	m	struct:sqlite3_api_routines	file:
multiSelect	vendor\sqlite\sqlite3.c	/^static int multiSelect($/;"	f	file:
multiSelectCollSeq	vendor\sqlite\sqlite3.c	/^static CollSeq *multiSelectCollSeq(Parse *pParse, Select *p, int iCol){$/;"	f	file:
multiSelectOrderBy	vendor\sqlite\sqlite3.c	/^static int multiSelectOrderBy($/;"	f	file:
multiSelectOrderByKeyInfo	vendor\sqlite\sqlite3.c	/^static KeyInfo *multiSelectOrderByKeyInfo(Parse *pParse, Select *p, int nExtra){$/;"	f	file:
multiSelectValues	vendor\sqlite\sqlite3.c	/^static int multiSelectValues($/;"	f	file:
mutex	vendor\sqlite\sqlite3.c	/^  CRITICAL_SECTION mutex;    \/* Mutex controlling the lock *\/$/;"	m	struct:sqlite3_mutex	file:
mutex	vendor\sqlite\sqlite3.c	/^  pthread_mutex_t mutex;     \/* Mutex controlling the lock *\/$/;"	m	struct:sqlite3_mutex	file:
mutex	vendor\sqlite\sqlite3.c	/^  sqlite3_mutex *mutex;          \/* MUTEX_STATIC_LRU or NULL *\/$/;"	m	struct:PGroup	file:
mutex	vendor\sqlite\sqlite3.c	/^  sqlite3_mutex *mutex;          \/* Mutex for accessing the following: *\/$/;"	m	struct:PCacheGlobal	file:
mutex	vendor\sqlite\sqlite3.c	/^  sqlite3_mutex *mutex;         \/* Connection mutex *\/$/;"	m	struct:sqlite3	file:
mutex	vendor\sqlite\sqlite3.c	/^  sqlite3_mutex *mutex;         \/* Mutex to serialize access *\/$/;"	m	struct:Mem0Global	file:
mutex	vendor\sqlite\sqlite3.c	/^  sqlite3_mutex *mutex;      \/* Mutex to access this object *\/$/;"	m	struct:unixShmNode	file:
mutex	vendor\sqlite\sqlite3.c	/^  sqlite3_mutex *mutex;      \/* Mutex to access this object *\/$/;"	m	struct:winShmNode	file:
mutex	vendor\sqlite\sqlite3.c	/^  sqlite3_mutex *mutex; \/* Non-recursive mutex required to access this object *\/$/;"	m	struct:BtShared	file:
mutex	vendor\sqlite\sqlite3.c	/^  sqlite3_mutex *mutex;$/;"	m	struct:Mem3Global	file:
mutex	vendor\sqlite\sqlite3.c	/^  sqlite3_mutex *mutex;$/;"	m	struct:Mem5Global	file:
mutex	vendor\sqlite\sqlite3.c	/^  sqlite3_mutex *mutex;$/;"	m	struct:__anon12	file:
mutex	vendor\sqlite\sqlite3.c	/^  sqlite3_mutex_methods mutex;      \/* Low-level mutex interface *\/$/;"	m	struct:Sqlite3Config	file:
mutexIsInit	vendor\sqlite\sqlite3.c	/^static SQLITE_WSD int mutexIsInit = 0;$/;"	v	file:
mutex_alloc	vendor\sqlite\sqlite3.c	/^  sqlite3_mutex *(*mutex_alloc)(int);$/;"	m	struct:sqlite3_api_routines	file:
mutex_enter	vendor\sqlite\sqlite3.c	/^  void (*mutex_enter)(sqlite3_mutex*);$/;"	m	struct:sqlite3_api_routines	file:
mutex_free	vendor\sqlite\sqlite3.c	/^  void (*mutex_free)(sqlite3_mutex*);$/;"	m	struct:sqlite3_api_routines	file:
mutex_leave	vendor\sqlite\sqlite3.c	/^  void (*mutex_leave)(sqlite3_mutex*);$/;"	m	struct:sqlite3_api_routines	file:
mutex_try	vendor\sqlite\sqlite3.c	/^  int (*mutex_try)(sqlite3_mutex*);$/;"	m	struct:sqlite3_api_routines	file:
mxAlloc	vendor\sqlite\sqlite3.c	/^  int  mxAlloc;        \/* Maximum allowed string length *\/$/;"	m	struct:StrAccum	file:
mxCurrent	vendor\sqlite\sqlite3.c	/^  int mxCurrent[NCSIZE];   \/* Highwater mark for nCurrent *\/$/;"	m	struct:__anon12	file:
mxErr	vendor\sqlite\sqlite3.c	/^  int mxErr;        \/* Stop accumulating errors when this reaches zero *\/$/;"	m	struct:IntegrityCk	file:
mxFrame	vendor\sqlite\sqlite3.c	/^  u32 mxFrame;                    \/* Index of last valid frame in the WAL *\/$/;"	m	struct:WalIndexHdr	file:
mxKeysize	vendor\sqlite\sqlite3.c	/^  int mxKeysize;                  \/* Largest serialized key seen so far *\/$/;"	m	struct:VdbeSorter	file:
mxLevel	vendor\sqlite\sqlite3.c	/^  int mxLevel;                      \/* The largest iLevel value in the tree *\/$/;"	m	struct:sqlite3_rtree_query_info	file:
mxLevel	vendor\sqlite\sqlite3.c	/^  int mxLevel;                      \/* iLevel value for root of the tree *\/$/;"	m	struct:RtreeCursor	file:
mxMmap	vendor\sqlite\sqlite3.c	/^  sqlite3_int64 mxMmap;             \/* Maximum value for szMmap *\/$/;"	m	struct:Sqlite3Config	file:
mxOut	vendor\sqlite\sqlite3.c	/^  int mxOut;              \/* Highwater mark for nOut *\/$/;"	m	struct:Lookaside	file:
mxParserStack	vendor\sqlite\sqlite3.c	/^  int mxParserStack;                \/* maximum depth of the parser stack *\/$/;"	m	struct:Sqlite3Config	file:
mxPathname	vendor\sqlite\sqlite3.c	/^  int mxPathname;          \/* Maximum file pathname length *\/$/;"	m	struct:sqlite3_vfs	file:
mxPgno	vendor\sqlite\sqlite3.c	/^  Pgno mxPgno;                \/* Maximum allowed size of the database *\/$/;"	m	struct:Pager	file:
mxPinned	vendor\sqlite\sqlite3.c	/^  unsigned int mxPinned;         \/* nMaxpage + 10 - nMinPage *\/$/;"	m	struct:PGroup	file:
mxPmaSize	vendor\sqlite\sqlite3.c	/^  int mxPmaSize;                  \/* Maximum PMA size, in bytes.  0==no limit *\/$/;"	m	struct:VdbeSorter	file:
mxReg	vendor\sqlite\sqlite3.c	/^  int mnReg, mxReg;       \/* Range of registers allocated for aCol and aFunc *\/$/;"	m	struct:AggInfo	file:
mxReq	vendor\sqlite\sqlite3.c	/^  int mnReq, mxReq;                 \/* Min and max heap requests sizes *\/$/;"	m	struct:Sqlite3Config	file:
mxSample	vendor\sqlite\sqlite3.c	/^  int mxSample;             \/* Maximum number of samples to accumulate *\/$/;"	m	struct:Stat4Accum	file:
mxSavepoint	vendor\sqlite\sqlite3.c	/^  int mxSavepoint;       \/* Largest valid xSavepoint integer *\/$/;"	m	struct:Fts3Table	file:
mxStrlen	vendor\sqlite\sqlite3.c	/^  int mxStrlen;                     \/* Maximum string length *\/$/;"	m	struct:Sqlite3Config	file:
mxSz	vendor\sqlite\sqlite3.c	/^  int mxSz;                       \/* Maximum bytes of data to store *\/$/;"	m	struct:IncrMerger	file:
mxValue	vendor\sqlite\sqlite3.c	/^  int mxValue[10];          \/* Maximum value *\/$/;"	m	struct:sqlite3StatType	file:
mxWalSize	vendor\sqlite\sqlite3.c	/^  i64 mxWalSize;             \/* Truncate WAL to this size upon reset *\/$/;"	m	struct:Wal	file:
n	vendor\sqlite\sqlite3.c	/^    int n;                                     \/* A counter *\/$/;"	m	union:Walker::__anon11	file:
n	vendor\sqlite\sqlite3.c	/^  i64 n;$/;"	m	struct:CountCtx	file:
n	vendor\sqlite\sqlite3.c	/^  int n;                          \/* Length of z in bytes (excl. nul-term) *\/$/;"	m	struct:StrBuffer	file:
n	vendor\sqlite\sqlite3.c	/^  int n;                          \/* Number of bytes in buffer z *\/$/;"	m	struct:Fts3PhraseToken	file:
n	vendor\sqlite\sqlite3.c	/^  int n;                          \/* Number of valid bytes of data in a[] *\/$/;"	m	struct:Blob	file:
n	vendor\sqlite\sqlite3.c	/^  int n;                        \/* Number of assigned cursor values *\/$/;"	m	struct:WhereMaskSet	file:
n	vendor\sqlite\sqlite3.c	/^  int n;              \/* Number of characters in string value, excluding '\\0' *\/$/;"	m	struct:Mem	file:
n	vendor\sqlite\sqlite3.c	/^  int n;            \/* Size of record in bytes *\/$/;"	m	struct:IndexSample	file:
n	vendor\sqlite\sqlite3.c	/^  u16 n;                      \/* Number of valid a[] entries *\/$/;"	m	struct:WhereOrSet	file:
n	vendor\sqlite\sqlite3.c	/^  unsigned int n;    \/* Number of characters in this token *\/$/;"	m	struct:Token	file:
n90pct	vendor\sqlite\sqlite3.c	/^  unsigned int n90pct;                \/* nMax*9\/10 *\/$/;"	m	struct:PCache1	file:
nAccumulator	vendor\sqlite\sqlite3.c	/^  int nAccumulator;       \/* Number of columns that show through to the output.$/;"	m	struct:AggInfo	file:
nAdvance	vendor\sqlite\sqlite3.c	/^  int nAdvance;                   \/* How many seg-readers to advance *\/$/;"	m	struct:Fts3MultiSegReader	file:
nAlias	vendor\sqlite\sqlite3.c	/^  int nAlias;               \/* Number of aliased result set columns *\/$/;"	m	struct:Parse	file:
nAll	vendor\sqlite\sqlite3.c	/^  int nAll;                      \/* Size of a[] in bytes *\/$/;"	m	struct:Fts3Doclist	file:
nAlloc	vendor\sqlite\sqlite3.c	/^  int  nAlloc;         \/* Amount of space allocated in zText *\/$/;"	m	struct:StrAccum	file:
nAlloc	vendor\sqlite\sqlite3.c	/^  int nAlloc;                     \/* Allocated size of a[] (nAlloc>=n) *\/$/;"	m	struct:Blob	file:
nAlloc	vendor\sqlite\sqlite3.c	/^  int nAlloc;                     \/* Allocated size of buffer z in bytes *\/$/;"	m	struct:StrBuffer	file:
nAlloc	vendor\sqlite\sqlite3.c	/^  int nAlloc;                     \/* space allocated at zToken *\/$/;"	m	struct:unicode_cursor	file:
nAlloc	vendor\sqlite\sqlite3.c	/^  int nAlloc;                 \/* Bytes of space at aAlloc *\/$/;"	m	struct:PmaReader	file:
nAlloc	vendor\sqlite\sqlite3.c	/^  int nAlloc[NCSIZE];      \/* Total number of allocations *\/$/;"	m	struct:__anon12	file:
nAlloc	vendor\sqlite\sqlite3.c	/^  u32 nAlloc;        \/* Slots allocated for azResult[] *\/$/;"	m	struct:TabResult	file:
nAlloc	vendor\sqlite\sqlite3.c	/^  u32 nAlloc;      \/* Number of entries allocated in a[] below *\/$/;"	m	struct:SrcList	file:
nAlloc	vendor\sqlite\sqlite3.c	/^  u64 nAlloc;         \/* Total number of calls to malloc *\/$/;"	m	struct:Mem5Global	file:
nAllocated	vendor\sqlite\sqlite3.c	/^  int nAllocated;              \/* space allocated to zToken buffer *\/$/;"	m	struct:porter_tokenizer_cursor	file:
nArg	vendor\sqlite\sqlite3.c	/^  i16 nArg;            \/* Number of arguments.  -1 means unlimited *\/$/;"	m	struct:FuncDef	file:
nArg	vendor\sqlite\sqlite3.c	/^  int nArg;                \/* Total number of arguments *\/$/;"	m	struct:PrintfArguments	file:
nAuthPW	vendor\sqlite\sqlite3.c	/^  int nAuthPW;                  \/* Size of the zAuthPW in bytes *\/$/;"	m	struct:sqlite3_userauth	file:
nAutoincrmerge	vendor\sqlite\sqlite3.c	/^  int nAutoincrmerge;             \/* Value configured by 'automerge' *\/$/;"	m	struct:Fts3Table	file:
nBackfill	vendor\sqlite\sqlite3.c	/^  u32 nBackfill;                  \/* Number of WAL frames backfilled into DB *\/$/;"	m	struct:WalCkptInfo	file:
nBacktrace	vendor\sqlite\sqlite3.c	/^  char nBacktrace;                    \/* Number of backtraces on this alloc *\/$/;"	m	struct:MemBlockHdr	file:
nBacktrace	vendor\sqlite\sqlite3.c	/^  int nBacktrace;$/;"	m	struct:__anon12	file:
nBacktraceSlots	vendor\sqlite\sqlite3.c	/^  char nBacktraceSlots;               \/* Available backtrace slots *\/$/;"	m	struct:MemBlockHdr	file:
nBackup	vendor\sqlite\sqlite3.c	/^  int nBackup;       \/* Number of backup operations reading this btree *\/$/;"	m	struct:Btree	file:
nBlock	vendor\sqlite\sqlite3.c	/^  int nBlock;      \/* Number of szAtom sized blocks in zPool *\/$/;"	m	struct:Mem5Global	file:
nBuf	vendor\sqlite\sqlite3.c	/^  int nBuf;                       \/* Size of zBuf[] in bytes *\/$/;"	m	struct:JournalFile	file:
nBuffer	vendor\sqlite\sqlite3.c	/^  int nBuffer;                    \/* Allocated size of aBuffer[] in bytes *\/$/;"	m	struct:Fts3MultiSegReader	file:
nBuffer	vendor\sqlite\sqlite3.c	/^  int nBuffer;                    \/* Size of write buffer in bytes *\/$/;"	m	struct:PmaWriter	file:
nBuffer	vendor\sqlite\sqlite3.c	/^  int nBuffer;                \/* Size of read buffer in bytes *\/$/;"	m	struct:PmaReader	file:
nBuffer	vendor\sqlite\sqlite3.c	/^  int nBuffer;$/;"	m	struct:IcuCursor	file:
nBusy	vendor\sqlite\sqlite3.c	/^  int nBusy;                  \/* Current number of users of this structure *\/$/;"	m	struct:Rtree	file:
nBusy	vendor\sqlite\sqlite3.c	/^  int nBusy;                 \/* Incremented with each busy call *\/$/;"	m	struct:BusyHandler	file:
nByte	vendor\sqlite\sqlite3.c	/^  int nByte;              \/* Size of open blob, in bytes *\/$/;"	m	struct:Incrblob	file:
nBytes	vendor\sqlite\sqlite3.c	/^  int nBytes;                  \/* size of the input *\/$/;"	m	struct:simple_tokenizer_cursor	file:
nBytesPerCell	vendor\sqlite\sqlite3.c	/^  u8 nBytesPerCell;           \/* Bytes consumed per cell *\/$/;"	m	struct:Rtree	file:
nCell	vendor\sqlite\sqlite3.c	/^  u16 nCell;           \/* Number of cells on this page, local and ovfl *\/$/;"	m	struct:MemPage	file:
nChange	vendor\sqlite\sqlite3.c	/^  int nChange;                  \/* Value returned by sqlite3_changes() *\/$/;"	m	struct:sqlite3	file:
nChange	vendor\sqlite\sqlite3.c	/^  int nChange;            \/* Number of db changes made since last reset *\/$/;"	m	struct:Vdbe	file:
nChange	vendor\sqlite\sqlite3.c	/^  int nChange;            \/* Statement changes (Vdbe.nChange)     *\/$/;"	m	struct:VdbeFrame	file:
nChar	vendor\sqlite\sqlite3.c	/^  int  nChar;          \/* Length of the string so far *\/$/;"	m	struct:StrAccum	file:
nChar	vendor\sqlite\sqlite3.c	/^  int nChar;                  \/* Number of UChar elements in pInput *\/$/;"	m	struct:IcuCursor	file:
nChild	vendor\sqlite\sqlite3.c	/^  u8 nChild;              \/* Number of children that must disable us *\/$/;"	m	struct:WhereTerm	file:
nChildCsr	vendor\sqlite\sqlite3.c	/^  int nChildCsr;          \/* Number of cursors for child frame *\/$/;"	m	struct:VdbeFrame	file:
nChildMem	vendor\sqlite\sqlite3.c	/^  int nChildMem;          \/* Number of memory cells for child frame *\/$/;"	m	struct:VdbeFrame	file:
nCkpt	vendor\sqlite\sqlite3.c	/^  u32 nCkpt;                 \/* Checkpoint sequence counter in the wal-header *\/$/;"	m	struct:Wal	file:
nCol	vendor\sqlite\sqlite3.c	/^  i16 nCol;            \/* Number of columns in this table *\/$/;"	m	struct:Table	file:
nCol	vendor\sqlite\sqlite3.c	/^  int nCol;                           \/* Number of entries in azCol[] *\/$/;"	m	struct:ParseContext	file:
nCol	vendor\sqlite\sqlite3.c	/^  int nCol;                       \/* Number of columns in table *\/$/;"	m	struct:MatchInfo	file:
nCol	vendor\sqlite\sqlite3.c	/^  int nCol;                 \/* Number of columns in index + pk\/rowid *\/$/;"	m	struct:Stat4Accum	file:
nCol	vendor\sqlite\sqlite3.c	/^  int nCol;         \/* Number of columns in this key *\/$/;"	m	struct:FKey	file:
nColumn	vendor\sqlite\sqlite3.c	/^  int nColumn;                    \/* number of named columns in virtual table *\/$/;"	m	struct:Fts3Table	file:
nColumn	vendor\sqlite\sqlite3.c	/^  int nColumn;            \/* Number of used entries in aCol[] *\/$/;"	m	struct:AggInfo	file:
nColumn	vendor\sqlite\sqlite3.c	/^  u16 nColumn;             \/* Number of columns stored in the index *\/$/;"	m	struct:Index	file:
nColumn	vendor\sqlite\sqlite3.c	/^  u32 nColumn;       \/* Number of columns in the result *\/$/;"	m	struct:TabResult	file:
nConstraint	vendor\sqlite\sqlite3.c	/^  int nConstraint;                  \/* Number of entries in aConstraint *\/$/;"	m	struct:RtreeCursor	file:
nConstraint	vendor\sqlite\sqlite3.c	/^  int nConstraint;           \/* Number of entries in aConstraint *\/$/;"	m	struct:sqlite3_index_info	file:
nCoord	vendor\sqlite\sqlite3.c	/^  int nCoord;                       \/* Number of coordinates *\/$/;"	m	struct:sqlite3_rtree_query_info	file:
nCost	vendor\sqlite\sqlite3.c	/^  int nCost;                      \/* Cost of running iterator *\/$/;"	m	struct:Fts3MultiSegReader	file:
nCsr	vendor\sqlite\sqlite3.c	/^  int nCsr;                     \/* Number of cursors required *\/$/;"	m	struct:SubProgram	file:
nCte	vendor\sqlite\sqlite3.c	/^  int nCte;                       \/* Number of CTEs in the WITH clause *\/$/;"	m	struct:With	file:
nCurrent	vendor\sqlite\sqlite3.c	/^  int nCurrent[NCSIZE];    \/* Current number of allocations *\/$/;"	m	struct:__anon12	file:
nCurrentPage	vendor\sqlite\sqlite3.c	/^  unsigned int nCurrentPage;     \/* Number of purgeable pages allocated *\/$/;"	m	struct:PGroup	file:
nCursor	vendor\sqlite\sqlite3.c	/^  int nCursor;            \/* Number of entries in apCsr *\/$/;"	m	struct:VdbeFrame	file:
nCursor	vendor\sqlite\sqlite3.c	/^  int nCursor;            \/* Number of slots in apCsr[] *\/$/;"	m	struct:Vdbe	file:
nData	vendor\sqlite\sqlite3.c	/^  int nData;                      \/* Bytes of data in aData *\/$/;"	m	struct:SegmentWriter	file:
nData	vendor\sqlite\sqlite3.c	/^  int nData;                      \/* Bytes of valid data so far *\/$/;"	m	struct:SegmentNode	file:
nData	vendor\sqlite\sqlite3.c	/^  int nData;$/;"	m	struct:PendingList	file:
nData	vendor\sqlite\sqlite3.c	/^  u32 nData;         \/* Slots used in azResult[].  (nRow+1)*nColumn *\/$/;"	m	struct:TabResult	file:
nDb	vendor\sqlite\sqlite3.c	/^  int nDb;                      \/* Number of backends currently in use *\/$/;"	m	struct:sqlite3	file:
nDbChange	vendor\sqlite\sqlite3.c	/^  int nDbChange;          \/* Value of db->nChange *\/$/;"	m	struct:VdbeFrame	file:
nDeferredCons	vendor\sqlite\sqlite3.c	/^  i64 nDeferredCons;                  \/* Number of deferred fk violations *\/$/;"	m	struct:Savepoint	file:
nDeferredCons	vendor\sqlite\sqlite3.c	/^  i64 nDeferredCons;            \/* Net deferred constraints this transaction. *\/$/;"	m	struct:sqlite3	file:
nDeferredImmCons	vendor\sqlite\sqlite3.c	/^  i64 nDeferredImmCons;               \/* Number of deferred imm fk. *\/$/;"	m	struct:Savepoint	file:
nDeferredImmCons	vendor\sqlite\sqlite3.c	/^  i64 nDeferredImmCons;         \/* Net deferred immediate constraints *\/$/;"	m	struct:sqlite3	file:
nDim	vendor\sqlite\sqlite3.c	/^  u8 nDim;                    \/* Number of dimensions *\/$/;"	m	struct:Rtree	file:
nDoc	vendor\sqlite\sqlite3.c	/^    sqlite3_int64 nDoc;           \/* 'documents' values for current csr row *\/$/;"	m	struct:Fts3auxCursor::Fts3auxColstats	file:
nDoc	vendor\sqlite\sqlite3.c	/^  sqlite3_int64 nDoc;             \/* Documents in table *\/$/;"	m	struct:Fts3Cursor	file:
nDoc	vendor\sqlite\sqlite3.c	/^  sqlite3_int64 nDoc;             \/* Number of docs in database *\/$/;"	m	struct:MatchInfo	file:
nDoclist	vendor\sqlite\sqlite3.c	/^  int nDoclist;                   \/* Size of aDoclist[] in bytes *\/$/;"	m	struct:Fts3MultiSegReader	file:
nDoclist	vendor\sqlite\sqlite3.c	/^  int nDoclist;                   \/* Size of buffer at aDoclist *\/$/;"	m	struct:Fts3Cursor	file:
nDoclist	vendor\sqlite\sqlite3.c	/^  int nDoclist;                   \/* Size of doclist in bytes *\/$/;"	m	struct:NodeReader	file:
nDoclist	vendor\sqlite\sqlite3.c	/^  int nDoclist;                   \/* Size of doclist in current entry *\/$/;"	m	struct:Fts3SegReader	file:
nEntry	vendor\sqlite\sqlite3.c	/^    int nEntry;                   \/* Nr. of entries in aPgno[] and aIndex[] *\/$/;"	m	struct:WalIterator::WalSegment	file:
nEntry	vendor\sqlite\sqlite3.c	/^  int nEntry;                     \/* Number of terms written to node so far *\/$/;"	m	struct:SegmentNode	file:
nEq	vendor\sqlite\sqlite3.c	/^      u16 nEq;               \/* Number of equality constraints *\/$/;"	m	struct:WhereLoop::__anon21::__anon22	file:
nEquiv	vendor\sqlite\sqlite3.c	/^  unsigned char nEquiv;      \/* Number of entries in aEquiv[] *\/$/;"	m	struct:WhereScan	file:
nErr	vendor\sqlite\sqlite3.c	/^  int nErr;            \/* Number of errors encountered while resolving names *\/$/;"	m	struct:NameContext	file:
nErr	vendor\sqlite\sqlite3.c	/^  int nErr;            \/* Number of errors seen *\/$/;"	m	struct:Parse	file:
nErr	vendor\sqlite\sqlite3.c	/^  int nErr;         \/* Number of messages written to zErrMsg so far *\/$/;"	m	struct:IntegrityCk	file:
nEst	vendor\sqlite\sqlite3.c	/^  LogEst nEst;                    \/* Estimated output rows per loop *\/$/;"	m	struct:ScanStatus	file:
nException	vendor\sqlite\sqlite3.c	/^  int nException;$/;"	m	struct:unicode_tokenizer	file:
nExpr	vendor\sqlite\sqlite3.c	/^  int nExpr;             \/* Number of expressions on the list *\/$/;"	m	struct:ExprList	file:
nExt	vendor\sqlite\sqlite3.c	/^  int nExt;              \/* Number of entries in aExt[] *\/          $/;"	m	struct:sqlite3AutoExtList	file:
nExtension	vendor\sqlite\sqlite3.c	/^  int nExtension;               \/* Number of loaded extensions *\/$/;"	m	struct:sqlite3	file:
nExtra	vendor\sqlite\sqlite3.c	/^  u16 nExtra;                 \/* Add this many bytes to each in-memory page *\/$/;"	m	struct:Pager	file:
nFails	vendor\sqlite\sqlite3.c	/^  int nFails;                  \/* Number of conch taking failures *\/$/;"	m	struct:proxyLockingContext	file:
nFetchOut	vendor\sqlite\sqlite3.c	/^  int nFetchOut;                      \/* Number of outstanding xFetch refs *\/$/;"	m	struct:unixFile	file:
nFetchOut	vendor\sqlite\sqlite3.c	/^  int nFetchOut;                \/* Number of outstanding xFetch references *\/$/;"	m	struct:winFile	file:
nField	vendor\sqlite\sqlite3.c	/^  i16 nField;           \/* Number of fields in the header *\/$/;"	m	struct:VdbeCursor	file:
nField	vendor\sqlite\sqlite3.c	/^  u16 nField;         \/* Number of entries in apMem[] *\/$/;"	m	struct:UnpackedRecord	file:
nField	vendor\sqlite\sqlite3.c	/^  u16 nField;         \/* Number of key columns in the index *\/$/;"	m	struct:KeyInfo	file:
nFkConstraint	vendor\sqlite\sqlite3.c	/^  i64 nFkConstraint;      \/* Number of imm. FK constraints this VM *\/$/;"	m	struct:Vdbe	file:
nFrame	vendor\sqlite\sqlite3.c	/^  int nFrame;             \/* Number of frames in pFrame list *\/$/;"	m	struct:Vdbe	file:
nFree	vendor\sqlite\sqlite3.c	/^  u16 nFree;           \/* Number of free bytes on the page *\/$/;"	m	struct:MemPage	file:
nFreeSlot	vendor\sqlite\sqlite3.c	/^  int nFreeSlot;                 \/* Number of unused pcache slots *\/$/;"	m	struct:PCacheGlobal	file:
nFresh	vendor\sqlite\sqlite3.c	/^  u16 nFresh;                    \/* Number of objects on pFresh *\/$/;"	m	struct:RowSet	file:
nFunc	vendor\sqlite\sqlite3.c	/^  int nFunc;              \/* Number of entries in aFunc[] *\/$/;"	m	struct:AggInfo	file:
nHash	vendor\sqlite\sqlite3.c	/^  unsigned int nHash;                 \/* Number of slots in apHash[] *\/$/;"	m	struct:PCache1	file:
nHdrParsed	vendor\sqlite\sqlite3.c	/^  u16 nHdrParsed;       \/* Number of header fields parsed so far *\/$/;"	m	struct:VdbeCursor	file:
nHeap	vendor\sqlite\sqlite3.c	/^  int nHeap;                        \/* Size of pHeap[] *\/$/;"	m	struct:Sqlite3Config	file:
nHeight	vendor\sqlite\sqlite3.c	/^  int nHeight;              \/* Expression tree height of current sub-select *\/$/;"	m	struct:Parse	file:
nHeight	vendor\sqlite\sqlite3.c	/^  int nHeight;           \/* Height of the tree headed by this node *\/$/;"	m	struct:Expr	file:
nId	vendor\sqlite\sqlite3.c	/^  int nId;         \/* Number of identifiers on the list *\/$/;"	m	struct:IdList	file:
nIn	vendor\sqlite\sqlite3.c	/^      int nIn;              \/* Number of entries in aInLoop[] *\/$/;"	m	struct:WhereLevel::__anon19::__anon20	file:
nIndent	vendor\sqlite\sqlite3.c	/^  int nIndent;       \/* Number of elements in aIndent *\/$/;"	m	struct:Explain	file:
nIndex	vendor\sqlite\sqlite3.c	/^  int nIndex;                     \/* Size of aIndex[] *\/$/;"	m	struct:Fts3Table	file:
nInput	vendor\sqlite\sqlite3.c	/^  int nInput;                     \/* Size of aInput[] in bytes *\/$/;"	m	struct:unicode_cursor	file:
nInput	vendor\sqlite\sqlite3.c	/^  int nInput;                  \/* size of the input *\/$/;"	m	struct:porter_tokenizer_cursor	file:
nKey	vendor\sqlite\sqlite3.c	/^  i64 nKey;                 \/* Size of pKey, or last integer key *\/$/;"	m	struct:BtCursor	file:
nKey	vendor\sqlite\sqlite3.c	/^  i64 nKey;      \/* The key for INTKEY tables, or nPayload otherwise *\/$/;"	m	struct:CellInfo	file:
nKey	vendor\sqlite\sqlite3.c	/^  int nKey;                   \/* Number of bytes in key *\/$/;"	m	struct:PmaReader	file:
nKey	vendor\sqlite\sqlite3.c	/^  void *pKey; int nKey;      \/* Key associated with this element *\/$/;"	m	struct:Fts3HashElem	file:
nKeyCol	vendor\sqlite\sqlite3.c	/^  int nKeyCol;              \/* Number of index columns w\/o the pk\/rowid *\/$/;"	m	struct:Stat4Accum	file:
nKeyCol	vendor\sqlite\sqlite3.c	/^  u16 nKeyCol;             \/* Number of columns forming the key *\/$/;"	m	struct:Index	file:
nLSlot	vendor\sqlite\sqlite3.c	/^  u16 nLSlot;           \/* Number of slots allocated for aLTerm[] *\/$/;"	m	struct:WhereLoop	file:
nLTerm	vendor\sqlite\sqlite3.c	/^  u16 nLTerm;           \/* Number of entries in aLTerm[] *\/$/;"	m	struct:WhereLoop	file:
nLabel	vendor\sqlite\sqlite3.c	/^  int nLabel;          \/* Number of labels used *\/$/;"	m	struct:Parse	file:
nLeafAdd	vendor\sqlite\sqlite3.c	/^  u32 nLeafAdd;                   \/* Number of leaf blocks added this trans *\/$/;"	m	struct:Fts3Table	file:
nLeafData	vendor\sqlite\sqlite3.c	/^  i64 nLeafData;                  \/* Number of bytes of leaf data written *\/$/;"	m	struct:SegmentWriter	file:
nLeafData	vendor\sqlite\sqlite3.c	/^  sqlite3_int64 nLeafData;        \/* Bytes of leaf page data so far *\/$/;"	m	struct:IncrmergeWriter	file:
nLeafEst	vendor\sqlite\sqlite3.c	/^  int nLeafEst;                   \/* Space allocated for leaf blocks *\/$/;"	m	struct:IncrmergeWriter	file:
nLevel	vendor\sqlite\sqlite3.c	/^  u8 nLevel;                \/* Number of nested loop *\/$/;"	m	struct:WhereInfo	file:
nList	vendor\sqlite\sqlite3.c	/^  int nList;                     \/* Length of position list *\/$/;"	m	struct:Fts3Doclist	file:
nList	vendor\sqlite\sqlite3.c	/^  int nList;$/;"	m	struct:TokenDoclist	file:
nLocal	vendor\sqlite\sqlite3.c	/^  u16 nLocal;    \/* Amount of payload held locally, not on overflow *\/$/;"	m	struct:CellInfo	file:
nLock	vendor\sqlite\sqlite3.c	/^  int nLock;                      \/* Number of outstanding file locks *\/$/;"	m	struct:unixInodeInfo	file:
nLookaside	vendor\sqlite\sqlite3.c	/^  int nLookaside;                   \/* Default lookaside buffer count *\/$/;"	m	struct:Sqlite3Config	file:
nMalloc	vendor\sqlite\sqlite3.c	/^  int nMalloc;                    \/* Size of malloc'd buffer at zMalloc *\/$/;"	m	struct:SegmentNode	file:
nMalloc	vendor\sqlite\sqlite3.c	/^  int nMalloc;                    \/* Size of malloc'd buffer at zMalloc *\/$/;"	m	struct:SegmentWriter	file:
nMatchinfo	vendor\sqlite\sqlite3.c	/^  int nMatchinfo;                 \/* Number of elements in aMatchinfo[] *\/$/;"	m	struct:Fts3Cursor	file:
nMax	vendor\sqlite\sqlite3.c	/^  unsigned int nMax;                  \/* Configured "cache_size" value *\/$/;"	m	struct:PCache1	file:
nMaxArg	vendor\sqlite\sqlite3.c	/^  int nMaxArg;         \/* Max args passed to user function by sub-program *\/$/;"	m	struct:Parse	file:
nMaxPage	vendor\sqlite\sqlite3.c	/^  unsigned int nMaxPage;         \/* Sum of nMax for purgeable caches *\/$/;"	m	struct:PGroup	file:
nMaxPendingData	vendor\sqlite\sqlite3.c	/^  int nMaxPendingData;            \/* Max pending data before flush to disk *\/$/;"	m	struct:Fts3Table	file:
nMaxSorterMmap	vendor\sqlite\sqlite3.c	/^  int nMaxSorterMmap;           \/* Maximum size of regions mapped by sorter *\/$/;"	m	struct:sqlite3	file:
nMem	vendor\sqlite\sqlite3.c	/^  int nMem;                     \/* Number of memory cells required *\/$/;"	m	struct:SubProgram	file:
nMem	vendor\sqlite\sqlite3.c	/^  int nMem;               \/* Number of entries in aMem *\/$/;"	m	struct:VdbeFrame	file:
nMem	vendor\sqlite\sqlite3.c	/^  int nMem;               \/* Number of memory locations currently allocated *\/$/;"	m	struct:Vdbe	file:
nMem	vendor\sqlite\sqlite3.c	/^  int nMem;            \/* Number of memory cells used so far *\/$/;"	m	struct:Parse	file:
nMemory	vendor\sqlite\sqlite3.c	/^  int nMemory;                    \/* Size of list.aMemory allocation in bytes *\/$/;"	m	struct:VdbeSorter	file:
nMin	vendor\sqlite\sqlite3.c	/^  unsigned int nMin;                  \/* Minimum number of pages reserved *\/$/;"	m	struct:PCache1	file:
nMinPage	vendor\sqlite\sqlite3.c	/^  unsigned int nMinPage;         \/* Sum of nMin for purgeable caches *\/$/;"	m	struct:PGroup	file:
nMmapOut	vendor\sqlite\sqlite3.c	/^  int nMmapOut;               \/* Number of mmap pages currently outstanding *\/$/;"	m	struct:Pager	file:
nModuleArg	vendor\sqlite\sqlite3.c	/^  int nModuleArg;      \/* Number of arguments to the module *\/$/;"	m	struct:Table	file:
nName	vendor\sqlite\sqlite3.c	/^  int nName;                    \/* Length of the zCanonicalName[] string *\/$/;"	m	struct:vxworksFileId	file:
nNear	vendor\sqlite\sqlite3.c	/^  int nNear;                 \/* Valid if eType==FTSQUERY_NEAR *\/$/;"	m	struct:Fts3Expr	file:
nNest	vendor\sqlite\sqlite3.c	/^  int nNest;                          \/* Number of nested brackets *\/$/;"	m	struct:ParseContext	file:
nNode	vendor\sqlite\sqlite3.c	/^  int nNode;                      \/* Size of buffer at aNode (or 0) *\/$/;"	m	struct:Fts3SegReader	file:
nNode	vendor\sqlite\sqlite3.c	/^  int nNode;$/;"	m	struct:NodeReader	file:
nNodeSize	vendor\sqlite\sqlite3.c	/^  int nNodeSize;                  \/* Soft limit for node size *\/$/;"	m	struct:Fts3Table	file:
nOBSat	vendor\sqlite\sqlite3.c	/^  i8 nOBSat;                \/* Number of ORDER BY terms satisfied by indices *\/$/;"	m	struct:WhereInfo	file:
nOBSat	vendor\sqlite\sqlite3.c	/^  int nOBSat;           \/* Number of ORDER BY terms satisfied by indices *\/$/;"	m	struct:SortCtx	file:
nOcc	vendor\sqlite\sqlite3.c	/^    sqlite3_int64 nOcc;           \/* 'occurrences' values for current csr row *\/$/;"	m	struct:Fts3auxCursor::Fts3auxColstats	file:
nOffsetList	vendor\sqlite\sqlite3.c	/^  int nOffsetList;                \/* For descending pending seg-readers only *\/$/;"	m	struct:Fts3SegReader	file:
nOnce	vendor\sqlite\sqlite3.c	/^  int nOnce;                    \/* Number of OP_Once instructions *\/$/;"	m	struct:SubProgram	file:
nOnce	vendor\sqlite\sqlite3.c	/^  int nOnce;           \/* Number of OP_Once instructions so far *\/$/;"	m	struct:Parse	file:
nOnceFlag	vendor\sqlite\sqlite3.c	/^  int nOnceFlag;          \/* Number of entries in aOnceFlag *\/$/;"	m	struct:VdbeFrame	file:
nOnceFlag	vendor\sqlite\sqlite3.c	/^  int nOnceFlag;          \/* Size of array aOnceFlag[] *\/$/;"	m	struct:Vdbe	file:
nOp	vendor\sqlite\sqlite3.c	/^  int nOp;                      \/* Elements in aOp[] *\/$/;"	m	struct:SubProgram	file:
nOp	vendor\sqlite\sqlite3.c	/^  int nOp;                \/* Number of instructions in the program *\/$/;"	m	struct:Vdbe	file:
nOp	vendor\sqlite\sqlite3.c	/^  int nOp;                \/* Size of aOp array *\/$/;"	m	struct:VdbeFrame	file:
nOpAlloc	vendor\sqlite\sqlite3.c	/^  int nOpAlloc;        \/* Number of slots allocated for Vdbe.aOp[] *\/$/;"	m	struct:Parse	file:
nOrderBy	vendor\sqlite\sqlite3.c	/^  int nOrderBy;              \/* Number of terms in the ORDER BY clause *\/$/;"	m	struct:sqlite3_index_info	file:
nOrig	vendor\sqlite\sqlite3.c	/^  Pgno nOrig;                  \/* Original number of pages in file *\/$/;"	m	struct:PagerSavepoint	file:
nOther	vendor\sqlite\sqlite3.c	/^  int nOther;      \/* Number of references to columns in other FROM clauses *\/$/;"	m	struct:SrcCount	file:
nOut	vendor\sqlite\sqlite3.c	/^  LogEst nOut;          \/* Estimated number of output rows *\/$/;"	m	struct:WhereLoop	file:
nOut	vendor\sqlite\sqlite3.c	/^  LogEst nOut;        \/* Number of outputs for this subquery *\/$/;"	m	struct:WhereOrCost	file:
nOut	vendor\sqlite\sqlite3.c	/^  int nOut;               \/* Number of buffers currently checked out *\/$/;"	m	struct:Lookaside	file:
nOverflow	vendor\sqlite\sqlite3.c	/^  u8 nOverflow;        \/* Number of overflow cell bodies in aCell[] *\/$/;"	m	struct:MemPage	file:
nOvfl	vendor\sqlite\sqlite3.c	/^  int nOvfl;                      \/* Number of overflow pages to load doclist *\/$/;"	m	struct:Fts3TokenAndCost	file:
nOvflAlloc	vendor\sqlite\sqlite3.c	/^  int nOvflAlloc;           \/* Allocated size of aOverflow[] array *\/$/;"	m	struct:BtCursor	file:
nPMA	vendor\sqlite\sqlite3.c	/^  int nPMA;                       \/* Number of PMAs currently in file *\/$/;"	m	struct:SortSubtask	file:
nPSample	vendor\sqlite\sqlite3.c	/^  tRowcnt nPSample;         \/* How often to do a periodic sample *\/$/;"	m	struct:Stat4Accum	file:
nPage	vendor\sqlite\sqlite3.c	/^  Pgno nPage;       \/* Number of pages in the database *\/$/;"	m	struct:IntegrityCk	file:
nPage	vendor\sqlite\sqlite3.c	/^  int nPage;                        \/* Number of pages in pPage[] *\/$/;"	m	struct:Sqlite3Config	file:
nPage	vendor\sqlite\sqlite3.c	/^  u32 nPage;                      \/* Size of database in pages *\/$/;"	m	struct:WalIndexHdr	file:
nPage	vendor\sqlite\sqlite3.c	/^  u32 nPage;            \/* Number of pages in the database *\/$/;"	m	struct:BtShared	file:
nPage	vendor\sqlite\sqlite3.c	/^  unsigned int nPage;                 \/* Total number of pages in apHash *\/$/;"	m	struct:PCache1	file:
nPagecount	vendor\sqlite\sqlite3.c	/^  Pgno nPagecount;         \/* Total number of pages to copy *\/$/;"	m	struct:sqlite3_backup	file:
nParam	vendor\sqlite\sqlite3.c	/^  int nParam;                       \/* Number of function parameters *\/$/;"	m	struct:sqlite3_rtree_query_info	file:
nParam	vendor\sqlite\sqlite3.c	/^  int nParam;                     \/* Size of array aParam[] *\/$/;"	m	struct:sqlite3_rtree_geometry	file:
nParam	vendor\sqlite\sqlite3.c	/^  int nParam;                 \/* Number of parameters to the SQL function *\/$/;"	m	struct:RtreeMatchArg	file:
nPayload	vendor\sqlite\sqlite3.c	/^  u32 nPayload;  \/* Bytes of payload *\/$/;"	m	struct:CellInfo	file:
nPendingData	vendor\sqlite\sqlite3.c	/^  int nPendingData;               \/* Current bytes of pending data *\/$/;"	m	struct:Fts3Table	file:
nPgsz	vendor\sqlite\sqlite3.c	/^  int nPgsz;                      \/* Page size for host database *\/$/;"	m	struct:Fts3Table	file:
nPhrase	vendor\sqlite\sqlite3.c	/^  int nPhrase;                    \/* Number of matchable phrases in query *\/$/;"	m	struct:Fts3Cursor	file:
nPhrase	vendor\sqlite\sqlite3.c	/^  int nPhrase;                    \/* Number of matchable phrases in query *\/$/;"	m	struct:MatchInfo	file:
nPhrase	vendor\sqlite\sqlite3.c	/^  int nPhrase;                    \/* Number of phrases in query *\/$/;"	m	struct:SnippetIter	file:
nPhrase	vendor\sqlite\sqlite3.c	/^  int nPhrase;                    \/* Number of phrases seen so far *\/$/;"	m	struct:LoadDoclistCtx	file:
nPoint	vendor\sqlite\sqlite3.c	/^  int nPoint;                       \/* Number of slots used in aPoint[] *\/$/;"	m	struct:RtreeCursor	file:
nPointAlloc	vendor\sqlite\sqlite3.c	/^  int nPointAlloc;                  \/* Number of slots allocated for aPoint[] *\/$/;"	m	struct:RtreeCursor	file:
nPool	vendor\sqlite\sqlite3.c	/^  u32 nPool;$/;"	m	struct:Mem3Global	file:
nPopulate	vendor\sqlite\sqlite3.c	/^  int nPopulate;                  \/* If >0, bytes of buffer aNode[] loaded *\/$/;"	m	struct:Fts3SegReader	file:
nPrefix	vendor\sqlite\sqlite3.c	/^    int nPrefix;                  \/* Prefix length (0 for main terms index) *\/$/;"	m	struct:Fts3Table::Fts3Index	file:
nProgressOps	vendor\sqlite\sqlite3.c	/^  unsigned nProgressOps;        \/* Number of opcodes for progress callback *\/$/;"	m	struct:sqlite3	file:
nQueryLoop	vendor\sqlite\sqlite3.c	/^  u32 nQueryLoop;      \/* Est number of iterations of a query (10*log2(N)) *\/$/;"	m	struct:Parse	file:
nRangeReg	vendor\sqlite\sqlite3.c	/^  int nRangeReg;       \/* Size of the temporary register block *\/$/;"	m	struct:Parse	file:
nRead	vendor\sqlite\sqlite3.c	/^  int nRead;                  \/* Database pages read *\/$/;"	m	struct:Pager	file:
nReaders	vendor\sqlite\sqlite3.c	/^  int nReaders;       \/* Number of reader locks obtained *\/$/;"	m	struct:winceLock	file:
nRec	vendor\sqlite\sqlite3.c	/^  int nRec;                   \/* Pages journalled since last j-header written *\/$/;"	m	struct:Pager	file:
nRecValid	vendor\sqlite\sqlite3.c	/^  int nRecValid;            \/* Number of valid fields currently in pRec *\/$/;"	m	struct:WhereLoopBuilder	file:
nRecyclable	vendor\sqlite\sqlite3.c	/^  unsigned int nRecyclable;           \/* Number of pages in the LRU list *\/$/;"	m	struct:PCache1	file:
nRef	vendor\sqlite\sqlite3.c	/^  i16 nRef;                      \/* Number of users of this page *\/$/;"	m	struct:PgHdr	file:
nRef	vendor\sqlite\sqlite3.c	/^  int nRef;                           \/* Number of referenced pages *\/$/;"	m	struct:PCache	file:
nRef	vendor\sqlite\sqlite3.c	/^  int nRef;                       \/* NO LONGER USED *\/$/;"	m	struct:sqlite3_vtab	file:
nRef	vendor\sqlite\sqlite3.c	/^  int nRef;                       \/* Number of pointers to this structure *\/$/;"	m	struct:unixInodeInfo	file:
nRef	vendor\sqlite\sqlite3.c	/^  int nRef;                     \/* Number of references to this one *\/$/;"	m	struct:vxworksFileId	file:
nRef	vendor\sqlite\sqlite3.c	/^  int nRef;                   \/* Number of references to this node *\/$/;"	m	struct:RtreeNode	file:
nRef	vendor\sqlite\sqlite3.c	/^  int nRef;                  \/* Number of unixShm objects pointing to this *\/$/;"	m	struct:unixShmNode	file:
nRef	vendor\sqlite\sqlite3.c	/^  int nRef;                  \/* Number of winShm objects pointing to this *\/$/;"	m	struct:winShmNode	file:
nRef	vendor\sqlite\sqlite3.c	/^  int nRef;                 \/* Number of pointers to this structure *\/$/;"	m	struct:VTable	file:
nRef	vendor\sqlite\sqlite3.c	/^  int nRef;             \/* Number of references to this structure *\/$/;"	m	struct:BtShared	file:
nRef	vendor\sqlite\sqlite3.c	/^  int nRef;            \/* Number of names resolved by this context *\/$/;"	m	struct:NameContext	file:
nRef	vendor\sqlite\sqlite3.c	/^  int nRef;$/;"	m	struct:FuncDestructor	file:
nRef	vendor\sqlite\sqlite3.c	/^  u16 nRef;            \/* Number of pointers to this Table *\/$/;"	m	struct:Table	file:
nRef	vendor\sqlite\sqlite3.c	/^  u32 nRef;           \/* Number of references to this KeyInfo object *\/$/;"	m	struct:KeyInfo	file:
nRef	vendor\sqlite\sqlite3.c	/^  volatile int nRef;         \/* Number of enterances *\/$/;"	m	struct:sqlite3_mutex	file:
nRef	vendor\sqlite\sqlite3.c	/^  volatile int nRef;         \/* Number of entrances *\/$/;"	m	struct:sqlite3_mutex	file:
nRefInitMutex	vendor\sqlite\sqlite3.c	/^  int nRefInitMutex;                \/* Number of users of pInitMutex *\/$/;"	m	struct:Sqlite3Config	file:
nRegion	vendor\sqlite\sqlite3.c	/^  int nRegion;               \/* Size of array apRegion *\/$/;"	m	struct:winShmNode	file:
nRegion	vendor\sqlite\sqlite3.c	/^  u16 nRegion;               \/* Size of array apRegion *\/$/;"	m	struct:unixShmNode	file:
nRemaining	vendor\sqlite\sqlite3.c	/^  Pgno nRemaining;         \/* Number of pages left to copy *\/$/;"	m	struct:sqlite3_backup	file:
nResColumn	vendor\sqlite\sqlite3.c	/^  u16 nResColumn;         \/* Number of columns in one row of the result set *\/$/;"	m	struct:Vdbe	file:
nReserve	vendor\sqlite\sqlite3.c	/^  i16 nReserve;               \/* Number of unused bytes at end of each page *\/$/;"	m	struct:Pager	file:
nReserve	vendor\sqlite\sqlite3.c	/^  int nReserve;                  \/* Try to keep nFreeSlot above this *\/$/;"	m	struct:PCacheGlobal	file:
nRow	vendor\sqlite\sqlite3.c	/^  LogEst nRow;          \/* Estimated number of rows generated by this path *\/$/;"	m	struct:WherePath	file:
nRow	vendor\sqlite\sqlite3.c	/^  tRowcnt nRow;             \/* Number of rows in the entire table *\/$/;"	m	struct:Stat4Accum	file:
nRow	vendor\sqlite\sqlite3.c	/^  u32 nRow;          \/* Number of rows in the result *\/$/;"	m	struct:TabResult	file:
nRowAvg	vendor\sqlite\sqlite3.c	/^  int nRowAvg;                    \/* Average size of database rows, in pages *\/$/;"	m	struct:Fts3Cursor	file:
nRowEst	vendor\sqlite\sqlite3.c	/^  i64 nRowEst;                \/* Estimated number of rows in this table *\/$/;"	m	struct:Rtree	file:
nRowEst0	vendor\sqlite\sqlite3.c	/^  tRowcnt nRowEst0;        \/* Non-logarithmic number of rows in the index *\/$/;"	m	struct:Index	file:
nRowLogEst	vendor\sqlite\sqlite3.c	/^  LogEst nRowLogEst;   \/* Estimated rows in table - from sqlite_stat1 table *\/$/;"	m	struct:Table	file:
nRowOut	vendor\sqlite\sqlite3.c	/^  LogEst nRowOut;           \/* Estimated number of output rows *\/$/;"	m	struct:WhereInfo	file:
nRowid	vendor\sqlite\sqlite3.c	/^  u32 nRowid;                     \/* Sizeof aRowid[] *\/$/;"	m	struct:Stat4Sample	file:
nSample	vendor\sqlite\sqlite3.c	/^  int nSample;              \/* Current number of samples *\/$/;"	m	struct:Stat4Accum	file:
nSample	vendor\sqlite\sqlite3.c	/^  int nSample;             \/* Number of elements in aSample[] *\/$/;"	m	struct:Index	file:
nSampleCol	vendor\sqlite\sqlite3.c	/^  int nSampleCol;          \/* Size of IndexSample.anEq[] and so on *\/$/;"	m	struct:Index	file:
nSavepoint	vendor\sqlite\sqlite3.c	/^  int nSavepoint;               \/* Number of non-transaction savepoints *\/$/;"	m	struct:sqlite3	file:
nSavepoint	vendor\sqlite\sqlite3.c	/^  int nSavepoint;             \/* Number of elements in aSavepoint[] *\/$/;"	m	struct:Pager	file:
nScan	vendor\sqlite\sqlite3.c	/^  int nScan;              \/* Entries in aScan[] *\/$/;"	m	struct:Vdbe	file:
nScratch	vendor\sqlite\sqlite3.c	/^  int nScratch;                     \/* Number of scratch buffers *\/$/;"	m	struct:Sqlite3Config	file:
nScratchFree	vendor\sqlite\sqlite3.c	/^  u32 nScratchFree;$/;"	m	struct:Mem0Global	file:
nSdst	vendor\sqlite\sqlite3.c	/^  int nSdst;           \/* Number of registers allocated *\/$/;"	m	struct:SelectDest	file:
nSegment	vendor\sqlite\sqlite3.c	/^  int nSegment;                   \/* Number of entries in aSegment[] *\/$/;"	m	struct:WalIterator	file:
nSegment	vendor\sqlite\sqlite3.c	/^  int nSegment;                   \/* Size of apSegment array *\/$/;"	m	struct:Fts3MultiSegReader	file:
nSelect	vendor\sqlite\sqlite3.c	/^  int nSelect;         \/* Number of SELECT statements seen *\/$/;"	m	struct:Parse	file:
nSelectIndent	vendor\sqlite\sqlite3.c	/^  int nSelectIndent;   \/* How far to indent SELECTTRACE() output *\/$/;"	m	struct:Parse	file:
nSelectRow	vendor\sqlite\sqlite3.c	/^  u64 nSelectRow;        \/* Estimated number of result rows *\/$/;"	m	struct:Select	file:
nSet	vendor\sqlite\sqlite3.c	/^  int nSet;            \/* Number of sets used so far *\/$/;"	m	struct:Parse	file:
nSet	vendor\sqlite\sqlite3.c	/^  u32 nSet;       \/* Number of bits that are set - only valid for aHash$/;"	m	struct:Bitvec	file:
nShared	vendor\sqlite\sqlite3.c	/^  int nShared;                    \/* Number of SHARED locks held *\/$/;"	m	struct:unixInodeInfo	file:
nSize	vendor\sqlite\sqlite3.c	/^  int nSize;                      \/* Size of allocation at aData *\/$/;"	m	struct:SegmentWriter	file:
nSize	vendor\sqlite\sqlite3.c	/^  u16 nSize;     \/* Size of the cell content on the main b-tree page *\/$/;"	m	struct:CellInfo	file:
nSkip	vendor\sqlite\sqlite3.c	/^  u16 nSkip;            \/* Number of NULL aLTerm[] entries *\/$/;"	m	struct:WhereLoop	file:
nSlot	vendor\sqlite\sqlite3.c	/^  int nSlot;                     \/* The number of pcache slots *\/$/;"	m	struct:PCacheGlobal	file:
nSlot	vendor\sqlite\sqlite3.c	/^  int nSlot;               \/* Number of entries in a[] *\/$/;"	m	struct:WhereClause	file:
nSnippet	vendor\sqlite\sqlite3.c	/^  int nSnippet;                   \/* Requested snippet length (in tokens) *\/$/;"	m	struct:SnippetIter	file:
nSortingColumn	vendor\sqlite\sqlite3.c	/^  int nSortingColumn;     \/* Number of columns in the sorting index *\/$/;"	m	struct:AggInfo	file:
nSpace	vendor\sqlite\sqlite3.c	/^  int nSpace;$/;"	m	struct:PendingList	file:
nSrc	vendor\sqlite\sqlite3.c	/^  int nSrc;        \/* Number of tables or subqueries in the FROM clause *\/$/;"	m	struct:SrcList	file:
nStat	vendor\sqlite\sqlite3.c	/^  int nStat;                      \/* Size of aStat[] array *\/$/;"	m	struct:Fts3auxCursor	file:
nStatement	vendor\sqlite\sqlite3.c	/^  int nStatement;               \/* Number of nested statement-transactions  *\/$/;"	m	struct:sqlite3	file:
nStmtDefCons	vendor\sqlite\sqlite3.c	/^  i64 nStmtDefCons;       \/* Number of def. constraints when stmt started *\/$/;"	m	struct:Vdbe	file:
nStmtDefImmCons	vendor\sqlite\sqlite3.c	/^  i64 nStmtDefImmCons;    \/* Number of def. imm constraints when stmt started *\/$/;"	m	struct:Vdbe	file:
nStop	vendor\sqlite\sqlite3.c	/^  int nStop;                      \/* Byte-length of string zStop *\/$/;"	m	struct:Fts3auxCursor	file:
nSub	vendor\sqlite\sqlite3.c	/^  int nSub;                  \/* Number of entries in apSub *\/$/;"	m	struct:VdbeOpIter	file:
nSubRec	vendor\sqlite\sqlite3.c	/^  u32 nSubRec;                \/* Number of records written to sub-journal *\/$/;"	m	struct:Pager	file:
nTab	vendor\sqlite\sqlite3.c	/^  int nTab;            \/* Number of previously allocated VDBE cursors *\/$/;"	m	struct:Parse	file:
nTableLock	vendor\sqlite\sqlite3.c	/^  int nTableLock;        \/* Number of locks in aTableLock *\/$/;"	m	struct:Parse	file:
nTask	vendor\sqlite\sqlite3.c	/^  u8 nTask;                       \/* Size of aTask[] array *\/$/;"	m	struct:VdbeSorter	file:
nTempReg	vendor\sqlite\sqlite3.c	/^  u8 nTempReg;         \/* Number of temporary registers in aTempReg[] *\/$/;"	m	struct:Parse	file:
nTerm	vendor\sqlite\sqlite3.c	/^  int nTerm;                      \/* Number of bytes in current term *\/$/;"	m	struct:Fts3SegReader	file:
nTerm	vendor\sqlite\sqlite3.c	/^  int nTerm;                      \/* Number of bytes in zTerm *\/$/;"	m	struct:SegmentNode	file:
nTerm	vendor\sqlite\sqlite3.c	/^  int nTerm;                      \/* Number of bytes in zTerm *\/$/;"	m	struct:SegmentWriter	file:
nTerm	vendor\sqlite\sqlite3.c	/^  int nTerm;                      \/* Size of zTerm in bytes *\/$/;"	m	struct:Fts3MultiSegReader	file:
nTerm	vendor\sqlite\sqlite3.c	/^  int nTerm;               \/* Number of terms *\/$/;"	m	struct:WhereClause	file:
nTerm	vendor\sqlite\sqlite3.c	/^  int nTerm;$/;"	m	struct:Fts3SegFilter	file:
nTermAlloc	vendor\sqlite\sqlite3.c	/^  int nTermAlloc;                 \/* Allocated size of zTerm buffer *\/$/;"	m	struct:Fts3SegReader	file:
nThis	vendor\sqlite\sqlite3.c	/^  int nThis;       \/* Number of references to columns in pSrcList *\/$/;"	m	struct:SrcCount	file:
nTitle	vendor\sqlite\sqlite3.c	/^  int nTitle;        \/* Bytes of zTitle to save.  Includes '\\0' and padding *\/$/;"	m	struct:__anon12	file:
nTitle	vendor\sqlite\sqlite3.c	/^  u8 nTitle;                          \/* Bytes of title; includes '\\0' *\/$/;"	m	struct:MemBlockHdr	file:
nToken	vendor\sqlite\sqlite3.c	/^  int nToken;                     \/* Number of tokens in phrase *\/$/;"	m	struct:SnippetPhrase	file:
nToken	vendor\sqlite\sqlite3.c	/^  int nToken;                     \/* Number of tokens seen so far *\/$/;"	m	struct:LoadDoclistCtx	file:
nToken	vendor\sqlite\sqlite3.c	/^  int nToken;                     \/* Size of zToken in bytes *\/$/;"	m	struct:Fts3tokCursor	file:
nToken	vendor\sqlite\sqlite3.c	/^  int nToken;                \/* Number of tokens in the phrase *\/$/;"	m	struct:Fts3Phrase	file:
nTokenAllocated	vendor\sqlite\sqlite3.c	/^  int nTokenAllocated;         \/* space allocated to zToken buffer *\/$/;"	m	struct:simple_tokenizer_cursor	file:
nTotalChange	vendor\sqlite\sqlite3.c	/^  int nTotalChange;             \/* Value returned by sqlite3_total_changes() *\/$/;"	m	struct:sqlite3	file:
nTransaction	vendor\sqlite\sqlite3.c	/^  int nTransaction;     \/* Number of open transactions (read + write) *\/$/;"	m	struct:BtShared	file:
nTree	vendor\sqlite\sqlite3.c	/^  int nTree;                 \/* Used size of aTree\/aReadr (power of 2) *\/$/;"	m	struct:MergeEngine	file:
nUsed	vendor\sqlite\sqlite3.c	/^  int nUsed;               \/* Number of arguments used so far *\/$/;"	m	struct:PrintfArguments	file:
nVTrans	vendor\sqlite\sqlite3.c	/^  int nVTrans;                  \/* Allocated size of aVTrans *\/$/;"	m	struct:sqlite3	file:
nVal	vendor\sqlite\sqlite3.c	/^  int nVal;                       \/* Size of the record in bytes *\/$/;"	m	struct:SorterRecord	file:
nVar	vendor\sqlite\sqlite3.c	/^  int nVar;                 \/* Number of '?' variables seen in the SQL so far *\/$/;"	m	struct:Parse	file:
nVar	vendor\sqlite\sqlite3.c	/^  ynVar nVar;             \/* Number of entries in aVar[] *\/$/;"	m	struct:Vdbe	file:
nVdbeActive	vendor\sqlite\sqlite3.c	/^  int nVdbeActive;              \/* Number of VDBEs currently running *\/$/;"	m	struct:sqlite3	file:
nVdbeExec	vendor\sqlite\sqlite3.c	/^  int nVdbeExec;                \/* Number of nested calls to VdbeExec() *\/$/;"	m	struct:sqlite3	file:
nVdbeRead	vendor\sqlite\sqlite3.c	/^  int nVdbeRead;                \/* Number of active VDBEs that read or write *\/$/;"	m	struct:sqlite3	file:
nVdbeWrite	vendor\sqlite\sqlite3.c	/^  int nVdbeWrite;               \/* Number of active VDBEs that read and write *\/$/;"	m	struct:sqlite3	file:
nVtabLock	vendor\sqlite\sqlite3.c	/^  int nVtabLock;            \/* Number of virtual tables to lock *\/$/;"	m	struct:Parse	file:
nWiData	vendor\sqlite\sqlite3.c	/^  int nWiData;               \/* Size of array apWiData *\/$/;"	m	struct:Wal	file:
nWork	vendor\sqlite\sqlite3.c	/^  int nWork;                      \/* Number of leaf pages flushed *\/$/;"	m	struct:IncrmergeWriter	file:
nWorker	vendor\sqlite\sqlite3.c	78162;"	d	file:
nWorker	vendor\sqlite\sqlite3.c	78228;"	d	file:
nXField	vendor\sqlite\sqlite3.c	/^  u16 nXField;        \/* Number of columns beyond the key columns *\/$/;"	m	struct:KeyInfo	file:
nZero	vendor\sqlite\sqlite3.c	/^    int nZero;          \/* Used when bit MEM_Zero is set in flags *\/$/;"	m	union:Mem::MemValue	file:
nameInUsingClause	vendor\sqlite\sqlite3.c	/^static int nameInUsingClause(IdList *pUsing, const char *zCol){$/;"	f	file:
ncFlags	vendor\sqlite\sqlite3.c	/^  u16 ncFlags;         \/* Zero or more NC_* flags defined below *\/$/;"	m	struct:NameContext	file:
nearlyFull	vendor\sqlite\sqlite3.c	/^  int nearlyFull;$/;"	m	struct:Mem0Global	file:
needFree	vendor\sqlite\sqlite3.c	/^      u8 needFree;           \/* True if sqlite3_free(idxStr) is needed *\/$/;"	m	struct:WhereLoop::__anon21::__anon23	file:
needToFreeIdxStr	vendor\sqlite\sqlite3.c	/^  int needToFreeIdxStr;      \/* Free idxStr using sqlite3_free() if true *\/$/;"	m	struct:sqlite3_index_info	file:
nested	vendor\sqlite\sqlite3.c	/^  u8 nested;           \/* Number of nested calls to the parser\/code generator *\/$/;"	m	struct:Parse	file:
neverCorrupt	vendor\sqlite\sqlite3.c	/^  int neverCorrupt;                 \/* Database is always well-formed *\/$/;"	m	struct:Sqlite3Config	file:
newDatabase	vendor\sqlite\sqlite3.c	/^static int newDatabase(BtShared *pBt){$/;"	f	file:
newRowid	vendor\sqlite\sqlite3.c	/^static int newRowid(Rtree *pRtree, i64 *piRowid){$/;"	f	file:
newTnum	vendor\sqlite\sqlite3.c	/^    int newTnum;                \/* Rootpage of table being initialized *\/$/;"	m	struct:sqlite3::sqlite3InitInfo	file:
newmask	vendor\sqlite\sqlite3.c	/^  u32 newmask;         \/* Mask of new.* columns referenced *\/$/;"	m	struct:Parse	file:
next	vendor\sqlite\sqlite3.c	/^      u32 next;       \/* Index in mem3.aPool[] of next free chunk *\/$/;"	m	struct:Mem3Block::__anon13::__anon15	file:
next	vendor\sqlite\sqlite3.c	/^  Fts3HashElem *next, *prev; \/* Next and previous elements in the table *\/$/;"	m	struct:Fts3HashElem	file:
next	vendor\sqlite\sqlite3.c	/^  HashElem *next, *prev;       \/* Next and previous elements in the table *\/$/;"	m	struct:HashElem	file:
next	vendor\sqlite\sqlite3.c	/^  int next;       \/* Index of next free chunk *\/$/;"	m	struct:Mem5Link	file:
nextAutovac	vendor\sqlite\sqlite3.c	/^  signed char nextAutovac;      \/* Autovac setting after VACUUM if >=0 *\/$/;"	m	struct:sqlite3	file:
nextPagesize	vendor\sqlite\sqlite3.c	/^  int nextPagesize;             \/* Pagesize after VACUUM if >0 *\/$/;"	m	struct:sqlite3	file:
nextShmId	vendor\sqlite\sqlite3.c	/^  u8 nextShmId;              \/* Next available unixShm.id value *\/$/;"	m	struct:unixShmNode	file:
nextShmId	vendor\sqlite\sqlite3.c	/^  u8 nextShmId;              \/* Next available winShm.id value *\/$/;"	m	struct:winShmNode	file:
next_stmt	vendor\sqlite\sqlite3.c	/^  sqlite3_stmt *(*next_stmt)(sqlite3*,sqlite3_stmt*);$/;"	m	struct:sqlite3_api_routines	file:
nfsUnlock	vendor\sqlite\sqlite3.c	/^static int nfsUnlock(sqlite3_file *id, int eFileLock){$/;"	f	file:
noCase	vendor\sqlite\sqlite3.c	/^  u8 noCase;$/;"	m	struct:compareInfo	file:
noLock	vendor\sqlite\sqlite3.c	/^  u8 noLock;                  \/* Do not lock (except in WAL mode) *\/$/;"	m	struct:Pager	file:
noPayload	vendor\sqlite\sqlite3.c	/^  u8 noPayload;        \/* True if internal intKey page (thus w\/o data) *\/$/;"	m	struct:MemPage	file:
noSkipScan	vendor\sqlite\sqlite3.c	/^  unsigned noSkipScan:1;   \/* Do not try to use skip-scan if true *\/$/;"	m	struct:Index	file:
noSync	vendor\sqlite\sqlite3.c	/^  u8 noSync;                  \/* Do not sync the journal if true *\/$/;"	m	struct:Pager	file:
nocaseCollatingFunc	vendor\sqlite\sqlite3.c	/^static int nocaseCollatingFunc($/;"	f	file:
nodeAcquire	vendor\sqlite\sqlite3.c	/^static int nodeAcquire($/;"	f	file:
nodeDeleteCell	vendor\sqlite\sqlite3.c	/^static void nodeDeleteCell(Rtree *pRtree, RtreeNode *pNode, int iCell){$/;"	f	file:
nodeGetCell	vendor\sqlite\sqlite3.c	/^static void nodeGetCell($/;"	f	file:
nodeGetCoord	vendor\sqlite\sqlite3.c	/^static void nodeGetCoord($/;"	f	file:
nodeGetRowid	vendor\sqlite\sqlite3.c	/^static i64 nodeGetRowid($/;"	f	file:
nodeHash	vendor\sqlite\sqlite3.c	/^static int nodeHash(i64 iNode){$/;"	f	file:
nodeHashDelete	vendor\sqlite\sqlite3.c	/^static void nodeHashDelete(Rtree *pRtree, RtreeNode *pNode){$/;"	f	file:
nodeHashInsert	vendor\sqlite\sqlite3.c	/^static void nodeHashInsert(Rtree *pRtree, RtreeNode *pNode){$/;"	f	file:
nodeHashLookup	vendor\sqlite\sqlite3.c	/^static RtreeNode *nodeHashLookup(Rtree *pRtree, i64 iNode){$/;"	f	file:
nodeInsertCell	vendor\sqlite\sqlite3.c	/^static int nodeInsertCell($/;"	f	file:
nodeNew	vendor\sqlite\sqlite3.c	/^static RtreeNode *nodeNew(Rtree *pRtree, RtreeNode *pParent){$/;"	f	file:
nodeOverwriteCell	vendor\sqlite\sqlite3.c	/^static void nodeOverwriteCell($/;"	f	file:
nodeParentIndex	vendor\sqlite\sqlite3.c	/^static int nodeParentIndex(Rtree *pRtree, RtreeNode *pNode, int *piIndex){$/;"	f	file:
nodeReaderInit	vendor\sqlite\sqlite3.c	/^static int nodeReaderInit(NodeReader *p, const char *aNode, int nNode){$/;"	f	file:
nodeReaderNext	vendor\sqlite\sqlite3.c	/^static int nodeReaderNext(NodeReader *p){$/;"	f	file:
nodeReaderRelease	vendor\sqlite\sqlite3.c	/^static void nodeReaderRelease(NodeReader *p){$/;"	f	file:
nodeReference	vendor\sqlite\sqlite3.c	/^static void nodeReference(RtreeNode *p){$/;"	f	file:
nodeRelease	vendor\sqlite\sqlite3.c	/^static int nodeRelease(Rtree *pRtree, RtreeNode *pNode){$/;"	f	file:
nodeRowidIndex	vendor\sqlite\sqlite3.c	/^static int nodeRowidIndex($/;"	f	file:
nodeWrite	vendor\sqlite\sqlite3.c	/^static int nodeWrite(Rtree *pRtree, RtreeNode *pNode){$/;"	f	file:
nodeZero	vendor\sqlite\sqlite3.c	/^static void nodeZero(Rtree *pRtree, RtreeNode *p){$/;"	f	file:
nolockCheckReservedLock	vendor\sqlite\sqlite3.c	/^static int nolockCheckReservedLock(sqlite3_file *NotUsed, int *pResOut){$/;"	f	file:
nolockClose	vendor\sqlite\sqlite3.c	/^static int nolockClose(sqlite3_file *id) {$/;"	f	file:
nolockLock	vendor\sqlite\sqlite3.c	/^static int nolockLock(sqlite3_file *NotUsed, int NotUsed2){$/;"	f	file:
nolockUnlock	vendor\sqlite\sqlite3.c	/^static int nolockUnlock(sqlite3_file *NotUsed, int NotUsed2){$/;"	f	file:
noopFunc	vendor\sqlite\sqlite3.c	96104;"	d	file:
noopMutexAlloc	vendor\sqlite\sqlite3.c	/^static sqlite3_mutex *noopMutexAlloc(int id){ $/;"	f	file:
noopMutexEnd	vendor\sqlite\sqlite3.c	/^static int noopMutexEnd(void){ return SQLITE_OK; }$/;"	f	file:
noopMutexEnter	vendor\sqlite\sqlite3.c	/^static void noopMutexEnter(sqlite3_mutex *p){ UNUSED_PARAMETER(p); return; }$/;"	f	file:
noopMutexFree	vendor\sqlite\sqlite3.c	/^static void noopMutexFree(sqlite3_mutex *p){ UNUSED_PARAMETER(p); return; }$/;"	f	file:
noopMutexInit	vendor\sqlite\sqlite3.c	/^static int noopMutexInit(void){ return SQLITE_OK; }$/;"	f	file:
noopMutexLeave	vendor\sqlite\sqlite3.c	/^static void noopMutexLeave(sqlite3_mutex *p){ UNUSED_PARAMETER(p); return; }$/;"	f	file:
noopMutexTry	vendor\sqlite\sqlite3.c	/^static int noopMutexTry(sqlite3_mutex *p){$/;"	f	file:
notIndexed	vendor\sqlite\sqlite3.c	/^    unsigned notIndexed :1;    \/* True if there is a NOT INDEXED clause *\/$/;"	m	struct:SrcList::SrcList_item	file:
notNull	vendor\sqlite\sqlite3.c	/^  u8 notNull;      \/* An OE_ code for handling a NOT NULL constraint *\/$/;"	m	struct:Column	file:
notReady	vendor\sqlite\sqlite3.c	/^  Bitmask notReady;          \/* FROM entries not usable at this level *\/$/;"	m	struct:WhereLevel	file:
notUsed1	vendor\sqlite\sqlite3.c	/^    double notUsed1;            \/* Spacer *\/$/;"	m	union:sqlite3::__anon5	file:
notValidCheckConstraint	vendor\sqlite\sqlite3.c	/^static void notValidCheckConstraint($/;"	f	file:
notValidCheckConstraint	vendor\sqlite\sqlite3.c	81136;"	d	file:
notValidPartIdxWhere	vendor\sqlite\sqlite3.c	/^static void notValidPartIdxWhere($/;"	f	file:
nowValue	vendor\sqlite\sqlite3.c	/^  int nowValue[10];         \/* Current value *\/$/;"	m	struct:sqlite3StatType	file:
nrhs	vendor\sqlite\sqlite3.c	/^  unsigned char nrhs;     \/* Number of right-hand side symbols in the rule *\/$/;"	m	struct:__anon27	file:
nullRow	vendor\sqlite\sqlite3.c	/^  u8 nullRow;           \/* True if pointing to a row with no data *\/$/;"	m	struct:VdbeCursor	file:
nullifFunc	vendor\sqlite\sqlite3.c	/^static void nullifFunc($/;"	f	file:
numberOfCachePages	vendor\sqlite\sqlite3.c	/^static int numberOfCachePages(PCache *p){$/;"	f	file:
numericType	vendor\sqlite\sqlite3.c	/^static u16 numericType(Mem *pMem){$/;"	f	file:
nzVar	vendor\sqlite\sqlite3.c	/^  int nzVar;                \/* Number of available slots in azVar[] *\/$/;"	m	struct:Parse	file:
nzVar	vendor\sqlite\sqlite3.c	/^  ynVar nzVar;            \/* Number of entries in azVar[] *\/$/;"	m	struct:Vdbe	file:
offset	vendor\sqlite\sqlite3.c	/^  unsigned long long offset;        \/* offset to first byte to lock *\/$/;"	m	struct:ByteRangeLockPB2	file:
offsetof	vendor\sqlite\sqlite3.c	8794;"	d	file:
okConstFactor	vendor\sqlite\sqlite3.c	/^  u8 okConstFactor;    \/* OK to factor out constants *\/$/;"	m	struct:Parse	file:
okOnePass	vendor\sqlite\sqlite3.c	/^  u8 okOnePass;             \/* Ok to use one-pass algorithm for UPDATE\/DELETE *\/$/;"	m	struct:WhereInfo	file:
oldLockingContext	vendor\sqlite\sqlite3.c	/^  void *oldLockingContext;     \/* Original lockingcontext to restore on close *\/$/;"	m	struct:proxyLockingContext	file:
oldmask	vendor\sqlite\sqlite3.c	/^  u32 oldmask;         \/* Mask of old.* columns referenced *\/$/;"	m	struct:Parse	file:
omit	vendor\sqlite\sqlite3.c	/^    unsigned char omit;      \/* Do not code a test for this constraint *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_constraint_usage	file:
omitMask	vendor\sqlite\sqlite3.c	/^      u16 omitMask;          \/* Terms that may be omitted *\/$/;"	m	struct:WhereLoop::__anon21::__anon23	file:
onError	vendor\sqlite\sqlite3.c	/^  u8 onError;              \/* OE_Abort, OE_Ignore, OE_Replace, or OE_None *\/$/;"	m	struct:Index	file:
onErrorText	vendor\sqlite\sqlite3.c	/^static const char *onErrorText(int onError){$/;"	f	file:
op	vendor\sqlite\sqlite3.c	/^     unsigned char op;         \/* Constraint operator *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_constraint	file:
op	vendor\sqlite\sqlite3.c	/^  int op;                         \/* Constraining operation *\/$/;"	m	struct:RtreeConstraint	file:
op	vendor\sqlite\sqlite3.c	/^  u8 op, p3, p5;        \/* Opcode, P3 & P5 of the opcode that ends the loop *\/$/;"	m	struct:WhereLevel	file:
op	vendor\sqlite\sqlite3.c	/^  u8 op;                   \/* Split operator.  TK_AND or TK_OR *\/$/;"	m	struct:WhereClause	file:
op	vendor\sqlite\sqlite3.c	/^  u8 op;                  \/* One of TK_DELETE, TK_UPDATE, TK_INSERT         *\/$/;"	m	struct:Trigger	file:
op	vendor\sqlite\sqlite3.c	/^  u8 op;                 \/* One of: TK_UNION TK_ALL TK_INTERSECT TK_EXCEPT *\/$/;"	m	struct:Select	file:
op	vendor\sqlite\sqlite3.c	/^  u8 op;                 \/* Operation performed by this node *\/$/;"	m	struct:Expr	file:
op	vendor\sqlite\sqlite3.c	/^  u8 op;               \/* One of TK_DELETE, TK_UPDATE, TK_INSERT, TK_SELECT *\/$/;"	m	struct:TriggerStep	file:
op2	vendor\sqlite\sqlite3.c	/^  u8 op2;                \/* TK_REGISTER: original value of Expr.op$/;"	m	struct:Expr	file:
opIterNext	vendor\sqlite\sqlite3.c	/^static Op *opIterNext(VdbeOpIter *p){$/;"	f	file:
opMask	vendor\sqlite\sqlite3.c	/^  u32 opMask;                \/* Acceptable operators *\/$/;"	m	struct:WhereScan	file:
opPrecedence	vendor\sqlite\sqlite3.c	/^static int opPrecedence(Fts3Expr *p){$/;"	f	file:
opcode	vendor\sqlite\sqlite3.c	/^  u8 opcode;          \/* What operation to perform *\/$/;"	m	struct:VdbeOp	file:
opcode	vendor\sqlite\sqlite3.c	/^  u8 opcode;          \/* What operation to perform *\/$/;"	m	struct:VdbeOpList	file:
open	vendor\sqlite\sqlite3.c	/^  int  (*open)(const char*,sqlite3**);$/;"	m	struct:sqlite3_api_routines	file:
open16	vendor\sqlite\sqlite3.c	/^  int  (*open16)(const void*,sqlite3**);$/;"	m	struct:sqlite3_api_routines	file:
openDatabase	vendor\sqlite\sqlite3.c	/^static int openDatabase($/;"	f	file:
openDirectory	vendor\sqlite\sqlite3.c	/^static int openDirectory(const char *zFilename, int *pFd){$/;"	f	file:
openFlags	vendor\sqlite\sqlite3.c	/^  int openFlags;                      \/* The flags specified at open() *\/$/;"	m	struct:unixFile	file:
openFlags	vendor\sqlite\sqlite3.c	/^  u8 openFlags;         \/* Flags to sqlite3BtreeOpen() *\/$/;"	m	struct:BtShared	file:
openFlags	vendor\sqlite\sqlite3.c	/^  unsigned int openFlags;       \/* Flags passed to sqlite3_vfs.xOpen() *\/$/;"	m	struct:sqlite3	file:
openStatTable	vendor\sqlite\sqlite3.c	/^static void openStatTable($/;"	f	file:
openSubJournal	vendor\sqlite\sqlite3.c	/^static int openSubJournal(Pager *pPager){$/;"	f	file:
open_v2	vendor\sqlite\sqlite3.c	/^  int (*open_v2)(const char*,sqlite3**,int,const char*);$/;"	m	struct:sqlite3_api_routines	file:
operatorMask	vendor\sqlite\sqlite3.c	/^static u16 operatorMask(int op){$/;"	f	file:
opflags	vendor\sqlite\sqlite3.c	/^  u8 opflags;         \/* Mask of the OPFLG_* flags in opcodes.h *\/$/;"	m	struct:VdbeOp	file:
optimalReserve	vendor\sqlite\sqlite3.c	/^  u8 optimalReserve;    \/* Desired amount of reserved space per page *\/$/;"	m	struct:BtShared	file:
orconf	vendor\sqlite\sqlite3.c	/^  int orconf;             \/* Default ON CONFLICT policy *\/$/;"	m	struct:TriggerPrg	file:
orconf	vendor\sqlite\sqlite3.c	/^  u8 orconf;           \/* OE_Rollback etc. *\/$/;"	m	struct:TriggerStep	file:
orderByConsumed	vendor\sqlite\sqlite3.c	/^  int orderByConsumed;       \/* True if output is already ordered *\/$/;"	m	struct:sqlite3_index_info	file:
orphanTrigger	vendor\sqlite\sqlite3.c	/^    u8 orphanTrigger;           \/* Last statement is orphaned TEMP trigger *\/$/;"	m	struct:sqlite3::sqlite3InitInfo	file:
osAccess	vendor\sqlite\sqlite3.c	25599;"	d	file:
osAreFileApisANSI	vendor\sqlite\sqlite3.c	33434;"	d	file:
osAreFileApisANSI	vendor\sqlite\sqlite3.c	33455;"	d	file:
osCharLowerW	vendor\sqlite\sqlite3.c	33464;"	d	file:
osCharUpperW	vendor\sqlite\sqlite3.c	33472;"	d	file:
osClose	vendor\sqlite\sqlite3.c	25596;"	d	file:
osCloseHandle	vendor\sqlite\sqlite3.c	33476;"	d	file:
osCreateEventExW	vendor\sqlite\sqlite3.c	33942;"	d	file:
osCreateFile2	vendor\sqlite\sqlite3.c	33996;"	d	file:
osCreateFileA	vendor\sqlite\sqlite3.c	33484;"	d	file:
osCreateFileMappingA	vendor\sqlite\sqlite3.c	33503;"	d	file:
osCreateFileMappingFromApp	vendor\sqlite\sqlite3.c	34051;"	d	file:
osCreateFileMappingW	vendor\sqlite\sqlite3.c	33513;"	d	file:
osCreateFileW	vendor\sqlite\sqlite3.c	33493;"	d	file:
osCreateMutexW	vendor\sqlite\sqlite3.c	33522;"	d	file:
osDeleteFileA	vendor\sqlite\sqlite3.c	33531;"	d	file:
osDeleteFileW	vendor\sqlite\sqlite3.c	33539;"	d	file:
osFallocate	vendor\sqlite\sqlite3.c	25671;"	d	file:
osFchmod	vendor\sqlite\sqlite3.c	25664;"	d	file:
osFchown	vendor\sqlite\sqlite3.c	25686;"	d	file:
osFcntl	vendor\sqlite\sqlite3.c	25625;"	d	file:
osFcntl	vendor\sqlite\sqlite3.c	25955;"	d	file:
osFcntl	vendor\sqlite\sqlite3.c	25956;"	d	file:
osFileTimeToLocalFileTime	vendor\sqlite\sqlite3.c	33547;"	d	file:
osFileTimeToSystemTime	vendor\sqlite\sqlite3.c	33556;"	d	file:
osFlushFileBuffers	vendor\sqlite\sqlite3.c	33561;"	d	file:
osFormatMessageA	vendor\sqlite\sqlite3.c	33569;"	d	file:
osFormatMessageW	vendor\sqlite\sqlite3.c	33578;"	d	file:
osFreeLibrary	vendor\sqlite\sqlite3.c	33587;"	d	file:
osFstat	vendor\sqlite\sqlite3.c	25615;"	d	file:
osFtruncate	vendor\sqlite\sqlite3.c	25622;"	d	file:
osGetCurrentProcessId	vendor\sqlite\sqlite3.c	33591;"	d	file:
osGetDiskFreeSpaceA	vendor\sqlite\sqlite3.c	33599;"	d	file:
osGetDiskFreeSpaceW	vendor\sqlite\sqlite3.c	33608;"	d	file:
osGetFileAttributesA	vendor\sqlite\sqlite3.c	33617;"	d	file:
osGetFileAttributesExW	vendor\sqlite\sqlite3.c	33633;"	d	file:
osGetFileAttributesW	vendor\sqlite\sqlite3.c	33625;"	d	file:
osGetFileInformationByHandleEx	vendor\sqlite\sqlite3.c	33978;"	d	file:
osGetFileSize	vendor\sqlite\sqlite3.c	33642;"	d	file:
osGetFullPathNameA	vendor\sqlite\sqlite3.c	33650;"	d	file:
osGetFullPathNameW	vendor\sqlite\sqlite3.c	33659;"	d	file:
osGetLastError	vendor\sqlite\sqlite3.c	33664;"	d	file:
osGetNativeSystemInfo	vendor\sqlite\sqlite3.c	34022;"	d	file:
osGetProcAddressA	vendor\sqlite\sqlite3.c	33679;"	d	file:
osGetProcessHeap	vendor\sqlite\sqlite3.c	34043;"	d	file:
osGetSystemInfo	vendor\sqlite\sqlite3.c	33688;"	d	file:
osGetSystemTime	vendor\sqlite\sqlite3.c	33692;"	d	file:
osGetSystemTimeAsFileTime	vendor\sqlite\sqlite3.c	33700;"	d	file:
osGetTempPathA	vendor\sqlite\sqlite3.c	33709;"	d	file:
osGetTempPathW	vendor\sqlite\sqlite3.c	33717;"	d	file:
osGetTickCount	vendor\sqlite\sqlite3.c	33725;"	d	file:
osGetTickCount64	vendor\sqlite\sqlite3.c	34014;"	d	file:
osGetVersionExA	vendor\sqlite\sqlite3.c	33734;"	d	file:
osGetVersionExW	vendor\sqlite\sqlite3.c	33744;"	d	file:
osGetcwd	vendor\sqlite\sqlite3.c	25602;"	d	file:
osGetpagesize	vendor\sqlite\sqlite3.c	25702;"	d	file:
osGetpid	vendor\sqlite\sqlite3.c	25184;"	d	file:
osHeapAlloc	vendor\sqlite\sqlite3.c	33749;"	d	file:
osHeapCompact	vendor\sqlite\sqlite3.c	33798;"	d	file:
osHeapCreate	vendor\sqlite\sqlite3.c	33758;"	d	file:
osHeapDestroy	vendor\sqlite\sqlite3.c	33767;"	d	file:
osHeapFree	vendor\sqlite\sqlite3.c	33771;"	d	file:
osHeapReAlloc	vendor\sqlite\sqlite3.c	33775;"	d	file:
osHeapSize	vendor\sqlite\sqlite3.c	33780;"	d	file:
osHeapValidate	vendor\sqlite\sqlite3.c	33789;"	d	file:
osInterlockedCompareExchange	vendor\sqlite\sqlite3.c	34062;"	d	file:
osIsNT	vendor\sqlite\sqlite3.c	34341;"	d	file:
osIsNT	vendor\sqlite\sqlite3.c	34343;"	d	file:
osIsNT	vendor\sqlite\sqlite3.c	34345;"	d	file:
osIsNT	vendor\sqlite\sqlite3.c	34347;"	d	file:
osLoadLibraryA	vendor\sqlite\sqlite3.c	33806;"	d	file:
osLoadLibraryW	vendor\sqlite\sqlite3.c	33815;"	d	file:
osLoadPackagedLibrary	vendor\sqlite\sqlite3.c	34005;"	d	file:
osLocalFree	vendor\sqlite\sqlite3.c	33823;"	d	file:
osLocaltime	vendor\sqlite\sqlite3.c	/^static int osLocaltime(time_t *t, struct tm *pTm){$/;"	f	file:
osLockFile	vendor\sqlite\sqlite3.c	33832;"	d	file:
osLockFileEx	vendor\sqlite\sqlite3.c	33843;"	d	file:
osMapViewOfFile	vendor\sqlite\sqlite3.c	33854;"	d	file:
osMapViewOfFileFromApp	vendor\sqlite\sqlite3.c	33987;"	d	file:
osMkdir	vendor\sqlite\sqlite3.c	25680;"	d	file:
osMmap	vendor\sqlite\sqlite3.c	25690;"	d	file:
osMremap	vendor\sqlite\sqlite3.c	25700;"	d	file:
osMultiByteToWideChar	vendor\sqlite\sqlite3.c	33859;"	d	file:
osMunmap	vendor\sqlite\sqlite3.c	25693;"	d	file:
osOpen	vendor\sqlite\sqlite3.c	25593;"	d	file:
osOpenDirectory	vendor\sqlite\sqlite3.c	25677;"	d	file:
osOutputDebugStringA	vendor\sqlite\sqlite3.c	34031;"	d	file:
osOutputDebugStringW	vendor\sqlite\sqlite3.c	34039;"	d	file:
osPread	vendor\sqlite\sqlite3.c	25635;"	d	file:
osPread64	vendor\sqlite\sqlite3.c	25642;"	d	file:
osPwrite	vendor\sqlite\sqlite3.c	25652;"	d	file:
osPwrite64	vendor\sqlite\sqlite3.c	25660;"	d	file:
osQueryPerformanceCounter	vendor\sqlite\sqlite3.c	33864;"	d	file:
osRead	vendor\sqlite\sqlite3.c	25628;"	d	file:
osReadFile	vendor\sqlite\sqlite3.c	33869;"	d	file:
osRmdir	vendor\sqlite\sqlite3.c	25683;"	d	file:
osSetEndOfFile	vendor\sqlite\sqlite3.c	33874;"	d	file:
osSetFilePointer	vendor\sqlite\sqlite3.c	33882;"	d	file:
osSetFilePointerEx	vendor\sqlite\sqlite3.c	33969;"	d	file:
osSleep	vendor\sqlite\sqlite3.c	33891;"	d	file:
osStat	vendor\sqlite\sqlite3.c	25605;"	d	file:
osSystemTimeToFileTime	vendor\sqlite\sqlite3.c	33895;"	d	file:
osUnlink	vendor\sqlite\sqlite3.c	25674;"	d	file:
osUnlockFile	vendor\sqlite\sqlite3.c	33905;"	d	file:
osUnlockFileEx	vendor\sqlite\sqlite3.c	33915;"	d	file:
osUnmapViewOfFile	vendor\sqlite\sqlite3.c	33924;"	d	file:
osUuidCreate	vendor\sqlite\sqlite3.c	34076;"	d	file:
osUuidCreateSequential	vendor\sqlite\sqlite3.c	34084;"	d	file:
osWaitForSingleObject	vendor\sqlite\sqlite3.c	33951;"	d	file:
osWaitForSingleObjectEx	vendor\sqlite\sqlite3.c	33960;"	d	file:
osWideCharToMultiByte	vendor\sqlite\sqlite3.c	33928;"	d	file:
osWrite	vendor\sqlite\sqlite3.c	25645;"	d	file:
osWriteFile	vendor\sqlite\sqlite3.c	33933;"	d	file:
overflow	vendor\sqlite\sqlite3.c	/^  u8 overflow;      \/* True if integer overflow seen *\/$/;"	m	struct:SumCtx	file:
overload_function	vendor\sqlite\sqlite3.c	/^  int (*overload_function)(sqlite3*, const char *zFuncName, int nArg);$/;"	m	struct:sqlite3_api_routines	file:
owner	vendor\sqlite\sqlite3.c	/^  volatile DWORD owner;      \/* Thread holding this mutex *\/$/;"	m	struct:sqlite3_mutex	file:
owner	vendor\sqlite\sqlite3.c	/^  volatile pthread_t owner;  \/* Thread that is within this mutex *\/$/;"	m	struct:sqlite3_mutex	file:
p	vendor\sqlite\sqlite3.c	/^    void *p;               \/* Generic pointer *\/$/;"	m	union:VdbeOp::__anon4	file:
p	vendor\sqlite\sqlite3.c	/^  void *p;          \/* Pointer to sampled record *\/$/;"	m	struct:IndexSample	file:
p1	vendor\sqlite\sqlite3.c	/^  int p1, p2;           \/* Operands of the opcode used to ends the loop *\/$/;"	m	struct:WhereLevel	file:
p1	vendor\sqlite\sqlite3.c	/^  int p1;             \/* First operand *\/$/;"	m	struct:VdbeOp	file:
p1	vendor\sqlite\sqlite3.c	/^  signed char p1;     \/* First operand *\/$/;"	m	struct:VdbeOpList	file:
p2	vendor\sqlite\sqlite3.c	/^  int p1, p2;           \/* Operands of the opcode used to ends the loop *\/$/;"	m	struct:WhereLevel	file:
p2	vendor\sqlite\sqlite3.c	/^  int p2;             \/* Second parameter (often the jump destination) *\/$/;"	m	struct:VdbeOp	file:
p2	vendor\sqlite\sqlite3.c	/^  signed char p2;     \/* Second parameter (often the jump destination) *\/$/;"	m	struct:VdbeOpList	file:
p3	vendor\sqlite\sqlite3.c	/^  int p3;             \/* The third parameter *\/$/;"	m	struct:VdbeOp	file:
p3	vendor\sqlite\sqlite3.c	/^  signed char p3;     \/* Third parameter *\/$/;"	m	struct:VdbeOpList	file:
p3	vendor\sqlite\sqlite3.c	/^  u8 op, p3, p5;        \/* Opcode, P3 & P5 of the opcode that ends the loop *\/$/;"	m	struct:WhereLevel	file:
p4	vendor\sqlite\sqlite3.c	/^  } p4;$/;"	m	struct:VdbeOp	typeref:union:VdbeOp::__anon4	file:
p4type	vendor\sqlite\sqlite3.c	/^  signed char p4type; \/* One of the P4_xxx constants for p4 *\/$/;"	m	struct:VdbeOp	file:
p5	vendor\sqlite\sqlite3.c	/^  u8 op, p3, p5;        \/* Opcode, P3 & P5 of the opcode that ends the loop *\/$/;"	m	struct:WhereLevel	file:
p5	vendor\sqlite\sqlite3.c	/^  u8 p5;              \/* Fifth parameter is an unsigned character *\/$/;"	m	struct:VdbeOp	file:
pAggInfo	vendor\sqlite\sqlite3.c	/^  AggInfo *pAggInfo;     \/* Used by TK_AGG_COLUMN and TK_AGG_FUNCTION *\/$/;"	m	struct:Expr	file:
pAggInfo	vendor\sqlite\sqlite3.c	/^  AggInfo *pAggInfo;   \/* Information about aggregates at this level *\/$/;"	m	struct:NameContext	file:
pAinc	vendor\sqlite\sqlite3.c	/^  AutoincInfo *pAinc;  \/* Information about AUTOINCREMENT counters *\/$/;"	m	struct:Parse	file:
pAndInfo	vendor\sqlite\sqlite3.c	/^    WhereAndInfo *pAndInfo; \/* Extra information if (eOperator& WO_AND)!=0 *\/$/;"	m	union:WhereTerm::__anon24	file:
pAppData	vendor\sqlite\sqlite3.c	/^  void *pAppData;                \/* Argument to xInit() and xShutdown() *\/$/;"	m	struct:sqlite3_mem_methods	file:
pAppData	vendor\sqlite\sqlite3.c	/^  void *pAppData;          \/* Pointer to application-specific data *\/$/;"	m	struct:sqlite3_vfs	file:
pArg	vendor\sqlite\sqlite3.c	/^  void *pArg;                \/* First arg to busy callback *\/$/;"	m	struct:BusyHandler	file:
pArg	vendor\sqlite\sqlite3.c	/^  void *pArg;$/;"	m	struct:sqlite3_pcache_methods	file:
pArg	vendor\sqlite\sqlite3.c	/^  void *pArg;$/;"	m	struct:sqlite3_pcache_methods2	file:
pAuthArg	vendor\sqlite\sqlite3.c	/^  void *pAuthArg;               \/* 1st argument to the access auth function *\/$/;"	m	struct:sqlite3	file:
pAux	vendor\sqlite\sqlite3.c	/^  void *pAux;                          \/* pAux passed to create_module() *\/$/;"	m	struct:Module	file:
pAux	vendor\sqlite\sqlite3.c	/^  void *pAux;                     \/* Aux data pointer *\/$/;"	m	struct:AuxData	file:
pAuxData	vendor\sqlite\sqlite3.c	/^  AuxData *pAuxData;      \/* Linked list of auxdata allocations *\/$/;"	m	struct:Vdbe	file:
pBackup	vendor\sqlite\sqlite3.c	/^  sqlite3_backup *pBackup;    \/* Pointer to list of ongoing backup processes *\/$/;"	m	struct:Pager	file:
pBlob	vendor\sqlite\sqlite3.c	/^  sqlite3_blob *pBlob;            \/* If not NULL, blob handle to read node *\/$/;"	m	struct:Fts3SegReader	file:
pBlockingConnection	vendor\sqlite\sqlite3.c	/^  sqlite3 *pBlockingConnection; \/* Connection that caused SQLITE_LOCKED *\/$/;"	m	struct:sqlite3	file:
pBt	vendor\sqlite\sqlite3.c	/^  BtShared *pBt;            \/* The BtShared this cursor points to *\/$/;"	m	struct:BtCursor	file:
pBt	vendor\sqlite\sqlite3.c	/^  BtShared *pBt;       \/* Pointer to BtShared that this page is part of *\/$/;"	m	struct:MemPage	file:
pBt	vendor\sqlite\sqlite3.c	/^  BtShared *pBt;     \/* Sharable content of this btree *\/$/;"	m	struct:Btree	file:
pBt	vendor\sqlite\sqlite3.c	/^  BtShared *pBt;    \/* The tree being checked out *\/$/;"	m	struct:IntegrityCk	file:
pBt	vendor\sqlite\sqlite3.c	/^  Btree *pBt;           \/* Separate file holding temporary table *\/$/;"	m	struct:VdbeCursor	file:
pBt	vendor\sqlite\sqlite3.c	/^  Btree *pBt;          \/* The B*Tree structure for this database file *\/$/;"	m	struct:Db	file:
pBtree	vendor\sqlite\sqlite3.c	/^  Btree *pBtree;            \/* The Btree to which this cursor belongs *\/$/;"	m	struct:BtCursor	file:
pBtree	vendor\sqlite\sqlite3.c	/^  Btree *pBtree;        \/* Btree handle holding this lock *\/$/;"	m	struct:BtLock	file:
pBuf	vendor\sqlite\sqlite3.c	/^  void *pBuf;        \/* The content of the page *\/$/;"	m	struct:sqlite3_pcache_page	file:
pBusyHandlerArg	vendor\sqlite\sqlite3.c	/^  void *pBusyHandlerArg;      \/* Context argument for xBusyHandler *\/$/;"	m	struct:Pager	file:
pCache	vendor\sqlite\sqlite3.c	/^  PCache *pCache;                \/* Cache that owns this page *\/$/;"	m	struct:PgHdr	file:
pCache	vendor\sqlite\sqlite3.c	/^  PCache1 *pCache;               \/* Cache that currently owns this page *\/$/;"	m	struct:PgHdr1	file:
pCache	vendor\sqlite\sqlite3.c	/^  sqlite3_pcache *pCache;             \/* Pluggable cache module *\/$/;"	m	struct:PCache	file:
pCheck	vendor\sqlite\sqlite3.c	/^  ExprList *pCheck;    \/* All CHECK constraints *\/$/;"	m	struct:Table	file:
pChunk	vendor\sqlite\sqlite3.c	/^  FileChunk *pChunk;              \/* Specific chunk into which cursor points *\/$/;"	m	struct:FilePoint	file:
pChunk	vendor\sqlite\sqlite3.c	/^  struct RowSetChunk *pChunk;    \/* List of all chunk allocations *\/$/;"	m	struct:RowSet	typeref:struct:RowSet::RowSetChunk	file:
pCodec	vendor\sqlite\sqlite3.c	/^  void *pCodec;               \/* First argument to xCodec... methods *\/$/;"	m	struct:Pager	file:
pColl	vendor\sqlite\sqlite3.c	/^    CollSeq *pColl;        \/* Used when p4type is P4_COLLSEQ *\/$/;"	m	union:VdbeOp::__anon4	file:
pCollNeededArg	vendor\sqlite\sqlite3.c	/^  void *pCollNeededArg;$/;"	m	struct:sqlite3	file:
pCols	vendor\sqlite\sqlite3.c	/^    ExprList *pCols;                \/* List of explicit column names, or NULL *\/$/;"	m	struct:With::Cte	file:
pColumns	vendor\sqlite\sqlite3.c	/^  IdList *pColumns;       \/* If this is an UPDATE OF <column-list> trigger,$/;"	m	struct:Trigger	file:
pCommitArg	vendor\sqlite\sqlite3.c	/^  void *pCommitArg;                 \/* Argument to xCommitCallback() *\/   $/;"	m	struct:sqlite3	file:
pConstExpr	vendor\sqlite\sqlite3.c	/^  ExprList *pConstExpr;\/* Constant expressions *\/$/;"	m	struct:Parse	file:
pContext	vendor\sqlite\sqlite3.c	/^  void *pContext;                   \/* pContext from when function registered *\/$/;"	m	struct:sqlite3_rtree_query_info	file:
pContext	vendor\sqlite\sqlite3.c	/^  void *pContext;                 \/* Copy of pContext passed to s_r_g_c() *\/$/;"	m	struct:sqlite3_rtree_geometry	file:
pContext	vendor\sqlite\sqlite3.c	/^  void *pContext;$/;"	m	struct:RtreeGeomCallback	file:
pCovidx	vendor\sqlite\sqlite3.c	/^    Index *pCovidx;       \/* Possible covering index for WHERE_MULTI_OR *\/$/;"	m	union:WhereLevel::__anon19	file:
pCsr	vendor\sqlite\sqlite3.c	/^  BtCursor *pCsr;         \/* Cursor pointing at blob row *\/$/;"	m	struct:Incrblob	file:
pCsr	vendor\sqlite\sqlite3.c	/^  Fts3Cursor *pCsr;               \/* Cursor snippet is being generated from *\/$/;"	m	struct:SnippetIter	file:
pCsr	vendor\sqlite\sqlite3.c	/^  Fts3Cursor *pCsr;               \/* FTS3 Cursor *\/$/;"	m	struct:LoadDoclistCtx	file:
pCsr	vendor\sqlite\sqlite3.c	/^  Fts3Cursor *pCsr;$/;"	m	struct:TermOffsetCtx	file:
pCsr	vendor\sqlite\sqlite3.c	/^  sqlite3_tokenizer_cursor *pCsr; \/* Cursor to iterate through zInput *\/$/;"	m	struct:Fts3tokCursor	file:
pCtx	vendor\sqlite\sqlite3.c	/^  sqlite3_context *pCtx;              \/* Write error message here *\/$/;"	m	struct:ParseContext	file:
pCurrent	vendor\sqlite\sqlite3.c	/^  sqlite3_syscall_ptr pCurrent; \/* Current value of the system call *\/$/;"	m	struct:unix_syscall	file:
pCurrent	vendor\sqlite\sqlite3.c	/^  sqlite3_syscall_ptr pCurrent; \/* Current value of the system call *\/$/;"	m	struct:win_syscall	file:
pCursor	vendor\sqlite\sqlite3.c	/^  BtCursor *pCursor;    \/* A list of all open cursors *\/$/;"	m	struct:BtShared	file:
pCursor	vendor\sqlite\sqlite3.c	/^  BtCursor *pCursor;    \/* The cursor structure of the backend *\/$/;"	m	struct:VdbeCursor	file:
pCursor	vendor\sqlite\sqlite3.c	/^  Fts3Cursor *pCursor;            \/* FTS3 Cursor *\/$/;"	m	struct:MatchInfo	file:
pData	vendor\sqlite\sqlite3.c	/^  void *pData;                   \/* Page data *\/$/;"	m	struct:PgHdr	file:
pDbFd	vendor\sqlite\sqlite3.c	/^  sqlite3_file *pDbFd;       \/* File handle for the database file *\/$/;"	m	struct:Wal	file:
pDbPage	vendor\sqlite\sqlite3.c	/^  DbPage *pDbPage;     \/* Pager page handle *\/$/;"	m	struct:MemPage	file:
pDef	vendor\sqlite\sqlite3.c	/^    FuncDef *pDef;      \/* Used only when flags==MEM_Agg *\/$/;"	m	union:Mem::MemValue	file:
pDefault	vendor\sqlite\sqlite3.c	/^  sqlite3_syscall_ptr pDefault; \/* Default value *\/$/;"	m	struct:unix_syscall	file:
pDefault	vendor\sqlite\sqlite3.c	/^  sqlite3_syscall_ptr pDefault; \/* Default value *\/$/;"	m	struct:win_syscall	file:
pDeferred	vendor\sqlite\sqlite3.c	/^  Fts3DeferredToken *pDeferred;   \/* Deferred search tokens, if any *\/$/;"	m	struct:Fts3Cursor	file:
pDeferred	vendor\sqlite\sqlite3.c	/^  Fts3DeferredToken *pDeferred;   \/* Deferred token object for this token *\/$/;"	m	struct:Fts3PhraseToken	file:
pDelFrame	vendor\sqlite\sqlite3.c	/^  VdbeFrame *pDelFrame;   \/* List of frame objects to free on VM reset *\/$/;"	m	struct:Vdbe	file:
pDeleteNode	vendor\sqlite\sqlite3.c	/^  sqlite3_stmt *pDeleteNode;$/;"	m	struct:Rtree	file:
pDeleteParent	vendor\sqlite\sqlite3.c	/^  sqlite3_stmt *pDeleteParent;$/;"	m	struct:Rtree	file:
pDeleteRowid	vendor\sqlite\sqlite3.c	/^  sqlite3_stmt *pDeleteRowid;$/;"	m	struct:Rtree	file:
pDeleted	vendor\sqlite\sqlite3.c	/^  RtreeNode *pDeleted;$/;"	m	struct:Rtree	file:
pDest	vendor\sqlite\sqlite3.c	/^  Btree *pDest;            \/* Destination b-tree file *\/$/;"	m	struct:sqlite3_backup	file:
pDestDb	vendor\sqlite\sqlite3.c	/^  sqlite3* pDestDb;        \/* Destination database handle *\/$/;"	m	struct:sqlite3_backup	file:
pDestructor	vendor\sqlite\sqlite3.c	/^  FuncDestructor *pDestructor;   \/* Reference counted destructor function *\/$/;"	m	struct:FuncDef	file:
pDflt	vendor\sqlite\sqlite3.c	/^  Expr *pDflt;     \/* Default value of this column *\/$/;"	m	struct:Column	file:
pDfltColl	vendor\sqlite\sqlite3.c	/^  CollSeq *pDfltColl;           \/* The default collating sequence (BINARY) *\/$/;"	m	struct:sqlite3	file:
pDirty	vendor\sqlite\sqlite3.c	/^  PgHdr *pDirty, *pDirtyTail;         \/* List of dirty pages in LRU order *\/$/;"	m	struct:PCache	file:
pDirty	vendor\sqlite\sqlite3.c	/^  PgHdr *pDirty;                 \/* Transient list of dirty pages *\/$/;"	m	struct:PgHdr	file:
pDirtyNext	vendor\sqlite\sqlite3.c	/^  PgHdr *pDirtyNext;             \/* Next element in list of dirty pages *\/$/;"	m	struct:PgHdr	file:
pDirtyPrev	vendor\sqlite\sqlite3.c	/^  PgHdr *pDirtyPrev;             \/* Previous element in list of dirty pages *\/$/;"	m	struct:PgHdr	file:
pDirtyTail	vendor\sqlite\sqlite3.c	/^  PgHdr *pDirty, *pDirtyTail;         \/* List of dirty pages in LRU order *\/$/;"	m	struct:PCache	file:
pDisconnect	vendor\sqlite\sqlite3.c	/^  VTable *pDisconnect;    \/* Disconnect these in next sqlite3_prepare() *\/$/;"	m	struct:sqlite3	file:
pEList	vendor\sqlite\sqlite3.c	/^  ExprList *pEList;      \/* The fields of the result *\/$/;"	m	struct:Select	file:
pEList	vendor\sqlite\sqlite3.c	/^  ExprList *pEList;    \/* Optional list of result-set columns *\/$/;"	m	struct:NameContext	file:
pEnd	vendor\sqlite\sqlite3.c	/^  void *pEnd;             \/* First byte past end of available space *\/$/;"	m	struct:Lookaside	file:
pEnd	vendor\sqlite\sqlite3.c	/^  void *pStart, *pEnd;           \/* Bounds of pagecache malloc range *\/$/;"	m	struct:PCacheGlobal	file:
pEntry	vendor\sqlite\sqlite3.c	/^  struct RowSetEntry *pEntry;    \/* List of entries using pRight *\/$/;"	m	struct:RowSet	typeref:struct:RowSet::RowSetEntry	file:
pErr	vendor\sqlite\sqlite3.c	/^  sqlite3_value *pErr;          \/* Most recent error message *\/$/;"	m	struct:sqlite3	file:
pExpr	vendor\sqlite\sqlite3.c	/^    Expr *pExpr;             \/* Expression encoding the function *\/$/;"	m	struct:AggInfo::AggInfo_func	file:
pExpr	vendor\sqlite\sqlite3.c	/^    Expr *pExpr;             \/* The original expression *\/$/;"	m	struct:AggInfo::AggInfo_col	file:
pExpr	vendor\sqlite\sqlite3.c	/^    Expr *pExpr;            \/* The list of expressions *\/$/;"	m	struct:ExprList::ExprList_item	file:
pExpr	vendor\sqlite\sqlite3.c	/^  Expr *pExpr;            \/* Pointer to the subexpression that is this term *\/$/;"	m	struct:WhereTerm	file:
pExpr	vendor\sqlite\sqlite3.c	/^  Expr *pExpr;          \/* The expression parse tree *\/$/;"	m	struct:ExprSpan	file:
pExpr	vendor\sqlite\sqlite3.c	/^  Fts3Expr *pExpr;                \/* Parsed MATCH query string *\/$/;"	m	struct:Fts3Cursor	file:
pExpr	vendor\sqlite\sqlite3.c	/^  Fts3Expr *pExpr;                \/* Pointer to phrase expression *\/$/;"	m	struct:LcsIterator	file:
pExprList	vendor\sqlite\sqlite3.c	/^  ExprList *pExprList; \/* SET clause for UPDATE. *\/$/;"	m	struct:TriggerStep	file:
pExtra	vendor\sqlite\sqlite3.c	/^  void *pExtra;                  \/* Extra content *\/$/;"	m	struct:PgHdr	file:
pExtra	vendor\sqlite\sqlite3.c	/^  void *pExtra;      \/* Extra information associated with the page *\/$/;"	m	struct:sqlite3_pcache_page	file:
pFKey	vendor\sqlite\sqlite3.c	/^  FKey *pFKey;         \/* Linked list of all foreign keys in this table *\/$/;"	m	struct:Table	file:
pFd	vendor\sqlite\sqlite3.c	/^  sqlite3_file *pFd;              \/* File handle *\/$/;"	m	struct:SorterFile	file:
pFd	vendor\sqlite\sqlite3.c	/^  sqlite3_file *pFd;              \/* File handle to write to *\/$/;"	m	struct:PmaWriter	file:
pFd	vendor\sqlite\sqlite3.c	/^  sqlite3_file *pFd;           \/* The WAL file to which we write *\/$/;"	m	struct:WalWriter	file:
pFd	vendor\sqlite\sqlite3.c	/^  sqlite3_file *pFd;          \/* File handle we are reading from *\/$/;"	m	struct:PmaReader	file:
pFiller	vendor\sqlite\sqlite3.c	/^  void *pFiller;      \/* So that sizeof(Mem) is a multiple of 8 *\/$/;"	m	struct:Mem	file:
pFilter	vendor\sqlite\sqlite3.c	/^  Fts3SegFilter *pFilter;         \/* Pointer to filter object *\/$/;"	m	struct:Fts3MultiSegReader	file:
pFirst	vendor\sqlite\sqlite3.c	/^  FileChunk *pFirst;              \/* Head of in-memory chunk-list *\/$/;"	m	struct:MemJournal	file:
pFirst	vendor\sqlite\sqlite3.c	/^  struct MemBlockHdr *pFirst;$/;"	m	struct:__anon12	typeref:struct:__anon12::MemBlockHdr	file:
pFirst	vendor\sqlite\sqlite3.c	/^  unixShm *pFirst;           \/* All unixShm objects pointing to this *\/$/;"	m	struct:unixShmNode	file:
pFirst	vendor\sqlite\sqlite3.c	/^  winShm *pFirst;            \/* All winShm objects pointing to this *\/$/;"	m	struct:winShmNode	file:
pForest	vendor\sqlite\sqlite3.c	/^  struct RowSetEntry *pForest;   \/* List of binary trees of entries *\/$/;"	m	struct:RowSet	typeref:struct:RowSet::RowSetEntry	file:
pFrame	vendor\sqlite\sqlite3.c	/^    VdbeFrame *pFrame;  \/* Used when flags==MEM_Frame *\/$/;"	m	union:Mem::MemValue	file:
pFrame	vendor\sqlite\sqlite3.c	/^  VdbeFrame *pFrame;      \/* Parent frame *\/$/;"	m	struct:Vdbe	file:
pFree	vendor\sqlite\sqlite3.c	/^  LookasideSlot *pFree;   \/* List of available buffers *\/$/;"	m	struct:Lookaside	file:
pFree	vendor\sqlite\sqlite3.c	/^  PgFreeslot *pFree;             \/* Free page blocks *\/$/;"	m	struct:PCacheGlobal	file:
pFree	vendor\sqlite\sqlite3.c	/^  void *pFree;            \/* Free this when deleting the vdbe *\/$/;"	m	struct:Vdbe	file:
pFresh	vendor\sqlite\sqlite3.c	/^  struct RowSetEntry *pFresh;    \/* Source of new entry objects *\/$/;"	m	struct:RowSet	typeref:struct:RowSet::RowSetEntry	file:
pFrom	vendor\sqlite\sqlite3.c	/^  Table *pFrom;     \/* Table containing the REFERENCES clause (aka: Child) *\/$/;"	m	struct:FKey	file:
pFts3Tab	vendor\sqlite\sqlite3.c	/^  Fts3Table *pFts3Tab;$/;"	m	struct:Fts3auxTable	file:
pFunc	vendor\sqlite\sqlite3.c	/^    FuncDef *pFunc;          \/* The aggregate function implementation *\/$/;"	m	struct:AggInfo::AggInfo_func	file:
pFunc	vendor\sqlite\sqlite3.c	/^    FuncDef *pFunc;        \/* Used when p4type is P4_FUNCDEF *\/$/;"	m	union:VdbeOp::__anon4	file:
pFunc	vendor\sqlite\sqlite3.c	/^  FuncDef *pFunc;       \/* Pointer to function information *\/$/;"	m	struct:sqlite3_context	file:
pGroup	vendor\sqlite\sqlite3.c	/^  PGroup *pGroup;                     \/* PGroup this cache belongs to *\/$/;"	m	struct:PCache1	file:
pGroupBy	vendor\sqlite\sqlite3.c	/^  ExprList *pGroupBy;     \/* The group by clause *\/$/;"	m	struct:AggInfo	file:
pGroupBy	vendor\sqlite\sqlite3.c	/^  ExprList *pGroupBy;    \/* The GROUP BY clause *\/$/;"	m	struct:Select	file:
pHasContent	vendor\sqlite\sqlite3.c	/^  Bitvec *pHasContent;  \/* Set of pages moved to free-list this transaction *\/$/;"	m	struct:BtShared	file:
pHash	vendor\sqlite\sqlite3.c	/^  FuncDef *pHash;      \/* Next with a different name but the same hash *\/$/;"	m	struct:FuncDef	file:
pHaving	vendor\sqlite\sqlite3.c	/^  Expr *pHaving;         \/* The HAVING clause *\/$/;"	m	struct:Select	file:
pHead	vendor\sqlite\sqlite3.c	/^  char *pHead;                    \/* Position list data following iHead *\/$/;"	m	struct:SnippetPhrase	file:
pHeap	vendor\sqlite\sqlite3.c	/^  void *pHeap;                      \/* Heap storage space *\/$/;"	m	struct:Sqlite3Config	file:
pI64	vendor\sqlite\sqlite3.c	/^    i64 *pI64;             \/* Used when p4type is P4_INT64 *\/$/;"	m	union:VdbeOp::__anon4	file:
pId	vendor\sqlite\sqlite3.c	/^  struct vxworksFileId *pId;          \/* Unique file ID *\/$/;"	m	struct:unixFile	typeref:struct:unixFile::vxworksFileId	file:
pId	vendor\sqlite\sqlite3.c	/^  struct vxworksFileId *pId;  \/* Unique file ID for vxworks. *\/$/;"	m	struct:unixFileId	typeref:struct:unixFileId::vxworksFileId	file:
pIdList	vendor\sqlite\sqlite3.c	/^  IdList *pIdList;     \/* Column names for INSERT *\/$/;"	m	struct:TriggerStep	file:
pIdx	vendor\sqlite\sqlite3.c	/^  Index *pIdx;$/;"	m	struct:ValueNewStat4Ctx	file:
pIn	vendor\sqlite\sqlite3.c	/^  void *pIn;                     \/* Argument to the thread *\/$/;"	m	struct:SQLiteThread	file:
pIn	vendor\sqlite\sqlite3.c	/^  void *pIn;               \/* Argument to xTask *\/$/;"	m	struct:SQLiteThread	file:
pInJournal	vendor\sqlite\sqlite3.c	/^  Bitvec *pInJournal;         \/* One bit for each page in the database file *\/$/;"	m	struct:Pager	file:
pInSavepoint	vendor\sqlite\sqlite3.c	/^  Bitvec *pInSavepoint;        \/* Set of pages in this savepoint *\/$/;"	m	struct:PagerSavepoint	file:
pIncr	vendor\sqlite\sqlite3.c	/^  IncrMerger *pIncr;          \/* Incremental merger *\/$/;"	m	struct:PmaReader	file:
pIndex	vendor\sqlite\sqlite3.c	/^      Index *pIndex;         \/* Index used, or NULL *\/$/;"	m	struct:WhereLoop::__anon21::__anon22	file:
pIndex	vendor\sqlite\sqlite3.c	/^    Index *pIndex;    \/* Index structure corresponding to zIndex, if any *\/$/;"	m	struct:SrcList::SrcList_item	file:
pIndex	vendor\sqlite\sqlite3.c	/^  Index *pIndex;       \/* List of SQL indexes on this table. *\/$/;"	m	struct:Table	file:
pInfo	vendor\sqlite\sqlite3.c	/^  sqlite3_rtree_query_info *pInfo;  \/* xGeom and xQueryFunc argument *\/$/;"	m	struct:RtreeConstraint	file:
pInitMutex	vendor\sqlite\sqlite3.c	/^  sqlite3_mutex *pInitMutex;        \/* Mutex used by sqlite3_initialize() *\/$/;"	m	struct:Sqlite3Config	file:
pInode	vendor\sqlite\sqlite3.c	/^  unixInodeInfo *pInode;              \/* Info about locks on this inode *\/$/;"	m	struct:unixFile	file:
pInode	vendor\sqlite\sqlite3.c	/^  unixInodeInfo *pInode;     \/* unixInodeInfo that owns this SHM node *\/$/;"	m	struct:unixShmNode	file:
pInput	vendor\sqlite\sqlite3.c	/^  const char *pInput;          \/* input we are tokenizing *\/$/;"	m	struct:simple_tokenizer_cursor	file:
pIter	vendor\sqlite\sqlite3.c	/^  UBreakIterator *pIter;      \/* ICU break-iterator object *\/$/;"	m	struct:IcuCursor	file:
pKey	vendor\sqlite\sqlite3.c	/^  const char *pKey;            \/* Key associated with this element *\/$/;"	m	struct:HashElem	file:
pKey	vendor\sqlite\sqlite3.c	/^  void *pKey;               \/* Saved key that was cursor last known position *\/$/;"	m	struct:BtCursor	file:
pKey	vendor\sqlite\sqlite3.c	/^  void *pKey; int nKey;      \/* Key associated with this element *\/$/;"	m	struct:Fts3HashElem	file:
pKeyInfo	vendor\sqlite\sqlite3.c	/^    KeyInfo *pKeyInfo;     \/* Used when p4type is P4_KEYINFO *\/$/;"	m	union:VdbeOp::__anon4	file:
pKeyInfo	vendor\sqlite\sqlite3.c	/^  KeyInfo *pKeyInfo;              \/* How to compare records *\/$/;"	m	struct:VdbeSorter	file:
pKeyInfo	vendor\sqlite\sqlite3.c	/^  KeyInfo *pKeyInfo;    \/* Info about index keys needed by index cursors *\/$/;"	m	struct:VdbeCursor	file:
pKeyInfo	vendor\sqlite\sqlite3.c	/^  KeyInfo *pKeyInfo;  \/* Collation and sort-order information *\/$/;"	m	struct:UnpackedRecord	file:
pKeyInfo	vendor\sqlite\sqlite3.c	/^  struct KeyInfo *pKeyInfo; \/* Argument passed to comparison function *\/$/;"	m	struct:BtCursor	typeref:struct:BtCursor::KeyInfo	file:
pLast	vendor\sqlite\sqlite3.c	/^  TriggerStep *pLast;  \/* Last element in link-list. Valid for 1st elem only *\/$/;"	m	struct:TriggerStep	file:
pLast	vendor\sqlite\sqlite3.c	/^  struct MemBlockHdr *pLast;$/;"	m	struct:__anon12	typeref:struct:__anon12::MemBlockHdr	file:
pLast	vendor\sqlite\sqlite3.c	/^  struct RowSetEntry *pLast;     \/* Last entry on the pEntry list *\/$/;"	m	struct:RowSet	typeref:struct:RowSet::RowSetEntry	file:
pLeft	vendor\sqlite\sqlite3.c	/^  Expr *pLeft;           \/* Left subnode *\/$/;"	m	struct:Expr	file:
pLeft	vendor\sqlite\sqlite3.c	/^  Fts3Expr *pLeft;           \/* Left operand *\/$/;"	m	struct:Fts3Expr	file:
pLeft	vendor\sqlite\sqlite3.c	/^  struct RowSetEntry *pLeft;    \/* Left subtree (smaller entries) *\/$/;"	m	struct:RowSetEntry	typeref:struct:RowSetEntry::RowSetEntry	file:
pLeftmost	vendor\sqlite\sqlite3.c	/^  SegmentNode *pLeftmost;         \/* Pointer to left-most node of this depth *\/$/;"	m	struct:SegmentNode	file:
pLimit	vendor\sqlite\sqlite3.c	/^  Expr *pLimit;          \/* LIMIT expression. NULL means not used. *\/$/;"	m	struct:Select	file:
pLimit	vendor\sqlite\sqlite3.c	/^  Expr *pLimit;    \/* The LIMIT expression.  NULL if there is no limit *\/$/;"	m	struct:LimitVal	file:
pList	vendor\sqlite\sqlite3.c	/^    ExprList *pList;     \/* op = IN, EXISTS, SELECT, CASE, FUNCTION, BETWEEN *\/$/;"	m	union:Expr::__anon7	file:
pList	vendor\sqlite\sqlite3.c	/^  PendingList *pList;             \/* Doclist is assembled here *\/$/;"	m	struct:Fts3DeferredToken	file:
pList	vendor\sqlite\sqlite3.c	/^  SorterRecord *pList;            \/* Linked list of records *\/$/;"	m	struct:SorterList	file:
pList	vendor\sqlite\sqlite3.c	/^  char *pList;                    \/* Pointer to start of phrase position list *\/$/;"	m	struct:SnippetPhrase	file:
pList	vendor\sqlite\sqlite3.c	/^  char *pList;                    \/* Position-list *\/$/;"	m	struct:TermOffset	file:
pList	vendor\sqlite\sqlite3.c	/^  char *pList;                   \/* Pointer to position list following iDocid *\/$/;"	m	struct:Fts3Doclist	file:
pList	vendor\sqlite\sqlite3.c	/^  char *pList;$/;"	m	struct:TokenDoclist	file:
pLock	vendor\sqlite\sqlite3.c	/^  BtLock *pLock;        \/* List of locks held on this shared-btree struct *\/$/;"	m	struct:BtShared	file:
pLogArg	vendor\sqlite\sqlite3.c	/^  void *pLogArg;                       \/* First argument to xLog() *\/$/;"	m	struct:Sqlite3Config	file:
pLoops	vendor\sqlite\sqlite3.c	/^  WhereLoop *pLoops;        \/* List of all WhereLoop objects *\/$/;"	m	struct:WhereInfo	file:
pLruHead	vendor\sqlite\sqlite3.c	/^  PgHdr1 *pLruHead, *pLruTail;   \/* LRU list of unpinned pages *\/$/;"	m	struct:PGroup	file:
pLruNext	vendor\sqlite\sqlite3.c	/^  PgHdr1 *pLruNext;              \/* Next in LRU list of unpinned pages *\/$/;"	m	struct:PgHdr1	file:
pLruPrev	vendor\sqlite\sqlite3.c	/^  PgHdr1 *pLruPrev;              \/* Previous in LRU list of unpinned pages *\/$/;"	m	struct:PgHdr1	file:
pLruTail	vendor\sqlite\sqlite3.c	/^  PgHdr1 *pLruHead, *pLruTail;   \/* LRU list of unpinned pages *\/$/;"	m	struct:PGroup	file:
pMap	vendor\sqlite\sqlite3.c	/^    void *pMap;$/;"	m	struct:winShmNode::ShmRegion	file:
pMapRegion	vendor\sqlite\sqlite3.c	/^  void *pMapRegion;                   \/* Memory mapped region *\/$/;"	m	struct:unixFile	file:
pMapRegion	vendor\sqlite\sqlite3.c	/^  void *pMapRegion;             \/* Area memory mapped *\/$/;"	m	struct:winFile	file:
pMem	vendor\sqlite\sqlite3.c	/^    Mem *pMem;             \/* Used when p4type is P4_MEM *\/$/;"	m	union:VdbeOp::__anon4	file:
pMem	vendor\sqlite\sqlite3.c	/^  Mem *pMem;            \/* Memory cell used to store aggregate context *\/$/;"	m	struct:sqlite3_context	file:
pMerger	vendor\sqlite\sqlite3.c	/^  MergeEngine *pMerger;           \/* Merge engine thread reads data from *\/$/;"	m	struct:IncrMerger	file:
pMerger	vendor\sqlite\sqlite3.c	/^  MergeEngine *pMerger;           \/* Or here, if bUseThreads==0 *\/$/;"	m	struct:VdbeSorter	file:
pMethod	vendor\sqlite\sqlite3.c	/^  const sqlite3_io_methods *pMethod; \/*** Must be first ***\/$/;"	m	struct:winFile	file:
pMethod	vendor\sqlite\sqlite3.c	/^  sqlite3_io_methods *pMethod;    \/* I\/O methods on journal files *\/$/;"	m	struct:JournalFile	file:
pMethod	vendor\sqlite\sqlite3.c	/^  sqlite3_io_methods *pMethod;    \/* Parent class. MUST BE FIRST *\/$/;"	m	struct:MemJournal	file:
pMethod	vendor\sqlite\sqlite3.c	/^  sqlite3_io_methods const *pMethod;  \/* Always the first entry *\/$/;"	m	struct:unixFile	file:
pMethods	vendor\sqlite\sqlite3.c	/^  const struct sqlite3_io_methods *pMethods;  \/* Methods for an open file *\/$/;"	m	struct:sqlite3_file	typeref:struct:sqlite3_file::sqlite3_io_methods	file:
pMmapFreelist	vendor\sqlite\sqlite3.c	/^  PgHdr *pMmapFreelist;       \/* List of free mmap page headers (pDirty) *\/$/;"	m	struct:Pager	file:
pMod	vendor\sqlite\sqlite3.c	/^  Module *pMod;             \/* Pointer to module implementation *\/$/;"	m	struct:VTable	file:
pMod	vendor\sqlite\sqlite3.c	/^  const sqlite3_tokenizer_module *pMod;$/;"	m	struct:Fts3tokTable	file:
pModule	vendor\sqlite\sqlite3.c	/^  const sqlite3_module *pModule;       \/* Callback pointers *\/$/;"	m	struct:Module	file:
pModule	vendor\sqlite\sqlite3.c	/^  const sqlite3_module *pModule;  \/* The module for this virtual table *\/$/;"	m	struct:sqlite3_vtab	file:
pModule	vendor\sqlite\sqlite3.c	/^  const sqlite3_tokenizer_module *pModule;  \/* The module for this tokenizer *\/$/;"	m	struct:sqlite3_tokenizer	file:
pNC	vendor\sqlite\sqlite3.c	/^    NameContext *pNC;                          \/* Naming context *\/$/;"	m	union:Walker::__anon11	file:
pName	vendor\sqlite\sqlite3.c	/^  const Token *pName; \/* Name of the container - used for error messages *\/$/;"	m	struct:DbFixer	file:
pNew	vendor\sqlite\sqlite3.c	/^  WhereLoop *pNew;          \/* Template WhereLoop *\/$/;"	m	struct:WhereLoopBuilder	file:
pNewTable	vendor\sqlite\sqlite3.c	/^  Table *pNewTable;         \/* A table being constructed by CREATE TABLE *\/$/;"	m	struct:Parse	file:
pNewTrigger	vendor\sqlite\sqlite3.c	/^  Trigger *pNewTrigger;     \/* Trigger under construct by a CREATE TRIGGER *\/$/;"	m	struct:Parse	file:
pNext	vendor\sqlite\sqlite3.c	/^    SorterRecord *pNext;          \/* Pointer to next record in list *\/$/;"	m	union:SorterRecord::__anon17	file:
pNext	vendor\sqlite\sqlite3.c	/^  AutoincInfo *pNext;   \/* Next info block in a list of them all *\/$/;"	m	struct:AutoincInfo	file:
pNext	vendor\sqlite\sqlite3.c	/^  AuxData *pNext;                 \/* Next element in list *\/$/;"	m	struct:AuxData	file:
pNext	vendor\sqlite\sqlite3.c	/^  BtCursor *pNext, *pPrev;  \/* Forms a linked list of all cursors *\/$/;"	m	struct:BtCursor	file:
pNext	vendor\sqlite\sqlite3.c	/^  BtLock *pNext;        \/* Next in BtShared.pLock list *\/$/;"	m	struct:BtLock	file:
pNext	vendor\sqlite\sqlite3.c	/^  BtShared *pNext;      \/* Next on a list of sharable BtShared structs *\/$/;"	m	struct:BtShared	file:
pNext	vendor\sqlite\sqlite3.c	/^  Btree *pNext;      \/* List of other sharable Btrees from the same db *\/$/;"	m	struct:Btree	file:
pNext	vendor\sqlite\sqlite3.c	/^  FileChunk *pNext;               \/* Next chunk in the journal *\/$/;"	m	struct:FileChunk	file:
pNext	vendor\sqlite\sqlite3.c	/^  Fts3DeferredToken *pNext;       \/* Next in list of deferred tokens *\/$/;"	m	struct:Fts3DeferredToken	file:
pNext	vendor\sqlite\sqlite3.c	/^  FuncDef *pNext;      \/* Next function with same name *\/$/;"	m	struct:FuncDef	file:
pNext	vendor\sqlite\sqlite3.c	/^  Index *pNext;            \/* The next index associated with the same table *\/$/;"	m	struct:Index	file:
pNext	vendor\sqlite\sqlite3.c	/^  LookasideSlot *pNext;    \/* Next buffer in the list of free buffers *\/$/;"	m	struct:LookasideSlot	file:
pNext	vendor\sqlite\sqlite3.c	/^  NameContext *pNext;  \/* Next outer name context.  NULL for outermost *\/$/;"	m	struct:NameContext	file:
pNext	vendor\sqlite\sqlite3.c	/^  PgFreeslot *pNext;  \/* Next free slot *\/$/;"	m	struct:PgFreeslot	file:
pNext	vendor\sqlite\sqlite3.c	/^  PgHdr1 *pNext;                 \/* Next in hash table chain *\/$/;"	m	struct:PgHdr1	file:
pNext	vendor\sqlite\sqlite3.c	/^  RtreeNode *pNext;           \/* Next node in this hash collision chain *\/$/;"	m	struct:RtreeNode	file:
pNext	vendor\sqlite\sqlite3.c	/^  Savepoint *pNext;                   \/* Parent savepoint (if any) *\/$/;"	m	struct:Savepoint	file:
pNext	vendor\sqlite\sqlite3.c	/^  Select *pNext;         \/* Next select to the left in a compound *\/$/;"	m	struct:Select	file:
pNext	vendor\sqlite\sqlite3.c	/^  SubProgram *pNext;            \/* Next sub-program already visited *\/$/;"	m	struct:SubProgram	file:
pNext	vendor\sqlite\sqlite3.c	/^  Trigger *pNext;         \/* Next trigger associated with the table *\/$/;"	m	struct:Trigger	file:
pNext	vendor\sqlite\sqlite3.c	/^  TriggerPrg *pNext;      \/* Next entry in Parse.pTriggerPrg list *\/$/;"	m	struct:TriggerPrg	file:
pNext	vendor\sqlite\sqlite3.c	/^  TriggerStep *pNext;  \/* Next in the link-list *\/$/;"	m	struct:TriggerStep	file:
pNext	vendor\sqlite\sqlite3.c	/^  UnixUnusedFd *pNext;      \/* Next unused file descriptor on same file *\/$/;"	m	struct:UnixUnusedFd	file:
pNext	vendor\sqlite\sqlite3.c	/^  VTable *pNext;            \/* Next in linked list (see above) *\/$/;"	m	struct:VTable	file:
pNext	vendor\sqlite\sqlite3.c	/^  Vdbe *pPrev,*pNext;     \/* Linked list of VDBEs with the same Vdbe.db *\/$/;"	m	struct:Vdbe	file:
pNext	vendor\sqlite\sqlite3.c	/^  sqlite3_backup *pNext;   \/* Next backup associated with source pager *\/$/;"	m	struct:sqlite3_backup	file:
pNext	vendor\sqlite\sqlite3.c	/^  sqlite3_vfs *pNext;      \/* Next registered VFS *\/$/;"	m	struct:sqlite3_vfs	file:
pNext	vendor\sqlite\sqlite3.c	/^  struct MemBlockHdr *pNext, *pPrev;  \/* Linked list of all unfreed memory *\/$/;"	m	struct:MemBlockHdr	typeref:struct:MemBlockHdr::MemBlockHdr	file:
pNext	vendor\sqlite\sqlite3.c	/^  struct ScratchFreeslot *pNext;   \/* Next unused scratch buffer *\/$/;"	m	struct:ScratchFreeslot	typeref:struct:ScratchFreeslot::ScratchFreeslot	file:
pNext	vendor\sqlite\sqlite3.c	/^  struct vxworksFileId *pNext;  \/* Next in a list of them all *\/$/;"	m	struct:vxworksFileId	typeref:struct:vxworksFileId::vxworksFileId	file:
pNext	vendor\sqlite\sqlite3.c	/^  unixInodeInfo *pNext;           \/* List of all unixInodeInfo objects *\/$/;"	m	struct:unixInodeInfo	file:
pNext	vendor\sqlite\sqlite3.c	/^  unixShm *pNext;            \/* Next unixShm with the same unixShmNode *\/$/;"	m	struct:unixShm	file:
pNext	vendor\sqlite\sqlite3.c	/^  winShm *pNext;             \/* Next winShm with the same winShmNode *\/$/;"	m	struct:winShm	file:
pNext	vendor\sqlite\sqlite3.c	/^  winShmNode *pNext;         \/* Next in list of all winShmNode objects *\/$/;"	m	struct:winShmNode	file:
pNextBlocked	vendor\sqlite\sqlite3.c	/^  sqlite3 *pNextBlocked;        \/* Next in list of all blocked connections *\/$/;"	m	struct:sqlite3	file:
pNextChunk	vendor\sqlite\sqlite3.c	/^  struct RowSetChunk *pNextChunk;        \/* Next chunk on list of them all *\/$/;"	m	struct:RowSetChunk	typeref:struct:RowSetChunk::RowSetChunk	file:
pNextDocid	vendor\sqlite\sqlite3.c	/^  char *pNextDocid;              \/* Pointer to next docid *\/$/;"	m	struct:Fts3Doclist	file:
pNextFrom	vendor\sqlite\sqlite3.c	/^  FKey *pNextFrom;  \/* Next FKey with the same in pFrom. Next parent of pFrom *\/$/;"	m	struct:FKey	file:
pNextId	vendor\sqlite\sqlite3.c	/^  char *pNextId;                  \/* Pointer into the body of aDoclist *\/$/;"	m	struct:Fts3Cursor	file:
pNextLoop	vendor\sqlite\sqlite3.c	/^  WhereLoop *pNextLoop; \/* Next WhereLoop object in the WhereClause *\/$/;"	m	struct:WhereLoop	file:
pNextTo	vendor\sqlite\sqlite3.c	/^  FKey *pNextTo;    \/* Next with the same zTo. Next child of zTo. *\/$/;"	m	struct:FKey	file:
pNextZombie	vendor\sqlite\sqlite3.c	/^  Table *pNextZombie;  \/* Next on the Parse.pZombieTab list *\/$/;"	m	struct:Table	file:
pOffset	vendor\sqlite\sqlite3.c	/^  Expr *pOffset;         \/* OFFSET expression. NULL means not used. *\/$/;"	m	struct:Select	file:
pOffset	vendor\sqlite\sqlite3.c	/^  Expr *pOffset;   \/* The OFFSET expression.  NULL if there is none *\/$/;"	m	struct:LimitVal	file:
pOffsetList	vendor\sqlite\sqlite3.c	/^  char *pOffsetList;$/;"	m	struct:Fts3SegReader	file:
pOldMethod	vendor\sqlite\sqlite3.c	/^  sqlite3_io_methods const *pOldMethod;     \/* Original I\/O methods for close *\/$/;"	m	struct:proxyLockingContext	file:
pOn	vendor\sqlite\sqlite3.c	/^    Expr *pOn;        \/* The ON clause of a join *\/$/;"	m	struct:SrcList::SrcList_item	file:
pOrInfo	vendor\sqlite\sqlite3.c	/^    WhereOrInfo *pOrInfo;   \/* Extra information if (eOperator & WO_OR)!=0 *\/$/;"	m	union:WhereTerm::__anon24	file:
pOrPoslist	vendor\sqlite\sqlite3.c	/^  char *pOrPoslist;$/;"	m	struct:Fts3Phrase	file:
pOrSet	vendor\sqlite\sqlite3.c	/^  WhereOrSet *pOrSet;       \/* Record best loops here, if not NULL *\/$/;"	m	struct:WhereLoopBuilder	file:
pOrderBy	vendor\sqlite\sqlite3.c	/^  ExprList *pOrderBy;       \/* ORDER BY clause *\/$/;"	m	struct:WhereLoopBuilder	file:
pOrderBy	vendor\sqlite\sqlite3.c	/^  ExprList *pOrderBy;       \/* The ORDER BY clause or NULL *\/$/;"	m	struct:WhereInfo	file:
pOrderBy	vendor\sqlite\sqlite3.c	/^  ExprList *pOrderBy;    \/* The ORDER BY clause *\/$/;"	m	struct:Select	file:
pOrderBy	vendor\sqlite\sqlite3.c	/^  ExprList *pOrderBy;   \/* The ORDER BY (or GROUP BY clause) *\/$/;"	m	struct:SortCtx	file:
pOrderBy	vendor\sqlite\sqlite3.c	/^  ExprList *pOrderBy;  \/* Key columns for SRT_Queue and SRT_DistQueue *\/$/;"	m	struct:SelectDest	file:
pOrigWC	vendor\sqlite\sqlite3.c	/^  WhereClause *pOrigWC;      \/* Original, innermost WhereClause *\/$/;"	m	struct:WhereScan	file:
pOut	vendor\sqlite\sqlite3.c	/^  Mem *pOut;            \/* The return value is stored here *\/$/;"	m	struct:sqlite3_context	file:
pOut	vendor\sqlite\sqlite3.c	/^  void *pOut;                    \/* Result returned by the thread *\/$/;"	m	struct:SQLiteThread	file:
pOuter	vendor\sqlite\sqlite3.c	/^  WhereClause *pOuter;     \/* Outer conjunction *\/$/;"	m	struct:WhereClause	file:
pOuter	vendor\sqlite\sqlite3.c	/^  With *pOuter;                   \/* Containing WITH clause, or NULL *\/$/;"	m	struct:With	file:
pPCache	vendor\sqlite\sqlite3.c	/^  PCache *pPCache;            \/* Pointer to page cache object *\/$/;"	m	struct:Pager	file:
pPage	vendor\sqlite\sqlite3.c	/^  sqlite3_pcache_page *pPage;    \/* Pcache object page handle *\/$/;"	m	struct:PgHdr	file:
pPage	vendor\sqlite\sqlite3.c	/^  void *pPage;                      \/* Page cache memory *\/$/;"	m	struct:Sqlite3Config	file:
pPage1	vendor\sqlite\sqlite3.c	/^  MemPage *pPage1;      \/* First page of the database *\/$/;"	m	struct:BtShared	file:
pPage1	vendor\sqlite\sqlite3.c	/^  PgHdr *pPage1;                      \/* Reference to page 1 *\/$/;"	m	struct:PCache	file:
pPager	vendor\sqlite\sqlite3.c	/^  Pager *pPager;                 \/* The pager this page is part of *\/$/;"	m	struct:PgHdr	file:
pPager	vendor\sqlite\sqlite3.c	/^  Pager *pPager;        \/* The page cache *\/$/;"	m	struct:BtShared	file:
pPager	vendor\sqlite\sqlite3.c	/^  Pager *pPager;    \/* The associated pager.  Also accessible by pBt->pPager *\/$/;"	m	struct:IntegrityCk	file:
pParent	vendor\sqlite\sqlite3.c	/^  Fts3Expr *pParent;         \/* pParent->pLeft==this or pParent->pRight==this *\/$/;"	m	struct:Fts3Expr	file:
pParent	vendor\sqlite\sqlite3.c	/^  RtreeNode *pParent;         \/* Parent node *\/$/;"	m	struct:RtreeNode	file:
pParent	vendor\sqlite\sqlite3.c	/^  SegmentNode *pParent;           \/* Parent node (or NULL for root node) *\/$/;"	m	struct:SegmentNode	file:
pParent	vendor\sqlite\sqlite3.c	/^  VdbeFrame *pParent;     \/* Parent of this frame, or NULL if parent is main *\/$/;"	m	struct:VdbeFrame	file:
pParse	vendor\sqlite\sqlite3.c	/^  Parse *pParse;                            \/* Parser context.  *\/$/;"	m	struct:Walker	file:
pParse	vendor\sqlite\sqlite3.c	/^  Parse *pParse;              \/* The Parse structure *\/$/;"	m	struct:AuthContext	file:
pParse	vendor\sqlite\sqlite3.c	/^  Parse *pParse;            \/* Parsing and code generating context *\/$/;"	m	struct:WhereInfo	file:
pParse	vendor\sqlite\sqlite3.c	/^  Parse *pParse;          \/* Parsing context used to create this Vdbe *\/$/;"	m	struct:Vdbe	file:
pParse	vendor\sqlite\sqlite3.c	/^  Parse *pParse;       \/* The parser *\/$/;"	m	struct:NameContext	file:
pParse	vendor\sqlite\sqlite3.c	/^  Parse *pParse;      \/* The parsing context.  Error messages written here *\/$/;"	m	struct:DbFixer	file:
pParse	vendor\sqlite\sqlite3.c	/^  Parse *pParse;$/;"	m	struct:ValueNewStat4Ctx	file:
pPartIdxWhere	vendor\sqlite\sqlite3.c	/^  Expr *pPartIdxWhere;     \/* WHERE clause for partial indices *\/$/;"	m	struct:Index	file:
pPayload	vendor\sqlite\sqlite3.c	/^  u8 *pPayload;  \/* Pointer to the start of payload *\/$/;"	m	struct:CellInfo	file:
pPhrase	vendor\sqlite\sqlite3.c	/^  Fts3Phrase *pPhrase;            \/* The phrase the token belongs to *\/$/;"	m	struct:Fts3TokenAndCost	file:
pPhrase	vendor\sqlite\sqlite3.c	/^  Fts3Phrase *pPhrase;       \/* Valid if eType==FTSQUERY_PHRASE *\/$/;"	m	struct:Fts3Expr	file:
pPrev	vendor\sqlite\sqlite3.c	/^  BtCursor *pNext, *pPrev;  \/* Forms a linked list of all cursors *\/$/;"	m	struct:BtCursor	file:
pPrev	vendor\sqlite\sqlite3.c	/^  Btree *pPrev;      \/* Back pointer of the same list *\/$/;"	m	struct:Btree	file:
pPrev	vendor\sqlite\sqlite3.c	/^  Vdbe *pPrev,*pNext;     \/* Linked list of VDBEs with the same Vdbe.db *\/$/;"	m	struct:Vdbe	file:
pPrev	vendor\sqlite\sqlite3.c	/^  struct MemBlockHdr *pNext, *pPrev;  \/* Linked list of all unfreed memory *\/$/;"	m	struct:MemBlockHdr	typeref:struct:MemBlockHdr::	file:
pPrev	vendor\sqlite\sqlite3.c	/^  unixInodeInfo *pPrev;           \/*    .... doubly linked *\/$/;"	m	struct:unixInodeInfo	file:
pPrevTo	vendor\sqlite\sqlite3.c	/^  FKey *pPrevTo;    \/* Previous with the same zTo *\/$/;"	m	struct:FKey	file:
pPrior	vendor\sqlite\sqlite3.c	/^  Select *pPrior;        \/* Prior select in a compound select statement *\/$/;"	m	struct:Select	file:
pProfileArg	vendor\sqlite\sqlite3.c	/^  void *pProfileArg;                        \/* Argument to profile function *\/$/;"	m	struct:sqlite3	file:
pProgram	vendor\sqlite\sqlite3.c	/^    SubProgram *pProgram;  \/* Used when p4type is P4_SUBPROGRAM *\/$/;"	m	union:VdbeOp::__anon4	file:
pProgram	vendor\sqlite\sqlite3.c	/^  SubProgram *pProgram;   \/* Linked list of all sub-programs used by VM *\/$/;"	m	struct:Vdbe	file:
pProgram	vendor\sqlite\sqlite3.c	/^  SubProgram *pProgram;   \/* Program implementing pTrigger\/orconf *\/$/;"	m	struct:TriggerPrg	file:
pProgressArg	vendor\sqlite\sqlite3.c	/^  void *pProgressArg;           \/* Argument to the progress callback *\/$/;"	m	struct:sqlite3	file:
pRead	vendor\sqlite\sqlite3.c	/^  char *pRead;                    \/* Cursor used to iterate through aDoclist *\/$/;"	m	struct:LcsIterator	file:
pReadNode	vendor\sqlite\sqlite3.c	/^  sqlite3_stmt *pReadNode;$/;"	m	struct:Rtree	file:
pReadParent	vendor\sqlite\sqlite3.c	/^  sqlite3_stmt *pReadParent;$/;"	m	struct:Rtree	file:
pReadRowid	vendor\sqlite\sqlite3.c	/^  sqlite3_stmt *pReadRowid;$/;"	m	struct:Rtree	file:
pReader	vendor\sqlite\sqlite3.c	/^  PmaReader *pReader;             \/* Readr data from here after Rewind() *\/$/;"	m	struct:VdbeSorter	file:
pReal	vendor\sqlite\sqlite3.c	/^    double *pReal;         \/* Used when p4type is P4_REAL *\/$/;"	m	union:VdbeOp::__anon4	file:
pReal	vendor\sqlite\sqlite3.c	/^  sqlite3_file *pReal;            \/* The "real" underlying file descriptor *\/$/;"	m	struct:JournalFile	file:
pRec	vendor\sqlite\sqlite3.c	/^  UnpackedRecord *pRec;     \/* Probe for stat4 (if required) *\/$/;"	m	struct:WhereLoopBuilder	file:
pReprepare	vendor\sqlite\sqlite3.c	/^  Vdbe *pReprepare;         \/* VM being reprepared (sqlite3Reprepare()) *\/$/;"	m	struct:Parse	file:
pResult	vendor\sqlite\sqlite3.c	/^  void *pResult;           \/* Result of xTask *\/$/;"	m	struct:SQLiteThread	file:
pResultSet	vendor\sqlite\sqlite3.c	/^  ExprList *pResultSet;     \/* Result set. DISTINCT operates on these *\/$/;"	m	struct:WhereInfo	file:
pResultSet	vendor\sqlite\sqlite3.c	/^  Mem *pResultSet;        \/* Pointer to an array of results *\/$/;"	m	struct:Vdbe	file:
pRight	vendor\sqlite\sqlite3.c	/^  Expr *pRight;          \/* Right subnode *\/$/;"	m	struct:Expr	file:
pRight	vendor\sqlite\sqlite3.c	/^  Fts3Expr *pRight;          \/* Right operand *\/$/;"	m	struct:Fts3Expr	file:
pRight	vendor\sqlite\sqlite3.c	/^  SegmentNode *pRight;            \/* Pointer to right-sibling *\/$/;"	m	struct:SegmentNode	file:
pRight	vendor\sqlite\sqlite3.c	/^  struct RowSetEntry *pRight;   \/* Right subtree (larger entries) or list *\/$/;"	m	struct:RowSetEntry	typeref:struct:RowSetEntry::RowSetEntry	file:
pRollbackArg	vendor\sqlite\sqlite3.c	/^  void *pRollbackArg;               \/* Argument to xRollbackCallback() *\/   $/;"	m	struct:sqlite3	file:
pRoot	vendor\sqlite\sqlite3.c	/^  Fts3Expr *pRoot;                \/* Root of NEAR\/AND cluster *\/$/;"	m	struct:Fts3TokenAndCost	file:
pRowSet	vendor\sqlite\sqlite3.c	/^    RowSet *pRowSet;    \/* Used only when flags==MEM_RowSet *\/$/;"	m	union:Mem::MemValue	file:
pSavepoint	vendor\sqlite\sqlite3.c	/^  Savepoint *pSavepoint;        \/* List of active savepoints *\/$/;"	m	struct:sqlite3	file:
pSchema	vendor\sqlite\sqlite3.c	/^    Schema *pSchema;  \/* Schema to which this item is fixed *\/$/;"	m	struct:SrcList::SrcList_item	file:
pSchema	vendor\sqlite\sqlite3.c	/^  Schema *pSchema;         \/* Schema containing this index *\/$/;"	m	struct:Index	file:
pSchema	vendor\sqlite\sqlite3.c	/^  Schema *pSchema;        \/* Schema containing the trigger *\/$/;"	m	struct:Trigger	file:
pSchema	vendor\sqlite\sqlite3.c	/^  Schema *pSchema;     \/* Pointer to database schema (possibly shared) *\/$/;"	m	struct:Db	file:
pSchema	vendor\sqlite\sqlite3.c	/^  Schema *pSchema;     \/* Schema that contains this table *\/$/;"	m	struct:Table	file:
pSchema	vendor\sqlite\sqlite3.c	/^  Schema *pSchema;    \/* Fix items to this schema *\/$/;"	m	struct:DbFixer	file:
pSchema	vendor\sqlite\sqlite3.c	/^  void *pSchema;        \/* Pointer to space allocated by sqlite3BtreeSchema() *\/$/;"	m	struct:BtShared	file:
pScopyFrom	vendor\sqlite\sqlite3.c	/^  Mem *pScopyFrom;    \/* This Mem is a shallow copy of pScopyFrom *\/$/;"	m	struct:Mem	file:
pScratch	vendor\sqlite\sqlite3.c	/^  void *pScratch;                   \/* Scratch memory *\/$/;"	m	struct:Sqlite3Config	file:
pScratchEnd	vendor\sqlite\sqlite3.c	/^  void *pScratchEnd;$/;"	m	struct:Mem0Global	file:
pScratchFree	vendor\sqlite\sqlite3.c	/^  ScratchFreeslot *pScratchFree;$/;"	m	struct:Mem0Global	file:
pSegcsr	vendor\sqlite\sqlite3.c	/^  Fts3MultiSegReader *pSegcsr;    \/* Segment-reader for this token *\/$/;"	m	struct:Fts3PhraseToken	file:
pSegments	vendor\sqlite\sqlite3.c	/^  sqlite3_blob *pSegments;        \/* Blob handle open on %_segments table *\/$/;"	m	struct:Fts3Table	file:
pSelect	vendor\sqlite\sqlite3.c	/^    Select *pSelect;                \/* The definition of this CTE *\/$/;"	m	struct:With::Cte	file:
pSelect	vendor\sqlite\sqlite3.c	/^    Select *pSelect;     \/* EP_xIsSelect and op = IN, EXISTS, SELECT *\/$/;"	m	union:Expr::__anon7	file:
pSelect	vendor\sqlite\sqlite3.c	/^    Select *pSelect;  \/* A SELECT statement used in place of a table name *\/$/;"	m	struct:SrcList::SrcList_item	file:
pSelect	vendor\sqlite\sqlite3.c	/^  Select *pSelect;     \/* NULL for tables.  Points to definition if a view. *\/$/;"	m	struct:Table	file:
pSelect	vendor\sqlite\sqlite3.c	/^  Select *pSelect;     \/* SELECT statment or RHS of INSERT INTO .. SELECT ... *\/$/;"	m	struct:TriggerStep	file:
pSem	vendor\sqlite\sqlite3.c	/^  sem_t *pSem;                    \/* Named POSIX semaphore *\/$/;"	m	struct:unixInodeInfo	file:
pSeqTab	vendor\sqlite\sqlite3.c	/^  Table *pSeqTab;      \/* The sqlite_sequence table used by AUTOINCREMENT *\/$/;"	m	struct:Schema	file:
pShm	vendor\sqlite\sqlite3.c	/^  unixShm *pShm;                      \/* Shared memory segment information *\/$/;"	m	struct:unixFile	file:
pShm	vendor\sqlite\sqlite3.c	/^  winShm *pShm;           \/* Instance of shared memory on this file *\/$/;"	m	struct:winFile	file:
pShmNode	vendor\sqlite\sqlite3.c	/^  unixShmNode *pShmNode;          \/* Shared memory associated with this inode *\/$/;"	m	struct:unixInodeInfo	file:
pShmNode	vendor\sqlite\sqlite3.c	/^  unixShmNode *pShmNode;     \/* The underlying unixShmNode object *\/$/;"	m	struct:unixShm	file:
pShmNode	vendor\sqlite\sqlite3.c	/^  winShmNode *pShmNode;      \/* The underlying winShmNode object *\/$/;"	m	struct:winShm	file:
pSorter	vendor\sqlite\sqlite3.c	/^  VdbeSorter *pSorter;            \/* Sorter that owns this sub-task *\/$/;"	m	struct:SortSubtask	file:
pSorter	vendor\sqlite\sqlite3.c	/^  VdbeSorter *pSorter;  \/* Sorter object for OP_SorterOpen cursors *\/$/;"	m	struct:VdbeCursor	file:
pSqllogArg	vendor\sqlite\sqlite3.c	/^  void *pSqllogArg;$/;"	m	struct:Sqlite3Config	file:
pSrc	vendor\sqlite\sqlite3.c	/^  Btree *pSrc;             \/* Source b-tree file *\/$/;"	m	struct:sqlite3_backup	file:
pSrc	vendor\sqlite\sqlite3.c	/^  SrcList *pSrc;         \/* The FROM clause *\/$/;"	m	struct:Select	file:
pSrc	vendor\sqlite\sqlite3.c	/^  SrcList *pSrc;   \/* One particular FROM clause in a nested query *\/$/;"	m	struct:SrcCount	file:
pSrcCount	vendor\sqlite\sqlite3.c	/^    struct SrcCount *pSrcCount;                \/* Counting column references *\/$/;"	m	union:Walker::__anon11	typeref:struct:Walker::__anon11::SrcCount	file:
pSrcDb	vendor\sqlite\sqlite3.c	/^  sqlite3* pSrcDb;         \/* Source database handle *\/$/;"	m	struct:sqlite3_backup	file:
pSrcList	vendor\sqlite\sqlite3.c	/^    SrcList *pSrcList;                         \/* FROM clause *\/$/;"	m	union:Walker::__anon11	file:
pSrcList	vendor\sqlite\sqlite3.c	/^  SrcList *pSrcList;   \/* One or more tables used to resolve names *\/$/;"	m	struct:NameContext	file:
pStart	vendor\sqlite\sqlite3.c	/^  void *pStart, *pEnd;           \/* Bounds of pagecache malloc range *\/$/;"	m	struct:PCacheGlobal	file:
pStart	vendor\sqlite\sqlite3.c	/^  void *pStart;           \/* First byte of available memory space *\/$/;"	m	struct:Lookaside	file:
pStmt	vendor\sqlite\sqlite3.c	/^  sqlite3_stmt *pStmt;            \/* Prepared statement in use by the cursor *\/$/;"	m	struct:Fts3Cursor	file:
pStmt	vendor\sqlite\sqlite3.c	/^  sqlite3_stmt *pStmt;    \/* Statement holding cursor open *\/$/;"	m	struct:Incrblob	file:
pStress	vendor\sqlite\sqlite3.c	/^  void *pStress;                      \/* Argument to xStress *\/$/;"	m	struct:PCache	file:
pSynced	vendor\sqlite\sqlite3.c	/^  PgHdr *pSynced;                     \/* Last synced page in dirty page list *\/$/;"	m	struct:PCache	file:
pTab	vendor\sqlite\sqlite3.c	/^    Table *pTab;             \/* Source table *\/$/;"	m	struct:AggInfo::AggInfo_col	file:
pTab	vendor\sqlite\sqlite3.c	/^    Table *pTab;      \/* An SQL table corresponding to zName *\/$/;"	m	struct:SrcList::SrcList_item	file:
pTab	vendor\sqlite\sqlite3.c	/^  Table *pTab;           \/* Table for TK_COLUMN expressions. *\/$/;"	m	struct:Expr	file:
pTab	vendor\sqlite\sqlite3.c	/^  Table *pTab;          \/* Table this info block refers to *\/$/;"	m	struct:AutoincInfo	file:
pTab	vendor\sqlite\sqlite3.c	/^  Table *pTab;        \/* The Table object to which the virtual table belongs *\/$/;"	m	struct:VtabCtx	file:
pTabList	vendor\sqlite\sqlite3.c	/^  SrcList *pTabList;        \/* List of tables in the join *\/$/;"	m	struct:WhereInfo	file:
pTabSchema	vendor\sqlite\sqlite3.c	/^  Schema *pTabSchema;     \/* Schema containing the table *\/$/;"	m	struct:Trigger	file:
pTable	vendor\sqlite\sqlite3.c	/^  Table *pTable;           \/* The SQL table being indexed *\/$/;"	m	struct:Index	file:
pTail	vendor\sqlite\sqlite3.c	/^  char *pTail;                    \/* Position list data following iTail *\/$/;"	m	struct:SnippetPhrase	file:
pTask	vendor\sqlite\sqlite3.c	/^  SortSubtask *pTask;             \/* Task that owns this merger *\/$/;"	m	struct:IncrMerger	file:
pTask	vendor\sqlite\sqlite3.c	/^  SortSubtask *pTask;        \/* Used by this thread only *\/$/;"	m	struct:MergeEngine	file:
pThread	vendor\sqlite\sqlite3.c	/^  SQLiteThread *pThread;          \/* Background thread, if any *\/$/;"	m	struct:SortSubtask	file:
pTmpSpace	vendor\sqlite\sqlite3.c	/^  char *pTmpSpace;            \/* Pager.pageSize bytes of space for tmp use *\/$/;"	m	struct:Pager	file:
pTmpSpace	vendor\sqlite\sqlite3.c	/^  u8 *pTmpSpace;        \/* Temp space sufficient to hold a single cell *\/$/;"	m	struct:BtShared	file:
pTok	vendor\sqlite\sqlite3.c	/^  sqlite3_tokenizer *pTok;$/;"	m	struct:Fts3tokTable	file:
pToken	vendor\sqlite\sqlite3.c	/^  Fts3PhraseToken *pToken;        \/* Pointer to corresponding expr token *\/$/;"	m	struct:Fts3DeferredToken	file:
pToken	vendor\sqlite\sqlite3.c	/^  Fts3PhraseToken *pToken;        \/* The token itself *\/$/;"	m	struct:Fts3TokenAndCost	file:
pToken	vendor\sqlite\sqlite3.c	/^  char *pToken;                \/* storage for current token *\/$/;"	m	struct:simple_tokenizer_cursor	file:
pTokenizer	vendor\sqlite\sqlite3.c	/^  sqlite3_tokenizer *pTokenizer;       \/* Tokenizer for this cursor. *\/$/;"	m	struct:sqlite3_tokenizer_cursor	file:
pTokenizer	vendor\sqlite\sqlite3.c	/^  sqlite3_tokenizer *pTokenizer;      \/* Tokenizer module *\/$/;"	m	struct:ParseContext	file:
pTokenizer	vendor\sqlite\sqlite3.c	/^  sqlite3_tokenizer *pTokenizer;  \/* tokenizer for inserts and queries *\/$/;"	m	struct:Fts3Table	file:
pToplevel	vendor\sqlite\sqlite3.c	/^  Parse *pToplevel;    \/* Parse structure for main program (or NULL) *\/$/;"	m	struct:Parse	file:
pTraceArg	vendor\sqlite\sqlite3.c	/^  void *pTraceArg;                          \/* Argument to the trace function *\/$/;"	m	struct:sqlite3	file:
pTree	vendor\sqlite\sqlite3.c	/^  SegmentNode *pTree;             \/* Pointer to interior tree structure *\/$/;"	m	struct:SegmentWriter	file:
pTrig	vendor\sqlite\sqlite3.c	/^  Trigger *pTrig;      \/* The trigger that this step is a part of *\/$/;"	m	struct:TriggerStep	file:
pTrigger	vendor\sqlite\sqlite3.c	/^  Trigger *pTrigger;      \/* Trigger this program was coded from *\/$/;"	m	struct:TriggerPrg	file:
pTrigger	vendor\sqlite\sqlite3.c	/^  Trigger *pTrigger;   \/* List of triggers stored in pSchema *\/$/;"	m	struct:Table	file:
pTrigger	vendor\sqlite\sqlite3.c	113248;"	d	file:
pTrigger	vendor\sqlite\sqlite3.c	95367;"	d	file:
pTrigger	vendor\sqlite\sqlite3.c	99882;"	d	file:
pTriggerPrg	vendor\sqlite\sqlite3.c	/^  TriggerPrg *pTriggerPrg;  \/* Linked list of coded triggers *\/$/;"	m	struct:Parse	file:
pTriggerTab	vendor\sqlite\sqlite3.c	/^  Table *pTriggerTab;  \/* Table triggers are being coded for *\/$/;"	m	struct:Parse	file:
pUnlockArg	vendor\sqlite\sqlite3.c	/^  void *pUnlockArg;                     \/* Argument to xUnlockNotify *\/$/;"	m	struct:sqlite3	file:
pUnlockConnection	vendor\sqlite\sqlite3.c	/^  sqlite3 *pUnlockConnection;           \/* Connection to watch for unlock *\/$/;"	m	struct:sqlite3	file:
pUnpacked	vendor\sqlite\sqlite3.c	/^  UnpackedRecord *pUnpacked;      \/* Space to unpack a record *\/$/;"	m	struct:SortSubtask	file:
pUnpacked	vendor\sqlite\sqlite3.c	/^  UnpackedRecord *pUnpacked;      \/* Used by VdbeSorterCompare() *\/$/;"	m	struct:VdbeSorter	file:
pUnused	vendor\sqlite\sqlite3.c	/^  UnixUnusedFd *pUnused;              \/* Pre-allocated UnixUnusedFd *\/$/;"	m	struct:unixFile	file:
pUnused	vendor\sqlite\sqlite3.c	/^  UnixUnusedFd *pUnused;          \/* Unused file descriptors to close *\/$/;"	m	struct:unixInodeInfo	file:
pUpdateArg	vendor\sqlite\sqlite3.c	/^  void *pUpdateArg;$/;"	m	struct:sqlite3	file:
pUser	vendor\sqlite\sqlite3.c	/^  void *pUser;                      \/* callback can use this, if desired *\/$/;"	m	struct:sqlite3_rtree_query_info	file:
pUser	vendor\sqlite\sqlite3.c	/^  void *pUser;                    \/* Callback implementation user data *\/$/;"	m	struct:sqlite3_rtree_geometry	file:
pUser	vendor\sqlite\sqlite3.c	/^  void *pUser;          \/* First argument to xCmp() *\/$/;"	m	struct:CollSeq	file:
pUserData	vendor\sqlite\sqlite3.c	/^  void *pUserData;     \/* User data parameter *\/$/;"	m	struct:FuncDef	file:
pUserData	vendor\sqlite\sqlite3.c	/^  void *pUserData;$/;"	m	struct:FuncDestructor	file:
pUsing	vendor\sqlite\sqlite3.c	/^    IdList *pUsing;   \/* The USING clause of a join *\/$/;"	m	struct:SrcList::SrcList_item	file:
pVTable	vendor\sqlite\sqlite3.c	/^  VTable *pVTable;     \/* List of VTable objects. *\/$/;"	m	struct:Table	file:
pVTable	vendor\sqlite\sqlite3.c	/^  VTable *pVTable;    \/* The virtual table being constructed *\/$/;"	m	struct:VtabCtx	file:
pVdbe	vendor\sqlite\sqlite3.c	/^  Vdbe *pVdbe;          \/* The VM that owns this context *\/$/;"	m	struct:sqlite3_context	file:
pVdbe	vendor\sqlite\sqlite3.c	/^  Vdbe *pVdbe;         \/* An engine for executing database bytecode *\/$/;"	m	struct:Parse	file:
pVdbe	vendor\sqlite\sqlite3.c	/^  Vdbe *pVdbe;       \/* Attach the explanation to this Vdbe *\/$/;"	m	struct:Explain	file:
pVdbe	vendor\sqlite\sqlite3.c	/^  struct Vdbe *pVdbe;           \/* List of active virtual machines *\/$/;"	m	struct:sqlite3	typeref:struct:sqlite3::Vdbe	file:
pVdbeBranchArg	vendor\sqlite\sqlite3.c	/^  void *pVdbeBranchArg;                                     \/* 1st argument *\/$/;"	m	struct:Sqlite3Config	file:
pVfs	vendor\sqlite\sqlite3.c	/^  sqlite3_vfs *pVfs;                  \/* The VFS that created this unixFile *\/$/;"	m	struct:unixFile	file:
pVfs	vendor\sqlite\sqlite3.c	/^  sqlite3_vfs *pVfs;              \/* The "real" underlying VFS *\/$/;"	m	struct:JournalFile	file:
pVfs	vendor\sqlite\sqlite3.c	/^  sqlite3_vfs *pVfs;            \/* OS Interface *\/$/;"	m	struct:sqlite3	file:
pVfs	vendor\sqlite\sqlite3.c	/^  sqlite3_vfs *pVfs;          \/* OS functions to use for IO *\/$/;"	m	struct:Pager	file:
pVfs	vendor\sqlite\sqlite3.c	/^  sqlite3_vfs *pVfs;         \/* The VFS used to create pDbFd *\/$/;"	m	struct:Wal	file:
pVfs	vendor\sqlite\sqlite3.c	/^  sqlite3_vfs *pVfs;      \/* The VFS used to open this file *\/$/;"	m	struct:winFile	file:
pVtab	vendor\sqlite\sqlite3.c	/^    VTable *pVtab;         \/* Used when p4type is P4_VTAB *\/$/;"	m	union:VdbeOp::__anon4	file:
pVtab	vendor\sqlite\sqlite3.c	/^  sqlite3_vtab *pVtab;      \/* Pointer to vtab instance *\/$/;"	m	struct:VTable	file:
pVtab	vendor\sqlite\sqlite3.c	/^  sqlite3_vtab *pVtab;      \/* Virtual table of this cursor *\/$/;"	m	struct:sqlite3_vtab_cursor	file:
pVtabCtx	vendor\sqlite\sqlite3.c	/^  VtabCtx *pVtabCtx;            \/* Context for active vtab connect\/create *\/$/;"	m	struct:sqlite3	file:
pVtabCursor	vendor\sqlite\sqlite3.c	/^  sqlite3_vtab_cursor *pVtabCursor;  \/* The cursor for a virtual table *\/$/;"	m	struct:VdbeCursor	file:
pWC	vendor\sqlite\sqlite3.c	/^  WhereClause *pWC;          \/* WhereClause currently being scanned *\/$/;"	m	struct:WhereScan	file:
pWC	vendor\sqlite\sqlite3.c	/^  WhereClause *pWC;         \/* WHERE clause terms *\/$/;"	m	struct:WhereLoopBuilder	file:
pWC	vendor\sqlite\sqlite3.c	/^  WhereClause *pWC;       \/* The clause this term is part of *\/$/;"	m	struct:WhereTerm	file:
pWInfo	vendor\sqlite\sqlite3.c	/^  WhereInfo *pWInfo;        \/* Information about this WHERE *\/$/;"	m	struct:WhereLoopBuilder	file:
pWInfo	vendor\sqlite\sqlite3.c	/^  WhereInfo *pWInfo;       \/* WHERE clause processing context *\/$/;"	m	struct:WhereClause	file:
pWLoop	vendor\sqlite\sqlite3.c	/^  struct WhereLoop *pWLoop;  \/* The selected WhereLoop object *\/$/;"	m	struct:WhereLevel	typeref:struct:WhereLevel::WhereLoop	file:
pWal	vendor\sqlite\sqlite3.c	/^  Wal *pWal;                   \/* The complete WAL information *\/$/;"	m	struct:WalWriter	file:
pWal	vendor\sqlite\sqlite3.c	/^  Wal *pWal;                  \/* Write-ahead log used by "journal_mode=wal" *\/$/;"	m	struct:Pager	file:
pWalArg	vendor\sqlite\sqlite3.c	/^  void *pWalArg;$/;"	m	struct:sqlite3	file:
pWalFd	vendor\sqlite\sqlite3.c	/^  sqlite3_file *pWalFd;      \/* File handle for WAL file *\/$/;"	m	struct:Wal	file:
pWhen	vendor\sqlite\sqlite3.c	/^  Expr *pWhen;            \/* The WHEN clause of the expression (may be NULL) *\/$/;"	m	struct:Trigger	file:
pWhere	vendor\sqlite\sqlite3.c	/^  Expr *pWhere;          \/* The WHERE clause *\/$/;"	m	struct:Select	file:
pWhere	vendor\sqlite\sqlite3.c	/^  Expr *pWhere;        \/* The WHERE clause for DELETE or UPDATE steps *\/$/;"	m	struct:TriggerStep	file:
pWith	vendor\sqlite\sqlite3.c	/^  With *pWith;              \/* Current WITH clause, or NULL *\/$/;"	m	struct:Parse	file:
pWith	vendor\sqlite\sqlite3.c	/^  With *pWith;           \/* WITH clause attached to this select. Or NULL. *\/$/;"	m	struct:Select	file:
pWriteNode	vendor\sqlite\sqlite3.c	/^  sqlite3_stmt *pWriteNode;$/;"	m	struct:Rtree	file:
pWriteParent	vendor\sqlite\sqlite3.c	/^  sqlite3_stmt *pWriteParent;$/;"	m	struct:Rtree	file:
pWriteRowid	vendor\sqlite\sqlite3.c	/^  sqlite3_stmt *pWriteRowid;$/;"	m	struct:Rtree	file:
pWriter	vendor\sqlite\sqlite3.c	/^  Btree *pWriter;       \/* Btree with currently open write transaction *\/$/;"	m	struct:BtShared	file:
pZombieTab	vendor\sqlite\sqlite3.c	/^  Table *pZombieTab;        \/* List of Table objects to delete after code gen *\/$/;"	m	struct:Parse	file:
padToSectorBoundary	vendor\sqlite\sqlite3.c	/^  u8 padToSectorBoundary;    \/* Pad transactions out to the next sector *\/$/;"	m	struct:Wal	file:
page	vendor\sqlite\sqlite3.c	/^  sqlite3_pcache_page page;$/;"	m	struct:PgHdr1	file:
pageFindSlot	vendor\sqlite\sqlite3.c	/^static u8 *pageFindSlot(MemPage *pPg, int nByte, int *pRc, int *pbDefrag){$/;"	f	file:
pageFreeArray	vendor\sqlite\sqlite3.c	/^static int pageFreeArray($/;"	f	file:
pageHash	vendor\sqlite\sqlite3.c	/^  u32 pageHash;                  \/* Hash of page content *\/$/;"	m	struct:PgHdr	file:
pageInJournal	vendor\sqlite\sqlite3.c	/^static int pageInJournal(Pager *pPager, PgHdr *pPg){$/;"	f	file:
pageInsertArray	vendor\sqlite\sqlite3.c	/^static int pageInsertArray($/;"	f	file:
pageReinit	vendor\sqlite\sqlite3.c	/^static void pageReinit(DbPage *pData){$/;"	f	file:
pageSize	vendor\sqlite\sqlite3.c	/^  int pageSize;               \/* Number of bytes in a page *\/$/;"	m	struct:Pager	file:
pageSize	vendor\sqlite\sqlite3.c	/^  u32 pageSize;         \/* Total number of bytes on a page *\/$/;"	m	struct:BtShared	file:
pagerAcquireMapPage	vendor\sqlite\sqlite3.c	/^static int pagerAcquireMapPage($/;"	f	file:
pagerBeginReadTransaction	vendor\sqlite\sqlite3.c	/^static int pagerBeginReadTransaction(Pager *pPager){$/;"	f	file:
pagerBeginReadTransaction	vendor\sqlite\sqlite3.c	42195;"	d	file:
pagerExclusiveLock	vendor\sqlite\sqlite3.c	/^static int pagerExclusiveLock(Pager *pPager){$/;"	f	file:
pagerFixMaplimit	vendor\sqlite\sqlite3.c	/^static void pagerFixMaplimit(Pager *pPager){$/;"	f	file:
pagerFreeMapHdrs	vendor\sqlite\sqlite3.c	/^static void pagerFreeMapHdrs(Pager *pPager){$/;"	f	file:
pagerLockDb	vendor\sqlite\sqlite3.c	/^static int pagerLockDb(Pager *pPager, int eLock){$/;"	f	file:
pagerOpenWal	vendor\sqlite\sqlite3.c	/^static int pagerOpenWal(Pager *pPager){$/;"	f	file:
pagerOpenWalIfPresent	vendor\sqlite\sqlite3.c	/^static int pagerOpenWalIfPresent(Pager *pPager){$/;"	f	file:
pagerOpenWalIfPresent	vendor\sqlite\sqlite3.c	42194;"	d	file:
pagerOpentemp	vendor\sqlite\sqlite3.c	/^static int pagerOpentemp($/;"	f	file:
pagerPagecount	vendor\sqlite\sqlite3.c	/^static int pagerPagecount(Pager *pPager, Pgno *pnPage){$/;"	f	file:
pagerPlaybackSavepoint	vendor\sqlite\sqlite3.c	/^static int pagerPlaybackSavepoint(Pager *pPager, PagerSavepoint *pSavepoint){$/;"	f	file:
pagerReleaseMapPage	vendor\sqlite\sqlite3.c	/^static void pagerReleaseMapPage(PgHdr *pPg){$/;"	f	file:
pagerReportSize	vendor\sqlite\sqlite3.c	/^static void pagerReportSize(Pager *pPager){$/;"	f	file:
pagerReportSize	vendor\sqlite\sqlite3.c	43482;"	d	file:
pagerRollbackWal	vendor\sqlite\sqlite3.c	/^static int pagerRollbackWal(Pager *pPager){$/;"	f	file:
pagerRollbackWal	vendor\sqlite\sqlite3.c	42192;"	d	file:
pagerStress	vendor\sqlite\sqlite3.c	/^static int pagerStress(void *p, PgHdr *pPg){$/;"	f	file:
pagerSyncHotJournal	vendor\sqlite\sqlite3.c	/^static int pagerSyncHotJournal(Pager *pPager){$/;"	f	file:
pagerUndoCallback	vendor\sqlite\sqlite3.c	/^static int pagerUndoCallback(void *pCtx, Pgno iPg){$/;"	f	file:
pagerUnlockAndRollback	vendor\sqlite\sqlite3.c	/^static void pagerUnlockAndRollback(Pager *pPager){$/;"	f	file:
pagerUnlockDb	vendor\sqlite\sqlite3.c	/^static int pagerUnlockDb(Pager *pPager, int eLock){$/;"	f	file:
pagerUnlockIfUnused	vendor\sqlite\sqlite3.c	/^static void pagerUnlockIfUnused(Pager *pPager){$/;"	f	file:
pagerUseWal	vendor\sqlite\sqlite3.c	/^static int pagerUseWal(Pager *pPager){$/;"	f	file:
pagerUseWal	vendor\sqlite\sqlite3.c	42191;"	d	file:
pagerWalFrames	vendor\sqlite\sqlite3.c	/^static int pagerWalFrames($/;"	f	file:
pagerWalFrames	vendor\sqlite\sqlite3.c	42193;"	d	file:
pagerWriteLargeSector	vendor\sqlite\sqlite3.c	/^static SQLITE_NOINLINE int pagerWriteLargeSector(PgHdr *pPg){$/;"	f	file:
pager_cksum	vendor\sqlite\sqlite3.c	/^static u32 pager_cksum(Pager *pPager, const u8 *aData){$/;"	f	file:
pager_datahash	vendor\sqlite\sqlite3.c	/^static u32 pager_datahash(int nByte, unsigned char *pData){$/;"	f	file:
pager_datahash	vendor\sqlite\sqlite3.c	42577;"	d	file:
pager_delmaster	vendor\sqlite\sqlite3.c	/^static int pager_delmaster(Pager *pPager, const char *zMaster){$/;"	f	file:
pager_end_transaction	vendor\sqlite\sqlite3.c	/^static int pager_end_transaction(Pager *pPager, int hasMaster, int bCommit){$/;"	f	file:
pager_error	vendor\sqlite\sqlite3.c	/^static int pager_error(Pager *pPager, int rc){$/;"	f	file:
pager_incr_changecounter	vendor\sqlite\sqlite3.c	/^static int pager_incr_changecounter(Pager *pPager, int isDirectMode){$/;"	f	file:
pager_open_journal	vendor\sqlite\sqlite3.c	/^static int pager_open_journal(Pager *pPager){$/;"	f	file:
pager_pagehash	vendor\sqlite\sqlite3.c	/^static u32 pager_pagehash(PgHdr *pPage){$/;"	f	file:
pager_pagehash	vendor\sqlite\sqlite3.c	42578;"	d	file:
pager_playback	vendor\sqlite\sqlite3.c	/^static int pager_playback(Pager *pPager, int isHot){$/;"	f	file:
pager_playback_one_page	vendor\sqlite\sqlite3.c	/^static int pager_playback_one_page($/;"	f	file:
pager_reset	vendor\sqlite\sqlite3.c	/^static void pager_reset(Pager *pPager){$/;"	f	file:
pager_set_pagehash	vendor\sqlite\sqlite3.c	/^static void pager_set_pagehash(PgHdr *pPage){$/;"	f	file:
pager_set_pagehash	vendor\sqlite\sqlite3.c	42579;"	d	file:
pager_truncate	vendor\sqlite\sqlite3.c	/^static int pager_truncate(Pager *pPager, Pgno nPage){$/;"	f	file:
pager_unlock	vendor\sqlite\sqlite3.c	/^static void pager_unlock(Pager *pPager){$/;"	f	file:
pager_wait_on_lock	vendor\sqlite\sqlite3.c	/^static int pager_wait_on_lock(Pager *pPager, int locktype){$/;"	f	file:
pager_write	vendor\sqlite\sqlite3.c	/^static int pager_write(PgHdr *pPg){$/;"	f	file:
pager_write_changecounter	vendor\sqlite\sqlite3.c	/^static void pager_write_changecounter(PgHdr *pPg){$/;"	f	file:
pager_write_pagelist	vendor\sqlite\sqlite3.c	/^static int pager_write_pagelist(Pager *pPager, PgHdr *pList){$/;"	f	file:
parentWrite	vendor\sqlite\sqlite3.c	/^static int parentWrite(Rtree *pRtree, sqlite3_int64 iNode, sqlite3_int64 iPar){$/;"	f	file:
parseDateOrTime	vendor\sqlite\sqlite3.c	/^static int parseDateOrTime($/;"	f	file:
parseHhMmSs	vendor\sqlite\sqlite3.c	/^static int parseHhMmSs(const char *zDate, DateTime *p){$/;"	f	file:
parseModifier	vendor\sqlite\sqlite3.c	/^static int parseModifier(sqlite3_context *pCtx, const char *zMod, DateTime *p){$/;"	f	file:
parseTimezone	vendor\sqlite\sqlite3.c	/^static int parseTimezone(const char *zDate, DateTime *p){$/;"	f	file:
parseYyyyMmDd	vendor\sqlite\sqlite3.c	/^static int parseYyyyMmDd(const char *zDate, DateTime *p){$/;"	f	file:
patternCompare	vendor\sqlite\sqlite3.c	/^static int patternCompare($/;"	f	file:
payloadSize	vendor\sqlite\sqlite3.c	/^  u32 payloadSize;      \/* Total number of bytes in the record *\/$/;"	m	struct:VdbeCursor	file:
pc	vendor\sqlite\sqlite3.c	/^  int pc;                 \/* Program Counter in parent (calling) frame *\/$/;"	m	struct:VdbeFrame	file:
pc	vendor\sqlite\sqlite3.c	/^  int pc;                 \/* The program counter *\/$/;"	m	struct:Vdbe	file:
pcache1	vendor\sqlite\sqlite3.c	39819;"	d	file:
pcache1Alloc	vendor\sqlite\sqlite3.c	/^static void *pcache1Alloc(int nByte){$/;"	f	file:
pcache1AllocPage	vendor\sqlite\sqlite3.c	/^static PgHdr1 *pcache1AllocPage(PCache1 *pCache){$/;"	f	file:
pcache1Cachesize	vendor\sqlite\sqlite3.c	/^static void pcache1Cachesize(sqlite3_pcache *p, int nMax){$/;"	f	file:
pcache1Create	vendor\sqlite\sqlite3.c	/^static sqlite3_pcache *pcache1Create(int szPage, int szExtra, int bPurgeable){$/;"	f	file:
pcache1Destroy	vendor\sqlite\sqlite3.c	/^static void pcache1Destroy(sqlite3_pcache *p){$/;"	f	file:
pcache1EnforceMaxPage	vendor\sqlite\sqlite3.c	/^static void pcache1EnforceMaxPage(PGroup *pGroup){$/;"	f	file:
pcache1EnterMutex	vendor\sqlite\sqlite3.c	39824;"	d	file:
pcache1Fetch	vendor\sqlite\sqlite3.c	/^static sqlite3_pcache_page *pcache1Fetch($/;"	f	file:
pcache1FetchStage2	vendor\sqlite\sqlite3.c	/^static SQLITE_NOINLINE PgHdr1 *pcache1FetchStage2($/;"	f	file:
pcache1Free	vendor\sqlite\sqlite3.c	/^static int pcache1Free(void *p){$/;"	f	file:
pcache1FreePage	vendor\sqlite\sqlite3.c	/^static void pcache1FreePage(PgHdr1 *p){$/;"	f	file:
pcache1Init	vendor\sqlite\sqlite3.c	/^static int pcache1Init(void *NotUsed){$/;"	f	file:
pcache1LeaveMutex	vendor\sqlite\sqlite3.c	39825;"	d	file:
pcache1MemSize	vendor\sqlite\sqlite3.c	/^static int pcache1MemSize(void *p){$/;"	f	file:
pcache1Pagecount	vendor\sqlite\sqlite3.c	/^static int pcache1Pagecount(sqlite3_pcache *p){$/;"	f	file:
pcache1PinPage	vendor\sqlite\sqlite3.c	/^static void pcache1PinPage(PgHdr1 *pPage){$/;"	f	file:
pcache1Rekey	vendor\sqlite\sqlite3.c	/^static void pcache1Rekey($/;"	f	file:
pcache1RemoveFromHash	vendor\sqlite\sqlite3.c	/^static void pcache1RemoveFromHash(PgHdr1 *pPage){$/;"	f	file:
pcache1ResizeHash	vendor\sqlite\sqlite3.c	/^static void pcache1ResizeHash(PCache1 *p){$/;"	f	file:
pcache1Shrink	vendor\sqlite\sqlite3.c	/^static void pcache1Shrink(sqlite3_pcache *p){$/;"	f	file:
pcache1Shutdown	vendor\sqlite\sqlite3.c	/^static void pcache1Shutdown(void *NotUsed){$/;"	f	file:
pcache1Truncate	vendor\sqlite\sqlite3.c	/^static void pcache1Truncate(sqlite3_pcache *p, unsigned int iLimit){$/;"	f	file:
pcache1TruncateUnsafe	vendor\sqlite\sqlite3.c	/^static void pcache1TruncateUnsafe($/;"	f	file:
pcache1UnderMemoryPressure	vendor\sqlite\sqlite3.c	/^static int pcache1UnderMemoryPressure(PCache1 *pCache){$/;"	f	file:
pcache1Unpin	vendor\sqlite\sqlite3.c	/^static void pcache1Unpin($/;"	f	file:
pcache1_g	vendor\sqlite\sqlite3.c	/^} pcache1_g;$/;"	v	typeref:struct:PCacheGlobal	file:
pcache2	vendor\sqlite\sqlite3.c	/^  sqlite3_pcache_methods2 pcache2;  \/* Low-level page-cache interface *\/$/;"	m	struct:Sqlite3Config	file:
pcacheFetchFinishWithInit	vendor\sqlite\sqlite3.c	/^static SQLITE_NOINLINE PgHdr *pcacheFetchFinishWithInit($/;"	f	file:
pcacheManageDirtyList	vendor\sqlite\sqlite3.c	/^static void pcacheManageDirtyList(PgHdr *pPage, u8 addRemove){$/;"	f	file:
pcacheMergeDirtyList	vendor\sqlite\sqlite3.c	/^static PgHdr *pcacheMergeDirtyList(PgHdr *pA, PgHdr *pB){$/;"	f	file:
pcacheSortDirtyList	vendor\sqlite\sqlite3.c	/^static PgHdr *pcacheSortDirtyList(PgHdr *pIn){$/;"	f	file:
pcacheUnpin	vendor\sqlite\sqlite3.c	/^static void pcacheUnpin(PgHdr *p){$/;"	f	file:
pgno	vendor\sqlite\sqlite3.c	/^  Pgno pgno;                     \/* Page number for this page *\/$/;"	m	struct:PgHdr	file:
pgno	vendor\sqlite\sqlite3.c	/^  Pgno pgno;           \/* Page number for this page *\/$/;"	m	struct:MemPage	file:
pgnoRoot	vendor\sqlite\sqlite3.c	/^  Pgno pgnoRoot;            \/* The root page of this tree *\/$/;"	m	struct:BtCursor	file:
pgnoRoot	vendor\sqlite\sqlite3.c	/^  Pgno pgnoRoot;        \/* Root page of the open btree cursor *\/$/;"	m	struct:VdbeCursor	file:
pgsz	vendor\sqlite\sqlite3.c	/^  int pgsz;                       \/* Main database page size *\/$/;"	m	struct:VdbeSorter	file:
pnBytesFreed	vendor\sqlite\sqlite3.c	/^  int *pnBytesFreed;            \/* If not NULL, increment this in DbFree() *\/$/;"	m	struct:sqlite3	file:
porterClose	vendor\sqlite\sqlite3.c	/^static int porterClose(sqlite3_tokenizer_cursor *pCursor){$/;"	f	file:
porterCreate	vendor\sqlite\sqlite3.c	/^static int porterCreate($/;"	f	file:
porterDestroy	vendor\sqlite\sqlite3.c	/^static int porterDestroy(sqlite3_tokenizer *pTokenizer){$/;"	f	file:
porterIdChar	vendor\sqlite\sqlite3.c	/^static const char porterIdChar[] = {$/;"	v	file:
porterNext	vendor\sqlite\sqlite3.c	/^static int porterNext($/;"	f	file:
porterOpen	vendor\sqlite\sqlite3.c	/^static int porterOpen($/;"	f	file:
porterTokenizerModule	vendor\sqlite\sqlite3.c	/^static const sqlite3_tokenizer_module porterTokenizerModule = {$/;"	v	file:
porter_stemmer	vendor\sqlite\sqlite3.c	/^static void porter_stemmer(const char *zIn, int nIn, char *zOut, int *pnOut){$/;"	f	file:
porter_tokenizer	vendor\sqlite\sqlite3.c	/^typedef struct porter_tokenizer {$/;"	s	file:
porter_tokenizer	vendor\sqlite\sqlite3.c	/^} porter_tokenizer;$/;"	t	typeref:struct:porter_tokenizer	file:
porter_tokenizer_cursor	vendor\sqlite\sqlite3.c	/^typedef struct porter_tokenizer_cursor {$/;"	s	file:
porter_tokenizer_cursor	vendor\sqlite\sqlite3.c	/^} porter_tokenizer_cursor;$/;"	t	typeref:struct:porter_tokenizer_cursor	file:
posixFchown	vendor\sqlite\sqlite3.c	/^static int posixFchown(int fd, uid_t uid, gid_t gid){$/;"	f	file:
posixOpen	vendor\sqlite\sqlite3.c	/^static int posixOpen(const char *zFile, int flags, int mode){$/;"	f	file:
posixUnlock	vendor\sqlite\sqlite3.c	/^static int posixUnlock(sqlite3_file *id, int eFileLock, int handleNFSUnlock){$/;"	f	file:
ppNextElem	vendor\sqlite\sqlite3.c	/^  Fts3HashElem **ppNextElem;$/;"	m	struct:Fts3SegReader	file:
ppRec	vendor\sqlite\sqlite3.c	/^  UnpackedRecord **ppRec;$/;"	m	struct:ValueNewStat4Ctx	file:
prefix	vendor\sqlite\sqlite3.c	/^  etByte prefix;           \/* Offset into aPrefix[] of the prefix string *\/$/;"	m	struct:et_info	file:
prepare	vendor\sqlite\sqlite3.c	/^  int  (*prepare)(sqlite3*,const char*,int,sqlite3_stmt**,const char**);$/;"	m	struct:sqlite3_api_routines	file:
prepare16	vendor\sqlite\sqlite3.c	/^  int  (*prepare16)(sqlite3*,const void*,int,sqlite3_stmt**,const void**);$/;"	m	struct:sqlite3_api_routines	file:
prepare16_v2	vendor\sqlite\sqlite3.c	/^  int (*prepare16_v2)(sqlite3*,const void*,int,sqlite3_stmt**,const void**);$/;"	m	struct:sqlite3_api_routines	file:
prepare_v2	vendor\sqlite\sqlite3.c	/^  int (*prepare_v2)(sqlite3*,const char*,int,sqlite3_stmt**,const char**);$/;"	m	struct:sqlite3_api_routines	file:
prereq	vendor\sqlite\sqlite3.c	/^  Bitmask prereq;       \/* Bitmask of other loops that must run first *\/$/;"	m	struct:WhereLoop	file:
prereq	vendor\sqlite\sqlite3.c	/^  Bitmask prereq;     \/* Prerequisites *\/$/;"	m	struct:WhereOrCost	file:
prereqAll	vendor\sqlite\sqlite3.c	/^  Bitmask prereqAll;      \/* Bitmask of tables referenced by pExpr *\/$/;"	m	struct:WhereTerm	file:
prereqRight	vendor\sqlite\sqlite3.c	/^  Bitmask prereqRight;    \/* Bitmask of tables used by pExpr->pRight *\/$/;"	m	struct:WhereTerm	file:
prev	vendor\sqlite\sqlite3.c	/^      u32 prev;       \/* Index in mem3.aPool[] of previous free chunk *\/$/;"	m	struct:Mem3Block::__anon13::__anon15	file:
prev	vendor\sqlite\sqlite3.c	/^  Fts3HashElem *next, *prev; \/* Next and previous elements in the table *\/$/;"	m	struct:Fts3HashElem	file:
prev	vendor\sqlite\sqlite3.c	/^  HashElem *next, *prev;       \/* Next and previous elements in the table *\/$/;"	m	struct:HashElem	file:
prev	vendor\sqlite\sqlite3.c	/^  int prev;       \/* Index of previous free chunk *\/$/;"	m	struct:Mem5Link	file:
prevSize	vendor\sqlite\sqlite3.c	/^      u32 prevSize;   \/* Size of previous chunk in Mem3Block elements *\/$/;"	m	struct:Mem3Block::__anon13::__anon14	file:
print_pager_state	vendor\sqlite\sqlite3.c	/^static char *print_pager_state(Pager *p){$/;"	f	file:
printfFunc	vendor\sqlite\sqlite3.c	/^static void printfFunc($/;"	f	file:
profile	vendor\sqlite\sqlite3.c	/^  void * (*profile)(sqlite3*,void(*)(void*,const char*,sqlite_uint64),void*);$/;"	m	struct:sqlite3_api_routines	file:
progress_handler	vendor\sqlite\sqlite3.c	/^  void  (*progress_handler)(sqlite3*,int,int(*)(void*),void*);$/;"	m	struct:sqlite3_api_routines	file:
proxyBreakConchLock	vendor\sqlite\sqlite3.c	/^static int proxyBreakConchLock(unixFile *pFile, uuid_t myHostID){$/;"	f	file:
proxyCheckReservedLock	vendor\sqlite\sqlite3.c	/^static int proxyCheckReservedLock(sqlite3_file *id, int *pResOut) {$/;"	f	file:
proxyClose	vendor\sqlite\sqlite3.c	/^static int proxyClose(sqlite3_file *id) {$/;"	f	file:
proxyConchLock	vendor\sqlite\sqlite3.c	/^static int proxyConchLock(unixFile *pFile, uuid_t myHostID, int lockType){$/;"	f	file:
proxyCreateConchPathname	vendor\sqlite\sqlite3.c	/^static int proxyCreateConchPathname(char *dbPath, char **pConchPath){$/;"	f	file:
proxyCreateLockPath	vendor\sqlite\sqlite3.c	/^static int proxyCreateLockPath(const char *lockPath){$/;"	f	file:
proxyCreateUnixFile	vendor\sqlite\sqlite3.c	/^static int proxyCreateUnixFile($/;"	f	file:
proxyFileControl	vendor\sqlite\sqlite3.c	/^static int proxyFileControl(sqlite3_file *id, int op, void *pArg){$/;"	f	file:
proxyGetDbPathForUnixFile	vendor\sqlite\sqlite3.c	/^static int proxyGetDbPathForUnixFile(unixFile *pFile, char *dbPath){$/;"	f	file:
proxyGetHostID	vendor\sqlite\sqlite3.c	/^static int proxyGetHostID(unsigned char *pHostID, int *pError){$/;"	f	file:
proxyGetLockPath	vendor\sqlite\sqlite3.c	/^static int proxyGetLockPath(const char *dbPath, char *lPath, size_t maxLen){$/;"	f	file:
proxyLock	vendor\sqlite\sqlite3.c	/^static int proxyLock(sqlite3_file *id, int eFileLock) {$/;"	f	file:
proxyLockingContext	vendor\sqlite\sqlite3.c	/^struct proxyLockingContext {$/;"	s	file:
proxyLockingContext	vendor\sqlite\sqlite3.c	/^typedef struct proxyLockingContext proxyLockingContext;$/;"	t	typeref:struct:proxyLockingContext	file:
proxyReleaseConch	vendor\sqlite\sqlite3.c	/^static int proxyReleaseConch(unixFile *pFile){$/;"	f	file:
proxyTakeConch	vendor\sqlite\sqlite3.c	/^static int proxyTakeConch(unixFile *pFile){$/;"	f	file:
proxyTransformUnixFile	vendor\sqlite\sqlite3.c	/^static int proxyTransformUnixFile(unixFile *pFile, const char *path) {$/;"	f	file:
proxyUnlock	vendor\sqlite\sqlite3.c	/^static int proxyUnlock(sqlite3_file *id, int eFileLock) {$/;"	f	file:
pseudoTableReg	vendor\sqlite\sqlite3.c	/^  int pseudoTableReg;   \/* Register holding pseudotable content. *\/$/;"	m	struct:VdbeCursor	file:
pthreadMutexAlloc	vendor\sqlite\sqlite3.c	/^static sqlite3_mutex *pthreadMutexAlloc(int iType){$/;"	f	file:
pthreadMutexEnd	vendor\sqlite\sqlite3.c	/^static int pthreadMutexEnd(void){ return SQLITE_OK; }$/;"	f	file:
pthreadMutexEnter	vendor\sqlite\sqlite3.c	/^static void pthreadMutexEnter(sqlite3_mutex *p){$/;"	f	file:
pthreadMutexFree	vendor\sqlite\sqlite3.c	/^static void pthreadMutexFree(sqlite3_mutex *p){$/;"	f	file:
pthreadMutexHeld	vendor\sqlite\sqlite3.c	/^static int pthreadMutexHeld(sqlite3_mutex *p){$/;"	f	file:
pthreadMutexInit	vendor\sqlite\sqlite3.c	/^static int pthreadMutexInit(void){ return SQLITE_OK; }$/;"	f	file:
pthreadMutexLeave	vendor\sqlite\sqlite3.c	/^static void pthreadMutexLeave(sqlite3_mutex *p){$/;"	f	file:
pthreadMutexNotheld	vendor\sqlite\sqlite3.c	/^static int pthreadMutexNotheld(sqlite3_mutex *p){$/;"	f	file:
pthreadMutexTry	vendor\sqlite\sqlite3.c	/^static int pthreadMutexTry(sqlite3_mutex *p){$/;"	f	file:
ptrmapGet	vendor\sqlite\sqlite3.c	/^static int ptrmapGet(BtShared *pBt, Pgno key, u8 *pEType, Pgno *pPgno){$/;"	f	file:
ptrmapGet	vendor\sqlite\sqlite3.c	53719;"	d	file:
ptrmapPageno	vendor\sqlite\sqlite3.c	/^static Pgno ptrmapPageno(BtShared *pBt, Pgno pgno){$/;"	f	file:
ptrmapPut	vendor\sqlite\sqlite3.c	/^static void ptrmapPut(BtShared *pBt, Pgno key, u8 eType, Pgno parent, int *pRC){$/;"	f	file:
ptrmapPut	vendor\sqlite\sqlite3.c	53718;"	d	file:
ptrmapPutOvflPtr	vendor\sqlite\sqlite3.c	/^static void ptrmapPutOvflPtr(MemPage *pPage, u8 *pCell, int *pRC){$/;"	f	file:
ptrmapPutOvflPtr	vendor\sqlite\sqlite3.c	53720;"	d	file:
pushOntoSorter	vendor\sqlite\sqlite3.c	/^static void pushOntoSorter($/;"	f	file:
put2byte	vendor\sqlite\sqlite3.c	52492;"	d	file:
put32bits	vendor\sqlite\sqlite3.c	42436;"	d	file:
put4byte	vendor\sqlite\sqlite3.c	52494;"	d	file:
putVarint	vendor\sqlite\sqlite3.c	13269;"	d	file:
putVarint32	vendor\sqlite\sqlite3.c	13265;"	d	file:
putVarint64	vendor\sqlite\sqlite3.c	/^static int SQLITE_NOINLINE putVarint64(unsigned char *p, u64 v){$/;"	f	file:
pzErrMsg	vendor\sqlite\sqlite3.c	/^  char **pzErrMsg;    \/* Error message stored here *\/$/;"	m	struct:__anon10	file:
querySharedCacheTableLock	vendor\sqlite\sqlite3.c	/^static int querySharedCacheTableLock(Btree *p, Pgno iTab, u8 eLock){$/;"	f	file:
querySharedCacheTableLock	vendor\sqlite\sqlite3.c	52888;"	d	file:
queryTestTokenizer	vendor\sqlite\sqlite3.c	/^static int queryTestTokenizer($/;"	f	file:
queryTokenizer	vendor\sqlite\sqlite3.c	/^int queryTokenizer($/;"	f	file:
quoteFunc	vendor\sqlite\sqlite3.c	/^static void quoteFunc(sqlite3_context *context, int argc, sqlite3_value **argv){$/;"	f	file:
r	vendor\sqlite\sqlite3.c	/^    double r;           \/* Real value used when MEM_Real is set in flags *\/$/;"	m	union:Mem::MemValue	file:
r1	vendor\sqlite\sqlite3.c	/^  int r1;             \/* Value to return if (lhs > rhs) *\/$/;"	m	struct:UnpackedRecord	file:
r2	vendor\sqlite\sqlite3.c	/^  int r2;             \/* Value to return if (rhs < lhs) *\/$/;"	m	struct:UnpackedRecord	file:
rCost	vendor\sqlite\sqlite3.c	/^  LogEst rCost;         \/* Total cost of this path *\/$/;"	m	struct:WherePath	file:
rParentScore	vendor\sqlite\sqlite3.c	/^  sqlite3_rtree_dbl rParentScore;   \/* Score of parent node *\/$/;"	m	struct:sqlite3_rtree_query_info	file:
rRun	vendor\sqlite\sqlite3.c	/^  LogEst rRun;          \/* Cost of running each loop *\/$/;"	m	struct:WhereLoop	file:
rRun	vendor\sqlite\sqlite3.c	/^  LogEst rRun;        \/* Cost of running this subquery *\/$/;"	m	struct:WhereOrCost	file:
rScore	vendor\sqlite\sqlite3.c	/^  RtreeDValue rScore;    \/* The score for this node.  Smallest goes first. *\/$/;"	m	struct:RtreeSearchPoint	file:
rScore	vendor\sqlite\sqlite3.c	/^  sqlite3_rtree_dbl rScore;         \/* OUT: Write the score here *\/$/;"	m	struct:sqlite3_rtree_query_info	file:
rSetup	vendor\sqlite\sqlite3.c	/^  LogEst rSetup;        \/* One-time setup cost (ex: create transient index) *\/$/;"	m	struct:WhereLoop	file:
rSum	vendor\sqlite\sqlite3.c	/^  double rSum;      \/* Floating point sum *\/$/;"	m	struct:SumCtx	file:
rUnsorted	vendor\sqlite\sqlite3.c	/^  LogEst rUnsorted;     \/* Total cost of this path ignoring sorting costs *\/$/;"	m	struct:WherePath	file:
rValue	vendor\sqlite\sqlite3.c	/^    RtreeDValue rValue;             \/* Constraint value. *\/$/;"	m	union:RtreeConstraint::__anon28	file:
randomBlob	vendor\sqlite\sqlite3.c	/^static void randomBlob($/;"	f	file:
randomFill	vendor\sqlite\sqlite3.c	/^static void randomFill(char *pBuf, int nByte){$/;"	f	file:
randomFunc	vendor\sqlite\sqlite3.c	/^static void randomFunc($/;"	f	file:
randomness	vendor\sqlite\sqlite3.c	/^  void (*randomness)(int,void*);$/;"	m	struct:sqlite3_api_routines	file:
randomnessPid	vendor\sqlite\sqlite3.c	/^static pid_t randomnessPid = 0;$/;"	v	file:
rc	vendor\sqlite\sqlite3.c	/^  int rc;                  \/* Backup process error code *\/$/;"	m	struct:sqlite3_backup	file:
rc	vendor\sqlite\sqlite3.c	/^  int rc;                 \/* Value to return *\/$/;"	m	struct:Vdbe	file:
rc	vendor\sqlite\sqlite3.c	/^  int rc;              \/* Return code from execution *\/$/;"	m	struct:Parse	file:
rc	vendor\sqlite\sqlite3.c	/^  int rc;             \/* Result code stored here *\/$/;"	m	struct:__anon10	file:
rc	vendor\sqlite\sqlite3.c	/^  int rc;            \/* Return code from sqlite3_exec() *\/$/;"	m	struct:TabResult	file:
rcApp	vendor\sqlite\sqlite3.c	/^  int rcApp;              \/* errcode set by sqlite3_result_error_code() *\/$/;"	m	struct:Vdbe	file:
read32bits	vendor\sqlite\sqlite3.c	/^static int read32bits(sqlite3_file *fd, i64 offset, u32 *pRes){$/;"	f	file:
readCoord	vendor\sqlite\sqlite3.c	/^static void readCoord(u8 *p, RtreeCoord *pCoord){$/;"	f	file:
readDbPage	vendor\sqlite\sqlite3.c	/^static int readDbPage(PgHdr *pPg, u32 iFrame){$/;"	f	file:
readInt16	vendor\sqlite\sqlite3.c	/^static int readInt16(u8 *p){$/;"	f	file:
readInt64	vendor\sqlite\sqlite3.c	/^static i64 readInt64(u8 *p){$/;"	f	file:
readJournalHdr	vendor\sqlite\sqlite3.c	/^static int readJournalHdr($/;"	f	file:
readLock	vendor\sqlite\sqlite3.c	/^  i16 readLock;              \/* Which read lock is being held.  -1 for none *\/$/;"	m	struct:Wal	file:
readMasterJournal	vendor\sqlite\sqlite3.c	/^static int readMasterJournal(sqlite3_file *pJrnl, char *zMaster, u32 nMaster){$/;"	f	file:
readOnly	vendor\sqlite\sqlite3.c	/^  bft readOnly:1;         \/* True for statements that do not write *\/$/;"	m	struct:Vdbe	file:
readOnly	vendor\sqlite\sqlite3.c	/^  u8 readOnly;                \/* True for a read-only database *\/$/;"	m	struct:Pager	file:
readOnly	vendor\sqlite\sqlite3.c	/^  u8 readOnly;               \/* WAL_RDWR, WAL_RDONLY, or WAL_SHM_RDONLY *\/$/;"	m	struct:Wal	file:
readpoint	vendor\sqlite\sqlite3.c	/^  FilePoint readpoint;            \/* Pointer to the end of the last xRead() *\/$/;"	m	struct:MemJournal	file:
readsTable	vendor\sqlite\sqlite3.c	/^static int readsTable(Parse *p, int iDb, Table *pTab){$/;"	f	file:
realloc	vendor\sqlite\sqlite3.c	/^  void *(*realloc)(void*,int);$/;"	m	struct:sqlite3_api_routines	file:
realloc64	vendor\sqlite\sqlite3.c	/^  void *(*realloc64)(void*,sqlite3_uint64);$/;"	m	struct:sqlite3_api_routines	file:
rebuildPage	vendor\sqlite\sqlite3.c	/^static void rebuildPage($/;"	f	file:
recordFunc	vendor\sqlite\sqlite3.c	/^static void recordFunc($/;"	f	file:
regCtr	vendor\sqlite\sqlite3.c	/^  int regCtr;           \/* Memory register holding the rowid counter *\/$/;"	m	struct:AutoincInfo	file:
regResult	vendor\sqlite\sqlite3.c	/^    int regResult;    \/* Registers holding results of a co-routine *\/$/;"	m	struct:SrcList::SrcList_item	file:
regReturn	vendor\sqlite\sqlite3.c	/^    int regReturn;    \/* Register holding return address of addrFillSub *\/$/;"	m	struct:SrcList::SrcList_item	file:
regReturn	vendor\sqlite\sqlite3.c	/^  int regReturn;        \/* Register holding block-output return address *\/$/;"	m	struct:SortCtx	file:
regRoot	vendor\sqlite\sqlite3.c	/^  int regRoot;         \/* Register holding root page number for new objects *\/$/;"	m	struct:Parse	file:
regRowid	vendor\sqlite\sqlite3.c	/^  int regRowid;        \/* Register holding rowid of CREATE TABLE entry *\/$/;"	m	struct:Parse	file:
registerTokenizer	vendor\sqlite\sqlite3.c	/^int registerTokenizer($/;"	f	file:
registerTrace	vendor\sqlite\sqlite3.c	/^static void registerTrace(int iReg, Mem *p){$/;"	f	file:
rehash	vendor\sqlite\sqlite3.c	/^static int rehash(Hash *pH, unsigned int new_size){$/;"	f	file:
reindexDatabases	vendor\sqlite\sqlite3.c	/^static void reindexDatabases(Parse *pParse, char const *zColl){$/;"	f	file:
reindexTable	vendor\sqlite\sqlite3.c	/^static void reindexTable(Parse *pParse, Table *pTab, char const *zColl){$/;"	f	file:
reinsertNodeContent	vendor\sqlite\sqlite3.c	/^static int reinsertNodeContent(Rtree *pRtree, RtreeNode *pNode){$/;"	f	file:
releaseAllSavepoints	vendor\sqlite\sqlite3.c	/^static void releaseAllSavepoints(Pager *pPager){$/;"	f	file:
releaseInodeInfo	vendor\sqlite\sqlite3.c	/^static void releaseInodeInfo(unixFile *pFile){$/;"	f	file:
releaseMemArray	vendor\sqlite\sqlite3.c	/^static void releaseMemArray(Mem *p, int N){$/;"	f	file:
releasePage	vendor\sqlite\sqlite3.c	/^static void releasePage(MemPage *pPage){$/;"	f	file:
release_memory	vendor\sqlite\sqlite3.c	/^  int (*release_memory)(int);$/;"	m	struct:sqlite3_api_routines	file:
reloadTableSchema	vendor\sqlite\sqlite3.c	/^static void reloadTableSchema(Parse *pParse, Table *pTab, const char *zName){$/;"	f	file:
relocatePage	vendor\sqlite\sqlite3.c	/^static int relocatePage($/;"	f	file:
removeElementGivenHash	vendor\sqlite\sqlite3.c	/^static void removeElementGivenHash($/;"	f	file:
removeFromBlockedList	vendor\sqlite\sqlite3.c	/^static void removeFromBlockedList(sqlite3 *db){$/;"	f	file:
removeFromSharingList	vendor\sqlite\sqlite3.c	/^static int removeFromSharingList(BtShared *pBt){$/;"	f	file:
removeNode	vendor\sqlite\sqlite3.c	/^static int removeNode(Rtree *pRtree, RtreeNode *pNode, int iHeight){$/;"	f	file:
remove_diacritic	vendor\sqlite\sqlite3.c	/^static int remove_diacritic(int c){$/;"	f	file:
renameParentFunc	vendor\sqlite\sqlite3.c	/^static void renameParentFunc($/;"	f	file:
renameTableFunc	vendor\sqlite\sqlite3.c	/^static void renameTableFunc($/;"	f	file:
renameTriggerFunc	vendor\sqlite\sqlite3.c	/^static void renameTriggerFunc($/;"	f	file:
renderLogMsg	vendor\sqlite\sqlite3.c	/^static void renderLogMsg(int iErrCode, const char *zFormat, va_list ap){$/;"	f	file:
replaceFunc	vendor\sqlite\sqlite3.c	/^static void replaceFunc($/;"	f	file:
reserved	vendor\sqlite\sqlite3.c	/^  int reserved;$/;"	m	struct:afpLockingContext	file:
reset	vendor\sqlite\sqlite3.c	/^  int  (*reset)(sqlite3_stmt*pStmt);$/;"	m	struct:sqlite3_api_routines	file:
resetAccumulator	vendor\sqlite\sqlite3.c	/^static void resetAccumulator(Parse *pParse, AggInfo *pAggInfo){$/;"	f	file:
reset_auto_extension	vendor\sqlite\sqlite3.c	/^  void (*reset_auto_extension)(void);$/;"	m	struct:sqlite3_api_routines	file:
resizeIndexObject	vendor\sqlite\sqlite3.c	/^static int resizeIndexObject(sqlite3 *db, Index *pIdx, int N){$/;"	f	file:
resolveAlias	vendor\sqlite\sqlite3.c	/^static void resolveAlias($/;"	f	file:
resolveAsName	vendor\sqlite\sqlite3.c	/^static int resolveAsName($/;"	f	file:
resolveAttachExpr	vendor\sqlite\sqlite3.c	/^static int resolveAttachExpr(NameContext *pName, Expr *pExpr)$/;"	f	file:
resolveCompoundOrderBy	vendor\sqlite\sqlite3.c	/^static int resolveCompoundOrderBy($/;"	f	file:
resolveExprStep	vendor\sqlite\sqlite3.c	/^static int resolveExprStep(Walker *pWalker, Expr *pExpr){$/;"	f	file:
resolveOrderByTermToExprList	vendor\sqlite\sqlite3.c	/^static int resolveOrderByTermToExprList($/;"	f	file:
resolveOrderGroupBy	vendor\sqlite\sqlite3.c	/^static int resolveOrderGroupBy($/;"	f	file:
resolveOutOfRangeError	vendor\sqlite\sqlite3.c	/^static void resolveOutOfRangeError($/;"	f	file:
resolveP2Values	vendor\sqlite\sqlite3.c	/^static void resolveP2Values(Vdbe *p, int *pMaxFuncArgs){$/;"	f	file:
resolveSelectStep	vendor\sqlite\sqlite3.c	/^static int resolveSelectStep(Walker *pWalker, Select *p){$/;"	f	file:
restoreCursorPosition	vendor\sqlite\sqlite3.c	53548;"	d	file:
result_blob	vendor\sqlite\sqlite3.c	/^  void  (*result_blob)(sqlite3_context*,const void*,int,void(*)(void*));$/;"	m	struct:sqlite3_api_routines	file:
result_blob64	vendor\sqlite\sqlite3.c	/^  void (*result_blob64)(sqlite3_context*,const void*,sqlite3_uint64,$/;"	m	struct:sqlite3_api_routines	file:
result_double	vendor\sqlite\sqlite3.c	/^  void  (*result_double)(sqlite3_context*,double);$/;"	m	struct:sqlite3_api_routines	file:
result_error	vendor\sqlite\sqlite3.c	/^  void  (*result_error)(sqlite3_context*,const char*,int);$/;"	m	struct:sqlite3_api_routines	file:
result_error16	vendor\sqlite\sqlite3.c	/^  void  (*result_error16)(sqlite3_context*,const void*,int);$/;"	m	struct:sqlite3_api_routines	file:
result_error_code	vendor\sqlite\sqlite3.c	/^  void (*result_error_code)(sqlite3_context*,int);$/;"	m	struct:sqlite3_api_routines	file:
result_error_nomem	vendor\sqlite\sqlite3.c	/^  void (*result_error_nomem)(sqlite3_context*);$/;"	m	struct:sqlite3_api_routines	file:
result_error_toobig	vendor\sqlite\sqlite3.c	/^  void (*result_error_toobig)(sqlite3_context*);$/;"	m	struct:sqlite3_api_routines	file:
result_int	vendor\sqlite\sqlite3.c	/^  void  (*result_int)(sqlite3_context*,int);$/;"	m	struct:sqlite3_api_routines	file:
result_int64	vendor\sqlite\sqlite3.c	/^  void  (*result_int64)(sqlite3_context*,sqlite_int64);$/;"	m	struct:sqlite3_api_routines	file:
result_null	vendor\sqlite\sqlite3.c	/^  void  (*result_null)(sqlite3_context*);$/;"	m	struct:sqlite3_api_routines	file:
result_text	vendor\sqlite\sqlite3.c	/^  void  (*result_text)(sqlite3_context*,const char*,int,void(*)(void*));$/;"	m	struct:sqlite3_api_routines	file:
result_text16	vendor\sqlite\sqlite3.c	/^  void  (*result_text16)(sqlite3_context*,const void*,int,void(*)(void*));$/;"	m	struct:sqlite3_api_routines	file:
result_text16be	vendor\sqlite\sqlite3.c	/^  void  (*result_text16be)(sqlite3_context*,const void*,int,void(*)(void*));$/;"	m	struct:sqlite3_api_routines	file:
result_text16le	vendor\sqlite\sqlite3.c	/^  void  (*result_text16le)(sqlite3_context*,const void*,int,void(*)(void*));$/;"	m	struct:sqlite3_api_routines	file:
result_text64	vendor\sqlite\sqlite3.c	/^  void (*result_text64)(sqlite3_context*,const char*,sqlite3_uint64,$/;"	m	struct:sqlite3_api_routines	file:
result_value	vendor\sqlite\sqlite3.c	/^  void  (*result_value)(sqlite3_context*,sqlite3_value*);$/;"	m	struct:sqlite3_api_routines	file:
result_zeroblob	vendor\sqlite\sqlite3.c	/^  void (*result_zeroblob)(sqlite3_context*,int);$/;"	m	struct:sqlite3_api_routines	file:
retRangeStart	vendor\sqlite\sqlite3.c	/^  unsigned long long retRangeStart; \/* nbr of 1st byte locked if successful *\/$/;"	m	struct:ByteRangeLockPB2	file:
returnSingleInt	vendor\sqlite\sqlite3.c	/^static void returnSingleInt(Parse *pParse, const char *zLabel, i64 value){$/;"	f	file:
reusable	vendor\sqlite\sqlite3.c	/^    unsigned reusable :1;   \/* Constant expression is reusable *\/$/;"	m	struct:ExprList::ExprList_item	file:
revLoop	vendor\sqlite\sqlite3.c	/^  Bitmask revLoop;      \/* aLoop[]s that should be reversed for ORDER BY *\/$/;"	m	struct:WherePath	file:
revMask	vendor\sqlite\sqlite3.c	/^  Bitmask revMask;          \/* Mask of ORDER BY terms that need reversing *\/$/;"	m	struct:WhereInfo	file:
robust_close	vendor\sqlite\sqlite3.c	/^static void robust_close(unixFile *pFile, int h, int lineno){$/;"	f	file:
robust_flock	vendor\sqlite\sqlite3.c	/^static int robust_flock(int fd, int op){$/;"	f	file:
robust_flock	vendor\sqlite\sqlite3.c	27499;"	d	file:
robust_ftruncate	vendor\sqlite\sqlite3.c	/^static int robust_ftruncate(int h, sqlite3_int64 sz){$/;"	f	file:
robust_open	vendor\sqlite\sqlite3.c	/^static int robust_open(const char *z, int f, mode_t m){$/;"	f	file:
rollback_hook	vendor\sqlite\sqlite3.c	/^  void * (*rollback_hook)(sqlite3*,void(*)(void*),void*);$/;"	m	struct:sqlite3_api_routines	file:
rootOnly	vendor\sqlite\sqlite3.c	/^  u8 rootOnly;                    \/* True for a root-only reader *\/$/;"	m	struct:Fts3SegReader	file:
roundFunc	vendor\sqlite\sqlite3.c	/^static void roundFunc(sqlite3_context *context, int argc, sqlite3_value **argv){$/;"	f	file:
rowSetEntryAlloc	vendor\sqlite\sqlite3.c	/^static struct RowSetEntry *rowSetEntryAlloc(RowSet *p){$/;"	f	file:
rowSetEntryMerge	vendor\sqlite\sqlite3.c	/^static struct RowSetEntry *rowSetEntryMerge($/;"	f	file:
rowSetEntrySort	vendor\sqlite\sqlite3.c	/^static struct RowSetEntry *rowSetEntrySort(struct RowSetEntry *pIn){$/;"	f	file:
rowSetListToTree	vendor\sqlite\sqlite3.c	/^static struct RowSetEntry *rowSetListToTree(struct RowSetEntry *pList){$/;"	f	file:
rowSetNDeepTree	vendor\sqlite\sqlite3.c	/^static struct RowSetEntry *rowSetNDeepTree($/;"	f	file:
rowSetToList	vendor\sqlite\sqlite3.c	/^static void rowSetToList(RowSet *p){$/;"	f	file:
rowSetTreeToList	vendor\sqlite\sqlite3.c	/^static void rowSetTreeToList($/;"	f	file:
rowidWrite	vendor\sqlite\sqlite3.c	/^static int rowidWrite(Rtree *pRtree, sqlite3_int64 iRowid, sqlite3_int64 iNode){$/;"	f	file:
rsFlags	vendor\sqlite\sqlite3.c	/^  u16 rsFlags;                   \/* Various flags *\/$/;"	m	struct:RowSet	file:
rtreeBestIndex	vendor\sqlite\sqlite3.c	/^static int rtreeBestIndex(sqlite3_vtab *tab, sqlite3_index_info *pIdxInfo){$/;"	f	file:
rtreeCallbackConstraint	vendor\sqlite\sqlite3.c	/^static int rtreeCallbackConstraint($/;"	f	file:
rtreeClose	vendor\sqlite\sqlite3.c	/^static int rtreeClose(sqlite3_vtab_cursor *cur){$/;"	f	file:
rtreeColumn	vendor\sqlite\sqlite3.c	/^static int rtreeColumn(sqlite3_vtab_cursor *cur, sqlite3_context *ctx, int i){$/;"	f	file:
rtreeConnect	vendor\sqlite\sqlite3.c	/^static int rtreeConnect($/;"	f	file:
rtreeCreate	vendor\sqlite\sqlite3.c	/^static int rtreeCreate($/;"	f	file:
rtreeDeleteRowid	vendor\sqlite\sqlite3.c	/^static int rtreeDeleteRowid(Rtree *pRtree, sqlite3_int64 iDelete){$/;"	f	file:
rtreeDestroy	vendor\sqlite\sqlite3.c	/^static int rtreeDestroy(sqlite3_vtab *pVtab){$/;"	f	file:
rtreeDisconnect	vendor\sqlite\sqlite3.c	/^static int rtreeDisconnect(sqlite3_vtab *pVtab){$/;"	f	file:
rtreeEnqueue	vendor\sqlite\sqlite3.c	/^static RtreeSearchPoint *rtreeEnqueue($/;"	f	file:
rtreeEof	vendor\sqlite\sqlite3.c	/^static int rtreeEof(sqlite3_vtab_cursor *cur){$/;"	f	file:
rtreeFilter	vendor\sqlite\sqlite3.c	/^static int rtreeFilter($/;"	f	file:
rtreeFreeCallback	vendor\sqlite\sqlite3.c	/^static void rtreeFreeCallback(void *p){$/;"	f	file:
rtreeInit	vendor\sqlite\sqlite3.c	/^static int rtreeInit($/;"	f	file:
rtreeInsertCell	vendor\sqlite\sqlite3.c	/^static int rtreeInsertCell($/;"	f	file:
rtreeLeafConstraint	vendor\sqlite\sqlite3.c	/^static void rtreeLeafConstraint($/;"	f	file:
rtreeModule	vendor\sqlite\sqlite3.c	/^static sqlite3_module rtreeModule = {$/;"	v	file:
rtreeNext	vendor\sqlite\sqlite3.c	/^static int rtreeNext(sqlite3_vtab_cursor *pVtabCursor){$/;"	f	file:
rtreeNodeOfFirstSearchPoint	vendor\sqlite\sqlite3.c	/^static RtreeNode *rtreeNodeOfFirstSearchPoint(RtreeCursor *pCur, int *pRC){$/;"	f	file:
rtreeNonleafConstraint	vendor\sqlite\sqlite3.c	/^static void rtreeNonleafConstraint($/;"	f	file:
rtreeOpen	vendor\sqlite\sqlite3.c	/^static int rtreeOpen(sqlite3_vtab *pVTab, sqlite3_vtab_cursor **ppCursor){$/;"	f	file:
rtreeQueryStat1	vendor\sqlite\sqlite3.c	/^static int rtreeQueryStat1(sqlite3 *db, Rtree *pRtree){$/;"	f	file:
rtreeReference	vendor\sqlite\sqlite3.c	/^static void rtreeReference(Rtree *pRtree){$/;"	f	file:
rtreeRelease	vendor\sqlite\sqlite3.c	/^static void rtreeRelease(Rtree *pRtree){$/;"	f	file:
rtreeRename	vendor\sqlite\sqlite3.c	/^static int rtreeRename(sqlite3_vtab *pVtab, const char *zNewName){$/;"	f	file:
rtreeRowid	vendor\sqlite\sqlite3.c	/^static int rtreeRowid(sqlite3_vtab_cursor *pVtabCursor, sqlite_int64 *pRowid){$/;"	f	file:
rtreeSearchPointCompare	vendor\sqlite\sqlite3.c	/^static int rtreeSearchPointCompare($/;"	f	file:
rtreeSearchPointFirst	vendor\sqlite\sqlite3.c	/^static RtreeSearchPoint *rtreeSearchPointFirst(RtreeCursor *pCur){$/;"	f	file:
rtreeSearchPointNew	vendor\sqlite\sqlite3.c	/^static RtreeSearchPoint *rtreeSearchPointNew($/;"	f	file:
rtreeSearchPointPop	vendor\sqlite\sqlite3.c	/^static void rtreeSearchPointPop(RtreeCursor *p){$/;"	f	file:
rtreeSearchPointSwap	vendor\sqlite\sqlite3.c	/^static void rtreeSearchPointSwap(RtreeCursor *p, int i, int j){$/;"	f	file:
rtreeSqlInit	vendor\sqlite\sqlite3.c	/^static int rtreeSqlInit($/;"	f	file:
rtreeStepToLeaf	vendor\sqlite\sqlite3.c	/^static int rtreeStepToLeaf(RtreeCursor *pCur){$/;"	f	file:
rtreeUpdate	vendor\sqlite\sqlite3.c	/^static int rtreeUpdate($/;"	f	file:
rtreeValueDown	vendor\sqlite\sqlite3.c	/^static RtreeValue rtreeValueDown(sqlite3_value *v){$/;"	f	file:
rtreeValueUp	vendor\sqlite\sqlite3.c	/^static RtreeValue rtreeValueUp(sqlite3_value *v){$/;"	f	file:
rtreedepth	vendor\sqlite\sqlite3.c	/^static void rtreedepth(sqlite3_context *ctx, int nArg, sqlite3_value **apArg){$/;"	f	file:
rtreenode	vendor\sqlite\sqlite3.c	/^static void rtreenode(sqlite3_context *ctx, int nArg, sqlite3_value **apArg){$/;"	f	file:
runOnlyOnce	vendor\sqlite\sqlite3.c	/^  bft runOnlyOnce:1;      \/* Automatically expire on reset *\/$/;"	m	struct:Vdbe	file:
s	vendor\sqlite\sqlite3.c	/^  double s;          \/* Seconds *\/$/;"	m	struct:DateTime	file:
s	vendor\sqlite\sqlite3.c	/^  unsigned char s[256];          \/* State variables *\/$/;"	m	struct:sqlite3PrngType	file:
sArg	vendor\sqlite\sqlite3.c	/^  Token sArg;               \/* Complete text of a module argument *\/$/;"	m	struct:Parse	file:
sColMap	vendor\sqlite\sqlite3.c	/^  struct sColMap {      \/* Mapping of columns in pFrom to columns in zTo *\/$/;"	s	struct:FKey	file:
sLastToken	vendor\sqlite\sqlite3.c	/^  Token sLastToken;         \/* The last token parsed *\/$/;"	m	struct:Parse	file:
sMaskSet	vendor\sqlite\sqlite3.c	/^  WhereMaskSet sMaskSet;    \/* Map cursor numbers to bitmasks *\/$/;"	m	struct:WhereInfo	file:
sNameToken	vendor\sqlite\sqlite3.c	/^  Token sNameToken;         \/* Token with unqualified schema object name *\/$/;"	m	struct:Parse	file:
sPoint	vendor\sqlite\sqlite3.c	/^  RtreeSearchPoint sPoint;          \/* Cached next search point *\/$/;"	m	struct:RtreeCursor	file:
sPragmaNames	vendor\sqlite\sqlite3.c	/^static const struct sPragmaNames {$/;"	s	file:
sWC	vendor\sqlite\sqlite3.c	/^  WhereClause sWC;          \/* Decomposition of the WHERE clause *\/$/;"	m	struct:WhereInfo	file:
safety_level	vendor\sqlite\sqlite3.c	/^  u8 safety_level;     \/* How aggressive at syncing data to disk *\/$/;"	m	struct:Db	file:
sampleClear	vendor\sqlite\sqlite3.c	/^static void sampleClear(sqlite3 *db, Stat4Sample *p){$/;"	f	file:
sampleCopy	vendor\sqlite\sqlite3.c	/^static void sampleCopy(Stat4Accum *p, Stat4Sample *pTo, Stat4Sample *pFrom){$/;"	f	file:
sampleInsert	vendor\sqlite\sqlite3.c	/^static void sampleInsert(Stat4Accum *p, Stat4Sample *pNew, int nEqZero){$/;"	f	file:
sampleIsBetter	vendor\sqlite\sqlite3.c	/^static int sampleIsBetter($/;"	f	file:
sampleIsBetterPost	vendor\sqlite\sqlite3.c	/^static int sampleIsBetterPost($/;"	f	file:
samplePushPrevious	vendor\sqlite\sqlite3.c	/^static void samplePushPrevious(Stat4Accum *p, int iChng){$/;"	f	file:
sampleSetRowid	vendor\sqlite\sqlite3.c	/^static void sampleSetRowid(sqlite3 *db, Stat4Sample *p, int n, const u8 *pData){$/;"	f	file:
sampleSetRowidInt64	vendor\sqlite\sqlite3.c	/^static void sampleSetRowidInt64(sqlite3 *db, Stat4Sample *p, i64 iRowid){$/;"	f	file:
saveAllCursors	vendor\sqlite\sqlite3.c	/^static int saveAllCursors(BtShared *pBt, Pgno iRoot, BtCursor *pExcept){$/;"	f	file:
saveCursorPosition	vendor\sqlite\sqlite3.c	/^static int saveCursorPosition(BtCursor *pCur){$/;"	f	file:
saveCursorsOnList	vendor\sqlite\sqlite3.c	/^static int SQLITE_NOINLINE saveCursorsOnList($/;"	f	file:
savedNQueryLoop	vendor\sqlite\sqlite3.c	/^  int savedNQueryLoop;      \/* pParse->nQueryLoop outside the WHERE loop *\/$/;"	m	struct:WhereInfo	file:
saved_cnt	vendor\sqlite\sqlite3.c	/^static int saved_cnt;$/;"	v	file:
scalarFunc	vendor\sqlite\sqlite3.c	/^static void scalarFunc($/;"	f	file:
schemaFlags	vendor\sqlite\sqlite3.c	/^  u16 schemaFlags;     \/* Flags associated with this schema *\/$/;"	m	struct:Schema	file:
schemaIsValid	vendor\sqlite\sqlite3.c	/^static void schemaIsValid(Parse *pParse){$/;"	f	file:
schema_cookie	vendor\sqlite\sqlite3.c	/^  int schema_cookie;   \/* Database schema version number for this file *\/$/;"	m	struct:Schema	file:
scratchAllocOut	vendor\sqlite\sqlite3.c	/^static int scratchAllocOut = 0;$/;"	v	file:
searchWith	vendor\sqlite\sqlite3.c	/^static struct Cte *searchWith($/;"	f	file:
sectorSize	vendor\sqlite\sqlite3.c	/^  int sectorSize;                     \/* Device sector size *\/$/;"	m	struct:unixFile	file:
sectorSize	vendor\sqlite\sqlite3.c	/^  u32 sectorSize;             \/* Assumed sector size during rollback *\/$/;"	m	struct:Pager	file:
seekAndRead	vendor\sqlite\sqlite3.c	/^static int seekAndRead(unixFile *id, sqlite3_int64 offset, void *pBuf, int cnt){$/;"	f	file:
seekAndWrite	vendor\sqlite\sqlite3.c	/^static int seekAndWrite(unixFile *id, i64 offset, const void *pBuf, int cnt){$/;"	f	file:
seekAndWriteFd	vendor\sqlite\sqlite3.c	/^static int seekAndWriteFd($/;"	f	file:
seekOp	vendor\sqlite\sqlite3.c	/^  u8 seekOp;            \/* Most recent seek operation on this cursor *\/$/;"	m	struct:VdbeCursor	file:
seekResult	vendor\sqlite\sqlite3.c	/^  int seekResult;       \/* Result of previous sqlite3BtreeMoveto() *\/$/;"	m	struct:VdbeCursor	file:
selFlags	vendor\sqlite\sqlite3.c	/^  u16 selFlags;          \/* Various SF_* values *\/$/;"	m	struct:Select	file:
selectAddColumnTypeAndCollation	vendor\sqlite\sqlite3.c	/^static void selectAddColumnTypeAndCollation($/;"	f	file:
selectAddSubqueryTypeInfo	vendor\sqlite\sqlite3.c	/^static void selectAddSubqueryTypeInfo(Walker *pWalker, Select *p){$/;"	f	file:
selectColumnsFromExprList	vendor\sqlite\sqlite3.c	/^static int selectColumnsFromExprList($/;"	f	file:
selectExpander	vendor\sqlite\sqlite3.c	/^static int selectExpander(Walker *pWalker, Select *p){$/;"	f	file:
selectInnerLoop	vendor\sqlite\sqlite3.c	/^static void selectInnerLoop($/;"	f	file:
selectNodeIsConstant	vendor\sqlite\sqlite3.c	/^static int selectNodeIsConstant(Walker *pWalker, Select *NotUsed){$/;"	f	file:
selectOpName	vendor\sqlite\sqlite3.c	/^static const char *selectOpName(int id){$/;"	f	file:
selectPopWith	vendor\sqlite\sqlite3.c	/^static void selectPopWith(Walker *pWalker, Select *p){$/;"	f	file:
selectPopWith	vendor\sqlite\sqlite3.c	109728;"	d	file:
selectWrongNumTermsError	vendor\sqlite\sqlite3.c	/^static void selectWrongNumTermsError(Parse *pParse, Select *p){$/;"	f	file:
semXCheckReservedLock	vendor\sqlite\sqlite3.c	/^static int semXCheckReservedLock(sqlite3_file *id, int *pResOut) {$/;"	f	file:
semXClose	vendor\sqlite\sqlite3.c	/^static int semXClose(sqlite3_file *id) {$/;"	f	file:
semXLock	vendor\sqlite\sqlite3.c	/^static int semXLock(sqlite3_file *id, int eFileLock) {$/;"	f	file:
semXUnlock	vendor\sqlite\sqlite3.c	/^static int semXUnlock(sqlite3_file *id, int eFileLock) {$/;"	f	file:
seqCount	vendor\sqlite\sqlite3.c	/^  i64 seqCount;         \/* Sequence counter *\/$/;"	m	struct:VdbeCursor	file:
serialGet	vendor\sqlite\sqlite3.c	/^static u32 SQLITE_NOINLINE serialGet($/;"	f	file:
setAllPagerFlags	vendor\sqlite\sqlite3.c	/^static void setAllPagerFlags(sqlite3 *db){$/;"	f	file:
setAllPagerFlags	vendor\sqlite\sqlite3.c	102974;"	d	file:
setChildPtrmaps	vendor\sqlite\sqlite3.c	/^static int setChildPtrmaps(MemPage *pPage){$/;"	f	file:
setChildPtrmaps	vendor\sqlite\sqlite3.c	56212;"	d	file:
setDateTimeToCurrent	vendor\sqlite\sqlite3.c	/^static int setDateTimeToCurrent(sqlite3_context *context, DateTime *p){$/;"	f	file:
setDestPgsz	vendor\sqlite\sqlite3.c	/^static int setDestPgsz(sqlite3_backup *p){$/;"	f	file:
setEstimatedRows	vendor\sqlite\sqlite3.c	/^static void setEstimatedRows(sqlite3_index_info *pIdxInfo, i64 nRow){$/;"	f	file:
setJoinExpr	vendor\sqlite\sqlite3.c	/^static void setJoinExpr(Expr *p, int iTable){$/;"	f	file:
setLikeOptFlag	vendor\sqlite\sqlite3.c	/^static void setLikeOptFlag(sqlite3 *db, const char *zName, u8 flagVal){$/;"	f	file:
setMaster	vendor\sqlite\sqlite3.c	/^  u8 setMaster;               \/* True if a m-j name has been written to jrnl *\/$/;"	m	struct:Pager	file:
setPageReferenced	vendor\sqlite\sqlite3.c	/^static void setPageReferenced(IntegrityCk *pCheck, Pgno iPg){$/;"	f	file:
setPendingFd	vendor\sqlite\sqlite3.c	/^static void setPendingFd(unixFile *pFile){$/;"	f	file:
setResultStrOrError	vendor\sqlite\sqlite3.c	/^static void setResultStrOrError($/;"	f	file:
setSectorSize	vendor\sqlite\sqlite3.c	/^static void setSectorSize(Pager *pPager){$/;"	f	file:
setSharedCacheTableLock	vendor\sqlite\sqlite3.c	/^static int setSharedCacheTableLock(Btree *p, Pgno iTable, u8 eLock){$/;"	f	file:
setSharedCacheTableLock	vendor\sqlite\sqlite3.c	52889;"	d	file:
setStrAccumError	vendor\sqlite\sqlite3.c	/^static void setStrAccumError(StrAccum *p, u8 eError){$/;"	f	file:
set_authorizer	vendor\sqlite\sqlite3.c	/^  int  (*set_authorizer)(sqlite3*,int(*)(void*,int,const char*,const char*,$/;"	m	struct:sqlite3_api_routines	file:
set_auxdata	vendor\sqlite\sqlite3.c	/^  void  (*set_auxdata)(sqlite3_context*,int,void*,void (*)(void*));$/;"	m	struct:sqlite3_api_routines	file:
setupLookaside	vendor\sqlite\sqlite3.c	/^static int setupLookaside(sqlite3 *db, void *pBuf, int sz, int cnt){$/;"	f	file:
sharable	vendor\sqlite\sqlite3.c	/^  u8 sharable;       \/* True if we can share pBt with another db *\/$/;"	m	struct:Btree	file:
shared	vendor\sqlite\sqlite3.c	/^  winceLock *shared;      \/* Global shared lock memory for the file  *\/$/;"	m	struct:winFile	file:
sharedByte	vendor\sqlite\sqlite3.c	/^  unsigned long long sharedByte;  \/* for AFP simulated shared lock *\/$/;"	m	struct:unixInodeInfo	file:
sharedCacheEnabled	vendor\sqlite\sqlite3.c	/^  int sharedCacheEnabled;           \/* true if shared-cache mode enabled *\/$/;"	m	struct:Sqlite3Config	file:
sharedLockByte	vendor\sqlite\sqlite3.c	/^  short sharedLockByte;   \/* Randomly chosen byte used as a shared lock *\/$/;"	m	struct:winFile	file:
sharedMask	vendor\sqlite\sqlite3.c	/^  u16 sharedMask;            \/* Mask of shared locks held *\/$/;"	m	struct:unixShm	file:
sharedMask	vendor\sqlite\sqlite3.c	/^  u16 sharedMask;            \/* Mask of shared locks held *\/$/;"	m	struct:winShm	file:
sharedMask	vendor\sqlite\sqlite3.c	/^  u8 sharedMask;             \/* Mask of shared locks held *\/$/;"	m	struct:unixShmNode	file:
simpleClose	vendor\sqlite\sqlite3.c	/^static int simpleClose(sqlite3_tokenizer_cursor *pCursor){$/;"	f	file:
simpleCreate	vendor\sqlite\sqlite3.c	/^static int simpleCreate($/;"	f	file:
simpleDelim	vendor\sqlite\sqlite3.c	/^static int simpleDelim(simple_tokenizer *t, unsigned char c){$/;"	f	file:
simpleDestroy	vendor\sqlite\sqlite3.c	/^static int simpleDestroy(sqlite3_tokenizer *pTokenizer){$/;"	f	file:
simpleNext	vendor\sqlite\sqlite3.c	/^static int simpleNext($/;"	f	file:
simpleOpen	vendor\sqlite\sqlite3.c	/^static int simpleOpen($/;"	f	file:
simpleTokenizerModule	vendor\sqlite\sqlite3.c	/^static const sqlite3_tokenizer_module simpleTokenizerModule = {$/;"	v	file:
simple_tokenizer	vendor\sqlite\sqlite3.c	/^typedef struct simple_tokenizer {$/;"	s	file:
simple_tokenizer	vendor\sqlite\sqlite3.c	/^} simple_tokenizer;$/;"	t	typeref:struct:simple_tokenizer	file:
simple_tokenizer_cursor	vendor\sqlite\sqlite3.c	/^typedef struct simple_tokenizer_cursor {$/;"	s	file:
simple_tokenizer_cursor	vendor\sqlite\sqlite3.c	/^} simple_tokenizer_cursor;$/;"	t	typeref:struct:simple_tokenizer_cursor	file:
size4x	vendor\sqlite\sqlite3.c	/^      u32 size4x;     \/* 4x the size of current chunk in Mem3Block elements *\/$/;"	m	struct:Mem3Block::__anon13::__anon14	file:
sjfd	vendor\sqlite\sqlite3.c	/^  sqlite3_file *sjfd;         \/* File descriptor for sub-journal *\/$/;"	m	struct:Pager	file:
skipFlag	vendor\sqlite\sqlite3.c	/^  u8 skipFlag;          \/* Skip accumulator loading if true *\/$/;"	m	struct:sqlite3_context	file:
skipNext	vendor\sqlite\sqlite3.c	/^  int skipNext;    \/* Prev() is noop if negative. Next() is noop if positive.$/;"	m	struct:BtCursor	file:
sleep	vendor\sqlite\sqlite3.c	/^  int (*sleep)(int);$/;"	m	struct:sqlite3_api_routines	file:
sleepObj	vendor\sqlite\sqlite3.c	/^static HANDLE sleepObj = NULL;$/;"	v	file:
snprintf	vendor\sqlite\sqlite3.c	/^  char * (*snprintf)(int,char*,const char*,...);$/;"	m	struct:sqlite3_api_routines	file:
softHeapLimitEnforcer	vendor\sqlite\sqlite3.c	/^static void softHeapLimitEnforcer($/;"	f	file:
soft_heap_limit	vendor\sqlite\sqlite3.c	/^  void (*soft_heap_limit)(int);$/;"	m	struct:sqlite3_api_routines	file:
soft_heap_limit64	vendor\sqlite\sqlite3.c	/^  sqlite3_int64 (*soft_heap_limit64)(sqlite3_int64);$/;"	m	struct:sqlite3_api_routines	file:
sortFlags	vendor\sqlite\sqlite3.c	/^  u8 sortFlags;         \/* Zero or more SORTFLAG_* bits *\/$/;"	m	struct:SortCtx	file:
sortOrder	vendor\sqlite\sqlite3.c	/^    u8 sortOrder;           \/* 1 for DESC or 0 for ASC *\/$/;"	m	struct:ExprList::ExprList_item	file:
sorted	vendor\sqlite\sqlite3.c	/^  u8 sorted;                \/* True if really sorted (not just grouped) *\/$/;"	m	struct:WhereInfo	file:
sortingIdx	vendor\sqlite\sqlite3.c	/^  int sortingIdx;         \/* Cursor number of the sorting index *\/$/;"	m	struct:AggInfo	file:
sortingIdxPTab	vendor\sqlite\sqlite3.c	/^  int sortingIdxPTab;     \/* Cursor number of pseudo-table *\/$/;"	m	struct:AggInfo	file:
soundexFunc	vendor\sqlite\sqlite3.c	/^static void soundexFunc($/;"	f	file:
sourceid	vendor\sqlite\sqlite3.c	/^  const char *(*sourceid)(void);$/;"	m	struct:sqlite3_api_routines	file:
sourceidFunc	vendor\sqlite\sqlite3.c	/^static void sourceidFunc($/;"	f	file:
spanBinaryExpr	vendor\sqlite\sqlite3.c	/^  static void spanBinaryExpr($/;"	f	file:
spanExpr	vendor\sqlite\sqlite3.c	/^  static void spanExpr(ExprSpan *pOut, Parse *pParse, int op, Token *pValue){$/;"	f	file:
spanSet	vendor\sqlite\sqlite3.c	/^  static void spanSet(ExprSpan *pOut, Token *pStart, Token *pEnd){$/;"	f	file:
spanUnaryPostfix	vendor\sqlite\sqlite3.c	/^  static void spanUnaryPostfix($/;"	f	file:
spanUnaryPrefix	vendor\sqlite\sqlite3.c	/^  static void spanUnaryPrefix($/;"	f	file:
splitNodeStartree	vendor\sqlite\sqlite3.c	/^static int splitNodeStartree($/;"	f	file:
sql	vendor\sqlite\sqlite3.c	/^  const char *(*sql)(sqlite3_stmt*);$/;"	m	struct:sqlite3_api_routines	file:
sqlite3	vendor\sqlite\sqlite3.c	/^struct sqlite3 {$/;"	s	file:
sqlite3	vendor\sqlite\sqlite3.c	/^typedef struct sqlite3 sqlite3;$/;"	t	typeref:struct:sqlite3	file:
sqlite3AbsInt32	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3AbsInt32(int x){$/;"	f
sqlite3AddCheckConstraint	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3AddCheckConstraint($/;"	f
sqlite3AddCollateType	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3AddCollateType(Parse *pParse, Token *pToken){$/;"	f
sqlite3AddColumn	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3AddColumn(Parse *pParse, Token *pName){$/;"	f
sqlite3AddColumnType	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3AddColumnType(Parse *pParse, Token *pType){$/;"	f
sqlite3AddDefaultValue	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3AddDefaultValue(Parse *pParse, ExprSpan *pSpan){$/;"	f
sqlite3AddInt64	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3AddInt64(i64 *pA, i64 iB){$/;"	f
sqlite3AddNotNull	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3AddNotNull(Parse *pParse, int onError){$/;"	f
sqlite3AddPrimaryKey	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3AddPrimaryKey($/;"	f
sqlite3AffinityType	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE char sqlite3AffinityType(const char *zIn, u8 *pszEst){$/;"	f
sqlite3AllocateIndexObject	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE Index *sqlite3AllocateIndexObject($/;"	f
sqlite3AlterBeginAddColumn	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3AlterBeginAddColumn(Parse *pParse, SrcList *pSrc){$/;"	f
sqlite3AlterFinishAddColumn	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3AlterFinishAddColumn(Parse *pParse, Token *pColDef){$/;"	f
sqlite3AlterFunctions	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3AlterFunctions(void){$/;"	f
sqlite3AlterRenameTable	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3AlterRenameTable($/;"	f
sqlite3AnalysisLoad	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3AnalysisLoad(sqlite3 *db, int iDb){$/;"	f
sqlite3Analyze	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3Analyze(Parse *pParse, Token *pName1, Token *pName2){$/;"	f
sqlite3AnalyzeFunctions	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3AnalyzeFunctions(void){$/;"	f
sqlite3ApiExit	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3ApiExit(sqlite3* db, int rc){$/;"	f
sqlite3Apis	vendor\sqlite\sqlite3.c	/^static const sqlite3_api_routines sqlite3Apis = { 0 };$/;"	v	file:
sqlite3Apis	vendor\sqlite\sqlite3.c	/^static const sqlite3_api_routines sqlite3Apis = {$/;"	v	file:
sqlite3AppendChar	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3AppendChar(StrAccum *p, int N, char c){$/;"	f
sqlite3ArrayAllocate	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void *sqlite3ArrayAllocate($/;"	f
sqlite3AtoF	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3AtoF(const char *z, double *pResult, int length, u8 enc){$/;"	f
sqlite3Atoi	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3Atoi(const char *z){$/;"	f
sqlite3Atoi64	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3Atoi64(const char *zNum, i64 *pNum, int length, u8 enc){$/;"	f
sqlite3Attach	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3Attach(Parse *pParse, Expr *p, Expr *pDbname, Expr *pKey){$/;"	f
sqlite3AuthCheck	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3AuthCheck($/;"	f
sqlite3AuthCheck	vendor\sqlite\sqlite3.c	13223;"	d	file:
sqlite3AuthContextPop	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3AuthContextPop(AuthContext *pContext){$/;"	f
sqlite3AuthContextPop	vendor\sqlite\sqlite3.c	13225;"	d	file:
sqlite3AuthContextPush	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3AuthContextPush($/;"	f
sqlite3AuthContextPush	vendor\sqlite\sqlite3.c	13224;"	d	file:
sqlite3AuthRead	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3AuthRead($/;"	f
sqlite3AuthRead	vendor\sqlite\sqlite3.c	13222;"	d	file:
sqlite3AuthReadCol	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3AuthReadCol($/;"	f
sqlite3AutoExtList	vendor\sqlite\sqlite3.c	/^static SQLITE_WSD struct sqlite3AutoExtList {$/;"	s	file:
sqlite3AutoExtList	vendor\sqlite\sqlite3.c	/^typedef struct sqlite3AutoExtList sqlite3AutoExtList;$/;"	t	typeref:struct:sqlite3AutoExtList	file:
sqlite3AutoLoadExtensions	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3AutoLoadExtensions(sqlite3 *db){$/;"	f
sqlite3Autoext	vendor\sqlite\sqlite3.c	/^} sqlite3Autoext = { 0, 0 };$/;"	v	typeref:struct:sqlite3AutoExtList	file:
sqlite3AutoincrementBegin	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3AutoincrementBegin(Parse *pParse){$/;"	f
sqlite3AutoincrementBegin	vendor\sqlite\sqlite3.c	13044;"	d	file:
sqlite3AutoincrementEnd	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3AutoincrementEnd(Parse *pParse){$/;"	f
sqlite3AutoincrementEnd	vendor\sqlite\sqlite3.c	13045;"	d	file:
sqlite3BackupRestart	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3BackupRestart(sqlite3_backup *pBackup){$/;"	f
sqlite3BackupUpdate	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3BackupUpdate(sqlite3_backup *pBackup, Pgno iPage, const u8 *aData){$/;"	f
sqlite3BeginBenignMalloc	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3BeginBenignMalloc(void){$/;"	f
sqlite3BeginBenignMalloc	vendor\sqlite\sqlite3.c	13529;"	d	file:
sqlite3BeginParse	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3BeginParse(Parse *pParse, int explainFlag){$/;"	f
sqlite3BeginTransaction	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3BeginTransaction(Parse *pParse, int type){$/;"	f
sqlite3BeginTrigger	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3BeginTrigger($/;"	f
sqlite3BeginWriteOperation	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3BeginWriteOperation(Parse *pParse, int setStatement, int iDb){$/;"	f
sqlite3BenignMallocHooks	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3BenignMallocHooks($/;"	f
sqlite3BinaryCompareCollSeq	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE CollSeq *sqlite3BinaryCompareCollSeq($/;"	f
sqlite3BitvecBuiltinTest	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3BitvecBuiltinTest(int sz, int *aOp){$/;"	f
sqlite3BitvecClear	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3BitvecClear(Bitvec *p, u32 i, void *pBuf){$/;"	f
sqlite3BitvecCreate	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE Bitvec *sqlite3BitvecCreate(u32 iSize){$/;"	f
sqlite3BitvecDestroy	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3BitvecDestroy(Bitvec *p){$/;"	f
sqlite3BitvecSet	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3BitvecSet(Bitvec *p, u32 i){$/;"	f
sqlite3BitvecSize	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE u32 sqlite3BitvecSize(Bitvec *p){$/;"	f
sqlite3BitvecTest	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3BitvecTest(Bitvec *p, u32 i){$/;"	f
sqlite3BlobCompare	vendor\sqlite\sqlite3.c	/^static SQLITE_NOINLINE int sqlite3BlobCompare(const Mem *pB1, const Mem *pB2){$/;"	f	file:
sqlite3BlockedList	vendor\sqlite\sqlite3.c	/^static sqlite3 *SQLITE_WSD sqlite3BlockedList = 0;$/;"	v	file:
sqlite3BtreeBeginStmt	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeBeginStmt(Btree *p, int iStatement){$/;"	f
sqlite3BtreeBeginTrans	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeBeginTrans(Btree *p, int wrflag){$/;"	f
sqlite3BtreeCheckpoint	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeCheckpoint(Btree *p, int eMode, int *pnLog, int *pnCkpt){$/;"	f
sqlite3BtreeClearCursor	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3BtreeClearCursor(BtCursor *pCur){$/;"	f
sqlite3BtreeClearTable	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeClearTable(Btree *p, int iTable, int *pnChange){$/;"	f
sqlite3BtreeClearTableOfCursor	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeClearTableOfCursor(BtCursor *pCur){$/;"	f
sqlite3BtreeClose	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeClose(Btree *p){$/;"	f
sqlite3BtreeCloseCursor	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeCloseCursor(BtCursor *pCur){$/;"	f
sqlite3BtreeCommit	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeCommit(Btree *p){$/;"	f
sqlite3BtreeCommitPhaseOne	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeCommitPhaseOne(Btree *p, const char *zMaster){$/;"	f
sqlite3BtreeCommitPhaseTwo	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeCommitPhaseTwo(Btree *p, int bCleanup){$/;"	f
sqlite3BtreeCopyFile	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeCopyFile(Btree *pTo, Btree *pFrom){$/;"	f
sqlite3BtreeCount	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeCount(BtCursor *pCur, i64 *pnEntry){$/;"	f
sqlite3BtreeCreateTable	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeCreateTable(Btree *p, int *piTable, int flags){$/;"	f
sqlite3BtreeCursor	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeCursor($/;"	f
sqlite3BtreeCursorHasMoved	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeCursorHasMoved(BtCursor *pCur){$/;"	f
sqlite3BtreeCursorHints	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3BtreeCursorHints(BtCursor *pCsr, unsigned int mask){$/;"	f
sqlite3BtreeCursorIsValid	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeCursorIsValid(BtCursor *pCur){$/;"	f
sqlite3BtreeCursorRestore	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeCursorRestore(BtCursor *pCur, int *pDifferentRow){$/;"	f
sqlite3BtreeCursorSize	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeCursorSize(void){$/;"	f
sqlite3BtreeCursorZero	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3BtreeCursorZero(BtCursor *p){$/;"	f
sqlite3BtreeData	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeData(BtCursor *pCur, u32 offset, u32 amt, void *pBuf){$/;"	f
sqlite3BtreeDataFetch	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE const void *sqlite3BtreeDataFetch(BtCursor *pCur, u32 *pAmt){$/;"	f
sqlite3BtreeDataSize	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeDataSize(BtCursor *pCur, u32 *pSize){$/;"	f
sqlite3BtreeDelete	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeDelete(BtCursor *pCur){$/;"	f
sqlite3BtreeDropTable	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeDropTable(Btree *p, int iTable, int *piMoved){$/;"	f
sqlite3BtreeEnter	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3BtreeEnter(Btree *p){$/;"	f
sqlite3BtreeEnter	vendor\sqlite\sqlite3.c	9442;"	d	file:
sqlite3BtreeEnterAll	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3BtreeEnterAll(sqlite3 *db){$/;"	f
sqlite3BtreeEnterAll	vendor\sqlite\sqlite3.c	9443;"	d	file:
sqlite3BtreeEnterCursor	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3BtreeEnterCursor(BtCursor *pCur){$/;"	f
sqlite3BtreeEnterCursor	vendor\sqlite\sqlite3.c	9462;"	d	file:
sqlite3BtreeEof	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeEof(BtCursor *pCur){$/;"	f
sqlite3BtreeFirst	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeFirst(BtCursor *pCur, int *pRes){$/;"	f
sqlite3BtreeGetAutoVacuum	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeGetAutoVacuum(Btree *p){$/;"	f
sqlite3BtreeGetFilename	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE const char *sqlite3BtreeGetFilename(Btree *p){$/;"	f
sqlite3BtreeGetJournalname	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE const char *sqlite3BtreeGetJournalname(Btree *p){$/;"	f
sqlite3BtreeGetMeta	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3BtreeGetMeta(Btree *p, int idx, u32 *pMeta){$/;"	f
sqlite3BtreeGetOptimalReserve	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeGetOptimalReserve(Btree *p){$/;"	f
sqlite3BtreeGetPageSize	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeGetPageSize(Btree *p){$/;"	f
sqlite3BtreeGetReserveNoMutex	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeGetReserveNoMutex(Btree *p){$/;"	f
sqlite3BtreeHoldsAllMutexes	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeHoldsAllMutexes(sqlite3 *db){$/;"	f
sqlite3BtreeHoldsAllMutexes	vendor\sqlite\sqlite3.c	9467;"	d	file:
sqlite3BtreeHoldsMutex	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeHoldsMutex(Btree *p){$/;"	f
sqlite3BtreeHoldsMutex	vendor\sqlite\sqlite3.c	9466;"	d	file:
sqlite3BtreeIncrVacuum	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeIncrVacuum(Btree *p){$/;"	f
sqlite3BtreeIncrblobCursor	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3BtreeIncrblobCursor(BtCursor *pCur){$/;"	f
sqlite3BtreeInsert	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeInsert($/;"	f
sqlite3BtreeIntegrityCheck	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE char *sqlite3BtreeIntegrityCheck($/;"	f
sqlite3BtreeIsInBackup	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeIsInBackup(Btree *p){$/;"	f
sqlite3BtreeIsInReadTrans	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeIsInReadTrans(Btree *p){$/;"	f
sqlite3BtreeIsInTrans	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeIsInTrans(Btree *p){$/;"	f
sqlite3BtreeIsReadonly	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeIsReadonly(Btree *p){$/;"	f
sqlite3BtreeKey	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeKey(BtCursor *pCur, u32 offset, u32 amt, void *pBuf){$/;"	f
sqlite3BtreeKeyFetch	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE const void *sqlite3BtreeKeyFetch(BtCursor *pCur, u32 *pAmt){$/;"	f
sqlite3BtreeKeySize	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeKeySize(BtCursor *pCur, i64 *pSize){$/;"	f
sqlite3BtreeLast	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeLast(BtCursor *pCur, int *pRes){$/;"	f
sqlite3BtreeLastPage	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE u32 sqlite3BtreeLastPage(Btree *p){$/;"	f
sqlite3BtreeLeave	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3BtreeLeave(Btree *p){$/;"	f
sqlite3BtreeLeave	vendor\sqlite\sqlite3.c	9461;"	d	file:
sqlite3BtreeLeaveAll	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3BtreeLeaveAll(sqlite3 *db){$/;"	f
sqlite3BtreeLeaveAll	vendor\sqlite\sqlite3.c	9464;"	d	file:
sqlite3BtreeLeaveCursor	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3BtreeLeaveCursor(BtCursor *pCur){$/;"	f
sqlite3BtreeLeaveCursor	vendor\sqlite\sqlite3.c	9463;"	d	file:
sqlite3BtreeLockTable	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeLockTable(Btree *p, int iTab, u8 isWriteLock){$/;"	f
sqlite3BtreeMaxPageCount	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeMaxPageCount(Btree *p, int mxPage){$/;"	f
sqlite3BtreeMovetoUnpacked	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeMovetoUnpacked($/;"	f
sqlite3BtreeNewDb	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeNewDb(Btree *p){$/;"	f
sqlite3BtreeNext	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeNext(BtCursor *pCur, int *pRes){$/;"	f
sqlite3BtreeOpen	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeOpen($/;"	f
sqlite3BtreePager	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE Pager *sqlite3BtreePager(Btree *p){$/;"	f
sqlite3BtreePrevious	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreePrevious(BtCursor *pCur, int *pRes){$/;"	f
sqlite3BtreePutData	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreePutData(BtCursor *pCsr, u32 offset, u32 amt, void *z){$/;"	f
sqlite3BtreeRollback	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeRollback(Btree *p, int tripCode, int writeOnly){$/;"	f
sqlite3BtreeSavepoint	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeSavepoint(Btree *p, int op, int iSavepoint){$/;"	f
sqlite3BtreeSchema	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void *sqlite3BtreeSchema(Btree *p, int nBytes, void(*xFree)(void *)){$/;"	f
sqlite3BtreeSchemaLocked	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeSchemaLocked(Btree *p){$/;"	f
sqlite3BtreeSecureDelete	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeSecureDelete(Btree *p, int newFlag){$/;"	f
sqlite3BtreeSetAutoVacuum	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeSetAutoVacuum(Btree *p, int autoVacuum){$/;"	f
sqlite3BtreeSetCacheSize	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeSetCacheSize(Btree *p, int mxPage){$/;"	f
sqlite3BtreeSetMmapLimit	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeSetMmapLimit(Btree *p, sqlite3_int64 szMmap){$/;"	f
sqlite3BtreeSetPageSize	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeSetPageSize(Btree *p, int pageSize, int nReserve, int iFix){$/;"	f
sqlite3BtreeSetPagerFlags	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeSetPagerFlags($/;"	f
sqlite3BtreeSetVersion	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeSetVersion(Btree *pBtree, int iVersion){$/;"	f
sqlite3BtreeSharable	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeSharable(Btree *p){$/;"	f
sqlite3BtreeSharable	vendor\sqlite\sqlite3.c	9460;"	d	file:
sqlite3BtreeSyncDisabled	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeSyncDisabled(Btree *p){$/;"	f
sqlite3BtreeTripAllCursors	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeTripAllCursors(Btree *pBtree, int errCode, int writeOnly){$/;"	f
sqlite3BtreeUpdateMeta	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeUpdateMeta(Btree *p, int idx, u32 iMeta){$/;"	f
sqlite3CantopenError	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3CantopenError(int lineno){$/;"	f
sqlite3ChangeCookie	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3ChangeCookie(Parse *pParse, int iDb){$/;"	f
sqlite3CheckCollSeq	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3CheckCollSeq(Parse *pParse, CollSeq *pColl){$/;"	f
sqlite3CheckObjectName	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3CheckObjectName(Parse *pParse, const char *zName){$/;"	f
sqlite3Checkpoint	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3Checkpoint(sqlite3 *db, int iDb, int eMode, int *pnLog, int *pnCkpt){$/;"	f
sqlite3ClearStatTables	vendor\sqlite\sqlite3.c	/^static void sqlite3ClearStatTables($/;"	f	file:
sqlite3ClearTempRegCache	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3ClearTempRegCache(Parse *pParse){$/;"	f
sqlite3Close	vendor\sqlite\sqlite3.c	/^static int sqlite3Close(sqlite3 *db, int forceZombie){$/;"	f	file:
sqlite3CloseExtensions	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3CloseExtensions(sqlite3 *db){$/;"	f
sqlite3CloseExtensions	vendor\sqlite\sqlite3.c	13413;"	d	file:
sqlite3CloseSavepoints	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3CloseSavepoints(sqlite3 *db){$/;"	f
sqlite3CodeDropTable	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3CodeDropTable(Parse *pParse, Table *pTab, int iDb, int isView){$/;"	f
sqlite3CodeOnce	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3CodeOnce(Parse *pParse){$/;"	f
sqlite3CodeRowTrigger	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3CodeRowTrigger($/;"	f
sqlite3CodeRowTrigger	vendor\sqlite\sqlite3.c	13205;"	d	file:
sqlite3CodeRowTriggerDirect	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3CodeRowTriggerDirect($/;"	f
sqlite3CodeRowTriggerDirect	vendor\sqlite\sqlite3.c	13206;"	d	file:
sqlite3CodeSubselect	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3CodeSubselect($/;"	f
sqlite3CodeVerifyNamedSchema	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3CodeVerifyNamedSchema(Parse *pParse, const char *zDb){$/;"	f
sqlite3CodeVerifySchema	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3CodeVerifySchema(Parse *pParse, int iDb){$/;"	f
sqlite3CollapseDatabaseArray	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3CollapseDatabaseArray(sqlite3 *db){$/;"	f
sqlite3ColumnDefault	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3ColumnDefault(Vdbe *v, Table *pTab, int i, int iReg){$/;"	f
sqlite3ColumnOfIndex	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE i16 sqlite3ColumnOfIndex(Index *pIdx, i16 iCol){$/;"	f
sqlite3CommitInternalChanges	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3CommitInternalChanges(sqlite3 *db){$/;"	f
sqlite3CommitTransaction	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3CommitTransaction(Parse *pParse){$/;"	f
sqlite3CompareAffinity	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE char sqlite3CompareAffinity(Expr *pExpr, char aff2){$/;"	f
sqlite3CompleteInsertion	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3CompleteInsertion($/;"	f
sqlite3Config	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE SQLITE_WSD struct Sqlite3Config sqlite3Config = {$/;"	v	typeref:struct:Sqlite3Config
sqlite3Config	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE SQLITE_WSD struct Sqlite3Config sqlite3Config;$/;"	v	typeref:struct:Sqlite3Config
sqlite3ConnectionBlocked	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3ConnectionBlocked(sqlite3 *db, sqlite3 *pBlocker){$/;"	f
sqlite3ConnectionBlocked	vendor\sqlite\sqlite3.c	13580;"	d	file:
sqlite3ConnectionClosed	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3ConnectionClosed(sqlite3 *db){$/;"	f
sqlite3ConnectionClosed	vendor\sqlite\sqlite3.c	13582;"	d	file:
sqlite3ConnectionUnlocked	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3ConnectionUnlocked(sqlite3 *db){$/;"	f
sqlite3ConnectionUnlocked	vendor\sqlite\sqlite3.c	13581;"	d	file:
sqlite3CorruptError	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3CorruptError(int lineno){$/;"	f
sqlite3Coverage	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3Coverage(int x){$/;"	f
sqlite3CreateColumnExpr	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE Expr *sqlite3CreateColumnExpr(sqlite3 *db, SrcList *pSrc, int iSrc, int iCol){$/;"	f
sqlite3CreateForeignKey	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3CreateForeignKey($/;"	f
sqlite3CreateFunc	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3CreateFunc($/;"	f
sqlite3CreateIndex	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE Index *sqlite3CreateIndex($/;"	f
sqlite3CreateView	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3CreateView($/;"	f
sqlite3CtypeMap	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE const unsigned char sqlite3CtypeMap[256] = {$/;"	v
sqlite3CtypeMap	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE const unsigned char sqlite3CtypeMap[];$/;"	v
sqlite3DbFree	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3DbFree(sqlite3 *db, void *p){$/;"	f
sqlite3DbMallocRaw	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void *sqlite3DbMallocRaw(sqlite3 *db, u64 n){$/;"	f
sqlite3DbMallocSize	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3DbMallocSize(sqlite3 *db, void *p){$/;"	f
sqlite3DbMallocZero	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void *sqlite3DbMallocZero(sqlite3 *db, u64 n){$/;"	f
sqlite3DbMaskAllZero	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3DbMaskAllZero(yDbMask m){$/;"	f
sqlite3DbNameToBtree	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE Btree *sqlite3DbNameToBtree(sqlite3 *db, const char *zDbName){$/;"	f
sqlite3DbRealloc	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void *sqlite3DbRealloc(sqlite3 *db, void *p, u64 n){$/;"	f
sqlite3DbReallocOrFree	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void *sqlite3DbReallocOrFree(sqlite3 *db, void *p, u64 n){$/;"	f
sqlite3DbStrDup	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE char *sqlite3DbStrDup(sqlite3 *db, const char *z){$/;"	f
sqlite3DbStrNDup	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE char *sqlite3DbStrNDup(sqlite3 *db, const char *z, u64 n){$/;"	f
sqlite3DebugPrintf	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3DebugPrintf(const char *zFormat, ...){$/;"	f
sqlite3DecOrHexToI64	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3DecOrHexToI64(const char *z, i64 *pOut){$/;"	f
sqlite3DefaultMutex	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE sqlite3_mutex_methods const *sqlite3DefaultMutex(void){$/;"	f
sqlite3DefaultRowEst	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3DefaultRowEst(Index *pIdx){$/;"	f
sqlite3DeferForeignKey	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3DeferForeignKey(Parse *pParse, int isDeferred){$/;"	f
sqlite3DeleteFrom	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3DeleteFrom($/;"	f
sqlite3DeleteIndexSamples	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3DeleteIndexSamples(sqlite3 *db, Index *pIdx){$/;"	f
sqlite3DeleteTable	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3DeleteTable(sqlite3 *db, Table *pTable){$/;"	f
sqlite3DeleteTrigger	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3DeleteTrigger(sqlite3 *db, Trigger *pTrigger){$/;"	f
sqlite3DeleteTrigger	vendor\sqlite\sqlite3.c	13202;"	d	file:
sqlite3DeleteTriggerStep	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3DeleteTriggerStep(sqlite3 *db, TriggerStep *pTriggerStep){$/;"	f
sqlite3Dequote	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3Dequote(char *z){$/;"	f
sqlite3Detach	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3Detach(Parse *pParse, Expr *pDbname){$/;"	f
sqlite3DropIndex	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3DropIndex(Parse *pParse, SrcList *pName, int ifExists){$/;"	f
sqlite3DropTable	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3DropTable(Parse *pParse, SrcList *pName, int isView, int noErr){$/;"	f
sqlite3DropTrigger	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3DropTrigger(Parse *pParse, SrcList *pName, int noErr){$/;"	f
sqlite3DropTriggerPtr	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3DropTriggerPtr(Parse *pParse, Trigger *pTrigger){$/;"	f
sqlite3DropTriggerPtr	vendor\sqlite\sqlite3.c	13203;"	d	file:
sqlite3EndBenignMalloc	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3EndBenignMalloc(void){$/;"	f
sqlite3EndBenignMalloc	vendor\sqlite\sqlite3.c	13530;"	d	file:
sqlite3EndTable	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3EndTable($/;"	f
sqlite3ErrName	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE const char *sqlite3ErrName(int rc){$/;"	f
sqlite3ErrStr	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE const char *sqlite3ErrStr(int rc){$/;"	f
sqlite3Error	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3Error(sqlite3 *db, int err_code){$/;"	f
sqlite3ErrorMsg	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3ErrorMsg(Parse *pParse, const char *zFormat, ...){$/;"	f
sqlite3ErrorWithMsg	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3ErrorWithMsg(sqlite3 *db, int err_code, const char *zFormat, ...){$/;"	f
sqlite3ExpirePreparedStatements	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExpirePreparedStatements(sqlite3 *db){$/;"	f
sqlite3Expr	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE Expr *sqlite3Expr($/;"	f
sqlite3ExprAddCollateString	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE Expr *sqlite3ExprAddCollateString(Parse *pParse, Expr *pExpr, const char *zC){$/;"	f
sqlite3ExprAddCollateToken	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE Expr *sqlite3ExprAddCollateToken($/;"	f
sqlite3ExprAffinity	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE char sqlite3ExprAffinity(Expr *pExpr){$/;"	f
sqlite3ExprAlloc	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE Expr *sqlite3ExprAlloc($/;"	f
sqlite3ExprAnalyzeAggList	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprAnalyzeAggList(NameContext *pNC, ExprList *pList){$/;"	f
sqlite3ExprAnalyzeAggregates	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprAnalyzeAggregates(NameContext *pNC, Expr *pExpr){$/;"	f
sqlite3ExprAnd	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE Expr *sqlite3ExprAnd(sqlite3 *db, Expr *pLeft, Expr *pRight){$/;"	f
sqlite3ExprAssignVarNumber	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprAssignVarNumber(Parse *pParse, Expr *pExpr){$/;"	f
sqlite3ExprAttachSubtrees	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprAttachSubtrees($/;"	f
sqlite3ExprCacheAffinityChange	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprCacheAffinityChange(Parse *pParse, int iStart, int iCount){$/;"	f
sqlite3ExprCacheClear	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprCacheClear(Parse *pParse){$/;"	f
sqlite3ExprCachePinRegister	vendor\sqlite\sqlite3.c	/^static void sqlite3ExprCachePinRegister(Parse *pParse, int iReg){$/;"	f	file:
sqlite3ExprCachePop	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprCachePop(Parse *pParse){$/;"	f
sqlite3ExprCachePush	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprCachePush(Parse *pParse){$/;"	f
sqlite3ExprCacheRemove	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprCacheRemove(Parse *pParse, int iReg, int nReg){$/;"	f
sqlite3ExprCacheStore	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprCacheStore(Parse *pParse, int iTab, int iCol, int iReg){$/;"	f
sqlite3ExprCanBeNull	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3ExprCanBeNull(const Expr *p){$/;"	f
sqlite3ExprCheckHeight	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3ExprCheckHeight(Parse *pParse, int nHeight){$/;"	f
sqlite3ExprCheckHeight	vendor\sqlite\sqlite3.c	13569;"	d	file:
sqlite3ExprCode	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprCode(Parse *pParse, Expr *pExpr, int target){$/;"	f
sqlite3ExprCodeAndCache	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprCodeAndCache(Parse *pParse, Expr *pExpr, int target){$/;"	f
sqlite3ExprCodeAtInit	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprCodeAtInit($/;"	f
sqlite3ExprCodeExprList	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3ExprCodeExprList($/;"	f
sqlite3ExprCodeFactorable	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprCodeFactorable(Parse *pParse, Expr *pExpr, int target){$/;"	f
sqlite3ExprCodeGetColumn	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3ExprCodeGetColumn($/;"	f
sqlite3ExprCodeGetColumnOfTable	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprCodeGetColumnOfTable($/;"	f
sqlite3ExprCodeIN	vendor\sqlite\sqlite3.c	/^static void sqlite3ExprCodeIN($/;"	f	file:
sqlite3ExprCodeMove	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprCodeMove(Parse *pParse, int iFrom, int iTo, int nReg){$/;"	f
sqlite3ExprCodeTarget	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3ExprCodeTarget(Parse *pParse, Expr *pExpr, int target){$/;"	f
sqlite3ExprCodeTemp	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3ExprCodeTemp(Parse *pParse, Expr *pExpr, int *pReg){$/;"	f
sqlite3ExprCollSeq	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE CollSeq *sqlite3ExprCollSeq(Parse *pParse, Expr *pExpr){$/;"	f
sqlite3ExprCompare	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3ExprCompare(Expr *pA, Expr *pB, int iTab){$/;"	f
sqlite3ExprDelete	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprDelete(sqlite3 *db, Expr *p){$/;"	f
sqlite3ExprDup	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE Expr *sqlite3ExprDup(sqlite3 *db, Expr *p, int flags){$/;"	f
sqlite3ExprFunction	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE Expr *sqlite3ExprFunction(Parse *pParse, ExprList *pList, Token *pToken){$/;"	f
sqlite3ExprIfFalse	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprIfFalse(Parse *pParse, Expr *pExpr, int dest, int jumpIfNull){$/;"	f
sqlite3ExprIfTrue	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprIfTrue(Parse *pParse, Expr *pExpr, int dest, int jumpIfNull){$/;"	f
sqlite3ExprImpliesExpr	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3ExprImpliesExpr(Expr *pE1, Expr *pE2, int iTab){$/;"	f
sqlite3ExprIsConstant	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3ExprIsConstant(Expr *p){$/;"	f
sqlite3ExprIsConstantNotJoin	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3ExprIsConstantNotJoin(Expr *p){$/;"	f
sqlite3ExprIsConstantOrFunction	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3ExprIsConstantOrFunction(Expr *p, u8 isInit){$/;"	f
sqlite3ExprIsInteger	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3ExprIsInteger(Expr *p, int *pValue){$/;"	f
sqlite3ExprIsTableConstant	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3ExprIsTableConstant(Expr *p, int iCur){$/;"	f
sqlite3ExprListAppend	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE ExprList *sqlite3ExprListAppend($/;"	f
sqlite3ExprListCheckLength	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprListCheckLength($/;"	f
sqlite3ExprListCompare	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3ExprListCompare(ExprList *pA, ExprList *pB, int iTab){$/;"	f
sqlite3ExprListDelete	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprListDelete(sqlite3 *db, ExprList *pList){$/;"	f
sqlite3ExprListDup	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE ExprList *sqlite3ExprListDup(sqlite3 *db, ExprList *p, int flags){$/;"	f
sqlite3ExprListFlags	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE u32 sqlite3ExprListFlags(const ExprList *pList){$/;"	f
sqlite3ExprListSetName	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprListSetName($/;"	f
sqlite3ExprListSetSpan	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprListSetSpan($/;"	f
sqlite3ExprNeedsNoAffinityChange	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3ExprNeedsNoAffinityChange(const Expr *p, char aff){$/;"	f
sqlite3ExprSetHeightAndFlags	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprSetHeightAndFlags(Parse *pParse, Expr *p){$/;"	f
sqlite3ExprSkipCollate	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE Expr *sqlite3ExprSkipCollate(Expr *pExpr){$/;"	f
sqlite3FaultSim	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3FaultSim(int iTest){$/;"	f
sqlite3FaultSim	vendor\sqlite\sqlite3.c	13007;"	d	file:
sqlite3FileSuffix3	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3FileSuffix3(const char *zBaseFilename, char *z){$/;"	f
sqlite3FileSuffix3	vendor\sqlite\sqlite3.c	13307;"	d	file:
sqlite3FindCollSeq	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE CollSeq *sqlite3FindCollSeq($/;"	f
sqlite3FindDb	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3FindDb(sqlite3 *db, Token *pName){$/;"	f
sqlite3FindDbName	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3FindDbName(sqlite3 *db, const char *zName){$/;"	f
sqlite3FindFunction	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE FuncDef *sqlite3FindFunction($/;"	f
sqlite3FindInIndex	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3FindInIndex(Parse *pParse, Expr *pX, u32 inFlags, int *prRhsHasNull){$/;"	f
sqlite3FindIndex	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE Index *sqlite3FindIndex(sqlite3 *db, const char *zName, const char *zDb){$/;"	f
sqlite3FindTable	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE Table *sqlite3FindTable(sqlite3 *db, const char *zName, const char *zDatabase){$/;"	f
sqlite3FinishCoding	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3FinishCoding(Parse *pParse){$/;"	f
sqlite3FinishTrigger	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3FinishTrigger($/;"	f
sqlite3FixExpr	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3FixExpr($/;"	f
sqlite3FixExprList	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3FixExprList($/;"	f
sqlite3FixInit	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3FixInit($/;"	f
sqlite3FixSelect	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3FixSelect($/;"	f
sqlite3FixSrcList	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3FixSrcList($/;"	f
sqlite3FixTriggerStep	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3FixTriggerStep($/;"	f
sqlite3FkActions	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3FkActions($/;"	f
sqlite3FkActions	vendor\sqlite\sqlite3.c	13499;"	d	file:
sqlite3FkCheck	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3FkCheck($/;"	f
sqlite3FkCheck	vendor\sqlite\sqlite3.c	13500;"	d	file:
sqlite3FkDelete	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3FkDelete(sqlite3 *db, Table *pTab){$/;"	f
sqlite3FkDelete	vendor\sqlite\sqlite3.c	13509;"	d	file:
sqlite3FkDropTable	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3FkDropTable(Parse *pParse, SrcList *pName, Table *pTab){$/;"	f
sqlite3FkDropTable	vendor\sqlite\sqlite3.c	13501;"	d	file:
sqlite3FkLocateIndex	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3FkLocateIndex($/;"	f
sqlite3FkLocateIndex	vendor\sqlite\sqlite3.c	13510;"	d	file:
sqlite3FkOldmask	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE u32 sqlite3FkOldmask($/;"	f
sqlite3FkOldmask	vendor\sqlite\sqlite3.c	13502;"	d	file:
sqlite3FkReferences	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE FKey *sqlite3FkReferences(Table *pTab){$/;"	f
sqlite3FkRequired	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3FkRequired($/;"	f
sqlite3FkRequired	vendor\sqlite\sqlite3.c	13503;"	d	file:
sqlite3Fts3AllSegdirs	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3AllSegdirs($/;"	f
sqlite3Fts3CacheDeferredDoclists	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3CacheDeferredDoclists(Fts3Cursor *pCsr){$/;"	f
sqlite3Fts3CacheDeferredDoclists	vendor\sqlite\sqlite3.c	132020;"	d	file:
sqlite3Fts3Corrupt	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3Corrupt(){$/;"	f
sqlite3Fts3CreateStatTable	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3CreateStatTable(int *pRc, Fts3Table *p){$/;"	f
sqlite3Fts3DeferToken	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3DeferToken($/;"	f
sqlite3Fts3DeferToken	vendor\sqlite\sqlite3.c	132019;"	d	file:
sqlite3Fts3DeferredTokenList	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3DeferredTokenList($/;"	f
sqlite3Fts3DeferredTokenList	vendor\sqlite\sqlite3.c	132022;"	d	file:
sqlite3Fts3Dequote	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3Dequote(char *z){$/;"	f
sqlite3Fts3DoclistNext	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3DoclistNext($/;"	f
sqlite3Fts3DoclistPrev	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3DoclistPrev($/;"	f
sqlite3Fts3EvalPhraseCleanup	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3EvalPhraseCleanup(Fts3Phrase *pPhrase){$/;"	f
sqlite3Fts3EvalPhrasePoslist	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3EvalPhrasePoslist($/;"	f
sqlite3Fts3EvalPhraseStats	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3EvalPhraseStats($/;"	f
sqlite3Fts3ExprFree	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3ExprFree(Fts3Expr *pDel){$/;"	f
sqlite3Fts3ExprInitTestInterface	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3ExprInitTestInterface(sqlite3* db){$/;"	f
sqlite3Fts3ExprParse	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3ExprParse($/;"	f
sqlite3Fts3FirstFilter	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3FirstFilter($/;"	f
sqlite3Fts3FreeDeferredDoclists	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3FreeDeferredDoclists(Fts3Cursor *pCsr){$/;"	f
sqlite3Fts3FreeDeferredDoclists	vendor\sqlite\sqlite3.c	132021;"	d	file:
sqlite3Fts3FreeDeferredTokens	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3FreeDeferredTokens(Fts3Cursor *pCsr){$/;"	f
sqlite3Fts3FreeDeferredTokens	vendor\sqlite\sqlite3.c	132018;"	d	file:
sqlite3Fts3GetVarint	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3GetVarint(const char *p, sqlite_int64 *v){$/;"	f
sqlite3Fts3GetVarint32	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3GetVarint32(const char *p, int *pi){$/;"	f
sqlite3Fts3HashClear	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3HashClear(Fts3Hash *pH){$/;"	f
sqlite3Fts3HashFind	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void *sqlite3Fts3HashFind(const Fts3Hash *pH, const void *pKey, int nKey){$/;"	f
sqlite3Fts3HashFindElem	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE Fts3HashElem *sqlite3Fts3HashFindElem($/;"	f
sqlite3Fts3HashInit	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3HashInit(Fts3Hash *pNew, char keyClass, char copyKey){$/;"	f
sqlite3Fts3HashInsert	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void *sqlite3Fts3HashInsert($/;"	f
sqlite3Fts3IcuTokenizerModule	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3IcuTokenizerModule($/;"	f
sqlite3Fts3Incrmerge	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3Incrmerge(Fts3Table *p, int nMerge, int nMin){$/;"	f
sqlite3Fts3Init	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3Init(sqlite3 *db){$/;"	f
sqlite3Fts3InitAux	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3InitAux(sqlite3 *db){$/;"	f
sqlite3Fts3InitHashTable	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3InitHashTable($/;"	f
sqlite3Fts3InitTok	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3InitTok(sqlite3 *db, Fts3Hash *pHash){$/;"	f
sqlite3Fts3InitTokenizer	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3InitTokenizer($/;"	f
sqlite3Fts3IsIdChar	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3IsIdChar(char c){$/;"	f
sqlite3Fts3Matchinfo	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3Matchinfo($/;"	f
sqlite3Fts3MaxLevel	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3MaxLevel(Fts3Table *p, int *pnMax){$/;"	f
sqlite3Fts3MsrIncrNext	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3MsrIncrNext($/;"	f
sqlite3Fts3MsrIncrRestart	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3MsrIncrRestart(Fts3MultiSegReader *pCsr){$/;"	f
sqlite3Fts3MsrIncrStart	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3MsrIncrStart($/;"	f
sqlite3Fts3MsrOvfl	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3MsrOvfl($/;"	f
sqlite3Fts3NextToken	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE const char *sqlite3Fts3NextToken(const char *zStr, int *pn){$/;"	f
sqlite3Fts3Offsets	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3Offsets($/;"	f
sqlite3Fts3OpenTokenizer	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3OpenTokenizer($/;"	f
sqlite3Fts3Optimize	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3Optimize(Fts3Table *p){$/;"	f
sqlite3Fts3PendingTermsClear	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3PendingTermsClear(Fts3Table *p){$/;"	f
sqlite3Fts3PendingTermsFlush	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3PendingTermsFlush(Fts3Table *p){$/;"	f
sqlite3Fts3PorterTokenizerModule	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3PorterTokenizerModule($/;"	f
sqlite3Fts3PutVarint	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3PutVarint(char *p, sqlite_int64 v){$/;"	f
sqlite3Fts3ReadBlock	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3ReadBlock($/;"	f
sqlite3Fts3SegReaderCursor	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3SegReaderCursor($/;"	f
sqlite3Fts3SegReaderFinish	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3SegReaderFinish($/;"	f
sqlite3Fts3SegReaderFree	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3SegReaderFree(Fts3SegReader *pReader){$/;"	f
sqlite3Fts3SegReaderNew	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3SegReaderNew($/;"	f
sqlite3Fts3SegReaderPending	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3SegReaderPending($/;"	f
sqlite3Fts3SegReaderStart	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3SegReaderStart($/;"	f
sqlite3Fts3SegReaderStep	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3SegReaderStep($/;"	f
sqlite3Fts3SegmentsClose	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3SegmentsClose(Fts3Table *p){$/;"	f
sqlite3Fts3SelectDocsize	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3SelectDocsize($/;"	f
sqlite3Fts3SelectDoctotal	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3SelectDoctotal($/;"	f
sqlite3Fts3SimpleTokenizerModule	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3SimpleTokenizerModule($/;"	f
sqlite3Fts3Snippet	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3Snippet($/;"	f
sqlite3Fts3UnicodeTokenizer	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3UnicodeTokenizer(sqlite3_tokenizer_module const **ppModule){$/;"	f
sqlite3Fts3UpdateMethod	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3UpdateMethod($/;"	f
sqlite3Fts3VarintLen	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3VarintLen(sqlite3_uint64 v){$/;"	f
sqlite3FtsUnicodeFold	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3FtsUnicodeFold(int c, int bRemoveDiacritic){$/;"	f
sqlite3FtsUnicodeIsalnum	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3FtsUnicodeIsalnum(int c){$/;"	f
sqlite3FtsUnicodeIsdiacritic	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3FtsUnicodeIsdiacritic(int c){$/;"	f
sqlite3FuncDefInsert	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3FuncDefInsert($/;"	f
sqlite3FunctionUsesThisSrc	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3FunctionUsesThisSrc(Expr *pExpr, SrcList *pSrcList){$/;"	f
sqlite3GenerateConstraintChecks	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3GenerateConstraintChecks($/;"	f
sqlite3GenerateIndexKey	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3GenerateIndexKey($/;"	f
sqlite3GenerateRowDelete	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3GenerateRowDelete($/;"	f
sqlite3GenerateRowIndexDelete	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3GenerateRowIndexDelete($/;"	f
sqlite3Get4byte	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE u32 sqlite3Get4byte(const u8 *p){$/;"	f
sqlite3GetBoolean	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE u8 sqlite3GetBoolean(const char *z, u8 dflt){$/;"	f
sqlite3GetCollSeq	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE CollSeq *sqlite3GetCollSeq($/;"	f
sqlite3GetFuncCollSeq	vendor\sqlite\sqlite3.c	/^static CollSeq *sqlite3GetFuncCollSeq(sqlite3_context *context){$/;"	f	file:
sqlite3GetInt32	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3GetInt32(const char *zNum, int *pValue){$/;"	f
sqlite3GetTempRange	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3GetTempRange(Parse *pParse, int nReg){$/;"	f
sqlite3GetTempReg	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3GetTempReg(Parse *pParse){$/;"	f
sqlite3GetToken	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3GetToken(const unsigned char *z, int *tokenType){$/;"	f
sqlite3GetVTable	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE VTable *sqlite3GetVTable(sqlite3 *db, Table *pTab){$/;"	f
sqlite3GetVTable	vendor\sqlite\sqlite3.c	13436;"	d	file:
sqlite3GetVarint	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE u8 sqlite3GetVarint(const unsigned char *p, u64 *v){$/;"	f
sqlite3GetVarint32	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE u8 sqlite3GetVarint32(const unsigned char *p, u32 *v){$/;"	f
sqlite3GetVdbe	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE Vdbe *sqlite3GetVdbe(Parse *pParse){$/;"	f
sqlite3GlobalConfig	vendor\sqlite\sqlite3.c	9127;"	d	file:
sqlite3GlobalConfig	vendor\sqlite\sqlite3.c	9133;"	d	file:
sqlite3GlobalFunctions	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE SQLITE_WSD FuncDefHash sqlite3GlobalFunctions;$/;"	v
sqlite3HaltConstraint	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3HaltConstraint($/;"	f
sqlite3HashClear	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3HashClear(Hash *pH){$/;"	f
sqlite3HashFind	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void *sqlite3HashFind(const Hash *pH, const char *pKey){$/;"	f
sqlite3HashInit	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3HashInit(Hash *pNew){$/;"	f
sqlite3HashInsert	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void *sqlite3HashInsert(Hash *pH, const char *pKey, void *data){$/;"	f
sqlite3HeaderSizeBtree	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3HeaderSizeBtree(void){ return ROUND8(sizeof(MemPage)); }$/;"	f
sqlite3HeaderSizePcache	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3HeaderSizePcache(void){ return ROUND8(sizeof(PgHdr)); }$/;"	f
sqlite3HeaderSizePcache1	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3HeaderSizePcache1(void){ return ROUND8(sizeof(PgHdr1)); }$/;"	f
sqlite3HeapNearlyFull	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3HeapNearlyFull(void){$/;"	f
sqlite3HexToBlob	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void *sqlite3HexToBlob(sqlite3 *db, const char *z, int n){$/;"	f
sqlite3HexToInt	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE u8 sqlite3HexToInt(int h){$/;"	f
sqlite3Hooks	vendor\sqlite\sqlite3.c	/^} sqlite3Hooks = { 0, 0 };$/;"	v	typeref:struct:BenignMallocHooks	file:
sqlite3Hwtime	vendor\sqlite\sqlite3.c	/^  __inline__ sqlite_uint64 sqlite3Hwtime(void){$/;"	f
sqlite3Hwtime	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE   sqlite_uint64 sqlite3Hwtime(void){ return ((sqlite_uint64)0); }$/;"	f
sqlite3IcuInit	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3IcuInit(sqlite3 *db){$/;"	f
sqlite3IdListAppend	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE IdList *sqlite3IdListAppend(sqlite3 *db, IdList *pList, Token *pToken){$/;"	f
sqlite3IdListDelete	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3IdListDelete(sqlite3 *db, IdList *pList){$/;"	f
sqlite3IdListDup	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE IdList *sqlite3IdListDup(sqlite3 *db, IdList *p){$/;"	f
sqlite3IdListIndex	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3IdListIndex(IdList *pList, const char *zName){$/;"	f
sqlite3InRhsIsConstant	vendor\sqlite\sqlite3.c	/^static int sqlite3InRhsIsConstant(Expr *pIn){$/;"	f	file:
sqlite3IndexAffinityOk	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3IndexAffinityOk(Expr *pExpr, char idx_affinity){$/;"	f
sqlite3IndexAffinityStr	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE const char *sqlite3IndexAffinityStr(Vdbe *v, Index *pIdx){$/;"	f
sqlite3IndexedByLookup	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3IndexedByLookup(Parse *pParse, struct SrcList_item *pFrom){$/;"	f
sqlite3Init	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3Init(sqlite3 *db, char **pzErrMsg){$/;"	f
sqlite3InitCallback	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3InitCallback(void *pInit, int argc, char **argv, char **NotUsed){$/;"	f
sqlite3InitInfo	vendor\sqlite\sqlite3.c	/^  struct sqlite3InitInfo {      \/* Information used during initialization *\/$/;"	s	struct:sqlite3	file:
sqlite3InitOne	vendor\sqlite\sqlite3.c	/^static int sqlite3InitOne(sqlite3 *db, int iDb, char **pzErrMsg){$/;"	f	file:
sqlite3Insert	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3Insert($/;"	f
sqlite3IntTokens	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE const Token sqlite3IntTokens[] = {$/;"	v
sqlite3IntTokens	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE const Token sqlite3IntTokens[];$/;"	v
sqlite3InvalidFunction	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3InvalidFunction($/;"	f
sqlite3InvokeBusyHandler	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3InvokeBusyHandler(BusyHandler *p){$/;"	f
sqlite3IoTrace	vendor\sqlite\sqlite3.c	/^\/* not-private *\/ void (*sqlite3IoTrace)(const char*, ...) = 0;$/;"	v
sqlite3IoTrace	vendor\sqlite\sqlite3.c	/^void (*sqlite3IoTrace)(const char*,...);$/;"	v
sqlite3IsEbcdicIdChar	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE const char sqlite3IsEbcdicIdChar[] = {$/;"	v
sqlite3IsEbcdicIdChar	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE const char sqlite3IsEbcdicIdChar[];$/;"	v
sqlite3IsIdChar	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3IsIdChar(u8 c){ return IdChar(c); }$/;"	f
sqlite3IsLikeFunction	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3IsLikeFunction(sqlite3 *db, Expr *pExpr, int *pIsNocase, char *aWc){$/;"	f
sqlite3IsMemJournal	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3IsMemJournal(sqlite3_file *pJfd){$/;"	f
sqlite3IsNaN	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3IsNaN(double x){$/;"	f
sqlite3IsNaN	vendor\sqlite\sqlite3.c	12918;"	d	file:
sqlite3IsNumericAffinity	vendor\sqlite\sqlite3.c	11281;"	d	file:
sqlite3IsReadOnly	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3IsReadOnly(Parse *pParse, Table *pTab, int viewOk){$/;"	f
sqlite3IsRowid	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3IsRowid(const char *z){$/;"	f
sqlite3Isalnum	vendor\sqlite\sqlite3.c	12832;"	d	file:
sqlite3Isalnum	vendor\sqlite\sqlite3.c	12840;"	d	file:
sqlite3Isalpha	vendor\sqlite\sqlite3.c	12833;"	d	file:
sqlite3Isalpha	vendor\sqlite\sqlite3.c	12841;"	d	file:
sqlite3Isdigit	vendor\sqlite\sqlite3.c	12834;"	d	file:
sqlite3Isdigit	vendor\sqlite\sqlite3.c	12842;"	d	file:
sqlite3Isspace	vendor\sqlite\sqlite3.c	12831;"	d	file:
sqlite3Isspace	vendor\sqlite\sqlite3.c	12839;"	d	file:
sqlite3Isxdigit	vendor\sqlite\sqlite3.c	12835;"	d	file:
sqlite3Isxdigit	vendor\sqlite\sqlite3.c	12843;"	d	file:
sqlite3JoinType	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3JoinType(Parse *pParse, Token *pA, Token *pB, Token *pC){$/;"	f
sqlite3JournalCreate	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3JournalCreate(sqlite3_file *p){$/;"	f
sqlite3JournalExists	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3JournalExists(sqlite3_file *p){$/;"	f
sqlite3JournalExists	vendor\sqlite\sqlite3.c	13556;"	d	file:
sqlite3JournalModename	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE const char *sqlite3JournalModename(int eMode){$/;"	f
sqlite3JournalOpen	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3JournalOpen($/;"	f
sqlite3JournalSize	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3JournalSize(sqlite3_vfs *pVfs){$/;"	f
sqlite3JournalSize	vendor\sqlite\sqlite3.c	13555;"	d	file:
sqlite3KeyInfoAlloc	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE KeyInfo *sqlite3KeyInfoAlloc(sqlite3 *db, int N, int X){$/;"	f
sqlite3KeyInfoIsWriteable	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3KeyInfoIsWriteable(KeyInfo *p){ return p->nRef==1; }$/;"	f
sqlite3KeyInfoOfIndex	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE KeyInfo *sqlite3KeyInfoOfIndex(Parse *pParse, Index *pIdx){$/;"	f
sqlite3KeyInfoRef	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE KeyInfo *sqlite3KeyInfoRef(KeyInfo *p){$/;"	f
sqlite3KeyInfoUnref	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3KeyInfoUnref(KeyInfo *p){$/;"	f
sqlite3KeywordCode	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3KeywordCode(const unsigned char *z, int n){$/;"	f
sqlite3LeaveMutexAndCloseZombie	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3LeaveMutexAndCloseZombie(sqlite3 *db){$/;"	f
sqlite3LimitWhere	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE Expr *sqlite3LimitWhere($/;"	f
sqlite3LoadExtension	vendor\sqlite\sqlite3.c	/^static int sqlite3LoadExtension($/;"	f	file:
sqlite3LocateCollSeq	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE CollSeq *sqlite3LocateCollSeq(Parse *pParse, const char *zName){$/;"	f
sqlite3LocateTable	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE Table *sqlite3LocateTable($/;"	f
sqlite3LocateTableItem	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE Table *sqlite3LocateTableItem($/;"	f
sqlite3LockAndPrepare	vendor\sqlite\sqlite3.c	/^static int sqlite3LockAndPrepare($/;"	f	file:
sqlite3LogEst	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE LogEst sqlite3LogEst(u64 x){$/;"	f
sqlite3LogEstAdd	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE LogEst sqlite3LogEstAdd(LogEst a, LogEst b){$/;"	f
sqlite3LogEstFromDouble	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE LogEst sqlite3LogEstFromDouble(double x){$/;"	f
sqlite3LogEstToInt	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE u64 sqlite3LogEstToInt(LogEst x){$/;"	f
sqlite3MAppendf	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE char *sqlite3MAppendf(sqlite3 *db, char *zStr, const char *zFormat, ...){$/;"	f
sqlite3MPrintf	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE char *sqlite3MPrintf(sqlite3 *db, const char *zFormat, ...){$/;"	f
sqlite3Malloc	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void *sqlite3Malloc(u64 n){$/;"	f
sqlite3MallocAlarm	vendor\sqlite\sqlite3.c	/^static void sqlite3MallocAlarm(int nByte){$/;"	f	file:
sqlite3MallocEnd	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3MallocEnd(void){$/;"	f
sqlite3MallocInit	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3MallocInit(void){$/;"	f
sqlite3MallocSize	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3MallocSize(void *p){$/;"	f
sqlite3MallocZero	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void *sqlite3MallocZero(u64 n){$/;"	f
sqlite3MatchSpanName	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3MatchSpanName($/;"	f
sqlite3MaterializeView	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3MaterializeView($/;"	f
sqlite3MayAbort	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3MayAbort(Parse *pParse){$/;"	f
sqlite3MemCompare	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3MemCompare(const Mem *pMem1, const Mem *pMem2, const CollSeq *pColl){$/;"	f
sqlite3MemFree	vendor\sqlite\sqlite3.c	/^static void sqlite3MemFree(void *pPrior){ return; }$/;"	f	file:
sqlite3MemFree	vendor\sqlite\sqlite3.c	/^static void sqlite3MemFree(void *pPrior){$/;"	f	file:
sqlite3MemGetMemsys3	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE const sqlite3_mem_methods *sqlite3MemGetMemsys3(void){$/;"	f
sqlite3MemGetMemsys5	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE const sqlite3_mem_methods *sqlite3MemGetMemsys5(void){$/;"	f
sqlite3MemGetWin32	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE const sqlite3_mem_methods *sqlite3MemGetWin32(void){$/;"	f
sqlite3MemInit	vendor\sqlite\sqlite3.c	/^static int sqlite3MemInit(void *NotUsed){ return SQLITE_OK; }$/;"	f	file:
sqlite3MemInit	vendor\sqlite\sqlite3.c	/^static int sqlite3MemInit(void *NotUsed){$/;"	f	file:
sqlite3MemJournalOpen	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3MemJournalOpen(sqlite3_file *pJfd){$/;"	f
sqlite3MemJournalSize	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3MemJournalSize(void){$/;"	f
sqlite3MemMalloc	vendor\sqlite\sqlite3.c	/^static void *sqlite3MemMalloc(int nByte){ return 0; }$/;"	f	file:
sqlite3MemMalloc	vendor\sqlite\sqlite3.c	/^static void *sqlite3MemMalloc(int nByte){$/;"	f	file:
sqlite3MemRealloc	vendor\sqlite\sqlite3.c	/^static void *sqlite3MemRealloc(void *pPrior, int nByte){ return 0; }$/;"	f	file:
sqlite3MemRealloc	vendor\sqlite\sqlite3.c	/^static void *sqlite3MemRealloc(void *pPrior, int nByte){$/;"	f	file:
sqlite3MemRoundup	vendor\sqlite\sqlite3.c	/^static int sqlite3MemRoundup(int n){ return n; }$/;"	f	file:
sqlite3MemRoundup	vendor\sqlite\sqlite3.c	/^static int sqlite3MemRoundup(int n){$/;"	f	file:
sqlite3MemSetDefault	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3MemSetDefault(void){$/;"	f
sqlite3MemShutdown	vendor\sqlite\sqlite3.c	/^static void sqlite3MemShutdown(void *NotUsed){ return; }$/;"	f	file:
sqlite3MemShutdown	vendor\sqlite\sqlite3.c	/^static void sqlite3MemShutdown(void *NotUsed){$/;"	f	file:
sqlite3MemSize	vendor\sqlite\sqlite3.c	/^static int sqlite3MemSize(void *p){$/;"	f	file:
sqlite3MemSize	vendor\sqlite\sqlite3.c	/^static int sqlite3MemSize(void *pPrior){ return 0; }$/;"	f	file:
sqlite3MemSize	vendor\sqlite\sqlite3.c	/^static int sqlite3MemSize(void *pPrior){$/;"	f	file:
sqlite3MemdebugBacktrace	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3MemdebugBacktrace(int depth){$/;"	f
sqlite3MemdebugBacktraceCallback	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3MemdebugBacktraceCallback(void (*xBacktrace)(int, int, void **)){$/;"	f
sqlite3MemdebugDump	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3MemdebugDump(const char *zFilename){$/;"	f
sqlite3MemdebugHasType	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3MemdebugHasType(void *p, u8 eType){$/;"	f
sqlite3MemdebugHasType	vendor\sqlite\sqlite3.c	13637;"	d	file:
sqlite3MemdebugMallocCount	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3MemdebugMallocCount(){$/;"	f
sqlite3MemdebugNoType	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3MemdebugNoType(void *p, u8 eType){$/;"	f
sqlite3MemdebugNoType	vendor\sqlite\sqlite3.c	13638;"	d	file:
sqlite3MemdebugSetType	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3MemdebugSetType(void *p, u8 eType){$/;"	f
sqlite3MemdebugSetType	vendor\sqlite\sqlite3.c	13636;"	d	file:
sqlite3MemdebugSettitle	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3MemdebugSettitle(const char *zTitle){$/;"	f
sqlite3MemdebugSync	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3MemdebugSync(){$/;"	f
sqlite3MemoryAlarm	vendor\sqlite\sqlite3.c	/^static int sqlite3MemoryAlarm($/;"	f	file:
sqlite3Memsys3Dump	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3Memsys3Dump(const char *zFilename){$/;"	f
sqlite3Memsys5Dump	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3Memsys5Dump(const char *zFilename){$/;"	f
sqlite3MemsysGetHeader	vendor\sqlite\sqlite3.c	/^static struct MemBlockHdr *sqlite3MemsysGetHeader(void *pAllocation){$/;"	f	file:
sqlite3MinimumFileFormat	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3MinimumFileFormat(Parse *pParse, int iDb, int minFormat){$/;"	f
sqlite3MisuseError	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3MisuseError(int lineno){$/;"	f
sqlite3MulInt64	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3MulInt64(i64 *pA, i64 iB){$/;"	f
sqlite3MultiWrite	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3MultiWrite(Parse *pParse){$/;"	f
sqlite3MutexAlloc	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE sqlite3_mutex *sqlite3MutexAlloc(int id){$/;"	f
sqlite3MutexAlloc	vendor\sqlite\sqlite3.c	10700;"	d	file:
sqlite3MutexEnd	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3MutexEnd(void){$/;"	f
sqlite3MutexEnd	vendor\sqlite\sqlite3.c	10702;"	d	file:
sqlite3MutexInit	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3MutexInit(void){ $/;"	f
sqlite3MutexInit	vendor\sqlite\sqlite3.c	10701;"	d	file:
sqlite3NameFromToken	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE char *sqlite3NameFromToken(sqlite3 *db, Token *pName){$/;"	f
sqlite3NestedParse	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3NestedParse(Parse *pParse, const char *zFormat, ...){$/;"	f
sqlite3NoopMutex	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE sqlite3_mutex_methods const *sqlite3NoopMutex(void){$/;"	f
sqlite3OSTrace	vendor\sqlite\sqlite3.c	/^  int sqlite3OSTrace = SQLITE_DEBUG_OS_TRACE;$/;"	v
sqlite3OpcodeName	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE const char *sqlite3OpcodeName(int i){$/;"	f
sqlite3OpcodeProperty	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE const unsigned char sqlite3OpcodeProperty[] = OPFLG_INITIALIZER;$/;"	v
sqlite3OpcodeProperty	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE const unsigned char sqlite3OpcodeProperty[];$/;"	v
sqlite3OpenMasterTable	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3OpenMasterTable(Parse *p, int iDb){$/;"	f
sqlite3OpenTable	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3OpenTable($/;"	f
sqlite3OpenTableAndIndices	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3OpenTableAndIndices($/;"	f
sqlite3OpenTempDatabase	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3OpenTempDatabase(Parse *pParse){$/;"	f
sqlite3OsAccess	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsAccess($/;"	f
sqlite3OsCheckReservedLock	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsCheckReservedLock(sqlite3_file *id, int *pResOut){$/;"	f
sqlite3OsClose	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsClose(sqlite3_file *pId){$/;"	f
sqlite3OsCloseFree	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsCloseFree(sqlite3_file *pFile){$/;"	f
sqlite3OsCurrentTimeInt64	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsCurrentTimeInt64(sqlite3_vfs *pVfs, sqlite3_int64 *pTimeOut){$/;"	f
sqlite3OsDelete	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsDelete(sqlite3_vfs *pVfs, const char *zPath, int dirSync){$/;"	f
sqlite3OsDeviceCharacteristics	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsDeviceCharacteristics(sqlite3_file *id){$/;"	f
sqlite3OsDlClose	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3OsDlClose(sqlite3_vfs *pVfs, void *pHandle){$/;"	f
sqlite3OsDlError	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3OsDlError(sqlite3_vfs *pVfs, int nByte, char *zBufOut){$/;"	f
sqlite3OsDlOpen	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void *sqlite3OsDlOpen(sqlite3_vfs *pVfs, const char *zPath){$/;"	f
sqlite3OsDlSym	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void (*sqlite3OsDlSym(sqlite3_vfs *pVfs, void *pHdle, const char *zSym))(void){$/;"	f
sqlite3OsFetch	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsFetch(sqlite3_file *id, i64 iOff, int iAmt, void **pp){$/;"	f
sqlite3OsFileControl	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsFileControl(sqlite3_file *id, int op, void *pArg){$/;"	f
sqlite3OsFileControlHint	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3OsFileControlHint(sqlite3_file *id, int op, void *pArg){$/;"	f
sqlite3OsFileSize	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsFileSize(sqlite3_file *id, i64 *pSize){$/;"	f
sqlite3OsFullPathname	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsFullPathname($/;"	f
sqlite3OsInit	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsInit(void){$/;"	f
sqlite3OsLock	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsLock(sqlite3_file *id, int lockType){$/;"	f
sqlite3OsOpen	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsOpen($/;"	f
sqlite3OsOpenMalloc	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsOpenMalloc($/;"	f
sqlite3OsRandomness	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsRandomness(sqlite3_vfs *pVfs, int nByte, char *zBufOut){$/;"	f
sqlite3OsRead	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsRead(sqlite3_file *id, void *pBuf, int amt, i64 offset){$/;"	f
sqlite3OsSectorSize	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsSectorSize(sqlite3_file *id){$/;"	f
sqlite3OsShmBarrier	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3OsShmBarrier(sqlite3_file *id){$/;"	f
sqlite3OsShmLock	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsShmLock(sqlite3_file *id, int offset, int n, int flags){$/;"	f
sqlite3OsShmMap	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsShmMap($/;"	f
sqlite3OsShmUnmap	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsShmUnmap(sqlite3_file *id, int deleteFlag){$/;"	f
sqlite3OsSleep	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsSleep(sqlite3_vfs *pVfs, int nMicro){$/;"	f
sqlite3OsSync	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsSync(sqlite3_file *id, int flags){$/;"	f
sqlite3OsTruncate	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsTruncate(sqlite3_file *id, i64 size){$/;"	f
sqlite3OsUnfetch	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsUnfetch(sqlite3_file *id, i64 iOff, void *p){$/;"	f
sqlite3OsUnlock	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsUnlock(sqlite3_file *id, int lockType){$/;"	f
sqlite3OsWrite	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsWrite(sqlite3_file *id, const void *pBuf, int amt, i64 offset){$/;"	f
sqlite3PCacheBufferSetup	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3PCacheBufferSetup(void *pBuf, int sz, int n){$/;"	f
sqlite3PCacheSetDefault	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3PCacheSetDefault(void){$/;"	f
sqlite3PExpr	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE Expr *sqlite3PExpr($/;"	f
sqlite3PageFree	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3PageFree(void *p){$/;"	f
sqlite3PageMalloc	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void *sqlite3PageMalloc(int sz){$/;"	f
sqlite3PagerAcquire	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerAcquire($/;"	f
sqlite3PagerBackupPtr	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE sqlite3_backup **sqlite3PagerBackupPtr(Pager *pPager){$/;"	f
sqlite3PagerBegin	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerBegin(Pager *pPager, int exFlag, int subjInMemory){$/;"	f
sqlite3PagerCacheStat	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3PagerCacheStat(Pager *pPager, int eStat, int reset, int *pnVal){$/;"	f
sqlite3PagerCheckpoint	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerCheckpoint(Pager *pPager, int eMode, int *pnLog, int *pnCkpt){$/;"	f
sqlite3PagerClearCache	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3PagerClearCache(Pager *pPager){$/;"	f
sqlite3PagerClose	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerClose(Pager *pPager){$/;"	f
sqlite3PagerCloseWal	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerCloseWal(Pager *pPager){$/;"	f
sqlite3PagerCodec	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void *sqlite3PagerCodec(PgHdr *pPg){$/;"	f
sqlite3PagerCommitPhaseOne	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerCommitPhaseOne($/;"	f
sqlite3PagerCommitPhaseTwo	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerCommitPhaseTwo(Pager *pPager){$/;"	f
sqlite3PagerDataVersion	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE u32 sqlite3PagerDataVersion(Pager *pPager){$/;"	f
sqlite3PagerDontWrite	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3PagerDontWrite(PgHdr *pPg){$/;"	f
sqlite3PagerExclusiveLock	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerExclusiveLock(Pager *pPager){$/;"	f
sqlite3PagerFile	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE sqlite3_file *sqlite3PagerFile(Pager *pPager){$/;"	f
sqlite3PagerFilename	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE const char *sqlite3PagerFilename(Pager *pPager, int nullIfMemDb){$/;"	f
sqlite3PagerGet	vendor\sqlite\sqlite3.c	10105;"	d	file:
sqlite3PagerGetCodec	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void *sqlite3PagerGetCodec(Pager *pPager){$/;"	f
sqlite3PagerGetData	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void *sqlite3PagerGetData(DbPage *pPg){$/;"	f
sqlite3PagerGetExtra	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void *sqlite3PagerGetExtra(DbPage *pPg){$/;"	f
sqlite3PagerGetJournalMode	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerGetJournalMode(Pager *pPager){$/;"	f
sqlite3PagerIsMemdb	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerIsMemdb(Pager *pPager){$/;"	f
sqlite3PagerIsreadonly	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE u8 sqlite3PagerIsreadonly(Pager *pPager){$/;"	f
sqlite3PagerIswriteable	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerIswriteable(DbPage *pPg){$/;"	f
sqlite3PagerJournalSizeLimit	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE i64 sqlite3PagerJournalSizeLimit(Pager *pPager, i64 iLimit){$/;"	f
sqlite3PagerJournalname	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE const char *sqlite3PagerJournalname(Pager *pPager){$/;"	f
sqlite3PagerLockingMode	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerLockingMode(Pager *pPager, int eMode){$/;"	f
sqlite3PagerLookup	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE DbPage *sqlite3PagerLookup(Pager *pPager, Pgno pgno){$/;"	f
sqlite3PagerMaxPageCount	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerMaxPageCount(Pager *pPager, int mxPage){$/;"	f
sqlite3PagerMemUsed	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerMemUsed(Pager *pPager){$/;"	f
sqlite3PagerMovepage	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerMovepage(Pager *pPager, DbPage *pPg, Pgno pgno, int isCommit){$/;"	f
sqlite3PagerNosync	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerNosync(Pager *pPager){$/;"	f
sqlite3PagerOkToChangeJournalMode	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerOkToChangeJournalMode(Pager *pPager){$/;"	f
sqlite3PagerOpen	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerOpen($/;"	f
sqlite3PagerOpenSavepoint	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerOpenSavepoint(Pager *pPager, int nSavepoint){$/;"	f
sqlite3PagerOpenWal	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerOpenWal($/;"	f
sqlite3PagerPageRefcount	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerPageRefcount(DbPage *pPage){$/;"	f
sqlite3PagerPagecount	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3PagerPagecount(Pager *pPager, int *pnPage){$/;"	f
sqlite3PagerPagenumber	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE Pgno sqlite3PagerPagenumber(DbPage *pPg){$/;"	f
sqlite3PagerReadFileheader	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerReadFileheader(Pager *pPager, int N, unsigned char *pDest){$/;"	f
sqlite3PagerRef	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3PagerRef(DbPage *pPg){$/;"	f
sqlite3PagerRefcount	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerRefcount(Pager *pPager){$/;"	f
sqlite3PagerRekey	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3PagerRekey(DbPage *pPg, Pgno iNew, u16 flags){$/;"	f
sqlite3PagerRollback	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerRollback(Pager *pPager){$/;"	f
sqlite3PagerSavepoint	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerSavepoint(Pager *pPager, int op, int iSavepoint){$/;"	f
sqlite3PagerSetBusyhandler	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3PagerSetBusyhandler($/;"	f
sqlite3PagerSetCachesize	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3PagerSetCachesize(Pager *pPager, int mxPage){$/;"	f
sqlite3PagerSetCodec	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3PagerSetCodec($/;"	f
sqlite3PagerSetFlags	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3PagerSetFlags($/;"	f
sqlite3PagerSetJournalMode	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerSetJournalMode(Pager *pPager, int eMode){$/;"	f
sqlite3PagerSetMmapLimit	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3PagerSetMmapLimit(Pager *pPager, sqlite3_int64 szMmap){$/;"	f
sqlite3PagerSetPagesize	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerSetPagesize(Pager *pPager, u32 *pPageSize, int nReserve){$/;"	f
sqlite3PagerSharedLock	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerSharedLock(Pager *pPager){$/;"	f
sqlite3PagerShrink	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3PagerShrink(Pager *pPager){$/;"	f
sqlite3PagerState	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerState(Pager *pPager){$/;"	f
sqlite3PagerStats	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int *sqlite3PagerStats(Pager *pPager){$/;"	f
sqlite3PagerSync	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerSync(Pager *pPager, const char *zMaster){$/;"	f
sqlite3PagerTempSpace	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void *sqlite3PagerTempSpace(Pager *pPager){$/;"	f
sqlite3PagerTruncateImage	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3PagerTruncateImage(Pager *pPager, Pgno nPage){$/;"	f
sqlite3PagerUnref	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3PagerUnref(DbPage *pPg){$/;"	f
sqlite3PagerUnrefNotNull	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3PagerUnrefNotNull(DbPage *pPg){$/;"	f
sqlite3PagerVfs	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE const sqlite3_vfs *sqlite3PagerVfs(Pager *pPager){$/;"	f
sqlite3PagerWalCallback	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerWalCallback(Pager *pPager){$/;"	f
sqlite3PagerWalFramesize	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerWalFramesize(Pager *pPager){$/;"	f
sqlite3PagerWalSupported	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerWalSupported(Pager *pPager){$/;"	f
sqlite3PagerWrite	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerWrite(PgHdr *pPg){$/;"	f
sqlite3ParseToplevel	vendor\sqlite\sqlite3.c	13199;"	d	file:
sqlite3ParseToplevel	vendor\sqlite\sqlite3.c	13208;"	d	file:
sqlite3ParseUri	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3ParseUri($/;"	f
sqlite3Parser	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3Parser($/;"	f
sqlite3ParserARG_FETCH	vendor\sqlite\sqlite3.c	122349;"	d	file:
sqlite3ParserARG_PDECL	vendor\sqlite\sqlite3.c	122348;"	d	file:
sqlite3ParserARG_SDECL	vendor\sqlite\sqlite3.c	122347;"	d	file:
sqlite3ParserARG_STORE	vendor\sqlite\sqlite3.c	122350;"	d	file:
sqlite3ParserAlloc	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void *sqlite3ParserAlloc(void *(*mallocProc)(u64)){$/;"	f
sqlite3ParserFree	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3ParserFree($/;"	f
sqlite3ParserReset	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3ParserReset(Parse *pParse){$/;"	f
sqlite3ParserStackPeak	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3ParserStackPeak(void *p){$/;"	f
sqlite3ParserTOKENTYPE	vendor\sqlite\sqlite3.c	122324;"	d	file:
sqlite3ParserTrace	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3ParserTrace(FILE *TraceFILE, char *zTracePrompt){$/;"	f
sqlite3PcacheCleanAll	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3PcacheCleanAll(PCache *pCache){$/;"	f
sqlite3PcacheClear	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3PcacheClear(PCache *pCache){$/;"	f
sqlite3PcacheClearSyncFlags	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3PcacheClearSyncFlags(PCache *pCache){$/;"	f
sqlite3PcacheClose	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3PcacheClose(PCache *pCache){$/;"	f
sqlite3PcacheDirtyList	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE PgHdr *sqlite3PcacheDirtyList(PCache *pCache){$/;"	f
sqlite3PcacheDrop	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3PcacheDrop(PgHdr *p){$/;"	f
sqlite3PcacheFetch	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE sqlite3_pcache_page *sqlite3PcacheFetch($/;"	f
sqlite3PcacheFetchFinish	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE PgHdr *sqlite3PcacheFetchFinish($/;"	f
sqlite3PcacheFetchStress	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3PcacheFetchStress($/;"	f
sqlite3PcacheGetCachesize	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3PcacheGetCachesize(PCache *pCache){$/;"	f
sqlite3PcacheInitialize	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3PcacheInitialize(void){$/;"	f
sqlite3PcacheIterateDirty	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3PcacheIterateDirty(PCache *pCache, void (*xIter)(PgHdr *)){$/;"	f
sqlite3PcacheMakeClean	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3PcacheMakeClean(PgHdr *p){$/;"	f
sqlite3PcacheMakeDirty	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3PcacheMakeDirty(PgHdr *p){$/;"	f
sqlite3PcacheMove	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3PcacheMove(PgHdr *p, Pgno newPgno){$/;"	f
sqlite3PcacheOpen	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3PcacheOpen($/;"	f
sqlite3PcachePageRefcount	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3PcachePageRefcount(PgHdr *p){$/;"	f
sqlite3PcachePagecount	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3PcachePagecount(PCache *pCache){$/;"	f
sqlite3PcacheRef	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3PcacheRef(PgHdr *p){$/;"	f
sqlite3PcacheRefCount	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3PcacheRefCount(PCache *pCache){$/;"	f
sqlite3PcacheRelease	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void SQLITE_NOINLINE sqlite3PcacheRelease(PgHdr *p){$/;"	f
sqlite3PcacheReleaseMemory	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3PcacheReleaseMemory(int nReq){$/;"	f
sqlite3PcacheSetCachesize	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3PcacheSetCachesize(PCache *pCache, int mxPage){$/;"	f
sqlite3PcacheSetPageSize	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3PcacheSetPageSize(PCache *pCache, int szPage){$/;"	f
sqlite3PcacheShrink	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3PcacheShrink(PCache *pCache){$/;"	f
sqlite3PcacheShutdown	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3PcacheShutdown(void){$/;"	f
sqlite3PcacheSize	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3PcacheSize(void){ return sizeof(PCache); }$/;"	f
sqlite3PcacheStats	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3PcacheStats($/;"	f
sqlite3PcacheTruncate	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3PcacheTruncate(PCache *pCache, Pgno pgno){$/;"	f
sqlite3PendingByte	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3PendingByte = 0x40000000;$/;"	v
sqlite3PendingByte	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3PendingByte;$/;"	v
sqlite3Pragma	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3Pragma($/;"	f
sqlite3Prepare	vendor\sqlite\sqlite3.c	/^static int sqlite3Prepare($/;"	f	file:
sqlite3Prepare16	vendor\sqlite\sqlite3.c	/^static int sqlite3Prepare16($/;"	f	file:
sqlite3PrimaryKeyIndex	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE Index *sqlite3PrimaryKeyIndex(Table *pTab){$/;"	f
sqlite3Prng	vendor\sqlite\sqlite3.c	/^} sqlite3Prng;$/;"	v	typeref:struct:sqlite3PrngType	file:
sqlite3PrngRestoreState	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3PrngRestoreState(void){$/;"	f
sqlite3PrngSaveState	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3PrngSaveState(void){$/;"	f
sqlite3PrngType	vendor\sqlite\sqlite3.c	/^static SQLITE_WSD struct sqlite3PrngType {$/;"	s	file:
sqlite3Put4byte	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3Put4byte(unsigned char *p, u32 v){$/;"	f
sqlite3PutVarint	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3PutVarint(unsigned char *p, u64 v){$/;"	f
sqlite3ReadSchema	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3ReadSchema(Parse *pParse){$/;"	f
sqlite3Realloc	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void *sqlite3Realloc(void *pOld, u64 nBytes){$/;"	f
sqlite3RefillIndex	vendor\sqlite\sqlite3.c	/^static void sqlite3RefillIndex(Parse *pParse, Index *pIndex, int memRootPage){$/;"	f	file:
sqlite3RegisterBuiltinFunctions	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3RegisterBuiltinFunctions(sqlite3 *db){$/;"	f
sqlite3RegisterDateTimeFunctions	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3RegisterDateTimeFunctions(void){$/;"	f
sqlite3RegisterGlobalFunctions	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3RegisterGlobalFunctions(void){$/;"	f
sqlite3RegisterLikeFunctions	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3RegisterLikeFunctions(sqlite3 *db, int caseSensitive){$/;"	f
sqlite3Reindex	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3Reindex(Parse *pParse, Token *pName1, Token *pName2){$/;"	f
sqlite3ReleaseTempRange	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3ReleaseTempRange(Parse *pParse, int iReg, int nReg){$/;"	f
sqlite3ReleaseTempReg	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3ReleaseTempReg(Parse *pParse, int iReg){$/;"	f
sqlite3Reprepare	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3Reprepare(Vdbe *p){$/;"	f
sqlite3ResetAllSchemasOfConnection	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3ResetAllSchemasOfConnection(sqlite3 *db){$/;"	f
sqlite3ResetOneSchema	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3ResetOneSchema(sqlite3 *db, int iDb){$/;"	f
sqlite3ResolveExprNames	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3ResolveExprNames( $/;"	f
sqlite3ResolveOrderGroupBy	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3ResolveOrderGroupBy($/;"	f
sqlite3ResolvePartIdxLabel	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3ResolvePartIdxLabel(Parse *pParse, int iLabel){$/;"	f
sqlite3ResolveSelectNames	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3ResolveSelectNames($/;"	f
sqlite3ResolveSelfReference	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3ResolveSelfReference($/;"	f
sqlite3ResultSetOfSelect	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE Table *sqlite3ResultSetOfSelect(Parse *pParse, Select *pSelect){$/;"	f
sqlite3RollbackAll	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3RollbackAll(sqlite3 *db, int tripCode){$/;"	f
sqlite3RollbackTransaction	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3RollbackTransaction(Parse *pParse){$/;"	f
sqlite3RootPageMoved	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3RootPageMoved(sqlite3 *db, int iDb, int iFrom, int iTo){$/;"	f
sqlite3RowSetClear	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3RowSetClear(RowSet *p){$/;"	f
sqlite3RowSetInit	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE RowSet *sqlite3RowSetInit(sqlite3 *db, void *pSpace, unsigned int N){$/;"	f
sqlite3RowSetInsert	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3RowSetInsert(RowSet *p, i64 rowid){$/;"	f
sqlite3RowSetNext	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3RowSetNext(RowSet *p, i64 *pRowid){$/;"	f
sqlite3RowSetTest	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3RowSetTest(RowSet *pRowSet, int iBatch, sqlite3_int64 iRowid){$/;"	f
sqlite3RowidConstraint	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3RowidConstraint($/;"	f
sqlite3RtreeInit	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3RtreeInit(sqlite3 *db){$/;"	f
sqlite3RunParser	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3RunParser(Parse *pParse, const char *zSql, char **pzErrMsg){$/;"	f
sqlite3RunVacuum	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3RunVacuum(char **pzErrMsg, sqlite3 *db){$/;"	f
sqlite3SafetyCheckOk	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3SafetyCheckOk(sqlite3 *db){$/;"	f
sqlite3SafetyCheckSickOrOk	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3SafetyCheckSickOrOk(sqlite3 *db){$/;"	f
sqlite3SavedPrng	vendor\sqlite\sqlite3.c	/^static SQLITE_WSD struct sqlite3PrngType sqlite3SavedPrng;$/;"	v	typeref:struct:sqlite3PrngType	file:
sqlite3Savepoint	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3Savepoint(Parse *pParse, int op, Token *pName){$/;"	f
sqlite3SchemaClear	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3SchemaClear(void *p){$/;"	f
sqlite3SchemaGet	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE Schema *sqlite3SchemaGet(sqlite3 *db, Btree *pBt){$/;"	f
sqlite3SchemaMutexHeld	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3SchemaMutexHeld(sqlite3 *db, int iDb, Schema *pSchema){$/;"	f
sqlite3SchemaMutexHeld	vendor\sqlite\sqlite3.c	9468;"	d	file:
sqlite3SchemaToIndex	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3SchemaToIndex(sqlite3 *db, Schema *pSchema){$/;"	f
sqlite3ScratchFree	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3ScratchFree(void *p){$/;"	f
sqlite3ScratchMalloc	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void *sqlite3ScratchMalloc(int n){$/;"	f
sqlite3SectorSize	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3SectorSize(sqlite3_file *pFile){$/;"	f
sqlite3Select	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3Select($/;"	f
sqlite3SelectAddTypeInfo	vendor\sqlite\sqlite3.c	/^static void sqlite3SelectAddTypeInfo(Parse *pParse, Select *pSelect){$/;"	f	file:
sqlite3SelectDelete	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3SelectDelete(sqlite3 *db, Select *p){$/;"	f
sqlite3SelectDestInit	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3SelectDestInit(SelectDest *pDest, int eDest, int iParm){$/;"	f
sqlite3SelectDup	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE Select *sqlite3SelectDup(sqlite3 *db, Select *p, int flags){$/;"	f
sqlite3SelectExpand	vendor\sqlite\sqlite3.c	/^static void sqlite3SelectExpand(Parse *pParse, Select *pSelect){$/;"	f	file:
sqlite3SelectExprHeight	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3SelectExprHeight(Select *p){$/;"	f
sqlite3SelectExprHeight	vendor\sqlite\sqlite3.c	13568;"	d	file:
sqlite3SelectNew	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE Select *sqlite3SelectNew($/;"	f
sqlite3SelectPrep	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3SelectPrep($/;"	f
sqlite3SelectSetName	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3SelectSetName(Select *p, const char *zName){$/;"	f
sqlite3SelectSetName	vendor\sqlite\sqlite3.c	13163;"	d	file:
sqlite3SelectTrace	vendor\sqlite\sqlite3.c	/^\/***\/ int sqlite3SelectTrace = 0;$/;"	v
sqlite3SetHasNullFlag	vendor\sqlite\sqlite3.c	/^static void sqlite3SetHasNullFlag(Vdbe *v, int iCur, int regHasNull){$/;"	f	file:
sqlite3SetString	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3SetString(char **pz, sqlite3 *db, const char *zFormat, ...){$/;"	f
sqlite3SharedCacheList	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE BtShared *SQLITE_WSD sqlite3SharedCacheList = 0;$/;"	v
sqlite3SharedCacheList	vendor\sqlite\sqlite3.c	/^static BtShared *SQLITE_WSD sqlite3SharedCacheList = 0;$/;"	v	file:
sqlite3SkipAccumulatorLoad	vendor\sqlite\sqlite3.c	/^static void sqlite3SkipAccumulatorLoad(sqlite3_context *context){$/;"	f	file:
sqlite3SrcListAppend	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE SrcList *sqlite3SrcListAppend($/;"	f
sqlite3SrcListAppendFromTerm	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE SrcList *sqlite3SrcListAppendFromTerm($/;"	f
sqlite3SrcListAssignCursors	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3SrcListAssignCursors(Parse *pParse, SrcList *pList){$/;"	f
sqlite3SrcListDelete	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3SrcListDelete(sqlite3 *db, SrcList *pList){$/;"	f
sqlite3SrcListDup	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE SrcList *sqlite3SrcListDup(sqlite3 *db, SrcList *p, int flags){$/;"	f
sqlite3SrcListEnlarge	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE SrcList *sqlite3SrcListEnlarge($/;"	f
sqlite3SrcListIndexedBy	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3SrcListIndexedBy(Parse *pParse, SrcList *p, Token *pIndexedBy){$/;"	f
sqlite3SrcListLookup	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE Table *sqlite3SrcListLookup(Parse *pParse, SrcList *pSrc){$/;"	f
sqlite3SrcListShiftJoinType	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3SrcListShiftJoinType(SrcList *p){$/;"	f
sqlite3StackAllocRaw	vendor\sqlite\sqlite3.c	12886;"	d	file:
sqlite3StackAllocRaw	vendor\sqlite\sqlite3.c	12890;"	d	file:
sqlite3StackAllocZero	vendor\sqlite\sqlite3.c	12887;"	d	file:
sqlite3StackAllocZero	vendor\sqlite\sqlite3.c	12891;"	d	file:
sqlite3StackFree	vendor\sqlite\sqlite3.c	12888;"	d	file:
sqlite3StackFree	vendor\sqlite\sqlite3.c	12892;"	d	file:
sqlite3StartTable	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3StartTable($/;"	f
sqlite3Stat	vendor\sqlite\sqlite3.c	/^} sqlite3Stat = { {0,}, {0,} };$/;"	v	typeref:struct:sqlite3StatType	file:
sqlite3Stat4Column	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3Stat4Column($/;"	f
sqlite3Stat4ProbeFree	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3Stat4ProbeFree(UnpackedRecord *pRec){$/;"	f
sqlite3Stat4ProbeSetValue	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3Stat4ProbeSetValue($/;"	f
sqlite3Stat4ValueFromExpr	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3Stat4ValueFromExpr($/;"	f
sqlite3StatType	vendor\sqlite\sqlite3.c	/^static SQLITE_WSD struct sqlite3StatType {$/;"	s	file:
sqlite3StatType	vendor\sqlite\sqlite3.c	/^typedef struct sqlite3StatType sqlite3StatType;$/;"	t	typeref:struct:sqlite3StatType	file:
sqlite3StatusAdd	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3StatusAdd(int op, int N){$/;"	f
sqlite3StatusSet	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3StatusSet(int op, int X){$/;"	f
sqlite3StatusValue	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3StatusValue(int op){$/;"	f
sqlite3Step	vendor\sqlite\sqlite3.c	/^static int sqlite3Step(Vdbe *p){$/;"	f	file:
sqlite3StmtCurrentTime	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE sqlite3_int64 sqlite3StmtCurrentTime(sqlite3_context *p){$/;"	f
sqlite3StrAccumAppend	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3StrAccumAppend(StrAccum *p, const char *z, int N){$/;"	f
sqlite3StrAccumAppendAll	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3StrAccumAppendAll(StrAccum *p, const char *z){$/;"	f
sqlite3StrAccumEnlarge	vendor\sqlite\sqlite3.c	/^static int sqlite3StrAccumEnlarge(StrAccum *p, int N){$/;"	f	file:
sqlite3StrAccumFinish	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE char *sqlite3StrAccumFinish(StrAccum *p){$/;"	f
sqlite3StrAccumInit	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3StrAccumInit(StrAccum *p, char *zBase, int n, int mx){$/;"	f
sqlite3StrAccumReset	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3StrAccumReset(StrAccum *p){$/;"	f
sqlite3StrICmp	vendor\sqlite\sqlite3.c	12851;"	d	file:
sqlite3StrNICmp	vendor\sqlite\sqlite3.c	12853;"	d	file:
sqlite3Strlen30	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3Strlen30(const char *z){$/;"	f
sqlite3SubInt64	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3SubInt64(i64 *pA, i64 iB){$/;"	f
sqlite3TableAffinity	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3TableAffinity(Vdbe *v, Table *pTab, int iReg){$/;"	f
sqlite3TableLock	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3TableLock($/;"	f
sqlite3TableLock	vendor\sqlite\sqlite3.c	13419;"	d	file:
sqlite3TempInMemory	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3TempInMemory(const sqlite3 *db){$/;"	f
sqlite3ThreadCreate	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3ThreadCreate($/;"	f
sqlite3ThreadJoin	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3ThreadJoin(SQLiteThread *p, void **ppOut){$/;"	f
sqlite3ThreadProc	vendor\sqlite\sqlite3.c	/^static unsigned __stdcall sqlite3ThreadProc($/;"	f	file:
sqlite3Tolower	vendor\sqlite\sqlite3.c	12836;"	d	file:
sqlite3Tolower	vendor\sqlite\sqlite3.c	12844;"	d	file:
sqlite3Toupper	vendor\sqlite\sqlite3.c	12830;"	d	file:
sqlite3Toupper	vendor\sqlite\sqlite3.c	12838;"	d	file:
sqlite3TransferBindings	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3TransferBindings(sqlite3_stmt *pFromStmt, sqlite3_stmt *pToStmt){$/;"	f
sqlite3TreeViewExpr	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3TreeViewExpr(TreeView *pView, const Expr *pExpr, u8 moreToFollow){$/;"	f
sqlite3TreeViewExprList	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3TreeViewExprList($/;"	f
sqlite3TreeViewItem	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3TreeViewItem(TreeView *p, const char *zLabel, u8 moreToFollow){$/;"	f
sqlite3TreeViewLine	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3TreeViewLine(TreeView *p, const char *zFormat, ...){$/;"	f
sqlite3TreeViewPop	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3TreeViewPop(TreeView *p){$/;"	f
sqlite3TreeViewPush	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE TreeView *sqlite3TreeViewPush(TreeView *p, u8 moreToFollow){$/;"	f
sqlite3TreeViewSelect	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3TreeViewSelect(TreeView *pView, const Select *p, u8 moreToFollow){$/;"	f
sqlite3TriggerColmask	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE u32 sqlite3TriggerColmask($/;"	f
sqlite3TriggerColmask	vendor\sqlite\sqlite3.c	13209;"	d	file:
sqlite3TriggerDeleteStep	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE TriggerStep *sqlite3TriggerDeleteStep($/;"	f
sqlite3TriggerInsertStep	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE TriggerStep *sqlite3TriggerInsertStep($/;"	f
sqlite3TriggerList	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE Trigger *sqlite3TriggerList(Parse *pParse, Table *pTab){$/;"	f
sqlite3TriggerList	vendor\sqlite\sqlite3.c	13207;"	d	file:
sqlite3TriggerSelectStep	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE TriggerStep *sqlite3TriggerSelectStep(sqlite3 *db, Select *pSelect){$/;"	f
sqlite3TriggerUpdateStep	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE TriggerStep *sqlite3TriggerUpdateStep($/;"	f
sqlite3TriggersExist	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE Trigger *sqlite3TriggersExist($/;"	f
sqlite3TriggersExist	vendor\sqlite\sqlite3.c	13201;"	d	file:
sqlite3TwoPartName	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3TwoPartName($/;"	f
sqlite3UniqueConstraint	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3UniqueConstraint($/;"	f
sqlite3UnlinkAndDeleteIndex	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3UnlinkAndDeleteIndex(sqlite3 *db, int iDb, const char *zIdxName){$/;"	f
sqlite3UnlinkAndDeleteTable	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3UnlinkAndDeleteTable(sqlite3 *db, int iDb, const char *zTabName){$/;"	f
sqlite3UnlinkAndDeleteTrigger	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3UnlinkAndDeleteTrigger(sqlite3 *db, int iDb, const char *zName){$/;"	f
sqlite3UnlinkAndDeleteTrigger	vendor\sqlite\sqlite3.c	13204;"	d	file:
sqlite3Update	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3Update($/;"	f
sqlite3UpperToLower	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE const unsigned char sqlite3UpperToLower[] = {$/;"	v
sqlite3UpperToLower	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE const unsigned char sqlite3UpperToLower[];$/;"	v
sqlite3UserAuthTable	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3UserAuthTable(const char *zTable){$/;"	f
sqlite3Utf16ByteLen	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3Utf16ByteLen(const void *zIn, int nChar){$/;"	f
sqlite3Utf16to8	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE char *sqlite3Utf16to8(sqlite3 *db, const void *z, int nByte, u8 enc){$/;"	f
sqlite3Utf8CharLen	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3Utf8CharLen(const char *zIn, int nByte){$/;"	f
sqlite3Utf8Read	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE u32 sqlite3Utf8Read($/;"	f
sqlite3Utf8Read	vendor\sqlite\sqlite3.c	96222;"	d	file:
sqlite3Utf8To8	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3Utf8To8(unsigned char *zIn){$/;"	f
sqlite3Utf8Trans1	vendor\sqlite\sqlite3.c	/^static const unsigned char sqlite3Utf8Trans1[] = {$/;"	v	file:
sqlite3UtfSelfTest	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3UtfSelfTest(void){$/;"	f
sqlite3VMPrintf	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE char *sqlite3VMPrintf(sqlite3 *db, const char *zFormat, va_list ap){$/;"	f
sqlite3VXPrintf	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3VXPrintf($/;"	f
sqlite3Vacuum	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3Vacuum(Parse *pParse){$/;"	f
sqlite3ValueApplyAffinity	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3ValueApplyAffinity($/;"	f
sqlite3ValueBytes	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3ValueBytes(sqlite3_value *pVal, u8 enc){$/;"	f
sqlite3ValueFree	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3ValueFree(sqlite3_value *v){$/;"	f
sqlite3ValueFromExpr	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3ValueFromExpr($/;"	f
sqlite3ValueNew	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE sqlite3_value *sqlite3ValueNew(sqlite3 *db){$/;"	f
sqlite3ValueSetNull	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3ValueSetNull(sqlite3_value *p){$/;"	f
sqlite3ValueSetStr	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3ValueSetStr($/;"	f
sqlite3ValueText	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE const void *sqlite3ValueText(sqlite3_value* pVal, u8 enc){$/;"	f
sqlite3VarintLen	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3VarintLen(u64 v){$/;"	f
sqlite3VdbeAddOp0	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeAddOp0(Vdbe *p, int op){$/;"	f
sqlite3VdbeAddOp1	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeAddOp1(Vdbe *p, int op, int p1){$/;"	f
sqlite3VdbeAddOp2	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeAddOp2(Vdbe *p, int op, int p1, int p2){$/;"	f
sqlite3VdbeAddOp3	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeAddOp3(Vdbe *p, int op, int p1, int p2, int p3){$/;"	f
sqlite3VdbeAddOp4	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeAddOp4($/;"	f
sqlite3VdbeAddOp4Int	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeAddOp4Int($/;"	f
sqlite3VdbeAddOpList	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeAddOpList(Vdbe *p, int nOp, VdbeOpList const *aOp, int iLineno){$/;"	f
sqlite3VdbeAddParseSchemaOp	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeAddParseSchemaOp(Vdbe *p, int iDb, char *zWhere){$/;"	f
sqlite3VdbeAllocUnpackedRecord	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE UnpackedRecord *sqlite3VdbeAllocUnpackedRecord($/;"	f
sqlite3VdbeAssertMayAbort	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeAssertMayAbort(Vdbe *v, int mayAbort){$/;"	f
sqlite3VdbeChangeEncoding	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeChangeEncoding(Mem *pMem, int desiredEnc){$/;"	f
sqlite3VdbeChangeP1	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeChangeP1(Vdbe *p, u32 addr, int val){$/;"	f
sqlite3VdbeChangeP2	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeChangeP2(Vdbe *p, u32 addr, int val){$/;"	f
sqlite3VdbeChangeP3	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeChangeP3(Vdbe *p, u32 addr, int val){$/;"	f
sqlite3VdbeChangeP4	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeChangeP4(Vdbe *p, int addr, const char *zP4, int n){$/;"	f
sqlite3VdbeChangeP5	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeChangeP5(Vdbe *p, u8 val){$/;"	f
sqlite3VdbeChangeToNoop	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeChangeToNoop(Vdbe *p, int addr){$/;"	f
sqlite3VdbeCheckFk	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeCheckFk(Vdbe *p, int deferred){$/;"	f
sqlite3VdbeCheckFk	vendor\sqlite\sqlite3.c	14851;"	d	file:
sqlite3VdbeCheckMemInvariants	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeCheckMemInvariants(Mem *p){$/;"	f
sqlite3VdbeClearObject	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeClearObject(sqlite3 *db, Vdbe *p){$/;"	f
sqlite3VdbeCloseStatement	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeCloseStatement(Vdbe *p, int eOp){$/;"	f
sqlite3VdbeComment	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeComment(Vdbe *p, const char *zFormat, ...){$/;"	f
sqlite3VdbeCountChanges	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeCountChanges(Vdbe *v){$/;"	f
sqlite3VdbeCreate	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE Vdbe *sqlite3VdbeCreate(Parse *pParse){$/;"	f
sqlite3VdbeCurrentAddr	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeCurrentAddr(Vdbe *p){$/;"	f
sqlite3VdbeCursorMoveto	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeCursorMoveto(VdbeCursor *p){$/;"	f
sqlite3VdbeCursorRestore	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeCursorRestore(VdbeCursor *p){$/;"	f
sqlite3VdbeDb	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE sqlite3 *sqlite3VdbeDb(Vdbe *v){$/;"	f
sqlite3VdbeDelete	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeDelete(Vdbe *p){$/;"	f
sqlite3VdbeDeleteAuxData	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeDeleteAuxData(Vdbe *pVdbe, int iOp, int mask){$/;"	f
sqlite3VdbeDeletePriorOpcode	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeDeletePriorOpcode(Vdbe *p, u8 op){$/;"	f
sqlite3VdbeEnter	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeEnter(Vdbe *p){$/;"	f
sqlite3VdbeEnter	vendor\sqlite\sqlite3.c	14839;"	d	file:
sqlite3VdbeExec	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeExec($/;"	f
sqlite3VdbeExpandSql	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE char *sqlite3VdbeExpandSql($/;"	f
sqlite3VdbeFinalize	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeFinalize(Vdbe *p){$/;"	f
sqlite3VdbeFindCompare	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE RecordCompare sqlite3VdbeFindCompare(UnpackedRecord *p){$/;"	f
sqlite3VdbeFrameDelete	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeFrameDelete(VdbeFrame *p){$/;"	f
sqlite3VdbeFrameRestore	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeFrameRestore(VdbeFrame *pFrame){$/;"	f
sqlite3VdbeFreeCursor	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeFreeCursor(Vdbe *p, VdbeCursor *pCx){$/;"	f
sqlite3VdbeGetBoundValue	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE sqlite3_value *sqlite3VdbeGetBoundValue(Vdbe *v, int iVar, u8 aff){$/;"	f
sqlite3VdbeGetOp	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE VdbeOp *sqlite3VdbeGetOp(Vdbe *p, int addr){$/;"	f
sqlite3VdbeHalt	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeHalt(Vdbe *p){$/;"	f
sqlite3VdbeIOTraceSql	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeIOTraceSql(Vdbe *p){$/;"	f
sqlite3VdbeIOTraceSql	vendor\sqlite\sqlite3.c	13600;"	d	file:
sqlite3VdbeIdxKeyCompare	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeIdxKeyCompare($/;"	f
sqlite3VdbeIdxRowid	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeIdxRowid(sqlite3 *db, BtCursor *pCur, i64 *rowid){$/;"	f
sqlite3VdbeIntValue	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE i64 sqlite3VdbeIntValue(Mem *pMem){$/;"	f
sqlite3VdbeIntegerAffinity	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeIntegerAffinity(Mem *pMem){$/;"	f
sqlite3VdbeJumpHere	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeJumpHere(Vdbe *p, int addr){$/;"	f
sqlite3VdbeLeave	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeLeave(Vdbe *p){$/;"	f
sqlite3VdbeLeave	vendor\sqlite\sqlite3.c	14840;"	d	file:
sqlite3VdbeLinkSubProgram	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeLinkSubProgram(Vdbe *pVdbe, SubProgram *p){$/;"	f
sqlite3VdbeList	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeList($/;"	f
sqlite3VdbeMakeLabel	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeMakeLabel(Vdbe *v){$/;"	f
sqlite3VdbeMakeReady	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeMakeReady($/;"	f
sqlite3VdbeMemAboutToChange	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeMemAboutToChange(Vdbe *pVdbe, Mem *pMem){$/;"	f
sqlite3VdbeMemCast	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeMemCast(Mem *pMem, u8 aff, u8 encoding){$/;"	f
sqlite3VdbeMemClearAndResize	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeMemClearAndResize(Mem *pMem, int szNew){$/;"	f
sqlite3VdbeMemCopy	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeMemCopy(Mem *pTo, const Mem *pFrom){$/;"	f
sqlite3VdbeMemExpandBlob	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeMemExpandBlob(Mem *pMem){$/;"	f
sqlite3VdbeMemExpandBlob	vendor\sqlite\sqlite3.c	14865;"	d	file:
sqlite3VdbeMemFinalize	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeMemFinalize(Mem *pMem, FuncDef *pFunc){$/;"	f
sqlite3VdbeMemFromBtree	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeMemFromBtree($/;"	f
sqlite3VdbeMemGrow	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE SQLITE_NOINLINE int sqlite3VdbeMemGrow(Mem *pMem, int n, int bPreserve){$/;"	f
sqlite3VdbeMemHandleBom	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeMemHandleBom(Mem *pMem){$/;"	f
sqlite3VdbeMemInit	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeMemInit(Mem *pMem, sqlite3 *db, u16 flags){$/;"	f
sqlite3VdbeMemIntegerify	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeMemIntegerify(Mem *pMem){$/;"	f
sqlite3VdbeMemMakeWriteable	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeMemMakeWriteable(Mem *pMem){$/;"	f
sqlite3VdbeMemMove	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeMemMove(Mem *pTo, Mem *pFrom){$/;"	f
sqlite3VdbeMemNulTerminate	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeMemNulTerminate(Mem *pMem){$/;"	f
sqlite3VdbeMemNumerify	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeMemNumerify(Mem *pMem){$/;"	f
sqlite3VdbeMemPrettyPrint	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeMemPrettyPrint(Mem *pMem, char *zBuf){$/;"	f
sqlite3VdbeMemRealify	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeMemRealify(Mem *pMem){$/;"	f
sqlite3VdbeMemRelease	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeMemRelease(Mem *p){$/;"	f
sqlite3VdbeMemSetDouble	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeMemSetDouble(Mem *pMem, double val){$/;"	f
sqlite3VdbeMemSetDouble	vendor\sqlite\sqlite3.c	14796;"	d	file:
sqlite3VdbeMemSetInt64	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeMemSetInt64(Mem *pMem, i64 val){$/;"	f
sqlite3VdbeMemSetNull	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeMemSetNull(Mem *pMem){$/;"	f
sqlite3VdbeMemSetRowSet	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeMemSetRowSet(Mem *pMem){$/;"	f
sqlite3VdbeMemSetStr	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeMemSetStr($/;"	f
sqlite3VdbeMemSetZeroBlob	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeMemSetZeroBlob(Mem *pMem, int n){$/;"	f
sqlite3VdbeMemShallowCopy	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeMemShallowCopy(Mem *pTo, const Mem *pFrom, int srcType){$/;"	f
sqlite3VdbeMemStringify	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeMemStringify(Mem *pMem, u8 enc, u8 bForce){$/;"	f
sqlite3VdbeMemTooBig	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeMemTooBig(Mem *p){$/;"	f
sqlite3VdbeMemTranslate	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE SQLITE_NOINLINE int sqlite3VdbeMemTranslate(Mem *pMem, u8 desiredEnc){$/;"	f
sqlite3VdbeNoopComment	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeNoopComment(Vdbe *p, const char *zFormat, ...){$/;"	f
sqlite3VdbeParameterIndex	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeParameterIndex(Vdbe *p, const char *zName, int nName){$/;"	f
sqlite3VdbePrintOp	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbePrintOp(FILE *pOut, int pc, Op *pOp){$/;"	f
sqlite3VdbePrintSql	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbePrintSql(Vdbe *p){$/;"	f
sqlite3VdbeRealValue	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE double sqlite3VdbeRealValue(Mem *pMem){$/;"	f
sqlite3VdbeRecordCompare	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeRecordCompare($/;"	f
sqlite3VdbeRecordUnpack	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeRecordUnpack($/;"	f
sqlite3VdbeReset	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeReset(Vdbe *p){$/;"	f
sqlite3VdbeResetStepResult	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeResetStepResult(Vdbe *p){$/;"	f
sqlite3VdbeResolveLabel	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeResolveLabel(Vdbe *v, int x){$/;"	f
sqlite3VdbeRewind	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeRewind(Vdbe *p){$/;"	f
sqlite3VdbeRunOnlyOnce	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeRunOnlyOnce(Vdbe *p){$/;"	f
sqlite3VdbeScanStatus	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeScanStatus($/;"	f
sqlite3VdbeScanStatus	vendor\sqlite\sqlite3.c	9962;"	d	file:
sqlite3VdbeSerialGet	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE u32 sqlite3VdbeSerialGet($/;"	f
sqlite3VdbeSerialPut	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE u32 sqlite3VdbeSerialPut(u8 *buf, Mem *pMem, u32 serial_type){$/;"	f
sqlite3VdbeSerialType	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE u32 sqlite3VdbeSerialType(Mem *pMem, int file_format){$/;"	f
sqlite3VdbeSerialTypeLen	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE u32 sqlite3VdbeSerialTypeLen(u32 serial_type){$/;"	f
sqlite3VdbeSetChanges	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeSetChanges(sqlite3 *db, int nChange){$/;"	f
sqlite3VdbeSetColName	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeSetColName($/;"	f
sqlite3VdbeSetLineNumber	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeSetLineNumber(Vdbe *v, int iLine){$/;"	f
sqlite3VdbeSetNumCols	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeSetNumCols(Vdbe *p, int nResColumn){$/;"	f
sqlite3VdbeSetP4KeyInfo	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeSetP4KeyInfo(Parse *pParse, Index *pIdx){$/;"	f
sqlite3VdbeSetSql	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeSetSql(Vdbe *p, const char *z, int n, int isPrepareV2){$/;"	f
sqlite3VdbeSetVarmask	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeSetVarmask(Vdbe *v, int iVar){$/;"	f
sqlite3VdbeSorterClose	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeSorterClose(sqlite3 *db, VdbeCursor *pCsr){$/;"	f
sqlite3VdbeSorterCompare	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeSorterCompare($/;"	f
sqlite3VdbeSorterInit	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeSorterInit($/;"	f
sqlite3VdbeSorterNext	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeSorterNext(sqlite3 *db, const VdbeCursor *pCsr, int *pbEof){$/;"	f
sqlite3VdbeSorterReset	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeSorterReset(sqlite3 *db, VdbeSorter *pSorter){$/;"	f
sqlite3VdbeSorterRewind	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeSorterRewind(const VdbeCursor *pCsr, int *pbEof){$/;"	f
sqlite3VdbeSorterRowkey	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeSorterRowkey(const VdbeCursor *pCsr, Mem *pOut){$/;"	f
sqlite3VdbeSorterWrite	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeSorterWrite($/;"	f
sqlite3VdbeSwap	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeSwap(Vdbe *pA, Vdbe *pB){$/;"	f
sqlite3VdbeTakeOpArray	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE VdbeOp *sqlite3VdbeTakeOpArray(Vdbe *p, int *pnOp, int *pnMaxArg){$/;"	f
sqlite3VdbeTransferError	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeTransferError(Vdbe *p){$/;"	f
sqlite3VdbeUsesBtree	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeUsesBtree(Vdbe *p, int i){$/;"	f
sqlite3ViewGetColumnNames	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3ViewGetColumnNames(Parse *pParse, Table *pTable){$/;"	f
sqlite3ViewGetColumnNames	vendor\sqlite\sqlite3.c	13031;"	d	file:
sqlite3VtabArgExtend	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3VtabArgExtend(Parse *pParse, Token *p){$/;"	f
sqlite3VtabArgInit	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3VtabArgInit(Parse *pParse){$/;"	f
sqlite3VtabBegin	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3VtabBegin(sqlite3 *db, VTable *pVTab){$/;"	f
sqlite3VtabBeginParse	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3VtabBeginParse($/;"	f
sqlite3VtabCallConnect	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3VtabCallConnect(Parse *pParse, Table *pTab){$/;"	f
sqlite3VtabCallCreate	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3VtabCallCreate(sqlite3 *db, int iDb, const char *zTab, char **pzErr){$/;"	f
sqlite3VtabCallDestroy	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3VtabCallDestroy(sqlite3 *db, int iDb, const char *zTab){$/;"	f
sqlite3VtabClear	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3VtabClear(sqlite3 *db, Table *p){$/;"	f
sqlite3VtabClear	vendor\sqlite\sqlite3.c	13427;"	d	file:
sqlite3VtabCommit	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3VtabCommit(sqlite3 *db){$/;"	f
sqlite3VtabCommit	vendor\sqlite\sqlite3.c	13430;"	d	file:
sqlite3VtabDisconnect	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3VtabDisconnect(sqlite3 *db, Table *p){$/;"	f
sqlite3VtabFinishParse	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3VtabFinishParse(Parse *pParse, Token *pEnd){$/;"	f
sqlite3VtabImportErrmsg	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3VtabImportErrmsg(Vdbe *p, sqlite3_vtab *pVtab){$/;"	f
sqlite3VtabInSync	vendor\sqlite\sqlite3.c	13431;"	d	file:
sqlite3VtabInSync	vendor\sqlite\sqlite3.c	13449;"	d	file:
sqlite3VtabLock	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3VtabLock(VTable *pVTab){$/;"	f
sqlite3VtabLock	vendor\sqlite\sqlite3.c	13432;"	d	file:
sqlite3VtabMakeWritable	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3VtabMakeWritable(Parse *pParse, Table *pTab){$/;"	f
sqlite3VtabOverloadFunction	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE FuncDef *sqlite3VtabOverloadFunction($/;"	f
sqlite3VtabRollback	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3VtabRollback(sqlite3 *db){$/;"	f
sqlite3VtabRollback	vendor\sqlite\sqlite3.c	13429;"	d	file:
sqlite3VtabSavepoint	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3VtabSavepoint(sqlite3 *db, int op, int iSavepoint){$/;"	f
sqlite3VtabSavepoint	vendor\sqlite\sqlite3.c	13435;"	d	file:
sqlite3VtabSync	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3VtabSync(sqlite3 *db, Vdbe *p){$/;"	f
sqlite3VtabSync	vendor\sqlite\sqlite3.c	13428;"	d	file:
sqlite3VtabUnlock	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3VtabUnlock(VTable *pVTab){$/;"	f
sqlite3VtabUnlock	vendor\sqlite\sqlite3.c	13433;"	d	file:
sqlite3VtabUnlockList	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3VtabUnlockList(sqlite3 *db){$/;"	f
sqlite3VtabUnlockList	vendor\sqlite\sqlite3.c	13434;"	d	file:
sqlite3WalBeginReadTransaction	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalBeginReadTransaction(Wal *pWal, int *pChanged){$/;"	f
sqlite3WalBeginReadTransaction	vendor\sqlite\sqlite3.c	41284;"	d	file:
sqlite3WalBeginWriteTransaction	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalBeginWriteTransaction(Wal *pWal){$/;"	f
sqlite3WalBeginWriteTransaction	vendor\sqlite\sqlite3.c	41287;"	d	file:
sqlite3WalCallback	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalCallback(Wal *pWal){$/;"	f
sqlite3WalCallback	vendor\sqlite\sqlite3.c	41294;"	d	file:
sqlite3WalCheckpoint	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalCheckpoint($/;"	f
sqlite3WalCheckpoint	vendor\sqlite\sqlite3.c	41293;"	d	file:
sqlite3WalClose	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalClose($/;"	f
sqlite3WalClose	vendor\sqlite\sqlite3.c	41283;"	d	file:
sqlite3WalDbsize	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE Pgno sqlite3WalDbsize(Wal *pWal){$/;"	f
sqlite3WalDbsize	vendor\sqlite\sqlite3.c	41286;"	d	file:
sqlite3WalDefaultHook	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalDefaultHook($/;"	f
sqlite3WalEndReadTransaction	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3WalEndReadTransaction(Wal *pWal){$/;"	f
sqlite3WalEndReadTransaction	vendor\sqlite\sqlite3.c	41285;"	d	file:
sqlite3WalEndWriteTransaction	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalEndWriteTransaction(Wal *pWal){$/;"	f
sqlite3WalEndWriteTransaction	vendor\sqlite\sqlite3.c	41288;"	d	file:
sqlite3WalExclusiveMode	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalExclusiveMode(Wal *pWal, int op){$/;"	f
sqlite3WalExclusiveMode	vendor\sqlite\sqlite3.c	41295;"	d	file:
sqlite3WalFindFrame	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalFindFrame($/;"	f
sqlite3WalFindFrame	vendor\sqlite\sqlite3.c	41298;"	d	file:
sqlite3WalFrames	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalFrames($/;"	f
sqlite3WalFrames	vendor\sqlite\sqlite3.c	41292;"	d	file:
sqlite3WalFramesize	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalFramesize(Wal *pWal){$/;"	f
sqlite3WalFramesize	vendor\sqlite\sqlite3.c	41297;"	d	file:
sqlite3WalHeapMemory	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalHeapMemory(Wal *pWal){$/;"	f
sqlite3WalHeapMemory	vendor\sqlite\sqlite3.c	41296;"	d	file:
sqlite3WalLimit	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3WalLimit(Wal *pWal, i64 iLimit){$/;"	f
sqlite3WalLimit	vendor\sqlite\sqlite3.c	41282;"	d	file:
sqlite3WalOpen	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalOpen($/;"	f
sqlite3WalOpen	vendor\sqlite\sqlite3.c	41281;"	d	file:
sqlite3WalReadFrame	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalReadFrame($/;"	f
sqlite3WalSavepoint	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3WalSavepoint(Wal *pWal, u32 *aWalData){$/;"	f
sqlite3WalSavepoint	vendor\sqlite\sqlite3.c	41290;"	d	file:
sqlite3WalSavepointUndo	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalSavepointUndo(Wal *pWal, u32 *aWalData){$/;"	f
sqlite3WalSavepointUndo	vendor\sqlite\sqlite3.c	41291;"	d	file:
sqlite3WalTrace	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalTrace = 0;$/;"	v
sqlite3WalUndo	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalUndo(Wal *pWal, int (*xUndo)(void *, Pgno), void *pUndoCtx){$/;"	f
sqlite3WalUndo	vendor\sqlite\sqlite3.c	41289;"	d	file:
sqlite3WalkExpr	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalkExpr(Walker *pWalker, Expr *pExpr){$/;"	f
sqlite3WalkExprList	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalkExprList(Walker *pWalker, ExprList *p){$/;"	f
sqlite3WalkSelect	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalkSelect(Walker *pWalker, Select *p){$/;"	f
sqlite3WalkSelectExpr	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalkSelectExpr(Walker *pWalker, Select *p){$/;"	f
sqlite3WalkSelectFrom	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalkSelectFrom(Walker *pWalker, Select *p){$/;"	f
sqlite3WhereBegin	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE WhereInfo *sqlite3WhereBegin($/;"	f
sqlite3WhereBreakLabel	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3WhereBreakLabel(WhereInfo *pWInfo){$/;"	f
sqlite3WhereContinueLabel	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3WhereContinueLabel(WhereInfo *pWInfo){$/;"	f
sqlite3WhereEnd	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3WhereEnd(WhereInfo *pWInfo){$/;"	f
sqlite3WhereIsDistinct	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3WhereIsDistinct(WhereInfo *pWInfo){$/;"	f
sqlite3WhereIsOrdered	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3WhereIsOrdered(WhereInfo *pWInfo){$/;"	f
sqlite3WhereIsSorted	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3WhereIsSorted(WhereInfo *pWInfo){$/;"	f
sqlite3WhereOkOnePass	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3WhereOkOnePass(WhereInfo *pWInfo, int *aiCur){$/;"	f
sqlite3WhereOutputRowCount	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE u64 sqlite3WhereOutputRowCount(WhereInfo *pWInfo){$/;"	f
sqlite3WhereTrace	vendor\sqlite\sqlite3.c	/^\/***\/ int sqlite3WhereTrace = 0;$/;"	v
sqlite3Win32Wait	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE DWORD sqlite3Win32Wait(HANDLE hObject){$/;"	f
sqlite3WithAdd	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE With *sqlite3WithAdd($/;"	f
sqlite3WithDelete	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3WithDelete(sqlite3 *db, With *pWith){$/;"	f
sqlite3WithDelete	vendor\sqlite\sqlite3.c	13481;"	d	file:
sqlite3WithPush	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3WithPush(Parse *pParse, With *pWith, u8 bFree){$/;"	f
sqlite3WithPush	vendor\sqlite\sqlite3.c	13480;"	d	file:
sqlite3XPrintf	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3XPrintf(StrAccum *p, u32 bFlags, const char *zFormat, ...){$/;"	f
sqlite3_aggregate_context	vendor\sqlite\sqlite3.c	/^SQLITE_API void *sqlite3_aggregate_context(sqlite3_context *p, int nByte){$/;"	f
sqlite3_aggregate_context	vendor\sqlite\sqlite3.c	101319;"	d	file:
sqlite3_aggregate_count	vendor\sqlite\sqlite3.c	/^SQLITE_API int sqlite3_aggregate_count(sqlite3_context *p){$/;"	f
sqlite3_aggregate_count	vendor\sqlite\sqlite3.c	101321;"	d	file:
sqlite3_api_routines	vendor\sqlite\sqlite3.c	/^struct sqlite3_api_routines {$/;"	s	file:
sqlite3_api_routines	vendor\sqlite\sqlite3.c	/^typedef struct sqlite3_api_routines sqlite3_api_routines;$/;"	t	typeref:struct:sqlite3_api_routines	file:
sqlite3_auto_extension	vendor\sqlite\sqlite3.c	/^SQLITE_API int sqlite3_auto_extension(void (*xInit)(void)){$/;"	f
sqlite3_auto_extension	vendor\sqlite\sqlite3.c	101523;"	d	file:
sqlite3_backup	vendor\sqlite\sqlite3.c	/^struct sqlite3_backup {$/;"	s	file:
sqlite3_backup	vendor\sqlite\sqlite3.c	/^typedef struct sqlite3_backup sqlite3_backup;$/;"	t	typeref:struct:sqlite3_backup	file:
sqlite3_backup_finish	vendor\sqlite\sqlite3.c	/^SQLITE_API int sqlite3_backup_finish(sqlite3_backup *p){$/;"	f
sqlite3_backup_finish	vendor\sqlite\sqlite3.c	101484;"	d	file:
sqlite3_backup_init	vendor\sqlite\sqlite3.c	/^SQLITE_API sqlite3_backup *sqlite3_backup_init($/;"	f
sqlite3_backup_init	vendor\sqlite\sqlite3.c	101485;"	d	file:
sqlite3_backup_pagecount	vendor\sqlite\sqlite3.c	/^SQLITE_API int sqlite3_backup_pagecount(sqlite3_backup *p){$/;"	f
sqlite3_backup_pagecount	vendor\sqlite\sqlite3.c	101486;"	d	file:
sqlite3_backup_remaining	vendor\sqlite\sqlite3.c	/^SQLITE_API int sqlite3_backup_remaining(sqlite3_backup *p){$/;"	f
sqlite3_backup_remaining	vendor\sqlite\sqlite3.c	101487;"	d	file:
sqlite3_backup_step	vendor\sqlite\sqlite3.c	/^SQLITE_API int sqlite3_backup_step(sqlite3_backup *p, int nPage){$/;"	f
sqlite3_backup_step	vendor\sqlite\sqlite3.c	101488;"	d	file:
sqlite3_bind_blob	vendor\sqlite\sqlite3.c	/^SQLITE_API int sqlite3_bind_blob($/;"	f
sqlite3_bind_blob	vendor\sqlite\sqlite3.c	101323;"	d	file:
sqlite3_bind_blob64	vendor\sqlite\sqlite3.c	/^SQLITE_API int sqlite3_bind_blob64($/;"	f
sqlite3_bind_blob64	vendor\sqlite\sqlite3.c	101524;"	d	file:
sqlite3_bind_double	vendor\sqlite\sqlite3.c	/^SQLITE_API int sqlite3_bind_double(sqlite3_stmt *pStmt, int i, double rValue){$/;"	f
sqlite3_bind_double	vendor\sqlite\sqlite3.c	101324;"	d	file:
sqlite3_bind_int	vendor\sqlite\sqlite3.c	/^SQLITE_API int sqlite3_bind_int(sqlite3_stmt *p, int i, int iValue){$/;"	f
sqlite3_bind_int	vendor\sqlite\sqlite3.c	101325;"	d	file:
sqlite3_bind_int64	vendor\sqlite\sqlite3.c	/^SQLITE_API int sqlite3_bind_int64(sqlite3_stmt *pStmt, int i, sqlite_int64 iValue){$/;"	f
sqlite3_bind_int64	vendor\sqlite\sqlite3.c	101326;"	d	file:
sqlite3_bind_null	vendor\sqlite\sqlite3.c	/^SQLITE_API int sqlite3_bind_null(sqlite3_stmt *pStmt, int i){$/;"	f
sqlite3_bind_null	vendor\sqlite\sqlite3.c	101327;"	d	file:
sqlite3_bind_parameter_count	vendor\sqlite\sqlite3.c	/^SQLITE_API int sqlite3_bind_parameter_count(sqlite3_stmt *pStmt){$/;"	f
sqlite3_bind_parameter_count	vendor\sqlite\sqlite3.c	101328;"	d	file:
sqlite3_bind_parameter_index	vendor\sqlite\sqlite3.c	/^SQLITE_API int sqlite3_bind_parameter_index(sqlite3_stmt *pStmt, const char *zName){$/;"	f
sqlite3_bind_parameter_index	vendor\sqlite\sqlite3.c	101329;"	d	file:
sqlite3_bind_parameter_name	vendor\sqlite\sqlite3.c	/^SQLITE_API const char *sqlite3_bind_parameter_name(sqlite3_stmt *pStmt, int i){$/;"	f
sqlite3_bind_parameter_name	vendor\sqlite\sqlite3.c	101330;"	d	file:
sqlite3_bind_text	vendor\sqlite\sqlite3.c	/^SQLITE_API int sqlite3_bind_text( $/;"	f
sqlite3_bind_text	vendor\sqlite\sqlite3.c	101331;"	d	file:
sqlite3_bind_text16	vendor\sqlite\sqlite3.c	/^SQLITE_API int sqlite3_bind_text16($/;"	f
sqlite3_bind_text16	vendor\sqlite\sqlite3.c	101332;"	d	file:
sqlite3_bind_text16	vendor\sqlite\sqlite3.c	101579;"	d	file:
sqlite3_bind_text64	vendor\sqlite\sqlite3.c	/^SQLITE_API int sqlite3_bind_text64( $/;"	f
sqlite3_bind_text64	vendor\sqlite\sqlite3.c	101525;"	d	file:
sqlite3_bind_value	vendor\sqlite\sqlite3.c	/^SQLITE_API int sqlite3_bind_value(sqlite3_stmt *pStmt, int i, const sqlite3_value *pValue){$/;"	f
sqlite3_bind_value	vendor\sqlite\sqlite3.c	101333;"	d	file:
sqlite3_bind_zeroblob	vendor\sqlite\sqlite3.c	/^SQLITE_API int sqlite3_bind_zeroblob(sqlite3_stmt *pStmt, int i, int n){$/;"	f
sqlite3_bind_zeroblob	vendor\sqlite\sqlite3.c	101449;"	d	file:
sqlite3_bind_zeroblob	vendor\sqlite\sqlite3.c	101640;"	d	file:
sqlite3_blob	vendor\sqlite\sqlite3.c	/^typedef struct sqlite3_blob sqlite3_blob;$/;"	t	typeref:struct:sqlite3_blob	file:
sqlite3_blob_bytes	vendor\sqlite\sqlite3.c	/^SQLITE_API int sqlite3_blob_bytes(sqlite3_blob *pBlob){$/;"	f
sqlite3_blob_bytes	vendor\sqlite\sqlite3.c	101450;"	d	file:
sqlite3_blob_bytes	vendor\sqlite\sqlite3.c	101641;"	d	file:
sqlite3_blob_close	vendor\sqlite\sqlite3.c	/^SQLITE_API int sqlite3_blob_close(sqlite3_blob *pBlob){$/;"	f
sqlite3_blob_close	vendor\sqlite\sqlite3.c	101451;"	d	file:
sqlite3_blob_close	vendor\sqlite\sqlite3.c	101642;"	d	file:
sqlite3_blob_open	vendor\sqlite\sqlite3.c	/^SQLITE_API int sqlite3_blob_open($/;"	f
sqlite3_blob_open	vendor\sqlite\sqlite3.c	101452;"	d	file:
sqlite3_blob_open	vendor\sqlite\sqlite3.c	101643;"	d	file:
sqlite3_blob_read	vendor\sqlite\sqlite3.c	/^SQLITE_API int sqlite3_blob_read(sqlite3_blob *pBlob, void *z, int n, int iOffset){$/;"	f
sqlite3_blob_read	vendor\sqlite\sqlite3.c	101453;"	d	file:
sqlite3_blob_read	vendor\sqlite\sqlite3.c	101644;"	d	file:
sqlite3_blob_reopen	vendor\sqlite\sqlite3.c	/^SQLITE_API int sqlite3_blob_reopen(sqlite3_blob *pBlob, sqlite3_int64 iRow){$/;"	f
sqlite3_blob_reopen	vendor\sqlite\sqlite3.c	101505;"	d	file:
sqlite3_blob_reopen	vendor\sqlite\sqlite3.c	101646;"	d	file:
sqlite3_blob_write	vendor\sqlite\sqlite3.c	/^SQLITE_API int sqlite3_blob_write(sqlite3_blob *pBlob, const void *z, int n, int iOffset){$/;"	f
sqlite3_blob_write	vendor\sqlite\sqlite3.c	101454;"	d	file:
sqlite3_blob_write	vendor\sqlite\sqlite3.c	101645;"	d	file:
sqlite3_busy_handler	vendor\sqlite\sqlite3.c	/^SQLITE_API int sqlite3_busy_handler($/;"	f
sqlite3_busy_handler	vendor\sqlite\sqlite3.c	101334;"	d	file:
sqlite3_busy_timeout	vendor\sqlite\sqlite3.c	/^SQLITE_API int sqlite3_busy_timeout(sqlite3 *db, int ms){$/;"	f
sqlite3_busy_timeout	vendor\sqlite\sqlite3.c	101335;"	d	file:
sqlite3_callback	vendor\sqlite\sqlite3.c	/^typedef int (*sqlite3_callback)(void*,int,char**, char**);$/;"	t	file:
sqlite3_cancel_auto_extension	vendor\sqlite\sqlite3.c	/^SQLITE_API int sqlite3_cancel_auto_extension(void (*xInit)(void)){$/;"	f
sqlite3_cancel_auto_extension	vendor\sqlite\sqlite3.c	101526;"	d	file:
sqlite3_changes	vendor\sqlite\sqlite3.c	/^SQLITE_API int sqlite3_changes(sqlite3 *db){$/;"	f
sqlite3_changes	vendor\sqlite\sqlite3.c	101336;"	d	file:
sqlite3_clear_bindings	vendor\sqlite\sqlite3.c	/^SQLITE_API int sqlite3_clear_bindings(sqlite3_stmt *pStmt){$/;"	f
sqlite3_clear_bindings	vendor\sqlite\sqlite3.c	101448;"	d	file:
sqlite3_close	vendor\sqlite\sqlite3.c	/^SQLITE_API int sqlite3_close(sqlite3 *db){ return sqlite3Close(db,0); }$/;"	f
sqlite3_close	vendor\sqlite\sqlite3.c	101337;"	d	file:
sqlite3_close_v2	vendor\sqlite\sqlite3.c	/^SQLITE_API int sqlite3_close_v2(sqlite3 *db){ return sqlite3Close(db,1); }$/;"	f
sqlite3_close_v2	vendor\sqlite\sqlite3.c	101509;"	d	file:
sqlite3_collation_needed	vendor\sqlite\sqlite3.c	/^SQLITE_API int sqlite3_collation_needed($/;"	f
sqlite3_collation_needed	vendor\sqlite\sqlite3.c	101338;"	d	file:
sqlite3_collation_needed16	vendor\sqlite\sqlite3.c	/^SQLITE_API int sqlite3_collation_needed16($/;"	f
sqlite3_collation_needed16	vendor\sqlite\sqlite3.c	101339;"	d	file:
sqlite3_collation_needed16	vendor\sqlite\sqlite3.c	101580;"	d	file:
sqlite3_column_blob	vendor\sqlite\sqlite3.c	/^SQLITE_API const void *sqlite3_column_blob(sqlite3_stmt *pStmt, int i){$/;"	f
sqlite3_column_blob	vendor\sqlite\sqlite3.c	101340;"	d	file:
sqlite3_column_bytes	vendor\sqlite\sqlite3.c	/^SQLITE_API int sqlite3_column_bytes(sqlite3_stmt *pStmt, int i){$/;"	f
sqlite3_column_bytes	vendor\sqlite\sqlite3.c	101341;"	d	file:
sqlite3_column_bytes16	vendor\sqlite\sqlite3.c	/^SQLITE_API int sqlite3_column_bytes16(sqlite3_stmt *pStmt, int i){$/;"	f
sqlite3_column_bytes16	vendor\sqlite\sqlite3.c	101342;"	d	file:
sqlite3_column_count	vendor\sqlite\sqlite3.c	/^SQLITE_API int sqlite3_column_count(sqlite3_stmt *pStmt){$/;"	f
sqlite3_column_count	vendor\sqlite\sqlite3.c	101343;"	d	file:
sqlite3_column_database_name	vendor\sqlite\sqlite3.c	/^SQLITE_API const char *sqlite3_column_database_name(sqlite3_stmt *pStmt, int N){$/;"	f
sqlite3_column_database_name	vendor\sqlite\sqlite3.c	101344;"	d	file:
sqlite3_column_database_name	vendor\sqlite\sqlite3.c	101566;"	d	file:
sqlite3_column_database_name16	vendor\sqlite\sqlite3.c	/^SQLITE_API const void *sqlite3_column_database_name16(sqlite3_stmt *pStmt, int N){$/;"	f
sqlite3_column_database_name16	vendor\sqlite\sqlite3.c	101345;"	d	file:
sqlite3_column_database_name16	vendor\sqlite\sqlite3.c	101567;"	d	file:
sqlite3_column_database_name16	vendor\sqlite\sqlite3.c	101598;"	d	file:
sqlite3_column_decltype	vendor\sqlite\sqlite3.c	/^SQLITE_API const char *sqlite3_column_decltype(sqlite3_stmt *pStmt, int N){$/;"	f
sqlite3_column_decltype	vendor\sqlite\sqlite3.c	101346;"	d	file:
sqlite3_column_decltype	vendor\sqlite\sqlite3.c	101610;"	d	file:
sqlite3_column_decltype16	vendor\sqlite\sqlite3.c	/^SQLITE_API const void *sqlite3_column_decltype16(sqlite3_stmt *pStmt, int N){$/;"	f
sqlite3_column_decltype16	vendor\sqlite\sqlite3.c	101347;"	d	file:
sqlite3_column_decltype16	vendor\sqlite\sqlite3.c	101581;"	d	file:
sqlite3_column_decltype16	vendor\sqlite\sqlite3.c	101609;"	d	file:
sqlite3_column_double	vendor\sqlite\sqlite3.c	/^SQLITE_API double sqlite3_column_double(sqlite3_stmt *pStmt, int i){$/;"	f
sqlite3_column_double	vendor\sqlite\sqlite3.c	101348;"	d	file:
sqlite3_column_int	vendor\sqlite\sqlite3.c	/^SQLITE_API int sqlite3_column_int(sqlite3_stmt *pStmt, int i){$/;"	f
sqlite3_column_int	vendor\sqlite\sqlite3.c	101349;"	d	file:
sqlite3_column_int64	vendor\sqlite\sqlite3.c	/^SQLITE_API sqlite_int64 sqlite3_column_int64(sqlite3_stmt *pStmt, int i){$/;"	f
sqlite3_column_int64	vendor\sqlite\sqlite3.c	101350;"	d	file:
sqlite3_column_name	vendor\sqlite\sqlite3.c	/^SQLITE_API const char *sqlite3_column_name(sqlite3_stmt *pStmt, int N){$/;"	f
sqlite3_column_name	vendor\sqlite\sqlite3.c	101351;"	d	file:
sqlite3_column_name16	vendor\sqlite\sqlite3.c	/^SQLITE_API const void *sqlite3_column_name16(sqlite3_stmt *pStmt, int N){$/;"	f
sqlite3_column_name16	vendor\sqlite\sqlite3.c	101352;"	d	file:
sqlite3_column_name16	vendor\sqlite\sqlite3.c	101582;"	d	file:
sqlite3_column_origin_name	vendor\sqlite\sqlite3.c	/^SQLITE_API const char *sqlite3_column_origin_name(sqlite3_stmt *pStmt, int N){$/;"	f
sqlite3_column_origin_name	vendor\sqlite\sqlite3.c	101353;"	d	file:
sqlite3_column_origin_name	vendor\sqlite\sqlite3.c	101570;"	d	file:
sqlite3_column_origin_name16	vendor\sqlite\sqlite3.c	/^SQLITE_API const void *sqlite3_column_origin_name16(sqlite3_stmt *pStmt, int N){$/;"	f
sqlite3_column_origin_name16	vendor\sqlite\sqlite3.c	101354;"	d	file:
sqlite3_column_origin_name16	vendor\sqlite\sqlite3.c	101571;"	d	file:
sqlite3_column_origin_name16	vendor\sqlite\sqlite3.c	101600;"	d	file:
sqlite3_column_table_name	vendor\sqlite\sqlite3.c	/^SQLITE_API const char *sqlite3_column_table_name(sqlite3_stmt *pStmt, int N){$/;"	f
sqlite3_column_table_name	vendor\sqlite\sqlite3.c	101355;"	d	file:
sqlite3_column_table_name	vendor\sqlite\sqlite3.c	101568;"	d	file:
sqlite3_column_table_name16	vendor\sqlite\sqlite3.c	/^SQLITE_API const void *sqlite3_column_table_name16(sqlite3_stmt *pStmt, int N){$/;"	f
sqlite3_column_table_name16	vendor\sqlite\sqlite3.c	101356;"	d	file:
sqlite3_column_table_name16	vendor\sqlite\sqlite3.c	101569;"	d	file:
sqlite3_column_table_name16	vendor\sqlite\sqlite3.c	101599;"	d	file:
sqlite3_column_text	vendor\sqlite\sqlite3.c	/^SQLITE_API const unsigned char *sqlite3_column_text(sqlite3_stmt *pStmt, int i){$/;"	f
sqlite3_column_text	vendor\sqlite\sqlite3.c	101357;"	d	file:
sqlite3_column_text16	vendor\sqlite\sqlite3.c	/^SQLITE_API const void *sqlite3_column_text16(sqlite3_stmt *pStmt, int i){$/;"	f
sqlite3_column_text16	vendor\sqlite\sqlite3.c	101358;"	d	file:
sqlite3_column_text16	vendor\sqlite\sqlite3.c	101583;"	d	file:
sqlite3_column_type	vendor\sqlite\sqlite3.c	/^SQLITE_API int sqlite3_column_type(sqlite3_stmt *pStmt, int i){$/;"	f
sqlite3_column_type	vendor\sqlite\sqlite3.c	101359;"	d	file:
sqlite3_column_value	vendor\sqlite\sqlite3.c	/^SQLITE_API sqlite3_value *sqlite3_column_value(sqlite3_stmt *pStmt, int i){$/;"	f
sqlite3_column_value	vendor\sqlite\sqlite3.c	101360;"	d	file:
sqlite3_commit_hook	vendor\sqlite\sqlite3.c	/^SQLITE_API void *sqlite3_commit_hook($/;"	f
sqlite3_commit_hook	vendor\sqlite\sqlite3.c	101361;"	d	file:
sqlite3_compileoption_get	vendor\sqlite\sqlite3.c	/^SQLITE_API const char *sqlite3_compileoption_get(int N){$/;"	f
sqlite3_compileoption_get	vendor\sqlite\sqlite3.c	101489;"	d	file:
sqlite3_compileoption_used	vendor\sqlite\sqlite3.c	/^SQLITE_API int sqlite3_compileoption_used(const char *zOptName){$/;"	f
sqlite3_compileoption_used	vendor\sqlite\sqlite3.c	101490;"	d	file:
sqlite3_complete	vendor\sqlite\sqlite3.c	/^SQLITE_API int sqlite3_complete(const char *zSql){$/;"	f
sqlite3_complete	vendor\sqlite\sqlite3.c	101362;"	d	file:
sqlite3_complete	vendor\sqlite\sqlite3.c	101604;"	d	file:
sqlite3_complete16	vendor\sqlite\sqlite3.c	/^SQLITE_API int sqlite3_complete16(const void *zSql){$/;"	f
sqlite3_complete16	vendor\sqlite\sqlite3.c	101363;"	d	file:
sqlite3_complete16	vendor\sqlite\sqlite3.c	101584;"	d	file:
sqlite3_complete16	vendor\sqlite\sqlite3.c	101605;"	d	file:
sqlite3_config	vendor\sqlite\sqlite3.c	/^SQLITE_API int sqlite3_config(int op, ...){$/;"	f
sqlite3_context	vendor\sqlite\sqlite3.c	/^struct sqlite3_context {$/;"	s	file:
sqlite3_context	vendor\sqlite\sqlite3.c	/^typedef struct sqlite3_context sqlite3_context;$/;"	t	typeref:struct:sqlite3_context	file:
sqlite3_context_db_handle	vendor\sqlite\sqlite3.c	/^SQLITE_API sqlite3 *sqlite3_context_db_handle(sqlite3_context *p){$/;"	f
sqlite3_context_db_handle	vendor\sqlite\sqlite3.c	101478;"	d	file:
sqlite3_create_collation	vendor\sqlite\sqlite3.c	/^SQLITE_API int sqlite3_create_collation($/;"	f
sqlite3_create_collation	vendor\sqlite\sqlite3.c	101364;"	d	file:
sqlite3_create_collation16	vendor\sqlite\sqlite3.c	/^SQLITE_API int sqlite3_create_collation16($/;"	f
sqlite3_create_collation16	vendor\sqlite\sqlite3.c	101365;"	d	file:
sqlite3_create_collation16	vendor\sqlite\sqlite3.c	101585;"	d	file:
sqlite3_create_collation_v2	vendor\sqlite\sqlite3.c	/^SQLITE_API int sqlite3_create_collation_v2($/;"	f
sqlite3_create_collation_v2	vendor\sqlite\sqlite3.c	101455;"	d	file:
sqlite3_create_function	vendor\sqlite\sqlite3.c	/^SQLITE_API int sqlite3_create_function($/;"	f
sqlite3_create_function	vendor\sqlite\sqlite3.c	101366;"	d	file:
sqlite3_create_function16	vendor\sqlite\sqlite3.c	/^SQLITE_API int sqlite3_create_function16($/;"	f
sqlite3_create_function16	vendor\sqlite\sqlite3.c	101367;"	d	file:
sqlite3_create_function16	vendor\sqlite\sqlite3.c	101586;"	d	file:
sqlite3_create_function_v2	vendor\sqlite\sqlite3.c	/^SQLITE_API int sqlite3_create_function_v2($/;"	f
sqlite3_create_function_v2	vendor\sqlite\sqlite3.c	101491;"	d	file:
sqlite3_create_module	vendor\sqlite\sqlite3.c	/^SQLITE_API int sqlite3_create_module($/;"	f
sqlite3_create_module	vendor\sqlite\sqlite3.c	101368;"	d	file:
sqlite3_create_module	vendor\sqlite\sqlite3.c	101618;"	d	file:
sqlite3_create_module_v2	vendor\sqlite\sqlite3.c	/^SQLITE_API int sqlite3_create_module_v2($/;"	f
sqlite3_create_module_v2	vendor\sqlite\sqlite3.c	101369;"	d	file:
sqlite3_create_module_v2	vendor\sqlite\sqlite3.c	101619;"	d	file:
sqlite3_current_time	vendor\sqlite\sqlite3.c	/^SQLITE_API int sqlite3_current_time = 0;  \/* Fake system time in seconds since 1970. *\/$/;"	v
sqlite3_data_count	vendor\sqlite\sqlite3.c	/^SQLITE_API int sqlite3_data_count(sqlite3_stmt *pStmt){$/;"	f
sqlite3_data_count	vendor\sqlite\sqlite3.c	101370;"	d	file:
sqlite3_data_directory	vendor\sqlite\sqlite3.c	/^SQLITE_API char *sqlite3_data_directory = 0;$/;"	v
sqlite3_data_directory	vendor\sqlite\sqlite3.c	/^SQLITE_API char *sqlite3_data_directory;$/;"	v
sqlite3_db_config	vendor\sqlite\sqlite3.c	/^SQLITE_API int sqlite3_db_config(sqlite3 *db, int op, ...){$/;"	f
sqlite3_db_config	vendor\sqlite\sqlite3.c	101492;"	d	file:
sqlite3_db_filename	vendor\sqlite\sqlite3.c	/^SQLITE_API const char *sqlite3_db_filename(sqlite3 *db, const char *zDbName){$/;"	f
sqlite3_db_filename	vendor\sqlite\sqlite3.c	101510;"	d	file:
sqlite3_db_handle	vendor\sqlite\sqlite3.c	/^SQLITE_API sqlite3 *sqlite3_db_handle(sqlite3_stmt *pStmt){$/;"	f
sqlite3_db_handle	vendor\sqlite\sqlite3.c	101371;"	d	file:
sqlite3_db_mutex	vendor\sqlite\sqlite3.c	/^SQLITE_API sqlite3_mutex *sqlite3_db_mutex(sqlite3 *db){$/;"	f
sqlite3_db_mutex	vendor\sqlite\sqlite3.c	101493;"	d	file:
sqlite3_db_readonly	vendor\sqlite\sqlite3.c	/^SQLITE_API int sqlite3_db_readonly(sqlite3 *db, const char *zDbName){$/;"	f
sqlite3_db_readonly	vendor\sqlite\sqlite3.c	101511;"	d	file:
sqlite3_db_release_memory	vendor\sqlite\sqlite3.c	/^SQLITE_API int sqlite3_db_release_memory(sqlite3 *db){$/;"	f
sqlite3_db_release_memory	vendor\sqlite\sqlite3.c	101512;"	d	file:
sqlite3_db_status	vendor\sqlite\sqlite3.c	/^SQLITE_API int sqlite3_db_status($/;"	f
sqlite3_db_status	vendor\sqlite\sqlite3.c	101494;"	d	file:
sqlite3_debug_mutex	vendor\sqlite\sqlite3.c	/^typedef struct sqlite3_debug_mutex {$/;"	s	file:
sqlite3_debug_mutex	vendor\sqlite\sqlite3.c	/^} sqlite3_debug_mutex;$/;"	t	typeref:struct:sqlite3_debug_mutex	file:
sqlite3_declare_vtab	vendor\sqlite\sqlite3.c	/^SQLITE_API int sqlite3_declare_vtab(sqlite3 *db, const char *zCreateTable){$/;"	f
sqlite3_declare_vtab	vendor\sqlite\sqlite3.c	101372;"	d	file:
sqlite3_declare_vtab	vendor\sqlite\sqlite3.c	101620;"	d	file:
sqlite3_destructor_type	vendor\sqlite\sqlite3.c	/^typedef void (*sqlite3_destructor_type)(void*);$/;"	t	file:
sqlite3_diskfull	vendor\sqlite\sqlite3.c	/^SQLITE_API int sqlite3_diskfull = 0;$/;"	v
sqlite3_diskfull_pending	vendor\sqlite\sqlite3.c	/^SQLITE_API int sqlite3_diskfull_pending = 0;$/;"	v
sqlite3_enable_load_extension	vendor\sqlite\sqlite3.c	/^SQLITE_API int sqlite3_enable_load_extension(sqlite3 *db, int onoff){$/;"	f
sqlite3_enable_shared_cache	vendor\sqlite\sqlite3.c	/^SQLITE_API int sqlite3_enable_shared_cache(int enable){$/;"	f
sqlite3_enable_shared_cache	vendor\sqlite\sqlite3.c	101373;"	d	file:
sqlite3_enable_shared_cache	vendor\sqlite\sqlite3.c	101626;"	d	file:
sqlite3_errcode	vendor\sqlite\sqlite3.c	/^SQLITE_API int sqlite3_errcode(sqlite3 *db){$/;"	f
sqlite3_errcode	vendor\sqlite\sqlite3.c	101374;"	d	file:
sqlite3_errmsg	vendor\sqlite\sqlite3.c	/^SQLITE_API const char *sqlite3_errmsg(sqlite3 *db){$/;"	f
sqlite3_errmsg	vendor\sqlite\sqlite3.c	101375;"	d	file:
sqlite3_errmsg16	vendor\sqlite\sqlite3.c	/^SQLITE_API const void *sqlite3_errmsg16(sqlite3 *db){$/;"	f
sqlite3_errmsg16	vendor\sqlite\sqlite3.c	101376;"	d	file:
sqlite3_errmsg16	vendor\sqlite\sqlite3.c	101587;"	d	file:
sqlite3_errstr	vendor\sqlite\sqlite3.c	/^SQLITE_API const char *sqlite3_errstr(int rc){$/;"	f
sqlite3_errstr	vendor\sqlite\sqlite3.c	101513;"	d	file:
sqlite3_exec	vendor\sqlite\sqlite3.c	/^SQLITE_API int sqlite3_exec($/;"	f
sqlite3_exec	vendor\sqlite\sqlite3.c	101377;"	d	file:
sqlite3_expired	vendor\sqlite\sqlite3.c	/^SQLITE_API int sqlite3_expired(sqlite3_stmt *pStmt){$/;"	f
sqlite3_expired	vendor\sqlite\sqlite3.c	101379;"	d	file:
sqlite3_extended_errcode	vendor\sqlite\sqlite3.c	/^SQLITE_API int sqlite3_extended_errcode(sqlite3 *db){$/;"	f
sqlite3_extended_errcode	vendor\sqlite\sqlite3.c	101495;"	d	file:
sqlite3_extended_result_codes	vendor\sqlite\sqlite3.c	/^SQLITE_API int sqlite3_extended_result_codes(sqlite3 *db, int onoff){$/;"	f
sqlite3_extended_result_codes	vendor\sqlite\sqlite3.c	101479;"	d	file:
sqlite3_file	vendor\sqlite\sqlite3.c	/^struct sqlite3_file {$/;"	s	file:
sqlite3_file	vendor\sqlite\sqlite3.c	/^typedef struct sqlite3_file sqlite3_file;$/;"	t	typeref:struct:sqlite3_file	file:
sqlite3_file_control	vendor\sqlite\sqlite3.c	/^SQLITE_API int sqlite3_file_control(sqlite3 *db, const char *zDbName, int op, void *pArg){$/;"	f
sqlite3_file_control	vendor\sqlite\sqlite3.c	101456;"	d	file:
sqlite3_finalize	vendor\sqlite\sqlite3.c	/^SQLITE_API int sqlite3_finalize(sqlite3_stmt *pStmt){$/;"	f
sqlite3_finalize	vendor\sqlite\sqlite3.c	101381;"	d	file:
sqlite3_found_count	vendor\sqlite\sqlite3.c	/^SQLITE_API int sqlite3_found_count = 0;$/;"	v
sqlite3_free	vendor\sqlite\sqlite3.c	/^SQLITE_API void sqlite3_free(void *p){$/;"	f
sqlite3_free	vendor\sqlite\sqlite3.c	101382;"	d	file:
sqlite3_free_table	vendor\sqlite\sqlite3.c	/^SQLITE_API void sqlite3_free_table($/;"	f
sqlite3_free_table	vendor\sqlite\sqlite3.c	101383;"	d	file:
sqlite3_free_table	vendor\sqlite\sqlite3.c	101635;"	d	file:
sqlite3_fts3_enable_parentheses	vendor\sqlite\sqlite3.c	/^SQLITE_API int sqlite3_fts3_enable_parentheses = 0;$/;"	v
sqlite3_fts3_enable_parentheses	vendor\sqlite\sqlite3.c	138280;"	d	file:
sqlite3_fts3_enable_parentheses	vendor\sqlite\sqlite3.c	138282;"	d	file:
sqlite3_fullsync_count	vendor\sqlite\sqlite3.c	/^SQLITE_API int sqlite3_fullsync_count = 0;$/;"	v
sqlite3_get_autocommit	vendor\sqlite\sqlite3.c	/^SQLITE_API int sqlite3_get_autocommit(sqlite3 *db){$/;"	f
sqlite3_get_autocommit	vendor\sqlite\sqlite3.c	101384;"	d	file:
sqlite3_get_auxdata	vendor\sqlite\sqlite3.c	/^SQLITE_API void *sqlite3_get_auxdata(sqlite3_context *pCtx, int iArg){$/;"	f
sqlite3_get_auxdata	vendor\sqlite\sqlite3.c	101385;"	d	file:
sqlite3_get_table	vendor\sqlite\sqlite3.c	/^SQLITE_API int sqlite3_get_table($/;"	f
sqlite3_get_table	vendor\sqlite\sqlite3.c	101386;"	d	file:
sqlite3_get_table	vendor\sqlite\sqlite3.c	101636;"	d	file:
sqlite3_get_table_cb	vendor\sqlite\sqlite3.c	/^static int sqlite3_get_table_cb(void *pArg, int nCol, char **argv, char **colv){$/;"	f	file:
sqlite3_global_recover	vendor\sqlite\sqlite3.c	/^SQLITE_API int sqlite3_global_recover(void){$/;"	f
sqlite3_global_recover	vendor\sqlite\sqlite3.c	101388;"	d	file:
sqlite3_hostid_num	vendor\sqlite\sqlite3.c	/^SQLITE_API int sqlite3_hostid_num = 0;$/;"	v
sqlite3_index_constraint	vendor\sqlite\sqlite3.c	/^  struct sqlite3_index_constraint {$/;"	s	struct:sqlite3_index_info	file:
sqlite3_index_constraint_usage	vendor\sqlite\sqlite3.c	/^  struct sqlite3_index_constraint_usage {$/;"	s	struct:sqlite3_index_info	file:
sqlite3_index_info	vendor\sqlite\sqlite3.c	/^struct sqlite3_index_info {$/;"	s	file:
sqlite3_index_info	vendor\sqlite\sqlite3.c	/^typedef struct sqlite3_index_info sqlite3_index_info;$/;"	t	typeref:struct:sqlite3_index_info	file:
sqlite3_index_orderby	vendor\sqlite\sqlite3.c	/^  struct sqlite3_index_orderby {$/;"	s	struct:sqlite3_index_info	file:
sqlite3_initialize	vendor\sqlite\sqlite3.c	/^SQLITE_API int sqlite3_initialize(void){$/;"	f
sqlite3_int64	vendor\sqlite\sqlite3.c	/^typedef sqlite_int64 sqlite3_int64;$/;"	t	file:
sqlite3_interrupt	vendor\sqlite\sqlite3.c	/^SQLITE_API void sqlite3_interrupt(sqlite3 *db){$/;"	f
sqlite3_interrupt	vendor\sqlite\sqlite3.c	101390;"	d	file:
sqlite3_interrupt_count	vendor\sqlite\sqlite3.c	/^SQLITE_API int sqlite3_interrupt_count = 0;$/;"	v
sqlite3_io_error_benign	vendor\sqlite\sqlite3.c	/^SQLITE_API int sqlite3_io_error_benign = 0;         \/* True if errors are benign *\/$/;"	v
sqlite3_io_error_hardhit	vendor\sqlite\sqlite3.c	/^SQLITE_API int sqlite3_io_error_hardhit = 0;        \/* Number of non-benign errors *\/$/;"	v
sqlite3_io_error_hit	vendor\sqlite\sqlite3.c	/^SQLITE_API int sqlite3_io_error_hit = 0;            \/* Total number of I\/O Errors *\/$/;"	v
sqlite3_io_error_pending	vendor\sqlite\sqlite3.c	/^SQLITE_API int sqlite3_io_error_pending = 0;        \/* Count down to first I\/O error *\/$/;"	v
sqlite3_io_error_persist	vendor\sqlite\sqlite3.c	/^SQLITE_API int sqlite3_io_error_persist = 0;        \/* True if I\/O errors persist *\/$/;"	v
sqlite3_io_methods	vendor\sqlite\sqlite3.c	/^struct sqlite3_io_methods {$/;"	s	file:
sqlite3_io_methods	vendor\sqlite\sqlite3.c	/^typedef struct sqlite3_io_methods sqlite3_io_methods;$/;"	t	typeref:struct:sqlite3_io_methods	file:
sqlite3_last_insert_rowid	vendor\sqlite\sqlite3.c	/^SQLITE_API sqlite_int64 sqlite3_last_insert_rowid(sqlite3 *db){$/;"	f
sqlite3_last_insert_rowid	vendor\sqlite\sqlite3.c	101391;"	d	file:
sqlite3_libversion	vendor\sqlite\sqlite3.c	/^SQLITE_API const char *sqlite3_libversion(void){ return sqlite3_version; }$/;"	f
sqlite3_libversion	vendor\sqlite\sqlite3.c	101392;"	d	file:
sqlite3_libversion_number	vendor\sqlite\sqlite3.c	/^SQLITE_API int sqlite3_libversion_number(void){ return SQLITE_VERSION_NUMBER; }$/;"	f
sqlite3_libversion_number	vendor\sqlite\sqlite3.c	101393;"	d	file:
sqlite3_like_count	vendor\sqlite\sqlite3.c	/^SQLITE_API int sqlite3_like_count = 0;$/;"	v
sqlite3_limit	vendor\sqlite\sqlite3.c	/^SQLITE_API int sqlite3_limit(sqlite3 *db, int limitId, int newLimit){$/;"	f
sqlite3_limit	vendor\sqlite\sqlite3.c	101480;"	d	file:
sqlite3_load_extension	vendor\sqlite\sqlite3.c	/^SQLITE_API int sqlite3_load_extension($/;"	f
sqlite3_load_extension	vendor\sqlite\sqlite3.c	101527;"	d	file:
sqlite3_log	vendor\sqlite\sqlite3.c	/^SQLITE_API void sqlite3_log(int iErrCode, const char *zFormat, ...){$/;"	f
sqlite3_log	vendor\sqlite\sqlite3.c	101496;"	d	file:
sqlite3_malloc	vendor\sqlite\sqlite3.c	/^SQLITE_API void *sqlite3_malloc(int n){$/;"	f
sqlite3_malloc	vendor\sqlite\sqlite3.c	101394;"	d	file:
sqlite3_malloc64	vendor\sqlite\sqlite3.c	/^SQLITE_API void *sqlite3_malloc64(sqlite3_uint64 n){$/;"	f
sqlite3_malloc64	vendor\sqlite\sqlite3.c	101528;"	d	file:
sqlite3_max_blobsize	vendor\sqlite\sqlite3.c	/^SQLITE_API int sqlite3_max_blobsize = 0;$/;"	v
sqlite3_mem_methods	vendor\sqlite\sqlite3.c	/^struct sqlite3_mem_methods {$/;"	s	file:
sqlite3_mem_methods	vendor\sqlite\sqlite3.c	/^typedef struct sqlite3_mem_methods sqlite3_mem_methods;$/;"	t	typeref:struct:sqlite3_mem_methods	file:
sqlite3_memdebug_vfs_oom_test	vendor\sqlite\sqlite3.c	/^SQLITE_API int sqlite3_memdebug_vfs_oom_test = 1;$/;"	v
sqlite3_memory_alarm	vendor\sqlite\sqlite3.c	/^SQLITE_API int sqlite3_memory_alarm($/;"	f
sqlite3_memory_highwater	vendor\sqlite\sqlite3.c	/^SQLITE_API sqlite3_int64 sqlite3_memory_highwater(int resetFlag){$/;"	f
sqlite3_memory_highwater	vendor\sqlite\sqlite3.c	101457;"	d	file:
sqlite3_memory_used	vendor\sqlite\sqlite3.c	/^SQLITE_API sqlite3_int64 sqlite3_memory_used(void){$/;"	f
sqlite3_memory_used	vendor\sqlite\sqlite3.c	101458;"	d	file:
sqlite3_module	vendor\sqlite\sqlite3.c	/^struct sqlite3_module {$/;"	s	file:
sqlite3_module	vendor\sqlite\sqlite3.c	/^typedef struct sqlite3_module sqlite3_module;$/;"	t	typeref:struct:sqlite3_module	file:
sqlite3_mprintf	vendor\sqlite\sqlite3.c	/^SQLITE_API char *sqlite3_mprintf(const char *zFormat, ...){$/;"	f
sqlite3_mprintf	vendor\sqlite\sqlite3.c	101395;"	d	file:
sqlite3_msize	vendor\sqlite\sqlite3.c	/^SQLITE_API sqlite3_uint64 sqlite3_msize(void *p){$/;"	f
sqlite3_msize	vendor\sqlite\sqlite3.c	101529;"	d	file:
sqlite3_mutex	vendor\sqlite\sqlite3.c	/^struct sqlite3_mutex {$/;"	s	file:
sqlite3_mutex	vendor\sqlite\sqlite3.c	/^typedef struct sqlite3_mutex sqlite3_mutex;$/;"	t	typeref:struct:sqlite3_mutex	file:
sqlite3_mutex_alloc	vendor\sqlite\sqlite3.c	/^SQLITE_API sqlite3_mutex *sqlite3_mutex_alloc(int id){$/;"	f
sqlite3_mutex_alloc	vendor\sqlite\sqlite3.c	101459;"	d	file:
sqlite3_mutex_alloc	vendor\sqlite\sqlite3.c	10693;"	d	file:
sqlite3_mutex_enter	vendor\sqlite\sqlite3.c	/^SQLITE_API void sqlite3_mutex_enter(sqlite3_mutex *p){$/;"	f
sqlite3_mutex_enter	vendor\sqlite\sqlite3.c	101460;"	d	file:
sqlite3_mutex_enter	vendor\sqlite\sqlite3.c	10695;"	d	file:
sqlite3_mutex_free	vendor\sqlite\sqlite3.c	/^SQLITE_API void sqlite3_mutex_free(sqlite3_mutex *p){$/;"	f
sqlite3_mutex_free	vendor\sqlite\sqlite3.c	101461;"	d	file:
sqlite3_mutex_free	vendor\sqlite\sqlite3.c	10694;"	d	file:
sqlite3_mutex_held	vendor\sqlite\sqlite3.c	/^SQLITE_API int sqlite3_mutex_held(sqlite3_mutex *p){$/;"	f
sqlite3_mutex_held	vendor\sqlite\sqlite3.c	10698;"	d	file:
sqlite3_mutex_leave	vendor\sqlite\sqlite3.c	/^SQLITE_API void sqlite3_mutex_leave(sqlite3_mutex *p){$/;"	f
sqlite3_mutex_leave	vendor\sqlite\sqlite3.c	101462;"	d	file:
sqlite3_mutex_leave	vendor\sqlite\sqlite3.c	10697;"	d	file:
sqlite3_mutex_methods	vendor\sqlite\sqlite3.c	/^struct sqlite3_mutex_methods {$/;"	s	file:
sqlite3_mutex_methods	vendor\sqlite\sqlite3.c	/^typedef struct sqlite3_mutex_methods sqlite3_mutex_methods;$/;"	t	typeref:struct:sqlite3_mutex_methods	file:
sqlite3_mutex_notheld	vendor\sqlite\sqlite3.c	/^SQLITE_API int sqlite3_mutex_notheld(sqlite3_mutex *p){$/;"	f
sqlite3_mutex_notheld	vendor\sqlite\sqlite3.c	10699;"	d	file:
sqlite3_mutex_try	vendor\sqlite\sqlite3.c	/^SQLITE_API int sqlite3_mutex_try(sqlite3_mutex *p){$/;"	f
sqlite3_mutex_try	vendor\sqlite\sqlite3.c	101463;"	d	file:
sqlite3_mutex_try	vendor\sqlite\sqlite3.c	10696;"	d	file:
sqlite3_next_stmt	vendor\sqlite\sqlite3.c	/^SQLITE_API sqlite3_stmt *sqlite3_next_stmt(sqlite3 *pDb, sqlite3_stmt *pStmt){$/;"	f
sqlite3_next_stmt	vendor\sqlite\sqlite3.c	101481;"	d	file:
sqlite3_open	vendor\sqlite\sqlite3.c	/^SQLITE_API int sqlite3_open($/;"	f
sqlite3_open	vendor\sqlite\sqlite3.c	101396;"	d	file:
sqlite3_open16	vendor\sqlite\sqlite3.c	/^SQLITE_API int sqlite3_open16($/;"	f
sqlite3_open16	vendor\sqlite\sqlite3.c	101397;"	d	file:
sqlite3_open16	vendor\sqlite\sqlite3.c	101588;"	d	file:
sqlite3_open_file_count	vendor\sqlite\sqlite3.c	/^SQLITE_API int sqlite3_open_file_count = 0;$/;"	v
sqlite3_open_v2	vendor\sqlite\sqlite3.c	/^SQLITE_API int sqlite3_open_v2($/;"	f
sqlite3_open_v2	vendor\sqlite\sqlite3.c	101464;"	d	file:
sqlite3_opentemp_count	vendor\sqlite\sqlite3.c	/^SQLITE_API int sqlite3_opentemp_count = 0;$/;"	v
sqlite3_os_end	vendor\sqlite\sqlite3.c	/^SQLITE_API int sqlite3_os_end(void){ $/;"	f
sqlite3_os_end	vendor\sqlite\sqlite3.c	/^SQLITE_API int sqlite3_os_end(void){$/;"	f
sqlite3_os_init	vendor\sqlite\sqlite3.c	/^SQLITE_API int sqlite3_os_init(void){ $/;"	f
sqlite3_os_init	vendor\sqlite\sqlite3.c	/^SQLITE_API int sqlite3_os_init(void){$/;"	f
sqlite3_os_type	vendor\sqlite\sqlite3.c	/^SQLITE_API LONG SQLITE_WIN32_VOLATILE sqlite3_os_type = 0;$/;"	v
sqlite3_os_type	vendor\sqlite\sqlite3.c	/^static LONG SQLITE_WIN32_VOLATILE sqlite3_os_type = 0;$/;"	v	file:
sqlite3_overload_function	vendor\sqlite\sqlite3.c	/^SQLITE_API int sqlite3_overload_function($/;"	f
sqlite3_overload_function	vendor\sqlite\sqlite3.c	101445;"	d	file:
sqlite3_pager_readdb_count	vendor\sqlite\sqlite3.c	/^SQLITE_API int sqlite3_pager_readdb_count = 0;    \/* Number of full pages read from DB *\/$/;"	v
sqlite3_pager_writedb_count	vendor\sqlite\sqlite3.c	/^SQLITE_API int sqlite3_pager_writedb_count = 0;   \/* Number of full pages written to DB *\/$/;"	v
sqlite3_pager_writej_count	vendor\sqlite\sqlite3.c	/^SQLITE_API int sqlite3_pager_writej_count = 0;    \/* Number of pages written to journal *\/$/;"	v
sqlite3_pcache	vendor\sqlite\sqlite3.c	/^typedef struct sqlite3_pcache sqlite3_pcache;$/;"	t	typeref:struct:sqlite3_pcache	file:
sqlite3_pcache_methods	vendor\sqlite\sqlite3.c	/^struct sqlite3_pcache_methods {$/;"	s	file:
sqlite3_pcache_methods	vendor\sqlite\sqlite3.c	/^typedef struct sqlite3_pcache_methods sqlite3_pcache_methods;$/;"	t	typeref:struct:sqlite3_pcache_methods	file:
sqlite3_pcache_methods2	vendor\sqlite\sqlite3.c	/^struct sqlite3_pcache_methods2 {$/;"	s	file:
sqlite3_pcache_methods2	vendor\sqlite\sqlite3.c	/^typedef struct sqlite3_pcache_methods2 sqlite3_pcache_methods2;$/;"	t	typeref:struct:sqlite3_pcache_methods2	file:
sqlite3_pcache_page	vendor\sqlite\sqlite3.c	/^struct sqlite3_pcache_page {$/;"	s	file:
sqlite3_pcache_page	vendor\sqlite\sqlite3.c	/^typedef struct sqlite3_pcache_page sqlite3_pcache_page;$/;"	t	typeref:struct:sqlite3_pcache_page	file:
sqlite3_prepare	vendor\sqlite\sqlite3.c	/^SQLITE_API int sqlite3_prepare($/;"	f
sqlite3_prepare	vendor\sqlite\sqlite3.c	101398;"	d	file:
sqlite3_prepare16	vendor\sqlite\sqlite3.c	/^SQLITE_API int sqlite3_prepare16($/;"	f
sqlite3_prepare16	vendor\sqlite\sqlite3.c	101399;"	d	file:
sqlite3_prepare16	vendor\sqlite\sqlite3.c	101589;"	d	file:
sqlite3_prepare16_v2	vendor\sqlite\sqlite3.c	/^SQLITE_API int sqlite3_prepare16_v2($/;"	f
sqlite3_prepare16_v2	vendor\sqlite\sqlite3.c	101401;"	d	file:
sqlite3_prepare16_v2	vendor\sqlite\sqlite3.c	101447;"	d	file:
sqlite3_prepare16_v2	vendor\sqlite\sqlite3.c	101590;"	d	file:
sqlite3_prepare_v2	vendor\sqlite\sqlite3.c	/^SQLITE_API int sqlite3_prepare_v2($/;"	f
sqlite3_prepare_v2	vendor\sqlite\sqlite3.c	101400;"	d	file:
sqlite3_prepare_v2	vendor\sqlite\sqlite3.c	101446;"	d	file:
sqlite3_profile	vendor\sqlite\sqlite3.c	/^SQLITE_API void *sqlite3_profile($/;"	f
sqlite3_profile	vendor\sqlite\sqlite3.c	101402;"	d	file:
sqlite3_profile	vendor\sqlite\sqlite3.c	101630;"	d	file:
sqlite3_progress_handler	vendor\sqlite\sqlite3.c	/^SQLITE_API void sqlite3_progress_handler($/;"	f
sqlite3_progress_handler	vendor\sqlite\sqlite3.c	101403;"	d	file:
sqlite3_progress_handler	vendor\sqlite\sqlite3.c	101614;"	d	file:
sqlite3_randomness	vendor\sqlite\sqlite3.c	/^SQLITE_API void sqlite3_randomness(int N, void *pBuf){$/;"	f
sqlite3_randomness	vendor\sqlite\sqlite3.c	101477;"	d	file:
sqlite3_realloc	vendor\sqlite\sqlite3.c	/^SQLITE_API void *sqlite3_realloc(void *pOld, int n){$/;"	f
sqlite3_realloc	vendor\sqlite\sqlite3.c	101404;"	d	file:
sqlite3_realloc64	vendor\sqlite\sqlite3.c	/^SQLITE_API void *sqlite3_realloc64(void *pOld, sqlite3_uint64 n){$/;"	f
sqlite3_realloc64	vendor\sqlite\sqlite3.c	101530;"	d	file:
sqlite3_release_memory	vendor\sqlite\sqlite3.c	/^SQLITE_API int sqlite3_release_memory(int n){$/;"	f
sqlite3_release_memory	vendor\sqlite\sqlite3.c	101465;"	d	file:
sqlite3_reset	vendor\sqlite\sqlite3.c	/^SQLITE_API int sqlite3_reset(sqlite3_stmt *pStmt){$/;"	f
sqlite3_reset	vendor\sqlite\sqlite3.c	101405;"	d	file:
sqlite3_reset_auto_extension	vendor\sqlite\sqlite3.c	/^SQLITE_API void sqlite3_reset_auto_extension(void){$/;"	f
sqlite3_reset_auto_extension	vendor\sqlite\sqlite3.c	101531;"	d	file:
sqlite3_result_blob	vendor\sqlite\sqlite3.c	/^SQLITE_API void sqlite3_result_blob($/;"	f
sqlite3_result_blob	vendor\sqlite\sqlite3.c	101406;"	d	file:
sqlite3_result_blob64	vendor\sqlite\sqlite3.c	/^SQLITE_API void sqlite3_result_blob64($/;"	f
sqlite3_result_blob64	vendor\sqlite\sqlite3.c	101532;"	d	file:
sqlite3_result_double	vendor\sqlite\sqlite3.c	/^SQLITE_API void sqlite3_result_double(sqlite3_context *pCtx, double rVal){$/;"	f
sqlite3_result_double	vendor\sqlite\sqlite3.c	101407;"	d	file:
sqlite3_result_error	vendor\sqlite\sqlite3.c	/^SQLITE_API void sqlite3_result_error(sqlite3_context *pCtx, const char *z, int n){$/;"	f
sqlite3_result_error	vendor\sqlite\sqlite3.c	101408;"	d	file:
sqlite3_result_error16	vendor\sqlite\sqlite3.c	/^SQLITE_API void sqlite3_result_error16(sqlite3_context *pCtx, const void *z, int n){$/;"	f
sqlite3_result_error16	vendor\sqlite\sqlite3.c	101409;"	d	file:
sqlite3_result_error16	vendor\sqlite\sqlite3.c	101591;"	d	file:
sqlite3_result_error_code	vendor\sqlite\sqlite3.c	/^SQLITE_API void sqlite3_result_error_code(sqlite3_context *pCtx, int errCode){$/;"	f
sqlite3_result_error_code	vendor\sqlite\sqlite3.c	101475;"	d	file:
sqlite3_result_error_nomem	vendor\sqlite\sqlite3.c	/^SQLITE_API void sqlite3_result_error_nomem(sqlite3_context *pCtx){$/;"	f
sqlite3_result_error_nomem	vendor\sqlite\sqlite3.c	101466;"	d	file:
sqlite3_result_error_toobig	vendor\sqlite\sqlite3.c	/^SQLITE_API void sqlite3_result_error_toobig(sqlite3_context *pCtx){$/;"	f
sqlite3_result_error_toobig	vendor\sqlite\sqlite3.c	101467;"	d	file:
sqlite3_result_int	vendor\sqlite\sqlite3.c	/^SQLITE_API void sqlite3_result_int(sqlite3_context *pCtx, int iVal){$/;"	f
sqlite3_result_int	vendor\sqlite\sqlite3.c	101410;"	d	file:
sqlite3_result_int64	vendor\sqlite\sqlite3.c	/^SQLITE_API void sqlite3_result_int64(sqlite3_context *pCtx, i64 iVal){$/;"	f
sqlite3_result_int64	vendor\sqlite\sqlite3.c	101411;"	d	file:
sqlite3_result_null	vendor\sqlite\sqlite3.c	/^SQLITE_API void sqlite3_result_null(sqlite3_context *pCtx){$/;"	f
sqlite3_result_null	vendor\sqlite\sqlite3.c	101412;"	d	file:
sqlite3_result_text	vendor\sqlite\sqlite3.c	/^SQLITE_API void sqlite3_result_text($/;"	f
sqlite3_result_text	vendor\sqlite\sqlite3.c	101413;"	d	file:
sqlite3_result_text16	vendor\sqlite\sqlite3.c	/^SQLITE_API void sqlite3_result_text16($/;"	f
sqlite3_result_text16	vendor\sqlite\sqlite3.c	101414;"	d	file:
sqlite3_result_text16	vendor\sqlite\sqlite3.c	101592;"	d	file:
sqlite3_result_text16be	vendor\sqlite\sqlite3.c	/^SQLITE_API void sqlite3_result_text16be($/;"	f
sqlite3_result_text16be	vendor\sqlite\sqlite3.c	101415;"	d	file:
sqlite3_result_text16be	vendor\sqlite\sqlite3.c	101593;"	d	file:
sqlite3_result_text16le	vendor\sqlite\sqlite3.c	/^SQLITE_API void sqlite3_result_text16le($/;"	f
sqlite3_result_text16le	vendor\sqlite\sqlite3.c	101416;"	d	file:
sqlite3_result_text16le	vendor\sqlite\sqlite3.c	101594;"	d	file:
sqlite3_result_text64	vendor\sqlite\sqlite3.c	/^SQLITE_API void sqlite3_result_text64($/;"	f
sqlite3_result_text64	vendor\sqlite\sqlite3.c	101533;"	d	file:
sqlite3_result_value	vendor\sqlite\sqlite3.c	/^SQLITE_API void sqlite3_result_value(sqlite3_context *pCtx, sqlite3_value *pValue){$/;"	f
sqlite3_result_value	vendor\sqlite\sqlite3.c	101417;"	d	file:
sqlite3_result_zeroblob	vendor\sqlite\sqlite3.c	/^SQLITE_API void sqlite3_result_zeroblob(sqlite3_context *pCtx, int n){$/;"	f
sqlite3_result_zeroblob	vendor\sqlite\sqlite3.c	101474;"	d	file:
sqlite3_rollback_hook	vendor\sqlite\sqlite3.c	/^SQLITE_API void *sqlite3_rollback_hook($/;"	f
sqlite3_rollback_hook	vendor\sqlite\sqlite3.c	101418;"	d	file:
sqlite3_rtree_dbl	vendor\sqlite\sqlite3.c	/^  typedef double sqlite3_rtree_dbl;$/;"	t	file:
sqlite3_rtree_dbl	vendor\sqlite\sqlite3.c	/^  typedef sqlite3_int64 sqlite3_rtree_dbl;$/;"	t	file:
sqlite3_rtree_geometry	vendor\sqlite\sqlite3.c	/^struct sqlite3_rtree_geometry {$/;"	s	file:
sqlite3_rtree_geometry	vendor\sqlite\sqlite3.c	/^typedef struct sqlite3_rtree_geometry sqlite3_rtree_geometry;$/;"	t	typeref:struct:sqlite3_rtree_geometry	file:
sqlite3_rtree_geometry_callback	vendor\sqlite\sqlite3.c	/^SQLITE_API int sqlite3_rtree_geometry_callback($/;"	f
sqlite3_rtree_query_callback	vendor\sqlite\sqlite3.c	/^SQLITE_API int sqlite3_rtree_query_callback($/;"	f
sqlite3_rtree_query_info	vendor\sqlite\sqlite3.c	/^struct sqlite3_rtree_query_info {$/;"	s	file:
sqlite3_rtree_query_info	vendor\sqlite\sqlite3.c	/^typedef struct sqlite3_rtree_query_info sqlite3_rtree_query_info;$/;"	t	typeref:struct:sqlite3_rtree_query_info	file:
sqlite3_search_count	vendor\sqlite\sqlite3.c	/^SQLITE_API int sqlite3_search_count = 0;$/;"	v
sqlite3_set_authorizer	vendor\sqlite\sqlite3.c	/^SQLITE_API int sqlite3_set_authorizer($/;"	f
sqlite3_set_authorizer	vendor\sqlite\sqlite3.c	101419;"	d	file:
sqlite3_set_authorizer	vendor\sqlite\sqlite3.c	101575;"	d	file:
sqlite3_set_auxdata	vendor\sqlite\sqlite3.c	/^SQLITE_API void sqlite3_set_auxdata($/;"	f
sqlite3_set_auxdata	vendor\sqlite\sqlite3.c	101420;"	d	file:
sqlite3_shutdown	vendor\sqlite\sqlite3.c	/^SQLITE_API int sqlite3_shutdown(void){$/;"	f
sqlite3_sleep	vendor\sqlite\sqlite3.c	/^SQLITE_API int sqlite3_sleep(int ms){$/;"	f
sqlite3_sleep	vendor\sqlite\sqlite3.c	101468;"	d	file:
sqlite3_snprintf	vendor\sqlite\sqlite3.c	/^SQLITE_API char *sqlite3_snprintf(int n, char *zBuf, const char *zFormat, ...){$/;"	f
sqlite3_snprintf	vendor\sqlite\sqlite3.c	101421;"	d	file:
sqlite3_soft_heap_limit	vendor\sqlite\sqlite3.c	/^SQLITE_API void sqlite3_soft_heap_limit(int n){$/;"	f
sqlite3_soft_heap_limit	vendor\sqlite\sqlite3.c	101469;"	d	file:
sqlite3_soft_heap_limit64	vendor\sqlite\sqlite3.c	/^SQLITE_API sqlite3_int64 sqlite3_soft_heap_limit64(sqlite3_int64 n){$/;"	f
sqlite3_soft_heap_limit64	vendor\sqlite\sqlite3.c	101497;"	d	file:
sqlite3_sort_count	vendor\sqlite\sqlite3.c	/^SQLITE_API int sqlite3_sort_count = 0;$/;"	v
sqlite3_sourceid	vendor\sqlite\sqlite3.c	/^SQLITE_API const char *sqlite3_sourceid(void){ return SQLITE_SOURCE_ID; }$/;"	f
sqlite3_sourceid	vendor\sqlite\sqlite3.c	101498;"	d	file:
sqlite3_sql	vendor\sqlite\sqlite3.c	/^SQLITE_API const char *sqlite3_sql(sqlite3_stmt *pStmt){$/;"	f
sqlite3_sql	vendor\sqlite\sqlite3.c	101482;"	d	file:
sqlite3_status	vendor\sqlite\sqlite3.c	/^SQLITE_API int sqlite3_status(int op, int *pCurrent, int *pHighwater, int resetFlag){$/;"	f
sqlite3_status	vendor\sqlite\sqlite3.c	101483;"	d	file:
sqlite3_step	vendor\sqlite\sqlite3.c	/^SQLITE_API int sqlite3_step(sqlite3_stmt *pStmt){$/;"	f
sqlite3_step	vendor\sqlite\sqlite3.c	101422;"	d	file:
sqlite3_stmt	vendor\sqlite\sqlite3.c	/^typedef struct sqlite3_stmt sqlite3_stmt;$/;"	t	typeref:struct:sqlite3_stmt	file:
sqlite3_stmt_busy	vendor\sqlite\sqlite3.c	/^SQLITE_API int sqlite3_stmt_busy(sqlite3_stmt *pStmt){$/;"	f
sqlite3_stmt_busy	vendor\sqlite\sqlite3.c	101514;"	d	file:
sqlite3_stmt_readonly	vendor\sqlite\sqlite3.c	/^SQLITE_API int sqlite3_stmt_readonly(sqlite3_stmt *pStmt){$/;"	f
sqlite3_stmt_readonly	vendor\sqlite\sqlite3.c	101515;"	d	file:
sqlite3_stmt_scanstatus	vendor\sqlite\sqlite3.c	/^SQLITE_API int sqlite3_stmt_scanstatus($/;"	f
sqlite3_stmt_scanstatus_reset	vendor\sqlite\sqlite3.c	/^SQLITE_API void sqlite3_stmt_scanstatus_reset(sqlite3_stmt *pStmt){$/;"	f
sqlite3_stmt_status	vendor\sqlite\sqlite3.c	/^SQLITE_API int sqlite3_stmt_status(sqlite3_stmt *pStmt, int op, int resetFlag){$/;"	f
sqlite3_stmt_status	vendor\sqlite\sqlite3.c	101499;"	d	file:
sqlite3_strglob	vendor\sqlite\sqlite3.c	/^SQLITE_API int sqlite3_strglob(const char *zGlobPattern, const char *zString){$/;"	f
sqlite3_strglob	vendor\sqlite\sqlite3.c	101534;"	d	file:
sqlite3_stricmp	vendor\sqlite\sqlite3.c	/^SQLITE_API int sqlite3_stricmp(const char *zLeft, const char *zRight){$/;"	f
sqlite3_stricmp	vendor\sqlite\sqlite3.c	101516;"	d	file:
sqlite3_strnicmp	vendor\sqlite\sqlite3.c	/^SQLITE_API int sqlite3_strnicmp(const char *zLeft, const char *zRight, int N){$/;"	f
sqlite3_strnicmp	vendor\sqlite\sqlite3.c	101500;"	d	file:
sqlite3_sync_count	vendor\sqlite\sqlite3.c	/^SQLITE_API int sqlite3_sync_count = 0;$/;"	v
sqlite3_syscall_ptr	vendor\sqlite\sqlite3.c	/^typedef void (*sqlite3_syscall_ptr)(void);$/;"	t	file:
sqlite3_table_column_metadata	vendor\sqlite\sqlite3.c	/^SQLITE_API int sqlite3_table_column_metadata($/;"	f
sqlite3_table_column_metadata	vendor\sqlite\sqlite3.c	101423;"	d	file:
sqlite3_temp_directory	vendor\sqlite\sqlite3.c	/^SQLITE_API char *sqlite3_temp_directory = 0;$/;"	v
sqlite3_temp_directory	vendor\sqlite\sqlite3.c	/^SQLITE_API char *sqlite3_temp_directory;$/;"	v
sqlite3_test_control	vendor\sqlite\sqlite3.c	/^SQLITE_API int sqlite3_test_control(int op, ...){$/;"	f
sqlite3_test_control	vendor\sqlite\sqlite3.c	101476;"	d	file:
sqlite3_thread_cleanup	vendor\sqlite\sqlite3.c	/^SQLITE_API void sqlite3_thread_cleanup(void){$/;"	f
sqlite3_thread_cleanup	vendor\sqlite\sqlite3.c	101424;"	d	file:
sqlite3_threadsafe	vendor\sqlite\sqlite3.c	/^SQLITE_API int sqlite3_threadsafe(void){ return SQLITE_THREADSAFE; }$/;"	f
sqlite3_threadsafe	vendor\sqlite\sqlite3.c	101473;"	d	file:
sqlite3_tokenizer	vendor\sqlite\sqlite3.c	/^struct sqlite3_tokenizer {$/;"	s	file:
sqlite3_tokenizer	vendor\sqlite\sqlite3.c	/^typedef struct sqlite3_tokenizer sqlite3_tokenizer;$/;"	t	typeref:struct:sqlite3_tokenizer	file:
sqlite3_tokenizer_cursor	vendor\sqlite\sqlite3.c	/^struct sqlite3_tokenizer_cursor {$/;"	s	file:
sqlite3_tokenizer_cursor	vendor\sqlite\sqlite3.c	/^typedef struct sqlite3_tokenizer_cursor sqlite3_tokenizer_cursor;$/;"	t	typeref:struct:sqlite3_tokenizer_cursor	file:
sqlite3_tokenizer_module	vendor\sqlite\sqlite3.c	/^struct sqlite3_tokenizer_module {$/;"	s	file:
sqlite3_tokenizer_module	vendor\sqlite\sqlite3.c	/^typedef struct sqlite3_tokenizer_module sqlite3_tokenizer_module;$/;"	t	typeref:struct:sqlite3_tokenizer_module	file:
sqlite3_total_changes	vendor\sqlite\sqlite3.c	/^SQLITE_API int sqlite3_total_changes(sqlite3 *db){$/;"	f
sqlite3_total_changes	vendor\sqlite\sqlite3.c	101425;"	d	file:
sqlite3_trace	vendor\sqlite\sqlite3.c	/^SQLITE_API void *sqlite3_trace(sqlite3 *db, void (*xTrace)(void*,const char*), void *pArg){$/;"	f
sqlite3_trace	vendor\sqlite\sqlite3.c	101426;"	d	file:
sqlite3_trace	vendor\sqlite\sqlite3.c	101631;"	d	file:
sqlite3_transfer_bindings	vendor\sqlite\sqlite3.c	/^SQLITE_API int sqlite3_transfer_bindings(sqlite3_stmt *pFromStmt, sqlite3_stmt *pToStmt){$/;"	f
sqlite3_transfer_bindings	vendor\sqlite\sqlite3.c	101428;"	d	file:
sqlite3_uint64	vendor\sqlite\sqlite3.c	/^typedef sqlite_uint64 sqlite3_uint64;$/;"	t	file:
sqlite3_unlock_notify	vendor\sqlite\sqlite3.c	/^SQLITE_API int sqlite3_unlock_notify($/;"	f
sqlite3_unlock_notify	vendor\sqlite\sqlite3.c	101501;"	d	file:
sqlite3_update_hook	vendor\sqlite\sqlite3.c	/^SQLITE_API void *sqlite3_update_hook($/;"	f
sqlite3_update_hook	vendor\sqlite\sqlite3.c	101430;"	d	file:
sqlite3_uri_boolean	vendor\sqlite\sqlite3.c	/^SQLITE_API int sqlite3_uri_boolean(const char *zFilename, const char *zParam, int bDflt){$/;"	f
sqlite3_uri_boolean	vendor\sqlite\sqlite3.c	101517;"	d	file:
sqlite3_uri_int64	vendor\sqlite\sqlite3.c	/^SQLITE_API sqlite3_int64 sqlite3_uri_int64($/;"	f
sqlite3_uri_int64	vendor\sqlite\sqlite3.c	101518;"	d	file:
sqlite3_uri_parameter	vendor\sqlite\sqlite3.c	/^SQLITE_API const char *sqlite3_uri_parameter(const char *zFilename, const char *zParam){$/;"	f
sqlite3_uri_parameter	vendor\sqlite\sqlite3.c	101519;"	d	file:
sqlite3_uri_vsnprintf	vendor\sqlite\sqlite3.c	101520;"	d	file:
sqlite3_user_data	vendor\sqlite\sqlite3.c	/^SQLITE_API void *sqlite3_user_data(sqlite3_context *p){$/;"	f
sqlite3_user_data	vendor\sqlite\sqlite3.c	101431;"	d	file:
sqlite3_userauth	vendor\sqlite\sqlite3.c	/^struct sqlite3_userauth {$/;"	s	file:
sqlite3_userauth	vendor\sqlite\sqlite3.c	/^typedef struct sqlite3_userauth sqlite3_userauth;$/;"	t	typeref:struct:sqlite3_userauth	file:
sqlite3_value	vendor\sqlite\sqlite3.c	/^typedef struct Mem sqlite3_value;$/;"	t	typeref:struct:Mem	file:
sqlite3_value_blob	vendor\sqlite\sqlite3.c	/^SQLITE_API const void *sqlite3_value_blob(sqlite3_value *pVal){$/;"	f
sqlite3_value_blob	vendor\sqlite\sqlite3.c	101432;"	d	file:
sqlite3_value_bytes	vendor\sqlite\sqlite3.c	/^SQLITE_API int sqlite3_value_bytes(sqlite3_value *pVal){$/;"	f
sqlite3_value_bytes	vendor\sqlite\sqlite3.c	101433;"	d	file:
sqlite3_value_bytes16	vendor\sqlite\sqlite3.c	/^SQLITE_API int sqlite3_value_bytes16(sqlite3_value *pVal){$/;"	f
sqlite3_value_bytes16	vendor\sqlite\sqlite3.c	101434;"	d	file:
sqlite3_value_double	vendor\sqlite\sqlite3.c	/^SQLITE_API double sqlite3_value_double(sqlite3_value *pVal){$/;"	f
sqlite3_value_double	vendor\sqlite\sqlite3.c	101435;"	d	file:
sqlite3_value_int	vendor\sqlite\sqlite3.c	/^SQLITE_API int sqlite3_value_int(sqlite3_value *pVal){$/;"	f
sqlite3_value_int	vendor\sqlite\sqlite3.c	101436;"	d	file:
sqlite3_value_int64	vendor\sqlite\sqlite3.c	/^SQLITE_API sqlite_int64 sqlite3_value_int64(sqlite3_value *pVal){$/;"	f
sqlite3_value_int64	vendor\sqlite\sqlite3.c	101437;"	d	file:
sqlite3_value_numeric_type	vendor\sqlite\sqlite3.c	/^SQLITE_API int sqlite3_value_numeric_type(sqlite3_value *pVal){$/;"	f
sqlite3_value_numeric_type	vendor\sqlite\sqlite3.c	101438;"	d	file:
sqlite3_value_text	vendor\sqlite\sqlite3.c	/^SQLITE_API const unsigned char *sqlite3_value_text(sqlite3_value *pVal){$/;"	f
sqlite3_value_text	vendor\sqlite\sqlite3.c	101439;"	d	file:
sqlite3_value_text16	vendor\sqlite\sqlite3.c	/^SQLITE_API const void *sqlite3_value_text16(sqlite3_value* pVal){$/;"	f
sqlite3_value_text16	vendor\sqlite\sqlite3.c	101440;"	d	file:
sqlite3_value_text16	vendor\sqlite\sqlite3.c	101595;"	d	file:
sqlite3_value_text16be	vendor\sqlite\sqlite3.c	/^SQLITE_API const void *sqlite3_value_text16be(sqlite3_value *pVal){$/;"	f
sqlite3_value_text16be	vendor\sqlite\sqlite3.c	101441;"	d	file:
sqlite3_value_text16be	vendor\sqlite\sqlite3.c	101596;"	d	file:
sqlite3_value_text16le	vendor\sqlite\sqlite3.c	/^SQLITE_API const void *sqlite3_value_text16le(sqlite3_value *pVal){$/;"	f
sqlite3_value_text16le	vendor\sqlite\sqlite3.c	101442;"	d	file:
sqlite3_value_text16le	vendor\sqlite\sqlite3.c	101597;"	d	file:
sqlite3_value_type	vendor\sqlite\sqlite3.c	/^SQLITE_API int sqlite3_value_type(sqlite3_value* pVal){$/;"	f
sqlite3_value_type	vendor\sqlite\sqlite3.c	101443;"	d	file:
sqlite3_version	vendor\sqlite\sqlite3.c	/^SQLITE_API const char sqlite3_version[] = SQLITE_VERSION;$/;"	v
sqlite3_vfs	vendor\sqlite\sqlite3.c	/^struct sqlite3_vfs {$/;"	s	file:
sqlite3_vfs	vendor\sqlite\sqlite3.c	/^typedef struct sqlite3_vfs sqlite3_vfs;$/;"	t	typeref:struct:sqlite3_vfs	file:
sqlite3_vfs_find	vendor\sqlite\sqlite3.c	/^SQLITE_API sqlite3_vfs *sqlite3_vfs_find(const char *zVfs){$/;"	f
sqlite3_vfs_find	vendor\sqlite\sqlite3.c	101470;"	d	file:
sqlite3_vfs_register	vendor\sqlite\sqlite3.c	/^SQLITE_API int sqlite3_vfs_register(sqlite3_vfs *pVfs, int makeDflt){$/;"	f
sqlite3_vfs_register	vendor\sqlite\sqlite3.c	101471;"	d	file:
sqlite3_vfs_unregister	vendor\sqlite\sqlite3.c	/^SQLITE_API int sqlite3_vfs_unregister(sqlite3_vfs *pVfs){$/;"	f
sqlite3_vfs_unregister	vendor\sqlite\sqlite3.c	101472;"	d	file:
sqlite3_vmprintf	vendor\sqlite\sqlite3.c	/^SQLITE_API char *sqlite3_vmprintf(const char *zFormat, va_list ap){$/;"	f
sqlite3_vmprintf	vendor\sqlite\sqlite3.c	101444;"	d	file:
sqlite3_vsnprintf	vendor\sqlite\sqlite3.c	/^SQLITE_API char *sqlite3_vsnprintf(int n, char *zBuf, const char *zFormat, va_list ap){$/;"	f
sqlite3_vtab	vendor\sqlite\sqlite3.c	/^struct sqlite3_vtab {$/;"	s	file:
sqlite3_vtab	vendor\sqlite\sqlite3.c	/^typedef struct sqlite3_vtab sqlite3_vtab;$/;"	t	typeref:struct:sqlite3_vtab	file:
sqlite3_vtab_config	vendor\sqlite\sqlite3.c	/^SQLITE_API int sqlite3_vtab_config(sqlite3 *db, int op, ...){$/;"	f
sqlite3_vtab_config	vendor\sqlite\sqlite3.c	101506;"	d	file:
sqlite3_vtab_config	vendor\sqlite\sqlite3.c	101621;"	d	file:
sqlite3_vtab_cursor	vendor\sqlite\sqlite3.c	/^struct sqlite3_vtab_cursor {$/;"	s	file:
sqlite3_vtab_cursor	vendor\sqlite\sqlite3.c	/^typedef struct sqlite3_vtab_cursor sqlite3_vtab_cursor;$/;"	t	typeref:struct:sqlite3_vtab_cursor	file:
sqlite3_vtab_on_conflict	vendor\sqlite\sqlite3.c	/^SQLITE_API int sqlite3_vtab_on_conflict(sqlite3 *db){$/;"	f
sqlite3_vtab_on_conflict	vendor\sqlite\sqlite3.c	101507;"	d	file:
sqlite3_vtab_on_conflict	vendor\sqlite\sqlite3.c	101622;"	d	file:
sqlite3_wal_autocheckpoint	vendor\sqlite\sqlite3.c	/^SQLITE_API int sqlite3_wal_autocheckpoint(sqlite3 *db, int nFrame){$/;"	f
sqlite3_wal_autocheckpoint	vendor\sqlite\sqlite3.c	101502;"	d	file:
sqlite3_wal_checkpoint	vendor\sqlite\sqlite3.c	/^SQLITE_API int sqlite3_wal_checkpoint(sqlite3 *db, const char *zDb){$/;"	f
sqlite3_wal_checkpoint	vendor\sqlite\sqlite3.c	101503;"	d	file:
sqlite3_wal_checkpoint_v2	vendor\sqlite\sqlite3.c	/^SQLITE_API int sqlite3_wal_checkpoint_v2($/;"	f
sqlite3_wal_checkpoint_v2	vendor\sqlite\sqlite3.c	101521;"	d	file:
sqlite3_wal_hook	vendor\sqlite\sqlite3.c	/^SQLITE_API void *sqlite3_wal_hook($/;"	f
sqlite3_wal_hook	vendor\sqlite\sqlite3.c	101504;"	d	file:
sqlite3_win32_compact_heap	vendor\sqlite\sqlite3.c	/^SQLITE_API int sqlite3_win32_compact_heap(LPUINT pnLargest){$/;"	f
sqlite3_win32_is_nt	vendor\sqlite\sqlite3.c	/^SQLITE_API int sqlite3_win32_is_nt(void){$/;"	f
sqlite3_win32_mbcs_to_utf8	vendor\sqlite\sqlite3.c	/^SQLITE_API char *sqlite3_win32_mbcs_to_utf8(const char *zFilename){$/;"	f
sqlite3_win32_reset_heap	vendor\sqlite\sqlite3.c	/^SQLITE_API int sqlite3_win32_reset_heap(){$/;"	f
sqlite3_win32_set_directory	vendor\sqlite\sqlite3.c	/^SQLITE_API int sqlite3_win32_set_directory(DWORD type, LPCWSTR zValue){$/;"	f
sqlite3_win32_sleep	vendor\sqlite\sqlite3.c	/^SQLITE_API void sqlite3_win32_sleep(DWORD milliseconds){$/;"	f
sqlite3_win32_utf8_to_mbcs	vendor\sqlite\sqlite3.c	/^SQLITE_API char *sqlite3_win32_utf8_to_mbcs(const char *zFilename){$/;"	f
sqlite3_win32_write_debug	vendor\sqlite\sqlite3.c	/^SQLITE_API void sqlite3_win32_write_debug(const char *zBuf, int nBuf){$/;"	f
sqlite3_xauth	vendor\sqlite\sqlite3.c	/^  typedef int (*sqlite3_xauth)(void*,int,const char*,const char*,const char*,$/;"	t	file:
sqlite3_xferopt_count	vendor\sqlite\sqlite3.c	/^SQLITE_API int sqlite3_xferopt_count;$/;"	v
sqlite3one	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE const int sqlite3one = 1;$/;"	v
sqlite3one	vendor\sqlite\sqlite3.c	/^SQLITE_PRIVATE const int sqlite3one;$/;"	v
sqliteAuthBadReturnCode	vendor\sqlite\sqlite3.c	/^static void sqliteAuthBadReturnCode(Parse *pParse){$/;"	f	file:
sqliteDefaultBusyCallback	vendor\sqlite\sqlite3.c	/^static int sqliteDefaultBusyCallback($/;"	f	file:
sqliteDeleteColumnNames	vendor\sqlite\sqlite3.c	/^static void sqliteDeleteColumnNames(sqlite3 *db, Table *pTable){$/;"	f	file:
sqliteErrorFromPosixError	vendor\sqlite\sqlite3.c	/^static int sqliteErrorFromPosixError(int posixError, int sqliteIOErr) {$/;"	f	file:
sqliteHashData	vendor\sqlite\sqlite3.c	8526;"	d	file:
sqliteHashFirst	vendor\sqlite\sqlite3.c	8524;"	d	file:
sqliteHashNext	vendor\sqlite\sqlite3.c	8525;"	d	file:
sqliteProcessJoin	vendor\sqlite\sqlite3.c	/^static int sqliteProcessJoin(Parse *pParse, Select *p){$/;"	f	file:
sqliteViewResetAll	vendor\sqlite\sqlite3.c	/^static void sqliteViewResetAll(sqlite3 *db, int idx){$/;"	f	file:
sqliteViewResetAll	vendor\sqlite\sqlite3.c	92232;"	d	file:
sqlite_int64	vendor\sqlite\sqlite3.c	/^  typedef SQLITE_INT64_TYPE sqlite_int64;$/;"	t	file:
sqlite_int64	vendor\sqlite\sqlite3.c	/^  typedef __int64 sqlite_int64;$/;"	t	file:
sqlite_int64	vendor\sqlite\sqlite3.c	/^  typedef long long int sqlite_int64;$/;"	t	file:
sqlite_uint64	vendor\sqlite\sqlite3.c	/^  typedef unsigned SQLITE_INT64_TYPE sqlite_uint64;$/;"	t	file:
sqlite_uint64	vendor\sqlite\sqlite3.c	/^  typedef unsigned __int64 sqlite_uint64;$/;"	t	file:
sqlite_uint64	vendor\sqlite\sqlite3.c	/^  typedef unsigned long long int sqlite_uint64;$/;"	t	file:
star_oh	vendor\sqlite\sqlite3.c	/^static int star_oh(const char *z){$/;"	f	file:
startEndFlag	vendor\sqlite\sqlite3.c	/^  unsigned char startEndFlag;       \/* 1=rel to end of fork, 0=rel to start *\/$/;"	m	struct:ByteRangeLockPB2	file:
startTime	vendor\sqlite\sqlite3.c	/^  i64 startTime;          \/* Time when query started - used for profiling *\/$/;"	m	struct:Vdbe	file:
stat4Destructor	vendor\sqlite\sqlite3.c	/^static void stat4Destructor(void *pOld){$/;"	f	file:
stat4ValueFromExpr	vendor\sqlite\sqlite3.c	/^static int stat4ValueFromExpr($/;"	f	file:
statGet	vendor\sqlite\sqlite3.c	/^static void statGet($/;"	f	file:
statGetFuncdef	vendor\sqlite\sqlite3.c	/^static const FuncDef statGetFuncdef = {$/;"	v	file:
statInit	vendor\sqlite\sqlite3.c	/^static void statInit($/;"	f	file:
statInitFuncdef	vendor\sqlite\sqlite3.c	/^static const FuncDef statInitFuncdef = {$/;"	v	file:
statPush	vendor\sqlite\sqlite3.c	/^static void statPush($/;"	f	file:
statPushFuncdef	vendor\sqlite\sqlite3.c	/^static const FuncDef statPushFuncdef = {$/;"	v	file:
stateno	vendor\sqlite\sqlite3.c	/^  YYACTIONTYPE stateno;  \/* The state-number *\/$/;"	m	struct:yyStackEntry	file:
status	vendor\sqlite\sqlite3.c	/^  int (*status)(int,int*,int*,int);$/;"	m	struct:sqlite3_api_routines	file:
stem	vendor\sqlite\sqlite3.c	/^static int stem($/;"	f	file:
step	vendor\sqlite\sqlite3.c	/^  int  (*step)(sqlite3_stmt*);$/;"	m	struct:sqlite3_api_routines	file:
step_list	vendor\sqlite\sqlite3.c	/^  TriggerStep *step_list; \/* Link list of trigger program steps             *\/$/;"	m	struct:Trigger	file:
stmt_busy	vendor\sqlite\sqlite3.c	/^  int (*stmt_busy)(sqlite3_stmt*);$/;"	m	struct:sqlite3_api_routines	file:
stmt_readonly	vendor\sqlite\sqlite3.c	/^  int (*stmt_readonly)(sqlite3_stmt*);$/;"	m	struct:sqlite3_api_routines	file:
stmt_status	vendor\sqlite\sqlite3.c	/^  int (*stmt_status)(sqlite3_stmt*,int,int);$/;"	m	struct:sqlite3_api_routines	file:
storeLastErrno	vendor\sqlite\sqlite3.c	/^static void storeLastErrno(unixFile *pFile, int error){$/;"	f	file:
str	vendor\sqlite\sqlite3.c	/^  StrAccum str;      \/* The string being accumulated *\/$/;"	m	struct:Explain	file:
strHash	vendor\sqlite\sqlite3.c	/^static unsigned int strHash(const char *z){$/;"	f	file:
strftimeFunc	vendor\sqlite\sqlite3.c	/^static void strftimeFunc($/;"	f	file:
strglob	vendor\sqlite\sqlite3.c	/^  int (*strglob)(const char*,const char*);$/;"	m	struct:sqlite3_api_routines	file:
stricmp	vendor\sqlite\sqlite3.c	/^  int (*stricmp)(const char*,const char*);$/;"	m	struct:sqlite3_api_routines	file:
strnicmp	vendor\sqlite\sqlite3.c	/^  int (*strnicmp)(const char*,const char*,int);$/;"	m	struct:sqlite3_api_routines	file:
subjInMemory	vendor\sqlite\sqlite3.c	/^  u8 subjInMemory;            \/* True to use in-memory sub-journals *\/$/;"	m	struct:Pager	file:
subjRequiresPage	vendor\sqlite\sqlite3.c	/^static int subjRequiresPage(PgHdr *pPg){$/;"	f	file:
subjournalPage	vendor\sqlite\sqlite3.c	/^static int subjournalPage(PgHdr *pPg){$/;"	f	file:
substExpr	vendor\sqlite\sqlite3.c	/^static Expr *substExpr($/;"	f	file:
substExprList	vendor\sqlite\sqlite3.c	/^static void substExprList($/;"	f	file:
substSelect	vendor\sqlite\sqlite3.c	/^static void substSelect($/;"	f	file:
substrFunc	vendor\sqlite\sqlite3.c	/^static void substrFunc($/;"	f	file:
sumFinalize	vendor\sqlite\sqlite3.c	/^static void sumFinalize(sqlite3_context *context){$/;"	f	file:
sumStep	vendor\sqlite\sqlite3.c	/^static void sumStep(sqlite3_context *context, int argc, sqlite3_value **argv){$/;"	f	file:
suppressErr	vendor\sqlite\sqlite3.c	/^  u8 suppressErr;               \/* Do not issue error messages if true *\/$/;"	m	struct:sqlite3	file:
swapMixedEndianFloat	vendor\sqlite\sqlite3.c	67284;"	d	file:
swapMixedEndianFloat	vendor\sqlite\sqlite3.c	67286;"	d	file:
switchLockProxyPath	vendor\sqlite\sqlite3.c	/^static int switchLockProxyPath(unixFile *pFile, const char *path) {$/;"	f	file:
syncFlags	vendor\sqlite\sqlite3.c	/^  int syncFlags;               \/* Flags for the fsync *\/$/;"	m	struct:WalWriter	file:
syncFlags	vendor\sqlite\sqlite3.c	/^  u8 syncFlags;               \/* SYNC_NORMAL or SYNC_FULL otherwise *\/$/;"	m	struct:Pager	file:
syncFlags	vendor\sqlite\sqlite3.c	/^  u8 syncFlags;              \/* Flags to use to sync header writes *\/$/;"	m	struct:Wal	file:
syncHeader	vendor\sqlite\sqlite3.c	/^  u8 syncHeader;             \/* Fsync the WAL header if true *\/$/;"	m	struct:Wal	file:
syncJournal	vendor\sqlite\sqlite3.c	/^static int syncJournal(Pager *pPager, int newHdr){$/;"	f	file:
synthCollSeq	vendor\sqlite\sqlite3.c	/^static int synthCollSeq(sqlite3 *db, CollSeq *pColl){$/;"	f	file:
sz	vendor\sqlite\sqlite3.c	/^  u16 sz;                 \/* Size of each buffer in bytes *\/$/;"	m	struct:Lookaside	file:
szAtom	vendor\sqlite\sqlite3.c	/^  int szAtom;      \/* Smallest possible allocation in bytes *\/$/;"	m	struct:Mem5Global	file:
szCache	vendor\sqlite\sqlite3.c	/^  int szCache;                        \/* Configured cache size *\/$/;"	m	struct:PCache	file:
szChunk	vendor\sqlite\sqlite3.c	/^  int szChunk;                        \/* Configured by FCNTL_CHUNK_SIZE *\/$/;"	m	struct:unixFile	file:
szChunk	vendor\sqlite\sqlite3.c	/^  int szChunk;            \/* Chunk size configured by FCNTL_CHUNK_SIZE *\/$/;"	m	struct:winFile	file:
szEst	vendor\sqlite\sqlite3.c	/^  u8 szEst;        \/* Estimated size of this column.  INT==1 *\/$/;"	m	struct:Column	file:
szExtra	vendor\sqlite\sqlite3.c	/^  int szExtra;                        \/* Size of extra space for each page *\/$/;"	m	struct:PCache	file:
szExtra	vendor\sqlite\sqlite3.c	/^  int szExtra;                        \/* Size of extra space in bytes *\/$/;"	m	struct:PCache1	file:
szFirstBlock	vendor\sqlite\sqlite3.c	/^  int szFirstBlock;          \/* Size of first block written to WAL file *\/$/;"	m	struct:Wal	file:
szIdxRow	vendor\sqlite\sqlite3.c	/^  LogEst szIdxRow;         \/* Estimated average row size in bytes *\/$/;"	m	struct:Index	file:
szLookaside	vendor\sqlite\sqlite3.c	/^  int szLookaside;                  \/* Default lookaside buffer size *\/$/;"	m	struct:Sqlite3Config	file:
szMalloc	vendor\sqlite\sqlite3.c	/^  int szMalloc;       \/* Size of the zMalloc allocation *\/$/;"	m	struct:Mem	file:
szMaster	vendor\sqlite\sqlite3.c	/^  u32 szMaster;$/;"	m	struct:Mem3Global	file:
szMmap	vendor\sqlite\sqlite3.c	/^  i64 szMmap;                   \/* Default mmap_size setting *\/$/;"	m	struct:sqlite3	file:
szMmap	vendor\sqlite\sqlite3.c	/^  sqlite3_int64 szMmap;             \/* mmap() space per open file *\/$/;"	m	struct:Sqlite3Config	file:
szMmap	vendor\sqlite\sqlite3.c	/^  sqlite3_int64 szMmap;       \/* Desired maximum mmap size *\/$/;"	m	struct:Pager	file:
szOsFile	vendor\sqlite\sqlite3.c	/^  int szOsFile;            \/* Size of subclassed sqlite3_file *\/$/;"	m	struct:sqlite3_vfs	file:
szPMA	vendor\sqlite\sqlite3.c	/^  int szPMA;                      \/* Size of pList as PMA in bytes *\/$/;"	m	struct:SorterList	file:
szPage	vendor\sqlite\sqlite3.c	/^  int szPage;                         \/* Size of allocated pages in bytes *\/$/;"	m	struct:PCache1	file:
szPage	vendor\sqlite\sqlite3.c	/^  int szPage;                         \/* Size of every page in this cache *\/$/;"	m	struct:PCache	file:
szPage	vendor\sqlite\sqlite3.c	/^  int szPage;                       \/* Size of each page in pPage[] *\/$/;"	m	struct:Sqlite3Config	file:
szPage	vendor\sqlite\sqlite3.c	/^  int szPage;                  \/* Size of one page *\/$/;"	m	struct:WalWriter	file:
szPage	vendor\sqlite\sqlite3.c	/^  u16 szPage;                     \/* Database page size in bytes. 1==64K *\/$/;"	m	struct:WalIndexHdr	file:
szPage	vendor\sqlite\sqlite3.c	/^  u32 szPage;                \/* Database page size *\/$/;"	m	struct:Wal	file:
szPma	vendor\sqlite\sqlite3.c	/^  u32 szPma;                        \/* Maximum Sorter PMA size *\/$/;"	m	struct:Sqlite3Config	file:
szRegion	vendor\sqlite\sqlite3.c	/^  int szRegion;              \/* Size of shared-memory regions *\/$/;"	m	struct:unixShmNode	file:
szRegion	vendor\sqlite\sqlite3.c	/^  int szRegion;              \/* Size of shared-memory regions *\/$/;"	m	struct:winShmNode	file:
szRow	vendor\sqlite\sqlite3.c	/^  u32 szRow;            \/* Byte available in aRow *\/$/;"	m	struct:VdbeCursor	file:
szScratch	vendor\sqlite\sqlite3.c	/^  int szScratch;                    \/* Size of each scratch buffer *\/$/;"	m	struct:Sqlite3Config	file:
szSlot	vendor\sqlite\sqlite3.c	/^  int szSlot;                    \/* Size of each free slot *\/$/;"	m	struct:PCacheGlobal	file:
szTabRow	vendor\sqlite\sqlite3.c	/^  LogEst szTabRow;     \/* Estimated size of each table row in bytes *\/$/;"	m	struct:Table	file:
tRowcnt	vendor\sqlite\sqlite3.c	/^ typedef u32 tRowcnt;    \/* 32-bit is the default *\/$/;"	t	file:
tRowcnt	vendor\sqlite\sqlite3.c	/^ typedef u64 tRowcnt;    \/* 64-bit only if requested at compile-time *\/$/;"	t	file:
tabFlags	vendor\sqlite\sqlite3.c	/^  u8 tabFlags;         \/* Mask of TF_* values *\/$/;"	m	struct:Table	file:
tabTnct	vendor\sqlite\sqlite3.c	/^  int tabTnct;    \/* Ephemeral table used for DISTINCT processing *\/$/;"	m	struct:DistinctCtx	file:
table	vendor\sqlite\sqlite3.c	/^  char *table;            \/* The table or view to which the trigger applies *\/$/;"	m	struct:Trigger	file:
tableAndColumnIndex	vendor\sqlite\sqlite3.c	/^static int tableAndColumnIndex($/;"	f	file:
tableOfTrigger	vendor\sqlite\sqlite3.c	/^static Table *tableOfTrigger(Trigger *pTrigger){$/;"	f	file:
table_column_metadata	vendor\sqlite\sqlite3.c	/^  int  (*table_column_metadata)(sqlite3*,const char*,const char*,const char*,$/;"	m	struct:sqlite3_api_routines	file:
target	vendor\sqlite\sqlite3.c	/^  Token target;        \/* Target table for DELETE, UPDATE, INSERT *\/$/;"	m	struct:TriggerStep	file:
targetSrcList	vendor\sqlite\sqlite3.c	/^static SrcList *targetSrcList($/;"	f	file:
tblHash	vendor\sqlite\sqlite3.c	/^  Hash tblHash;        \/* All tables indexed by name *\/$/;"	m	struct:Schema	file:
tempFile	vendor\sqlite\sqlite3.c	/^  u8 tempFile;                \/* zFilename is a temporary or immutable file *\/$/;"	m	struct:Pager	file:
tempReg	vendor\sqlite\sqlite3.c	/^    u8 tempReg;           \/* iReg is a temp register that needs to be freed *\/$/;"	m	struct:Parse::yColCache	file:
temp_store	vendor\sqlite\sqlite3.c	/^  u8 temp_store;                \/* 1: file 2: memory 0: default *\/$/;"	m	struct:sqlite3	file:
term	vendor\sqlite\sqlite3.c	/^  Blob term;                      \/* Current term *\/$/;"	m	struct:NodeReader	file:
termCanDriveIndex	vendor\sqlite\sqlite3.c	/^static int termCanDriveIndex($/;"	f	file:
testFunc	vendor\sqlite\sqlite3.c	/^static void testFunc($/;"	f	file:
test_addop_breakpoint	vendor\sqlite\sqlite3.c	/^static void test_addop_breakpoint(void){$/;"	f	file:
test_control	vendor\sqlite\sqlite3.c	/^  int (*test_control)(int, ...);$/;"	m	struct:sqlite3_api_routines	file:
test_fts3_node_chunk_threshold	vendor\sqlite\sqlite3.c	/^int test_fts3_node_chunk_threshold = (4*1024)*4;$/;"	v
test_fts3_node_chunksize	vendor\sqlite\sqlite3.c	/^int test_fts3_node_chunksize = (4*1024);$/;"	v
testcase	vendor\sqlite\sqlite3.c	131663;"	d	file:
testcase	vendor\sqlite\sqlite3.c	8365;"	d	file:
testcase	vendor\sqlite\sqlite3.c	8367;"	d	file:
thread_cleanup	vendor\sqlite\sqlite3.c	/^  void  (*thread_cleanup)(void);$/;"	m	struct:sqlite3_api_routines	file:
threadid	vendor\sqlite\sqlite3.c	25528;"	d	file:
threadid	vendor\sqlite\sqlite3.c	25530;"	d	file:
tid	vendor\sqlite\sqlite3.c	/^  pthread_t tid;                 \/* Thread ID *\/$/;"	m	struct:SQLiteThread	file:
tid	vendor\sqlite\sqlite3.c	/^  void *tid;               \/* The thread handle *\/$/;"	m	struct:SQLiteThread	file:
timeFunc	vendor\sqlite\sqlite3.c	/^static void timeFunc($/;"	f	file:
tkCREATE	vendor\sqlite\sqlite3.c	126551;"	d	file:
tkEND	vendor\sqlite\sqlite3.c	126554;"	d	file:
tkEXPLAIN	vendor\sqlite\sqlite3.c	126550;"	d	file:
tkOTHER	vendor\sqlite\sqlite3.c	126548;"	d	file:
tkSEMI	vendor\sqlite\sqlite3.c	126546;"	d	file:
tkTEMP	vendor\sqlite\sqlite3.c	126552;"	d	file:
tkTRIGGER	vendor\sqlite\sqlite3.c	126553;"	d	file:
tkWS	vendor\sqlite\sqlite3.c	126547;"	d	file:
tmask	vendor\sqlite\sqlite3.c	99885;"	d	file:
tnum	vendor\sqlite\sqlite3.c	/^  int tnum;                \/* DB Page containing root of this index *\/$/;"	m	struct:Index	file:
tnum	vendor\sqlite\sqlite3.c	/^  int tnum;            \/* Root BTree node for this table (see note above) *\/$/;"	m	struct:Table	file:
token	vendor\sqlite\sqlite3.c	/^  void *token;                  \/* id that may be used to recursive triggers *\/$/;"	m	struct:SubProgram	file:
token	vendor\sqlite\sqlite3.c	/^  void *token;            \/* Copy of SubProgram.token *\/$/;"	m	struct:VdbeFrame	file:
totalAlloc	vendor\sqlite\sqlite3.c	/^  u64 totalAlloc;     \/* Total of all malloc calls - includes internal frag *\/$/;"	m	struct:Mem5Global	file:
totalExcess	vendor\sqlite\sqlite3.c	/^  u64 totalExcess;    \/* Total internal fragmentation *\/$/;"	m	struct:Mem5Global	file:
totalFinalize	vendor\sqlite\sqlite3.c	/^static void totalFinalize(sqlite3_context *context){$/;"	f	file:
total_changes	vendor\sqlite\sqlite3.c	/^  int  (*total_changes)(sqlite3*);$/;"	m	struct:sqlite3_api_routines	file:
total_changes	vendor\sqlite\sqlite3.c	/^static void total_changes($/;"	f	file:
tr_tm	vendor\sqlite\sqlite3.c	/^  u8 tr_tm;               \/* One of TRIGGER_BEFORE, TRIGGER_AFTER *\/$/;"	m	struct:Trigger	file:
trace	vendor\sqlite\sqlite3.c	/^  int trace;                 \/* True to trace changes *\/$/;"	m	struct:sqlite3_mutex	file:
trace	vendor\sqlite\sqlite3.c	/^  void * (*trace)(sqlite3*,void(*xTrace)(void*,const char*),void*);$/;"	m	struct:sqlite3_api_routines	file:
trace	vendor\sqlite\sqlite3.c	/^  volatile int trace;        \/* True to trace changes *\/$/;"	m	struct:sqlite3_mutex	file:
transCntrChng	vendor\sqlite\sqlite3.c	/^  unsigned char transCntrChng;   \/* True if the transaction counter changed *\/$/;"	m	struct:unixFile	file:
transferJoinMarkings	vendor\sqlite\sqlite3.c	/^static void transferJoinMarkings(Expr *pDerived, Expr *pBase){$/;"	f	file:
transferParseError	vendor\sqlite\sqlite3.c	/^static void transferParseError(Parse *pTo, Parse *pFrom){$/;"	f	file:
transfer_bindings	vendor\sqlite\sqlite3.c	/^  int  (*transfer_bindings)(sqlite3_stmt*,sqlite3_stmt*);$/;"	m	struct:sqlite3_api_routines	file:
translateP	vendor\sqlite\sqlite3.c	/^static int translateP(char c, const Op *pOp){$/;"	f	file:
trigHash	vendor\sqlite\sqlite3.c	/^  Hash trigHash;       \/* All triggers indexed by name *\/$/;"	m	struct:Schema	file:
triggerStepAllocate	vendor\sqlite\sqlite3.c	/^static TriggerStep *triggerStepAllocate($/;"	f	file:
trimFunc	vendor\sqlite\sqlite3.c	/^static void trimFunc($/;"	f	file:
truncateOnCommit	vendor\sqlite\sqlite3.c	/^  u8 truncateOnCommit;       \/* True to truncate WAL file on commit *\/$/;"	m	struct:Wal	file:
truthProb	vendor\sqlite\sqlite3.c	/^  LogEst truthProb;       \/* Probability of truth for this expression *\/$/;"	m	struct:WhereTerm	file:
type	vendor\sqlite\sqlite3.c	/^  etByte type;             \/* Conversion paradigm *\/$/;"	m	struct:et_info	file:
type	vendor\sqlite\sqlite3.c	/^struct AttachKey { int type;  Token key; };$/;"	m	struct:AttachKey	file:
typeofFunc	vendor\sqlite\sqlite3.c	/^static void typeofFunc($/;"	f	file:
tz	vendor\sqlite\sqlite3.c	/^  int tz;            \/* Timezone offset in minutes *\/$/;"	m	struct:DateTime	file:
u	vendor\sqlite\sqlite3.c	/^    } u;$/;"	m	struct:ExprList::ExprList_item	typeref:union:ExprList::ExprList_item::__anon8	file:
u	vendor\sqlite\sqlite3.c	/^  u32 u;             \/* Unsigned for byte-order conversions *\/$/;"	m	union:RtreeCoord	file:
u	vendor\sqlite\sqlite3.c	/^  } u;$/;"	m	struct:Bitvec	typeref:union:Bitvec::__anon16	file:
u	vendor\sqlite\sqlite3.c	/^  } u;$/;"	m	struct:Expr	typeref:union:Expr::__anon6	file:
u	vendor\sqlite\sqlite3.c	/^  } u;$/;"	m	struct:Mem	typeref:union:Mem::MemValue	file:
u	vendor\sqlite\sqlite3.c	/^  } u;$/;"	m	struct:Mem3Block	typeref:union:Mem3Block::__anon13	file:
u	vendor\sqlite\sqlite3.c	/^  } u;$/;"	m	struct:RtreeConstraint	typeref:union:RtreeConstraint::__anon28	file:
u	vendor\sqlite\sqlite3.c	/^  } u;$/;"	m	struct:SorterRecord	typeref:union:SorterRecord::__anon17	file:
u	vendor\sqlite\sqlite3.c	/^  } u;$/;"	m	struct:Stat4Sample	typeref:union:Stat4Sample::__anon18	file:
u	vendor\sqlite\sqlite3.c	/^  } u;$/;"	m	struct:Walker	typeref:union:Walker::__anon11	file:
u	vendor\sqlite\sqlite3.c	/^  } u;$/;"	m	struct:WhereLevel	typeref:union:WhereLevel::__anon19	file:
u	vendor\sqlite\sqlite3.c	/^  } u;$/;"	m	struct:WhereLoop	typeref:union:WhereLoop::__anon21	file:
u	vendor\sqlite\sqlite3.c	/^  } u;$/;"	m	struct:WhereTerm	typeref:union:WhereTerm::__anon24	file:
u1	vendor\sqlite\sqlite3.c	/^  } u1;$/;"	m	struct:sqlite3	typeref:union:sqlite3::__anon5	file:
u16	vendor\sqlite\sqlite3.c	/^typedef UINT16_TYPE u16;           \/* 2-byte unsigned integer *\/$/;"	t	file:
u16	vendor\sqlite\sqlite3.c	/^typedef unsigned short u16;$/;"	t	file:
u32	vendor\sqlite\sqlite3.c	/^typedef UINT32_TYPE u32;           \/* 4-byte unsigned integer *\/$/;"	t	file:
u32	vendor\sqlite\sqlite3.c	/^typedef unsigned int u32;         \/* 4-byte unsigned integer *\/$/;"	t	file:
u32	vendor\sqlite\sqlite3.c	/^typedef unsigned int u32;$/;"	t	file:
u64	vendor\sqlite\sqlite3.c	/^typedef sqlite3_uint64 u64;       \/* 8-byte unsigned integer *\/$/;"	t	file:
u64	vendor\sqlite\sqlite3.c	/^typedef sqlite_uint64 u64;         \/* 8-byte unsigned integer *\/$/;"	t	file:
u8	vendor\sqlite\sqlite3.c	/^typedef UINT8_TYPE u8;             \/* 1-byte unsigned integer *\/$/;"	t	file:
u8	vendor\sqlite\sqlite3.c	/^typedef unsigned char u8;         \/* 1-byte (or larger) unsigned integer *\/$/;"	t	file:
u8	vendor\sqlite\sqlite3.c	/^typedef unsigned char u8;$/;"	t	file:
uTemp	vendor\sqlite\sqlite3.c	/^  u32 uTemp;          \/* Transient storage for serial_type in OP_MakeRecord *\/$/;"	m	struct:Mem	file:
unLockFlag	vendor\sqlite\sqlite3.c	/^  unsigned char unLockFlag;         \/* 1 = unlock, 0 = lock *\/$/;"	m	struct:ByteRangeLockPB2	file:
unicodeAddExceptions	vendor\sqlite\sqlite3.c	/^static int unicodeAddExceptions($/;"	f	file:
unicodeClose	vendor\sqlite\sqlite3.c	/^static int unicodeClose(sqlite3_tokenizer_cursor *pCursor){$/;"	f	file:
unicodeCreate	vendor\sqlite\sqlite3.c	/^static int unicodeCreate($/;"	f	file:
unicodeDestroy	vendor\sqlite\sqlite3.c	/^static int unicodeDestroy(sqlite3_tokenizer *pTokenizer){$/;"	f	file:
unicodeFunc	vendor\sqlite\sqlite3.c	/^static void unicodeFunc($/;"	f	file:
unicodeIsAlnum	vendor\sqlite\sqlite3.c	/^static int unicodeIsAlnum(unicode_tokenizer *p, int iCode){$/;"	f	file:
unicodeIsException	vendor\sqlite\sqlite3.c	/^static int unicodeIsException(unicode_tokenizer *p, int iCode){$/;"	f	file:
unicodeNext	vendor\sqlite\sqlite3.c	/^static int unicodeNext($/;"	f	file:
unicodeOpen	vendor\sqlite\sqlite3.c	/^static int unicodeOpen($/;"	f	file:
unicode_cursor	vendor\sqlite\sqlite3.c	/^struct unicode_cursor {$/;"	s	file:
unicode_cursor	vendor\sqlite\sqlite3.c	/^typedef struct unicode_cursor unicode_cursor;$/;"	t	typeref:struct:unicode_cursor	file:
unicode_tokenizer	vendor\sqlite\sqlite3.c	/^struct unicode_tokenizer {$/;"	s	file:
unicode_tokenizer	vendor\sqlite\sqlite3.c	/^typedef struct unicode_tokenizer unicode_tokenizer;$/;"	t	typeref:struct:unicode_tokenizer	file:
uniqNotNull	vendor\sqlite\sqlite3.c	/^  unsigned uniqNotNull:1;  \/* True if UNIQUE and NOT NULL for all columns *\/$/;"	m	struct:Index	file:
unixAccess	vendor\sqlite\sqlite3.c	/^static int unixAccess($/;"	f	file:
unixCheckReservedLock	vendor\sqlite\sqlite3.c	/^static int unixCheckReservedLock(sqlite3_file *id, int *pResOut){$/;"	f	file:
unixClose	vendor\sqlite\sqlite3.c	/^static int unixClose(sqlite3_file *id){$/;"	f	file:
unixCurrentTime	vendor\sqlite\sqlite3.c	/^static int unixCurrentTime(sqlite3_vfs *NotUsed, double *prNow){$/;"	f	file:
unixCurrentTimeInt64	vendor\sqlite\sqlite3.c	/^static int unixCurrentTimeInt64(sqlite3_vfs *NotUsed, sqlite3_int64 *piNow){$/;"	f	file:
unixDelete	vendor\sqlite\sqlite3.c	/^static int unixDelete($/;"	f	file:
unixDeviceCharacteristics	vendor\sqlite\sqlite3.c	/^static int unixDeviceCharacteristics(sqlite3_file *id){$/;"	f	file:
unixDlClose	vendor\sqlite\sqlite3.c	/^static void unixDlClose(sqlite3_vfs *NotUsed, void *pHandle){$/;"	f	file:
unixDlClose	vendor\sqlite\sqlite3.c	31342;"	d	file:
unixDlError	vendor\sqlite\sqlite3.c	/^static void unixDlError(sqlite3_vfs *NotUsed, int nBuf, char *zBufOut){$/;"	f	file:
unixDlError	vendor\sqlite\sqlite3.c	31340;"	d	file:
unixDlOpen	vendor\sqlite\sqlite3.c	/^static void *unixDlOpen(sqlite3_vfs *NotUsed, const char *zFilename){$/;"	f	file:
unixDlOpen	vendor\sqlite\sqlite3.c	31339;"	d	file:
unixDlSym	vendor\sqlite\sqlite3.c	/^static void (*unixDlSym(sqlite3_vfs *NotUsed, void *p, const char*zSym))(void){$/;"	f	file:
unixDlSym	vendor\sqlite\sqlite3.c	31341;"	d	file:
unixEnterMutex	vendor\sqlite\sqlite3.c	/^static void unixEnterMutex(void){$/;"	f	file:
unixFetch	vendor\sqlite\sqlite3.c	/^static int unixFetch(sqlite3_file *fd, i64 iOff, int nAmt, void **pp){$/;"	f	file:
unixFile	vendor\sqlite\sqlite3.c	/^struct unixFile {$/;"	s	file:
unixFile	vendor\sqlite\sqlite3.c	/^typedef struct unixFile unixFile;$/;"	t	typeref:struct:unixFile	file:
unixFileControl	vendor\sqlite\sqlite3.c	/^static int unixFileControl(sqlite3_file *id, int op, void *pArg){$/;"	f	file:
unixFileId	vendor\sqlite\sqlite3.c	/^struct unixFileId {$/;"	s	file:
unixFileLock	vendor\sqlite\sqlite3.c	/^static int unixFileLock(unixFile *pFile, struct flock *pLock){$/;"	f	file:
unixFileSize	vendor\sqlite\sqlite3.c	/^static int unixFileSize(sqlite3_file *id, i64 *pSize){$/;"	f	file:
unixFullPathname	vendor\sqlite\sqlite3.c	/^static int unixFullPathname($/;"	f	file:
unixGetLastError	vendor\sqlite\sqlite3.c	/^static int unixGetLastError(sqlite3_vfs *NotUsed, int NotUsed2, char *NotUsed3){$/;"	f	file:
unixGetSystemCall	vendor\sqlite\sqlite3.c	/^static sqlite3_syscall_ptr unixGetSystemCall($/;"	f	file:
unixGetTempname	vendor\sqlite\sqlite3.c	/^static int unixGetTempname(int nBuf, char *zBuf){$/;"	f	file:
unixGetpagesize	vendor\sqlite\sqlite3.c	/^static int unixGetpagesize(void){$/;"	f	file:
unixInodeInfo	vendor\sqlite\sqlite3.c	/^struct unixInodeInfo {$/;"	s	file:
unixInodeInfo	vendor\sqlite\sqlite3.c	/^typedef struct unixInodeInfo unixInodeInfo;   \/* An i-node *\/$/;"	t	typeref:struct:unixInodeInfo	file:
unixLeaveMutex	vendor\sqlite\sqlite3.c	/^static void unixLeaveMutex(void){$/;"	f	file:
unixLock	vendor\sqlite\sqlite3.c	/^static int unixLock(sqlite3_file *id, int eFileLock){$/;"	f	file:
unixLogError	vendor\sqlite\sqlite3.c	26350;"	d	file:
unixLogErrorAtLine	vendor\sqlite\sqlite3.c	/^static int unixLogErrorAtLine($/;"	f	file:
unixMapfile	vendor\sqlite\sqlite3.c	/^static int unixMapfile(unixFile *pFd, i64 nByte){$/;"	f	file:
unixModeBit	vendor\sqlite\sqlite3.c	/^static void unixModeBit(unixFile *pFile, unsigned char mask, int *pArg){$/;"	f	file:
unixMutexHeld	vendor\sqlite\sqlite3.c	/^static int unixMutexHeld(void) {$/;"	f	file:
unixNextSystemCall	vendor\sqlite\sqlite3.c	/^static const char *unixNextSystemCall(sqlite3_vfs *p, const char *zName){$/;"	f	file:
unixOpen	vendor\sqlite\sqlite3.c	/^static int unixOpen($/;"	f	file:
unixOpenSharedMemory	vendor\sqlite\sqlite3.c	/^static int unixOpenSharedMemory(unixFile *pDbFd){$/;"	f	file:
unixRandomness	vendor\sqlite\sqlite3.c	/^static int unixRandomness(sqlite3_vfs *NotUsed, int nBuf, char *zBuf){$/;"	f	file:
unixRead	vendor\sqlite\sqlite3.c	/^static int unixRead($/;"	f	file:
unixRemapfile	vendor\sqlite\sqlite3.c	/^static void unixRemapfile($/;"	f	file:
unixSectorSize	vendor\sqlite\sqlite3.c	/^static int unixSectorSize(sqlite3_file *NotUsed){$/;"	f	file:
unixSectorSize	vendor\sqlite\sqlite3.c	/^static int unixSectorSize(sqlite3_file *id){$/;"	f	file:
unixSetSystemCall	vendor\sqlite\sqlite3.c	/^static int unixSetSystemCall($/;"	f	file:
unixShm	vendor\sqlite\sqlite3.c	/^struct unixShm {$/;"	s	file:
unixShm	vendor\sqlite\sqlite3.c	/^typedef struct unixShm unixShm;               \/* Connection shared memory *\/$/;"	t	typeref:struct:unixShm	file:
unixShmBarrier	vendor\sqlite\sqlite3.c	/^static void unixShmBarrier($/;"	f	file:
unixShmBarrier	vendor\sqlite\sqlite3.c	29951;"	d	file:
unixShmLock	vendor\sqlite\sqlite3.c	/^static int unixShmLock($/;"	f	file:
unixShmLock	vendor\sqlite\sqlite3.c	29950;"	d	file:
unixShmMap	vendor\sqlite\sqlite3.c	/^static int unixShmMap($/;"	f	file:
unixShmMap	vendor\sqlite\sqlite3.c	29949;"	d	file:
unixShmNode	vendor\sqlite\sqlite3.c	/^struct unixShmNode {$/;"	s	file:
unixShmNode	vendor\sqlite\sqlite3.c	/^typedef struct unixShmNode unixShmNode;       \/* Shared memory instance *\/$/;"	t	typeref:struct:unixShmNode	file:
unixShmPurge	vendor\sqlite\sqlite3.c	/^static void unixShmPurge(unixFile *pFd){$/;"	f	file:
unixShmRegionPerMap	vendor\sqlite\sqlite3.c	/^static int unixShmRegionPerMap(void){$/;"	f	file:
unixShmSystemLock	vendor\sqlite\sqlite3.c	/^static int unixShmSystemLock($/;"	f	file:
unixShmUnmap	vendor\sqlite\sqlite3.c	/^static int unixShmUnmap($/;"	f	file:
unixShmUnmap	vendor\sqlite\sqlite3.c	29952;"	d	file:
unixSleep	vendor\sqlite\sqlite3.c	/^static int unixSleep(sqlite3_vfs *NotUsed, int microseconds){$/;"	f	file:
unixSync	vendor\sqlite\sqlite3.c	/^static int unixSync(sqlite3_file *id, int flags){$/;"	f	file:
unixTempFileDir	vendor\sqlite\sqlite3.c	/^static const char *unixTempFileDir(void){$/;"	f	file:
unixTruncate	vendor\sqlite\sqlite3.c	/^static int unixTruncate(sqlite3_file *id, i64 nByte){$/;"	f	file:
unixUnfetch	vendor\sqlite\sqlite3.c	/^static int unixUnfetch(sqlite3_file *fd, i64 iOff, void *p){$/;"	f	file:
unixUnlock	vendor\sqlite\sqlite3.c	/^static int unixUnlock(sqlite3_file *id, int eFileLock){$/;"	f	file:
unixUnmapfile	vendor\sqlite\sqlite3.c	/^static void unixUnmapfile(unixFile *pFd){$/;"	f	file:
unixWrite	vendor\sqlite\sqlite3.c	/^static int unixWrite($/;"	f	file:
unix_syscall	vendor\sqlite\sqlite3.c	/^static struct unix_syscall {$/;"	s	file:
unlikely	vendor\sqlite\sqlite3.c	8436;"	d	file:
unlockBtreeIfUnused	vendor\sqlite\sqlite3.c	/^static void unlockBtreeIfUnused(BtShared *pBt){$/;"	f	file:
unlockBtreeMutex	vendor\sqlite\sqlite3.c	/^static void SQLITE_NOINLINE unlockBtreeMutex(Btree *p){$/;"	f	file:
unlock_notify	vendor\sqlite\sqlite3.c	/^  int (*unlock_notify)(sqlite3*,void(*)(void**,int),void*);$/;"	m	struct:sqlite3_api_routines	file:
untestedTerms	vendor\sqlite\sqlite3.c	/^  u8 untestedTerms;         \/* Not all WHERE terms resolved by outer loop *\/$/;"	m	struct:WhereInfo	file:
unused	vendor\sqlite\sqlite3.c	/^  u32 unused;                     \/* Unused (padding) field *\/$/;"	m	struct:WalIndexHdr	file:
updateAccumulator	vendor\sqlite\sqlite3.c	/^static void updateAccumulator(Parse *pParse, AggInfo *pAggInfo){$/;"	f	file:
updateMapping	vendor\sqlite\sqlite3.c	/^static int updateMapping($/;"	f	file:
updateMaxBlobsize	vendor\sqlite\sqlite3.c	/^static void updateMaxBlobsize(Mem *p){$/;"	f	file:
updateVirtualTable	vendor\sqlite\sqlite3.c	/^static void updateVirtualTable($/;"	f	file:
update_hook	vendor\sqlite\sqlite3.c	/^  void * (*update_hook)(sqlite3*,void(*)(void*,int ,char const*,char const*,$/;"	m	struct:sqlite3_api_routines	file:
upperFunc	vendor\sqlite\sqlite3.c	/^static void upperFunc(sqlite3_context *context, int argc, sqlite3_value **argv){$/;"	f	file:
uri_boolean	vendor\sqlite\sqlite3.c	/^  int (*uri_boolean)(const char*,const char*,int);$/;"	m	struct:sqlite3_api_routines	file:
uri_int64	vendor\sqlite\sqlite3.c	/^  sqlite3_int64 (*uri_int64)(const char*,const char*,sqlite3_int64);$/;"	m	struct:sqlite3_api_routines	file:
uri_parameter	vendor\sqlite\sqlite3.c	/^  const char *(*uri_parameter)(const char*,const char*);$/;"	m	struct:sqlite3_api_routines	file:
usable	vendor\sqlite\sqlite3.c	/^     unsigned char usable;     \/* True if this constraint is usable *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_constraint	file:
usableSize	vendor\sqlite\sqlite3.c	/^  u32 usableSize;       \/* Number of usable bytes on each page *\/$/;"	m	struct:BtShared	file:
useJournal	vendor\sqlite\sqlite3.c	/^  u8 useJournal;              \/* Use a rollback journal on this file *\/$/;"	m	struct:Pager	file:
useMalloc	vendor\sqlite\sqlite3.c	/^  u8   useMalloc;      \/* 0: none,  1: sqlite3DbMalloc,  2: sqlite3_malloc *\/$/;"	m	struct:StrAccum	file:
useRandomRowid	vendor\sqlite\sqlite3.c	/^  Bool useRandomRowid:1;\/* Generate new record numbers semi-randomly *\/$/;"	m	struct:VdbeCursor	file:
useSortingIdx	vendor\sqlite\sqlite3.c	/^  u8 useSortingIdx;       \/* In direct mode, reference the sorting index rather$/;"	m	struct:AggInfo	file:
usedAsColumnCache	vendor\sqlite\sqlite3.c	/^static int usedAsColumnCache(Parse *pParse, int iFrom, int iTo){$/;"	f	file:
user_data	vendor\sqlite\sqlite3.c	/^  void * (*user_data)(sqlite3_context*);$/;"	m	struct:sqlite3_api_routines	file:
usesStmtJournal	vendor\sqlite\sqlite3.c	/^  bft usesStmtJournal:1;  \/* True if uses a statement journal *\/$/;"	m	struct:Vdbe	file:
v	vendor\sqlite\sqlite3.c	/^  Vdbe *v;                   \/* Vdbe to iterate through the opcodes of *\/$/;"	m	struct:VdbeOpIter	file:
v	vendor\sqlite\sqlite3.c	/^  Vdbe *v;                \/* VM this frame belongs to *\/$/;"	m	struct:VdbeFrame	file:
v	vendor\sqlite\sqlite3.c	/^  i64 v;                        \/* ROWID value for this entry *\/$/;"	m	struct:RowSetEntry	file:
v1	vendor\sqlite\sqlite3.c	/^  int v1, v2;       \/* Values for up to two %d fields in zPfx *\/$/;"	m	struct:IntegrityCk	file:
v2	vendor\sqlite\sqlite3.c	/^  int v1, v2;       \/* Values for up to two %d fields in zPfx *\/$/;"	m	struct:IntegrityCk	file:
vacuumFinalize	vendor\sqlite\sqlite3.c	/^static int vacuumFinalize(sqlite3 *db, sqlite3_stmt *pStmt, char **pzErrMsg){$/;"	f	file:
validHMS	vendor\sqlite\sqlite3.c	/^  char validHMS;     \/* True (1) if h,m,s are valid *\/$/;"	m	struct:DateTime	file:
validJD	vendor\sqlite\sqlite3.c	/^  char validJD;      \/* True (1) if iJD is valid *\/$/;"	m	struct:DateTime	file:
validTZ	vendor\sqlite\sqlite3.c	/^  char validTZ;      \/* True (1) if tz is valid *\/$/;"	m	struct:DateTime	file:
validYMD	vendor\sqlite\sqlite3.c	/^  char validYMD;     \/* True (1) if Y,M,D are valid *\/$/;"	m	struct:DateTime	file:
value	vendor\sqlite\sqlite3.c	/^  struct {int value; int mask;} yy429;$/;"	m	struct:__anon25::__anon26	file:
valueFromExpr	vendor\sqlite\sqlite3.c	/^static int valueFromExpr($/;"	f	file:
valueNew	vendor\sqlite\sqlite3.c	/^static sqlite3_value *valueNew(sqlite3 *db, struct ValueNewStat4Ctx *p){$/;"	f	file:
valueToText	vendor\sqlite\sqlite3.c	/^static SQLITE_NOINLINE const void *valueToText(sqlite3_value* pVal, u8 enc){$/;"	f	file:
value_blob	vendor\sqlite\sqlite3.c	/^  const void * (*value_blob)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines	file:
value_bytes	vendor\sqlite\sqlite3.c	/^  int  (*value_bytes)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines	file:
value_bytes16	vendor\sqlite\sqlite3.c	/^  int  (*value_bytes16)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines	file:
value_double	vendor\sqlite\sqlite3.c	/^  double  (*value_double)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines	file:
value_int	vendor\sqlite\sqlite3.c	/^  int  (*value_int)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines	file:
value_int64	vendor\sqlite\sqlite3.c	/^  sqlite_int64  (*value_int64)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines	file:
value_numeric_type	vendor\sqlite\sqlite3.c	/^  int  (*value_numeric_type)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines	file:
value_text	vendor\sqlite\sqlite3.c	/^  const unsigned char * (*value_text)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines	file:
value_text16	vendor\sqlite\sqlite3.c	/^  const void * (*value_text16)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines	file:
value_text16be	vendor\sqlite\sqlite3.c	/^  const void * (*value_text16be)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines	file:
value_text16le	vendor\sqlite\sqlite3.c	/^  const void * (*value_text16le)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines	file:
value_type	vendor\sqlite\sqlite3.c	/^  int  (*value_type)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines	file:
vdbeAssertFieldCountWithinLimits	vendor\sqlite\sqlite3.c	/^static void vdbeAssertFieldCountWithinLimits($/;"	f	file:
vdbeAssertFieldCountWithinLimits	vendor\sqlite\sqlite3.c	67695;"	d	file:
vdbeCommit	vendor\sqlite\sqlite3.c	/^static int vdbeCommit(sqlite3 *db, Vdbe *p){$/;"	f	file:
vdbeCompareMemString	vendor\sqlite\sqlite3.c	/^static int vdbeCompareMemString($/;"	f	file:
vdbeFreeOpArray	vendor\sqlite\sqlite3.c	/^static void vdbeFreeOpArray(sqlite3 *db, Op *aOp, int nOp){$/;"	f	file:
vdbeIncrBgPopulate	vendor\sqlite\sqlite3.c	/^static int vdbeIncrBgPopulate(IncrMerger *pIncr){$/;"	f	file:
vdbeIncrFree	vendor\sqlite\sqlite3.c	/^static void vdbeIncrFree(IncrMerger *pIncr){$/;"	f	file:
vdbeIncrMergerNew	vendor\sqlite\sqlite3.c	/^static int vdbeIncrMergerNew($/;"	f	file:
vdbeIncrMergerSetThreads	vendor\sqlite\sqlite3.c	/^static void vdbeIncrMergerSetThreads(IncrMerger *pIncr){$/;"	f	file:
vdbeIncrPopulate	vendor\sqlite\sqlite3.c	/^static int vdbeIncrPopulate(IncrMerger *pIncr){$/;"	f	file:
vdbeIncrPopulateThread	vendor\sqlite\sqlite3.c	/^static void *vdbeIncrPopulateThread(void *pCtx){$/;"	f	file:
vdbeIncrSwap	vendor\sqlite\sqlite3.c	/^static int vdbeIncrSwap(IncrMerger *pIncr){$/;"	f	file:
vdbeInvokeSqllog	vendor\sqlite\sqlite3.c	/^static void vdbeInvokeSqllog(Vdbe *v){$/;"	f	file:
vdbeInvokeSqllog	vendor\sqlite\sqlite3.c	66872;"	d	file:
vdbeMemAddTerminator	vendor\sqlite\sqlite3.c	/^static SQLITE_NOINLINE int vdbeMemAddTerminator(Mem *pMem){$/;"	f	file:
vdbeMemClear	vendor\sqlite\sqlite3.c	/^static SQLITE_NOINLINE void vdbeMemClear(Mem *p){$/;"	f	file:
vdbeMemClearExternAndSetNull	vendor\sqlite\sqlite3.c	/^static SQLITE_NOINLINE void vdbeMemClearExternAndSetNull(Mem *p){$/;"	f	file:
vdbeMergeEngineCompare	vendor\sqlite\sqlite3.c	/^static void vdbeMergeEngineCompare($/;"	f	file:
vdbeMergeEngineFree	vendor\sqlite\sqlite3.c	/^static void vdbeMergeEngineFree(MergeEngine *pMerger){$/;"	f	file:
vdbeMergeEngineInit	vendor\sqlite\sqlite3.c	/^static int vdbeMergeEngineInit($/;"	f	file:
vdbeMergeEngineLevel0	vendor\sqlite\sqlite3.c	/^static int vdbeMergeEngineLevel0($/;"	f	file:
vdbeMergeEngineNew	vendor\sqlite\sqlite3.c	/^static MergeEngine *vdbeMergeEngineNew(int nReader){$/;"	f	file:
vdbeMergeEngineStep	vendor\sqlite\sqlite3.c	/^static int vdbeMergeEngineStep($/;"	f	file:
vdbePmaReadBlob	vendor\sqlite\sqlite3.c	/^static int vdbePmaReadBlob($/;"	f	file:
vdbePmaReadVarint	vendor\sqlite\sqlite3.c	/^static int vdbePmaReadVarint(PmaReader *p, u64 *pnOut){$/;"	f	file:
vdbePmaReaderBgIncrInit	vendor\sqlite\sqlite3.c	/^static int vdbePmaReaderBgIncrInit(PmaReader *pReadr){$/;"	f	file:
vdbePmaReaderBgInit	vendor\sqlite\sqlite3.c	/^static void *vdbePmaReaderBgInit(void *pCtx){$/;"	f	file:
vdbePmaReaderClear	vendor\sqlite\sqlite3.c	/^static void vdbePmaReaderClear(PmaReader *pReadr){$/;"	f	file:
vdbePmaReaderIncrMergeInit	vendor\sqlite\sqlite3.c	/^static int vdbePmaReaderIncrMergeInit(PmaReader *pReadr, int eMode){$/;"	f	file:
vdbePmaReaderInit	vendor\sqlite\sqlite3.c	/^static int vdbePmaReaderInit($/;"	f	file:
vdbePmaReaderNext	vendor\sqlite\sqlite3.c	/^static int vdbePmaReaderNext(PmaReader *pReadr){$/;"	f	file:
vdbePmaReaderSeek	vendor\sqlite\sqlite3.c	/^static int vdbePmaReaderSeek($/;"	f	file:
vdbePmaWriteBlob	vendor\sqlite\sqlite3.c	/^static void vdbePmaWriteBlob(PmaWriter *p, u8 *pData, int nData){$/;"	f	file:
vdbePmaWriteVarint	vendor\sqlite\sqlite3.c	/^static void vdbePmaWriteVarint(PmaWriter *p, u64 iVal){$/;"	f	file:
vdbePmaWriterFinish	vendor\sqlite\sqlite3.c	/^static int vdbePmaWriterFinish(PmaWriter *p, i64 *piEof){$/;"	f	file:
vdbePmaWriterInit	vendor\sqlite\sqlite3.c	/^static void vdbePmaWriterInit($/;"	f	file:
vdbeRecordCompareDebug	vendor\sqlite\sqlite3.c	/^static int vdbeRecordCompareDebug($/;"	f	file:
vdbeRecordCompareInt	vendor\sqlite\sqlite3.c	/^static int vdbeRecordCompareInt($/;"	f	file:
vdbeRecordCompareString	vendor\sqlite\sqlite3.c	/^static int vdbeRecordCompareString($/;"	f	file:
vdbeRecordCompareWithSkip	vendor\sqlite\sqlite3.c	/^static int vdbeRecordCompareWithSkip($/;"	f	file:
vdbeRecordDecodeInt	vendor\sqlite\sqlite3.c	/^static i64 vdbeRecordDecodeInt(u32 serial_type, const u8 *aKey){$/;"	f	file:
vdbeReleaseAndSetInt64	vendor\sqlite\sqlite3.c	/^static SQLITE_NOINLINE void vdbeReleaseAndSetInt64(Mem *pMem, i64 val){$/;"	f	file:
vdbeSafety	vendor\sqlite\sqlite3.c	/^static int vdbeSafety(Vdbe *p){$/;"	f	file:
vdbeSafetyNotNull	vendor\sqlite\sqlite3.c	/^static int vdbeSafetyNotNull(Vdbe *p){$/;"	f	file:
vdbeSortAllocUnpacked	vendor\sqlite\sqlite3.c	/^static int vdbeSortAllocUnpacked(SortSubtask *pTask){$/;"	f	file:
vdbeSortSubtaskCleanup	vendor\sqlite\sqlite3.c	/^static void vdbeSortSubtaskCleanup(sqlite3 *db, SortSubtask *pTask){$/;"	f	file:
vdbeSorterAddToTree	vendor\sqlite\sqlite3.c	/^static int vdbeSorterAddToTree($/;"	f	file:
vdbeSorterBlockDebug	vendor\sqlite\sqlite3.c	/^static void vdbeSorterBlockDebug($/;"	f	file:
vdbeSorterBlockDebug	vendor\sqlite\sqlite3.c	78310;"	d	file:
vdbeSorterCompare	vendor\sqlite\sqlite3.c	/^static int vdbeSorterCompare($/;"	f	file:
vdbeSorterCreateThread	vendor\sqlite\sqlite3.c	/^static int vdbeSorterCreateThread($/;"	f	file:
vdbeSorterExtendFile	vendor\sqlite\sqlite3.c	/^static void vdbeSorterExtendFile(sqlite3 *db, sqlite3_file *pFd, i64 nByte){$/;"	f	file:
vdbeSorterExtendFile	vendor\sqlite\sqlite3.c	78498;"	d	file:
vdbeSorterFlushPMA	vendor\sqlite\sqlite3.c	/^static int vdbeSorterFlushPMA(VdbeSorter *pSorter){$/;"	f	file:
vdbeSorterFlushThread	vendor\sqlite\sqlite3.c	/^static void *vdbeSorterFlushThread(void *pCtx){$/;"	f	file:
vdbeSorterJoinAll	vendor\sqlite\sqlite3.c	/^static int vdbeSorterJoinAll(VdbeSorter *pSorter, int rcin){$/;"	f	file:
vdbeSorterJoinAll	vendor\sqlite\sqlite3.c	78370;"	d	file:
vdbeSorterJoinThread	vendor\sqlite\sqlite3.c	/^static int vdbeSorterJoinThread(SortSubtask *pTask){$/;"	f	file:
vdbeSorterJoinThread	vendor\sqlite\sqlite3.c	78371;"	d	file:
vdbeSorterListToPMA	vendor\sqlite\sqlite3.c	/^static int vdbeSorterListToPMA(SortSubtask *pTask, SorterList *pList){$/;"	f	file:
vdbeSorterMapFile	vendor\sqlite\sqlite3.c	/^static int vdbeSorterMapFile(SortSubtask *pTask, SorterFile *pFile, u8 **pp){$/;"	f	file:
vdbeSorterMerge	vendor\sqlite\sqlite3.c	/^static void vdbeSorterMerge($/;"	f	file:
vdbeSorterMergeTreeBuild	vendor\sqlite\sqlite3.c	/^static int vdbeSorterMergeTreeBuild($/;"	f	file:
vdbeSorterOpenTempFile	vendor\sqlite\sqlite3.c	/^static int vdbeSorterOpenTempFile($/;"	f	file:
vdbeSorterPopulateDebug	vendor\sqlite\sqlite3.c	/^static void vdbeSorterPopulateDebug($/;"	f	file:
vdbeSorterPopulateDebug	vendor\sqlite\sqlite3.c	78309;"	d	file:
vdbeSorterRecordFree	vendor\sqlite\sqlite3.c	/^static void vdbeSorterRecordFree(sqlite3 *db, SorterRecord *pRecord){$/;"	f	file:
vdbeSorterRewindDebug	vendor\sqlite\sqlite3.c	/^static void vdbeSorterRewindDebug(const char *zEvent){$/;"	f	file:
vdbeSorterRewindDebug	vendor\sqlite\sqlite3.c	78308;"	d	file:
vdbeSorterRowkey	vendor\sqlite\sqlite3.c	/^static void *vdbeSorterRowkey($/;"	f	file:
vdbeSorterSetupMerge	vendor\sqlite\sqlite3.c	/^static int vdbeSorterSetupMerge(VdbeSorter *pSorter){$/;"	f	file:
vdbeSorterSort	vendor\sqlite\sqlite3.c	/^static int vdbeSorterSort(SortSubtask *pTask, SorterList *pList){$/;"	f	file:
vdbeSorterTreeDepth	vendor\sqlite\sqlite3.c	/^static int vdbeSorterTreeDepth(int nPMA){$/;"	f	file:
vdbeSorterWorkDebug	vendor\sqlite\sqlite3.c	/^static void vdbeSorterWorkDebug(SortSubtask *pTask, const char *zEvent){$/;"	f	file:
vdbeSorterWorkDebug	vendor\sqlite\sqlite3.c	78307;"	d	file:
vdbeTakeBranch	vendor\sqlite\sqlite3.c	/^  static void vdbeTakeBranch(int iSrcLine, u8 I, u8 M){$/;"	f	file:
vdbeUnbind	vendor\sqlite\sqlite3.c	/^static int vdbeUnbind(Vdbe *p, int i){$/;"	f	file:
vdbeVComment	vendor\sqlite\sqlite3.c	/^static void vdbeVComment(Vdbe *p, const char *zFormat, va_list ap){$/;"	f	file:
verifyDbFile	vendor\sqlite\sqlite3.c	/^static void verifyDbFile(unixFile *pFile){$/;"	f	file:
versionFunc	vendor\sqlite\sqlite3.c	/^static void versionFunc($/;"	f	file:
vfsFlags	vendor\sqlite\sqlite3.c	/^  u32 vfsFlags;               \/* Flags for sqlite3_vfs.xOpen() *\/$/;"	m	struct:Pager	file:
vfsList	vendor\sqlite\sqlite3.c	/^static sqlite3_vfs * SQLITE_WSD vfsList = 0;$/;"	v	file:
vfsList	vendor\sqlite\sqlite3.c	16576;"	d	file:
vfsUnlink	vendor\sqlite\sqlite3.c	/^static void vfsUnlink(sqlite3_vfs *pVfs){$/;"	f	file:
vfs_find	vendor\sqlite\sqlite3.c	/^  sqlite3_vfs *(*vfs_find)(const char*);$/;"	m	struct:sqlite3_api_routines	file:
vfs_register	vendor\sqlite\sqlite3.c	/^  int (*vfs_register)(sqlite3_vfs*,int);$/;"	m	struct:sqlite3_api_routines	file:
vfs_unregister	vendor\sqlite\sqlite3.c	/^  int (*vfs_unregister)(sqlite3_vfs*);$/;"	m	struct:sqlite3_api_routines	file:
viaCoroutine	vendor\sqlite\sqlite3.c	/^    unsigned viaCoroutine :1;  \/* Implemented as a co-routine *\/$/;"	m	struct:SrcList::SrcList_item	file:
vmprintf	vendor\sqlite\sqlite3.c	/^  char *(*vmprintf)(const char*,va_list);$/;"	m	struct:sqlite3_api_routines	file:
vsnprintf	vendor\sqlite\sqlite3.c	/^  char *(*vsnprintf)(int,char*,const char*,va_list);$/;"	m	struct:sqlite3_api_routines	file:
vtab	vendor\sqlite\sqlite3.c	/^    } vtab;$/;"	m	union:WhereLoop::__anon21	typeref:struct:WhereLoop::__anon21::__anon23	file:
vtabBestIndex	vendor\sqlite\sqlite3.c	/^static int vtabBestIndex(Parse *pParse, Table *pTab, sqlite3_index_info *p){$/;"	f	file:
vtabCallConstructor	vendor\sqlite\sqlite3.c	/^static int vtabCallConstructor($/;"	f	file:
vtabDisconnectAll	vendor\sqlite\sqlite3.c	/^static VTable *vtabDisconnectAll(sqlite3 *db, Table *p){$/;"	f	file:
vtabOnConflict	vendor\sqlite\sqlite3.c	/^  u8 vtabOnConflict;            \/* Value to return for s3_vtab_on_conflict() *\/$/;"	m	struct:sqlite3	file:
vtab_config	vendor\sqlite\sqlite3.c	/^  int (*vtab_config)(sqlite3*,int op,...);$/;"	m	struct:sqlite3_api_routines	file:
vtab_on_conflict	vendor\sqlite\sqlite3.c	/^  int (*vtab_on_conflict)(sqlite3*);$/;"	m	struct:sqlite3_api_routines	file:
vxworksFileId	vendor\sqlite\sqlite3.c	/^struct vxworksFileId {$/;"	s	file:
vxworksFileList	vendor\sqlite\sqlite3.c	/^static struct vxworksFileId *vxworksFileList = 0;$/;"	v	typeref:struct:vxworksFileId	file:
vxworksFindFileId	vendor\sqlite\sqlite3.c	/^static struct vxworksFileId *vxworksFindFileId(const char *zAbsoluteName){$/;"	f	file:
vxworksIoFinder	vendor\sqlite\sqlite3.c	/^  *(*const vxworksIoFinder)(const char*,unixFile*) = vxworksIoFinderImpl;$/;"	v	file:
vxworksIoFinderImpl	vendor\sqlite\sqlite3.c	/^static const sqlite3_io_methods *vxworksIoFinderImpl($/;"	f	file:
vxworksReleaseFileId	vendor\sqlite\sqlite3.c	/^static void vxworksReleaseFileId(struct vxworksFileId *pId){$/;"	f	file:
vxworksSimplifyName	vendor\sqlite\sqlite3.c	/^static int vxworksSimplifyName(char *z, int n){$/;"	f	file:
walBusyLock	vendor\sqlite\sqlite3.c	/^static int walBusyLock($/;"	f	file:
walCheckpoint	vendor\sqlite\sqlite3.c	/^static int walCheckpoint($/;"	f	file:
walChecksumBytes	vendor\sqlite\sqlite3.c	/^static void walChecksumBytes($/;"	f	file:
walCkptInfo	vendor\sqlite\sqlite3.c	/^static volatile WalCkptInfo *walCkptInfo(Wal *pWal){$/;"	f	file:
walCleanupHash	vendor\sqlite\sqlite3.c	/^static void walCleanupHash(Wal *pWal){$/;"	f	file:
walDecodeFrame	vendor\sqlite\sqlite3.c	/^static int walDecodeFrame($/;"	f	file:
walEncodeFrame	vendor\sqlite\sqlite3.c	/^static void walEncodeFrame($/;"	f	file:
walFrameOffset	vendor\sqlite\sqlite3.c	49046;"	d	file:
walFramePage	vendor\sqlite\sqlite3.c	/^static int walFramePage(u32 iFrame){$/;"	f	file:
walFramePgno	vendor\sqlite\sqlite3.c	/^static u32 walFramePgno(Wal *pWal, u32 iFrame){$/;"	f	file:
walHash	vendor\sqlite\sqlite3.c	/^static int walHash(u32 iPage){$/;"	f	file:
walHashGet	vendor\sqlite\sqlite3.c	/^static int walHashGet($/;"	f	file:
walIndexAppend	vendor\sqlite\sqlite3.c	/^static int walIndexAppend(Wal *pWal, u32 iFrame, u32 iPage){$/;"	f	file:
walIndexClose	vendor\sqlite\sqlite3.c	/^static void walIndexClose(Wal *pWal, int isDelete){$/;"	f	file:
walIndexHdr	vendor\sqlite\sqlite3.c	/^static volatile WalIndexHdr *walIndexHdr(Wal *pWal){$/;"	f	file:
walIndexPage	vendor\sqlite\sqlite3.c	/^static int walIndexPage(Wal *pWal, int iPage, volatile u32 **ppPage){$/;"	f	file:
walIndexReadHdr	vendor\sqlite\sqlite3.c	/^static int walIndexReadHdr(Wal *pWal, int *pChanged){$/;"	f	file:
walIndexRecover	vendor\sqlite\sqlite3.c	/^static int walIndexRecover(Wal *pWal){$/;"	f	file:
walIndexTryHdr	vendor\sqlite\sqlite3.c	/^static int walIndexTryHdr(Wal *pWal, int *pChanged){$/;"	f	file:
walIndexWriteHdr	vendor\sqlite\sqlite3.c	/^static void walIndexWriteHdr(Wal *pWal){$/;"	f	file:
walIteratorFree	vendor\sqlite\sqlite3.c	/^static void walIteratorFree(WalIterator *p){$/;"	f	file:
walIteratorInit	vendor\sqlite\sqlite3.c	/^static int walIteratorInit(Wal *pWal, WalIterator **pp){$/;"	f	file:
walIteratorNext	vendor\sqlite\sqlite3.c	/^static int walIteratorNext($/;"	f	file:
walLimitSize	vendor\sqlite\sqlite3.c	/^static void walLimitSize(Wal *pWal, i64 nMax){$/;"	f	file:
walLockExclusive	vendor\sqlite\sqlite3.c	/^static int walLockExclusive(Wal *pWal, int lockIdx, int n){$/;"	f	file:
walLockName	vendor\sqlite\sqlite3.c	/^static const char *walLockName(int lockIdx){$/;"	f	file:
walLockShared	vendor\sqlite\sqlite3.c	/^static int walLockShared(Wal *pWal, int lockIdx){$/;"	f	file:
walMerge	vendor\sqlite\sqlite3.c	/^static void walMerge($/;"	f	file:
walMergesort	vendor\sqlite\sqlite3.c	/^static void walMergesort($/;"	f	file:
walNextHash	vendor\sqlite\sqlite3.c	/^static int walNextHash(int iPriorHash){$/;"	f	file:
walPagesize	vendor\sqlite\sqlite3.c	/^static int walPagesize(Wal *pWal){$/;"	f	file:
walRestartHdr	vendor\sqlite\sqlite3.c	/^static void walRestartHdr(Wal *pWal, u32 salt1){$/;"	f	file:
walRestartLog	vendor\sqlite\sqlite3.c	/^static int walRestartLog(Wal *pWal){$/;"	f	file:
walShmBarrier	vendor\sqlite\sqlite3.c	/^static void walShmBarrier(Wal *pWal){$/;"	f	file:
walSyncFlags	vendor\sqlite\sqlite3.c	/^  u8 walSyncFlags;            \/* SYNC_NORMAL or SYNC_FULL for wal writes *\/$/;"	m	struct:Pager	file:
walTryBeginRead	vendor\sqlite\sqlite3.c	/^static int walTryBeginRead(Wal *pWal, int *pChanged, int useWal, int cnt){$/;"	f	file:
walUnlockExclusive	vendor\sqlite\sqlite3.c	/^static void walUnlockExclusive(Wal *pWal, int lockIdx, int n){$/;"	f	file:
walUnlockShared	vendor\sqlite\sqlite3.c	/^static void walUnlockShared(Wal *pWal, int lockIdx){$/;"	f	file:
walWriteOneFrame	vendor\sqlite\sqlite3.c	/^static int walWriteOneFrame($/;"	f	file:
walWriteToLog	vendor\sqlite\sqlite3.c	/^static int walWriteToLog($/;"	f	file:
wal_autocheckpoint	vendor\sqlite\sqlite3.c	/^  int (*wal_autocheckpoint)(sqlite3*,int);$/;"	m	struct:sqlite3_api_routines	file:
wal_checkpoint	vendor\sqlite\sqlite3.c	/^  int (*wal_checkpoint)(sqlite3*,const char*);$/;"	m	struct:sqlite3_api_routines	file:
wal_checkpoint_v2	vendor\sqlite\sqlite3.c	/^  int (*wal_checkpoint_v2)(sqlite3*,const char*,int,int*,int*);$/;"	m	struct:sqlite3_api_routines	file:
wal_hook	vendor\sqlite\sqlite3.c	/^  void *(*wal_hook)(sqlite3*,int(*)(void*,sqlite3*,const char*,int),void*);$/;"	m	struct:sqlite3_api_routines	file:
walkerDepth	vendor\sqlite\sqlite3.c	/^  int walkerDepth;                          \/* Number of subqueries *\/$/;"	m	struct:Walker	file:
wantToLock	vendor\sqlite\sqlite3.c	/^  int wantToLock;    \/* Number of nested calls to sqlite3BtreeEnter() *\/$/;"	m	struct:Btree	file:
wc	vendor\sqlite\sqlite3.c	/^  WhereClause wc;          \/* Decomposition into subterms *\/$/;"	m	struct:WhereOrInfo	file:
wc	vendor\sqlite\sqlite3.c	/^  WhereClause wc;          \/* The subexpression broken out *\/$/;"	m	struct:WhereAndInfo	file:
wctrlFlags	vendor\sqlite\sqlite3.c	/^  u16 wctrlFlags;           \/* Flags originally passed to sqlite3WhereBegin() *\/$/;"	m	struct:WhereInfo	file:
whereAndInfoDelete	vendor\sqlite\sqlite3.c	/^static void whereAndInfoDelete(sqlite3 *db, WhereAndInfo *p){$/;"	f	file:
whereClauseClear	vendor\sqlite\sqlite3.c	/^static void whereClauseClear(WhereClause *pWC){$/;"	f	file:
whereClauseInit	vendor\sqlite\sqlite3.c	/^static void whereClauseInit($/;"	f	file:
whereClauseInsert	vendor\sqlite\sqlite3.c	/^static int whereClauseInsert(WhereClause *pWC, Expr *p, u16 wtFlags){$/;"	f	file:
whereEqualScanEst	vendor\sqlite\sqlite3.c	/^static int whereEqualScanEst($/;"	f	file:
whereForeignKeys	vendor\sqlite\sqlite3.c	/^static char *whereForeignKeys(Parse *pParse, Table *pTab){$/;"	f	file:
whereInScanEst	vendor\sqlite\sqlite3.c	/^static int whereInScanEst($/;"	f	file:
whereInfoFree	vendor\sqlite\sqlite3.c	/^static void whereInfoFree(sqlite3 *db, WhereInfo *pWInfo){$/;"	f	file:
whereKeyStats	vendor\sqlite\sqlite3.c	/^static int whereKeyStats($/;"	f	file:
whereLikeOptimizationStringFixup	vendor\sqlite\sqlite3.c	/^static void whereLikeOptimizationStringFixup(Vdbe *v, WhereLevel *pLevel){$/;"	f	file:
whereLoopAddAll	vendor\sqlite\sqlite3.c	/^static int whereLoopAddAll(WhereLoopBuilder *pBuilder){$/;"	f	file:
whereLoopAddBtree	vendor\sqlite\sqlite3.c	/^static int whereLoopAddBtree($/;"	f	file:
whereLoopAddBtreeIndex	vendor\sqlite\sqlite3.c	/^static int whereLoopAddBtreeIndex($/;"	f	file:
whereLoopAddOr	vendor\sqlite\sqlite3.c	/^static int whereLoopAddOr(WhereLoopBuilder *pBuilder, Bitmask mExtra){$/;"	f	file:
whereLoopAddVirtual	vendor\sqlite\sqlite3.c	/^static int whereLoopAddVirtual($/;"	f	file:
whereLoopAdjustCost	vendor\sqlite\sqlite3.c	/^static void whereLoopAdjustCost(const WhereLoop *p, WhereLoop *pTemplate){$/;"	f	file:
whereLoopCheaperProperSubset	vendor\sqlite\sqlite3.c	/^static int whereLoopCheaperProperSubset($/;"	f	file:
whereLoopClear	vendor\sqlite\sqlite3.c	/^static void whereLoopClear(sqlite3 *db, WhereLoop *p){$/;"	f	file:
whereLoopClearUnion	vendor\sqlite\sqlite3.c	/^static void whereLoopClearUnion(sqlite3 *db, WhereLoop *p){$/;"	f	file:
whereLoopDelete	vendor\sqlite\sqlite3.c	/^static void whereLoopDelete(sqlite3 *db, WhereLoop *p){$/;"	f	file:
whereLoopFindLesser	vendor\sqlite\sqlite3.c	/^static WhereLoop **whereLoopFindLesser($/;"	f	file:
whereLoopInit	vendor\sqlite\sqlite3.c	/^static void whereLoopInit(WhereLoop *p){$/;"	f	file:
whereLoopInsert	vendor\sqlite\sqlite3.c	/^static int whereLoopInsert(WhereLoopBuilder *pBuilder, WhereLoop *pTemplate){$/;"	f	file:
whereLoopOutputAdjust	vendor\sqlite\sqlite3.c	/^static void whereLoopOutputAdjust($/;"	f	file:
whereLoopPrint	vendor\sqlite\sqlite3.c	/^static void whereLoopPrint(WhereLoop *p, WhereClause *pWC){$/;"	f	file:
whereLoopResize	vendor\sqlite\sqlite3.c	/^static int whereLoopResize(sqlite3 *db, WhereLoop *p, int n){$/;"	f	file:
whereLoopXfer	vendor\sqlite\sqlite3.c	/^static int whereLoopXfer(sqlite3 *db, WhereLoop *pTo, WhereLoop *pFrom){$/;"	f	file:
whereOrInfoDelete	vendor\sqlite\sqlite3.c	/^static void whereOrInfoDelete(sqlite3 *db, WhereOrInfo *p){$/;"	f	file:
whereOrInsert	vendor\sqlite\sqlite3.c	/^static int whereOrInsert($/;"	f	file:
whereOrMove	vendor\sqlite\sqlite3.c	/^static void whereOrMove(WhereOrSet *pDest, WhereOrSet *pSrc){$/;"	f	file:
whereOrName	vendor\sqlite\sqlite3.c	/^static char *whereOrName(sqlite3 *db, char *zWhere, char *zConstant){$/;"	f	file:
wherePathName	vendor\sqlite\sqlite3.c	/^static const char *wherePathName(WherePath *pPath, int nLoop, WhereLoop *pLast){$/;"	f	file:
wherePathSatisfiesOrderBy	vendor\sqlite\sqlite3.c	/^static i8 wherePathSatisfiesOrderBy($/;"	f	file:
wherePathSolver	vendor\sqlite\sqlite3.c	/^static int wherePathSolver(WhereInfo *pWInfo, LogEst nRowEst){$/;"	f	file:
whereRangeAdjust	vendor\sqlite\sqlite3.c	/^static LogEst whereRangeAdjust(WhereTerm *pTerm, LogEst nNew){$/;"	f	file:
whereRangeScanEst	vendor\sqlite\sqlite3.c	/^static int whereRangeScanEst($/;"	f	file:
whereRangeSkipScanEst	vendor\sqlite\sqlite3.c	/^static int whereRangeSkipScanEst($/;"	f	file:
whereScanInit	vendor\sqlite\sqlite3.c	/^static WhereTerm *whereScanInit($/;"	f	file:
whereScanNext	vendor\sqlite\sqlite3.c	/^static WhereTerm *whereScanNext(WhereScan *pScan){$/;"	f	file:
whereShortCut	vendor\sqlite\sqlite3.c	/^static int whereShortCut(WhereLoopBuilder *pBuilder){$/;"	f	file:
whereSortingCost	vendor\sqlite\sqlite3.c	/^static LogEst whereSortingCost($/;"	f	file:
whereSplit	vendor\sqlite\sqlite3.c	/^static void whereSplit(WhereClause *pWC, Expr *pExpr, u8 op){$/;"	f	file:
whereTempTriggers	vendor\sqlite\sqlite3.c	/^static char *whereTempTriggers(Parse *pParse, Table *pTab){$/;"	f	file:
whereTermPrint	vendor\sqlite\sqlite3.c	/^static void whereTermPrint(WhereTerm *pTerm, int iTerm){$/;"	f	file:
whereUsablePartialIndex	vendor\sqlite\sqlite3.c	/^static int whereUsablePartialIndex(int iTab, WhereClause *pWC, Expr *pWhere){$/;"	f	file:
winAccess	vendor\sqlite\sqlite3.c	/^static int winAccess($/;"	f	file:
winCheckReservedLock	vendor\sqlite\sqlite3.c	/^static int winCheckReservedLock(sqlite3_file *id, int *pResOut){$/;"	f	file:
winClose	vendor\sqlite\sqlite3.c	/^static int winClose(sqlite3_file *id){$/;"	f	file:
winConvertFromUtf8Filename	vendor\sqlite\sqlite3.c	/^static void *winConvertFromUtf8Filename(const char *zFilename){$/;"	f	file:
winConvertToUtf8Filename	vendor\sqlite\sqlite3.c	/^static char *winConvertToUtf8Filename(const void *zFilename){$/;"	f	file:
winCurrentTime	vendor\sqlite\sqlite3.c	/^static int winCurrentTime(sqlite3_vfs *pVfs, double *prNow){$/;"	f	file:
winCurrentTimeInt64	vendor\sqlite\sqlite3.c	/^static int winCurrentTimeInt64(sqlite3_vfs *pVfs, sqlite3_int64 *piNow){$/;"	f	file:
winDelete	vendor\sqlite\sqlite3.c	/^static int winDelete($/;"	f	file:
winDeviceCharacteristics	vendor\sqlite\sqlite3.c	/^static int winDeviceCharacteristics(sqlite3_file *id){$/;"	f	file:
winDlClose	vendor\sqlite\sqlite3.c	/^static void winDlClose(sqlite3_vfs *pVfs, void *pHandle){$/;"	f	file:
winDlClose	vendor\sqlite\sqlite3.c	38321;"	d	file:
winDlError	vendor\sqlite\sqlite3.c	/^static void winDlError(sqlite3_vfs *pVfs, int nBuf, char *zBufOut){$/;"	f	file:
winDlError	vendor\sqlite\sqlite3.c	38319;"	d	file:
winDlOpen	vendor\sqlite\sqlite3.c	/^static void *winDlOpen(sqlite3_vfs *pVfs, const char *zFilename){$/;"	f	file:
winDlOpen	vendor\sqlite\sqlite3.c	38318;"	d	file:
winDlSym	vendor\sqlite\sqlite3.c	/^static void (*winDlSym(sqlite3_vfs *pVfs,void *pH,const char *zSym))(void){$/;"	f	file:
winDlSym	vendor\sqlite\sqlite3.c	38320;"	d	file:
winFetch	vendor\sqlite\sqlite3.c	/^static int winFetch(sqlite3_file *fd, i64 iOff, int nAmt, void **pp){$/;"	f	file:
winFile	vendor\sqlite\sqlite3.c	/^struct winFile {$/;"	s	file:
winFile	vendor\sqlite\sqlite3.c	/^typedef struct winFile winFile;$/;"	t	typeref:struct:winFile	file:
winFileControl	vendor\sqlite\sqlite3.c	/^static int winFileControl(sqlite3_file *id, int op, void *pArg){$/;"	f	file:
winFileSize	vendor\sqlite\sqlite3.c	/^static int winFileSize(sqlite3_file *id, sqlite3_int64 *pSize){$/;"	f	file:
winFullPathname	vendor\sqlite\sqlite3.c	/^static int winFullPathname($/;"	f	file:
winGetDirSep	vendor\sqlite\sqlite3.c	33167;"	d	file:
winGetLastError	vendor\sqlite\sqlite3.c	/^static int winGetLastError(sqlite3_vfs *pVfs, int nBuf, char *zBuf){$/;"	f	file:
winGetLastErrorMsg	vendor\sqlite\sqlite3.c	/^static int winGetLastErrorMsg(DWORD lastErrno, int nBuf, char *zBuf){$/;"	f	file:
winGetReadLock	vendor\sqlite\sqlite3.c	/^static int winGetReadLock(winFile *pFile){$/;"	f	file:
winGetSystemCall	vendor\sqlite\sqlite3.c	/^static sqlite3_syscall_ptr winGetSystemCall($/;"	f	file:
winGetTempname	vendor\sqlite\sqlite3.c	/^static int winGetTempname(sqlite3_vfs *pVfs, char **pzBuf){$/;"	f	file:
winIoMethod	vendor\sqlite\sqlite3.c	/^static const sqlite3_io_methods winIoMethod = {$/;"	v	file:
winIoerrCanRetry1	vendor\sqlite\sqlite3.c	34927;"	d	file:
winIoerrRetry	vendor\sqlite\sqlite3.c	/^static int winIoerrRetry = SQLITE_WIN32_IOERR_RETRY;$/;"	v	file:
winIoerrRetryDelay	vendor\sqlite\sqlite3.c	/^static int winIoerrRetryDelay = SQLITE_WIN32_IOERR_RETRY_DELAY;$/;"	v	file:
winIsDir	vendor\sqlite\sqlite3.c	/^static int winIsDir(const void *zConverted){$/;"	f	file:
winIsDirSep	vendor\sqlite\sqlite3.c	33152;"	d	file:
winIsDriveLetterAndColon	vendor\sqlite\sqlite3.c	/^static BOOL winIsDriveLetterAndColon($/;"	f	file:
winIsVerbatimPathname	vendor\sqlite\sqlite3.c	/^static BOOL winIsVerbatimPathname($/;"	f	file:
winLock	vendor\sqlite\sqlite3.c	/^static int winLock(sqlite3_file *id, int locktype){$/;"	f	file:
winLockFile	vendor\sqlite\sqlite3.c	/^static BOOL winLockFile($/;"	f	file:
winLogError	vendor\sqlite\sqlite3.c	34870;"	d	file:
winLogErrorAtLine	vendor\sqlite\sqlite3.c	/^static int winLogErrorAtLine($/;"	f	file:
winLogIoerr	vendor\sqlite\sqlite3.c	/^static void winLogIoerr(int nRetry){$/;"	f	file:
winMakeEndInDirSep	vendor\sqlite\sqlite3.c	/^static int winMakeEndInDirSep(int nBuf, char *zBuf){$/;"	f	file:
winMapfile	vendor\sqlite\sqlite3.c	/^static int winMapfile(winFile *pFd, sqlite3_int64 nByte){$/;"	f	file:
winMbcsToUnicode	vendor\sqlite\sqlite3.c	/^static LPWSTR winMbcsToUnicode(const char *zFilename){$/;"	f	file:
winMemAssertMagic	vendor\sqlite\sqlite3.c	33387;"	d	file:
winMemAssertMagic	vendor\sqlite\sqlite3.c	33389;"	d	file:
winMemAssertMagic1	vendor\sqlite\sqlite3.c	33385;"	d	file:
winMemAssertMagic2	vendor\sqlite\sqlite3.c	33386;"	d	file:
winMemData	vendor\sqlite\sqlite3.c	/^struct winMemData {$/;"	s	file:
winMemData	vendor\sqlite\sqlite3.c	/^typedef struct winMemData winMemData;$/;"	t	typeref:struct:winMemData	file:
winMemFree	vendor\sqlite\sqlite3.c	/^static void winMemFree(void *pPrior){$/;"	f	file:
winMemGetDataPtr	vendor\sqlite\sqlite3.c	33392;"	d	file:
winMemGetHeap	vendor\sqlite\sqlite3.c	33393;"	d	file:
winMemGetOwned	vendor\sqlite\sqlite3.c	33394;"	d	file:
winMemInit	vendor\sqlite\sqlite3.c	/^static int winMemInit(void *pAppData){$/;"	f	file:
winMemMalloc	vendor\sqlite\sqlite3.c	/^static void *winMemMalloc(int nBytes){$/;"	f	file:
winMemRealloc	vendor\sqlite\sqlite3.c	/^static void *winMemRealloc(void *pPrior, int nBytes){$/;"	f	file:
winMemRoundup	vendor\sqlite\sqlite3.c	/^static int winMemRoundup(int n){$/;"	f	file:
winMemShutdown	vendor\sqlite\sqlite3.c	/^static void winMemShutdown(void *pAppData){$/;"	f	file:
winMemSize	vendor\sqlite\sqlite3.c	/^static int winMemSize(void *p){$/;"	f	file:
winModeBit	vendor\sqlite\sqlite3.c	/^static void winModeBit(winFile *pFile, unsigned char mask, int *pArg){$/;"	f	file:
winMutexAlloc	vendor\sqlite\sqlite3.c	/^static sqlite3_mutex *winMutexAlloc(int iType){$/;"	f	file:
winMutexEnd	vendor\sqlite\sqlite3.c	/^static int winMutexEnd(void){$/;"	f	file:
winMutexEnter	vendor\sqlite\sqlite3.c	/^static void winMutexEnter(sqlite3_mutex *p){$/;"	f	file:
winMutexFree	vendor\sqlite\sqlite3.c	/^static void winMutexFree(sqlite3_mutex *p){$/;"	f	file:
winMutexHeld	vendor\sqlite\sqlite3.c	/^static int winMutexHeld(sqlite3_mutex *p){$/;"	f	file:
winMutexInit	vendor\sqlite\sqlite3.c	/^static int winMutexInit(void){$/;"	f	file:
winMutexLeave	vendor\sqlite\sqlite3.c	/^static void winMutexLeave(sqlite3_mutex *p){$/;"	f	file:
winMutexNotheld	vendor\sqlite\sqlite3.c	/^static int winMutexNotheld(sqlite3_mutex *p){$/;"	f	file:
winMutexNotheld2	vendor\sqlite\sqlite3.c	/^static int winMutexNotheld2(sqlite3_mutex *p, DWORD tid){$/;"	f	file:
winMutexTry	vendor\sqlite\sqlite3.c	/^static int winMutexTry(sqlite3_mutex *p){$/;"	f	file:
winMutex_isInit	vendor\sqlite\sqlite3.c	/^static int winMutex_isInit = 0;$/;"	v	file:
winMutex_isNt	vendor\sqlite\sqlite3.c	/^static int winMutex_isNt = -1; \/* <0 means "need to query" *\/$/;"	v	file:
winMutex_lock	vendor\sqlite\sqlite3.c	/^static LONG SQLITE_WIN32_VOLATILE winMutex_lock = 0;$/;"	v	file:
winMutex_staticMutexes	vendor\sqlite\sqlite3.c	/^static sqlite3_mutex winMutex_staticMutexes[] = {$/;"	v	file:
winNextSystemCall	vendor\sqlite\sqlite3.c	/^static const char *winNextSystemCall(sqlite3_vfs *p, const char *zName){$/;"	f	file:
winOpen	vendor\sqlite\sqlite3.c	/^static int winOpen($/;"	f	file:
winOpenSharedMemory	vendor\sqlite\sqlite3.c	/^static int winOpenSharedMemory(winFile *pDbFd){$/;"	f	file:
winRandomness	vendor\sqlite\sqlite3.c	/^static int winRandomness(sqlite3_vfs *pVfs, int nBuf, char *zBuf){$/;"	f	file:
winRead	vendor\sqlite\sqlite3.c	/^static int winRead($/;"	f	file:
winRetryIoerr	vendor\sqlite\sqlite3.c	/^static int winRetryIoerr(int *pnRetry, DWORD *pError){$/;"	f	file:
winSectorSize	vendor\sqlite\sqlite3.c	/^static int winSectorSize(sqlite3_file *id){$/;"	f	file:
winSeekFile	vendor\sqlite\sqlite3.c	/^static int winSeekFile(winFile *pFile, sqlite3_int64 iOffset){$/;"	f	file:
winSetSystemCall	vendor\sqlite\sqlite3.c	/^static int winSetSystemCall($/;"	f	file:
winShm	vendor\sqlite\sqlite3.c	/^struct winShm {$/;"	s	file:
winShm	vendor\sqlite\sqlite3.c	/^typedef struct winShm winShm;           \/* A connection to shared-memory *\/$/;"	t	typeref:struct:winShm	file:
winShmBarrier	vendor\sqlite\sqlite3.c	/^static void winShmBarrier($/;"	f	file:
winShmBarrier	vendor\sqlite\sqlite3.c	36959;"	d	file:
winShmEnterMutex	vendor\sqlite\sqlite3.c	/^static void winShmEnterMutex(void){$/;"	f	file:
winShmLeaveMutex	vendor\sqlite\sqlite3.c	/^static void winShmLeaveMutex(void){$/;"	f	file:
winShmLock	vendor\sqlite\sqlite3.c	/^static int winShmLock($/;"	f	file:
winShmLock	vendor\sqlite\sqlite3.c	36958;"	d	file:
winShmMap	vendor\sqlite\sqlite3.c	/^static int winShmMap($/;"	f	file:
winShmMap	vendor\sqlite\sqlite3.c	36957;"	d	file:
winShmMutexHeld	vendor\sqlite\sqlite3.c	/^static int winShmMutexHeld(void) {$/;"	f	file:
winShmNode	vendor\sqlite\sqlite3.c	/^struct winShmNode {$/;"	s	file:
winShmNode	vendor\sqlite\sqlite3.c	/^typedef struct winShmNode winShmNode;   \/* A region of shared-memory *\/$/;"	t	typeref:struct:winShmNode	file:
winShmNodeList	vendor\sqlite\sqlite3.c	/^static winShmNode *winShmNodeList = 0;$/;"	v	file:
winShmPurge	vendor\sqlite\sqlite3.c	/^static void winShmPurge(sqlite3_vfs *pVfs, int deleteFlag){$/;"	f	file:
winShmSystemLock	vendor\sqlite\sqlite3.c	/^static int winShmSystemLock($/;"	f	file:
winShmUnmap	vendor\sqlite\sqlite3.c	/^static int winShmUnmap($/;"	f	file:
winShmUnmap	vendor\sqlite\sqlite3.c	36960;"	d	file:
winSleep	vendor\sqlite\sqlite3.c	/^static int winSleep(sqlite3_vfs *pVfs, int microsec){$/;"	f	file:
winSync	vendor\sqlite\sqlite3.c	/^static int winSync(sqlite3_file *id, int flags){$/;"	f	file:
winSysInfo	vendor\sqlite\sqlite3.c	/^static SYSTEM_INFO winSysInfo;$/;"	v	file:
winTruncate	vendor\sqlite\sqlite3.c	/^static int winTruncate(sqlite3_file *id, sqlite3_int64 nByte){$/;"	f	file:
winUnfetch	vendor\sqlite\sqlite3.c	/^static int winUnfetch(sqlite3_file *fd, i64 iOff, void *p){$/;"	f	file:
winUnicodeToMbcs	vendor\sqlite\sqlite3.c	/^static char *winUnicodeToMbcs(LPCWSTR zWideFilename){$/;"	f	file:
winUnicodeToUtf8	vendor\sqlite\sqlite3.c	/^static char *winUnicodeToUtf8(LPCWSTR zWideFilename){$/;"	f	file:
winUnlock	vendor\sqlite\sqlite3.c	/^static int winUnlock(sqlite3_file *id, int locktype){$/;"	f	file:
winUnlockFile	vendor\sqlite\sqlite3.c	/^static BOOL winUnlockFile($/;"	f	file:
winUnlockReadLock	vendor\sqlite\sqlite3.c	/^static int winUnlockReadLock(winFile *pFile){$/;"	f	file:
winUnmapfile	vendor\sqlite\sqlite3.c	/^static int winUnmapfile(winFile *pFile){$/;"	f	file:
winUtf8ToUnicode	vendor\sqlite\sqlite3.c	/^static LPWSTR winUtf8ToUnicode(const char *zFilename){$/;"	f	file:
winWrite	vendor\sqlite\sqlite3.c	/^static int winWrite($/;"	f	file:
win_mem_data	vendor\sqlite\sqlite3.c	/^static struct winMemData win_mem_data = {$/;"	v	typeref:struct:winMemData	file:
win_syscall	vendor\sqlite\sqlite3.c	/^static struct win_syscall {$/;"	s	file:
winceCreateLock	vendor\sqlite\sqlite3.c	/^static int winceCreateLock(const char *zFilename, winFile *pFile){$/;"	f	file:
winceDestroyLock	vendor\sqlite\sqlite3.c	/^static void winceDestroyLock(winFile *pFile){$/;"	f	file:
winceLock	vendor\sqlite\sqlite3.c	/^typedef struct winceLock {$/;"	s	file:
winceLock	vendor\sqlite\sqlite3.c	/^} winceLock;$/;"	t	typeref:struct:winceLock	file:
winceLockFile	vendor\sqlite\sqlite3.c	/^static BOOL winceLockFile($/;"	f	file:
winceMutexAcquire	vendor\sqlite\sqlite3.c	/^static void winceMutexAcquire(HANDLE h){$/;"	f	file:
winceMutexRelease	vendor\sqlite\sqlite3.c	35026;"	d	file:
winceUnlockFile	vendor\sqlite\sqlite3.c	/^static BOOL winceUnlockFile($/;"	f	file:
withDup	vendor\sqlite\sqlite3.c	/^static With *withDup(sqlite3 *db, With *p){$/;"	f	file:
withDup	vendor\sqlite\sqlite3.c	82990;"	d	file:
withExpand	vendor\sqlite\sqlite3.c	/^static int withExpand($/;"	f	file:
write32bits	vendor\sqlite\sqlite3.c	/^static int write32bits(sqlite3_file *fd, i64 offset, u32 val){$/;"	f	file:
writeCoord	vendor\sqlite\sqlite3.c	/^static int writeCoord(u8 *p, RtreeCoord *pCoord){$/;"	f	file:
writeInt16	vendor\sqlite\sqlite3.c	/^static int writeInt16(u8 *p, int i){$/;"	f	file:
writeInt64	vendor\sqlite\sqlite3.c	/^static int writeInt64(u8 *p, i64 i){$/;"	f	file:
writeJournalHdr	vendor\sqlite\sqlite3.c	/^static int writeJournalHdr(Pager *pPager){$/;"	f	file:
writeLock	vendor\sqlite\sqlite3.c	/^  u8 writeLock;              \/* True if in a write transaction *\/$/;"	m	struct:Wal	file:
writeMask	vendor\sqlite\sqlite3.c	/^  yDbMask writeMask;   \/* Start a write transaction on these databases *\/$/;"	m	struct:Parse	file:
writeMasterJournal	vendor\sqlite\sqlite3.c	/^static int writeMasterJournal(Pager *pPager, const char *zMaster){$/;"	f	file:
wsFlags	vendor\sqlite\sqlite3.c	/^  u32 wsFlags;          \/* WHERE_* flags describing the plan *\/$/;"	m	struct:WhereLoop	file:
wsdAutoext	vendor\sqlite\sqlite3.c	102171;"	d	file:
wsdAutoext	vendor\sqlite\sqlite3.c	102174;"	d	file:
wsdAutoextInit	vendor\sqlite\sqlite3.c	102169;"	d	file:
wsdAutoextInit	vendor\sqlite\sqlite3.c	102173;"	d	file:
wsdHooks	vendor\sqlite\sqlite3.c	16715;"	d	file:
wsdHooks	vendor\sqlite\sqlite3.c	16718;"	d	file:
wsdHooksInit	vendor\sqlite\sqlite3.c	16713;"	d	file:
wsdHooksInit	vendor\sqlite\sqlite3.c	16717;"	d	file:
wsdPrng	vendor\sqlite\sqlite3.c	22334;"	d	file:
wsdStat	vendor\sqlite\sqlite3.c	14892;"	d	file:
wsdStat	vendor\sqlite\sqlite3.c	14895;"	d	file:
wsdStatInit	vendor\sqlite\sqlite3.c	14891;"	d	file:
wsdStatInit	vendor\sqlite\sqlite3.c	14894;"	d	file:
wtFlags	vendor\sqlite\sqlite3.c	/^  u16 wtFlags;            \/* TERM_xxx bit flags.  See below *\/$/;"	m	struct:WhereTerm	file:
x	vendor\sqlite\sqlite3.c	/^      } x;$/;"	m	union:ExprList::ExprList_item::__anon8	typeref:struct:ExprList::ExprList_item::__anon8::__anon9	file:
x	vendor\sqlite\sqlite3.c	/^  } x;$/;"	m	struct:Expr	typeref:union:Expr::__anon7	file:
xAccess	vendor\sqlite\sqlite3.c	/^  int (*xAccess)(sqlite3_vfs*, const char *zName, int flags, int *pResOut);$/;"	m	struct:sqlite3_vfs	file:
xAdvance	vendor\sqlite\sqlite3.c	/^    int (*xAdvance)(BtCursor *, int *);$/;"	m	union:VdbeOp::__anon4	file:
xAuth	vendor\sqlite\sqlite3.c	/^  sqlite3_xauth xAuth;          \/* Access authorization function *\/$/;"	m	struct:sqlite3	file:
xBacktrace	vendor\sqlite\sqlite3.c	/^  void (*xBacktrace)(int, int, void **);$/;"	m	struct:__anon12	file:
xBegin	vendor\sqlite\sqlite3.c	/^  int (*xBegin)(sqlite3_vtab *pVTab);$/;"	m	struct:sqlite3_module	file:
xBenignBegin	vendor\sqlite\sqlite3.c	/^  void (*xBenignBegin)(void);$/;"	m	struct:BenignMallocHooks	file:
xBenignEnd	vendor\sqlite\sqlite3.c	/^  void (*xBenignEnd)(void);$/;"	m	struct:BenignMallocHooks	file:
xBestIndex	vendor\sqlite\sqlite3.c	/^  int (*xBestIndex)(sqlite3_vtab *pVTab, sqlite3_index_info*);$/;"	m	struct:sqlite3_module	file:
xBusyHandler	vendor\sqlite\sqlite3.c	/^  int (*xBusyHandler)(void*); \/* Function to call when busy *\/$/;"	m	struct:Pager	file:
xCachesize	vendor\sqlite\sqlite3.c	/^  void (*xCachesize)(sqlite3_pcache*, int nCachesize);$/;"	m	struct:sqlite3_pcache_methods	file:
xCachesize	vendor\sqlite\sqlite3.c	/^  void (*xCachesize)(sqlite3_pcache*, int nCachesize);$/;"	m	struct:sqlite3_pcache_methods2	file:
xCheckReservedLock	vendor\sqlite\sqlite3.c	/^  int (*xCheckReservedLock)(sqlite3_file*, int *pResOut);$/;"	m	struct:sqlite3_io_methods	file:
xClose	vendor\sqlite\sqlite3.c	/^  int (*xClose)(sqlite3_file*);$/;"	m	struct:sqlite3_io_methods	file:
xClose	vendor\sqlite\sqlite3.c	/^  int (*xClose)(sqlite3_tokenizer_cursor *pCursor);$/;"	m	struct:sqlite3_tokenizer_module	file:
xClose	vendor\sqlite\sqlite3.c	/^  int (*xClose)(sqlite3_vtab_cursor*);$/;"	m	struct:sqlite3_module	file:
xCmp	vendor\sqlite\sqlite3.c	/^  int (*xCmp)(void*,int, const void*, int, const void*);$/;"	m	struct:CollSeq	file:
xCodec	vendor\sqlite\sqlite3.c	/^  void *(*xCodec)(void*,void*,Pgno,int); \/* Routine for en\/decoding data *\/$/;"	m	struct:Pager	file:
xCodecFree	vendor\sqlite\sqlite3.c	/^  void (*xCodecFree)(void*);             \/* Destructor for the codec *\/$/;"	m	struct:Pager	file:
xCodecSizeChng	vendor\sqlite\sqlite3.c	/^  void (*xCodecSizeChng)(void*,int,int); \/* Notify of page size changes *\/$/;"	m	struct:Pager	file:
xCollNeeded	vendor\sqlite\sqlite3.c	/^  void(*xCollNeeded)(void*,sqlite3*,int eTextRep,const char*);$/;"	m	struct:sqlite3	file:
xCollNeeded16	vendor\sqlite\sqlite3.c	/^  void(*xCollNeeded16)(void*,sqlite3*,int eTextRep,const void*);$/;"	m	struct:sqlite3	file:
xColumn	vendor\sqlite\sqlite3.c	/^  int (*xColumn)(sqlite3_vtab_cursor*, sqlite3_context*, int);$/;"	m	struct:sqlite3_module	file:
xCommit	vendor\sqlite\sqlite3.c	/^  int (*xCommit)(sqlite3_vtab *pVTab);$/;"	m	struct:sqlite3_module	file:
xCommitCallback	vendor\sqlite\sqlite3.c	/^  int (*xCommitCallback)(void*);    \/* Invoked at every commit. *\/$/;"	m	struct:sqlite3	file:
xConnect	vendor\sqlite\sqlite3.c	/^  int (*xConnect)(sqlite3*, void *pAux,$/;"	m	struct:sqlite3_module	file:
xCreate	vendor\sqlite\sqlite3.c	/^  int (*xCreate)($/;"	m	struct:sqlite3_tokenizer_module	file:
xCreate	vendor\sqlite\sqlite3.c	/^  int (*xCreate)(sqlite3*, void *pAux,$/;"	m	struct:sqlite3_module	file:
xCreate	vendor\sqlite\sqlite3.c	/^  sqlite3_pcache *(*xCreate)(int szPage, int bPurgeable);$/;"	m	struct:sqlite3_pcache_methods	file:
xCreate	vendor\sqlite\sqlite3.c	/^  sqlite3_pcache *(*xCreate)(int szPage, int szExtra, int bPurgeable);$/;"	m	struct:sqlite3_pcache_methods2	file:
xCurrentTime	vendor\sqlite\sqlite3.c	/^  int (*xCurrentTime)(sqlite3_vfs*, double*);$/;"	m	struct:sqlite3_vfs	file:
xCurrentTimeInt64	vendor\sqlite\sqlite3.c	/^  int (*xCurrentTimeInt64)(sqlite3_vfs*, sqlite3_int64*);$/;"	m	struct:sqlite3_vfs	file:
xDel	vendor\sqlite\sqlite3.c	/^  void (*xDel)(void*);  \/* Destructor for pUser *\/$/;"	m	struct:CollSeq	file:
xDel	vendor\sqlite\sqlite3.c	/^  void (*xDel)(void*);\/* Destructor for Mem.z - only valid if MEM_Dyn *\/$/;"	m	struct:Mem	file:
xDelUser	vendor\sqlite\sqlite3.c	/^  void (*xDelUser)(void *);       \/* Called by SQLite to clean up pUser *\/$/;"	m	struct:sqlite3_rtree_geometry	file:
xDelUser	vendor\sqlite\sqlite3.c	/^  void (*xDelUser)(void*);          \/* function to free pUser *\/$/;"	m	struct:sqlite3_rtree_query_info	file:
xDelete	vendor\sqlite\sqlite3.c	/^  int (*xDelete)(sqlite3_vfs*, const char *zName, int syncDir);$/;"	m	struct:sqlite3_vfs	file:
xDelete	vendor\sqlite\sqlite3.c	/^  void (*xDelete)(void *);        \/* Destructor for the aux data *\/$/;"	m	struct:AuxData	file:
xDestroy	vendor\sqlite\sqlite3.c	/^  int (*xDestroy)(sqlite3_tokenizer *pTokenizer);$/;"	m	struct:sqlite3_tokenizer_module	file:
xDestroy	vendor\sqlite\sqlite3.c	/^  int (*xDestroy)(sqlite3_vtab *pVTab);$/;"	m	struct:sqlite3_module	file:
xDestroy	vendor\sqlite\sqlite3.c	/^  void (*xDestroy)(sqlite3_pcache*);$/;"	m	struct:sqlite3_pcache_methods	file:
xDestroy	vendor\sqlite\sqlite3.c	/^  void (*xDestroy)(sqlite3_pcache*);$/;"	m	struct:sqlite3_pcache_methods2	file:
xDestroy	vendor\sqlite\sqlite3.c	/^  void (*xDestroy)(void *);            \/* Module destructor function *\/$/;"	m	struct:Module	file:
xDestroy	vendor\sqlite\sqlite3.c	/^  void (*xDestroy)(void *);$/;"	m	struct:FuncDestructor	file:
xDestructor	vendor\sqlite\sqlite3.c	/^  void (*xDestructor)(void*);$/;"	m	struct:RtreeGeomCallback	file:
xDeviceCharacteristics	vendor\sqlite\sqlite3.c	/^  int (*xDeviceCharacteristics)(sqlite3_file*);$/;"	m	struct:sqlite3_io_methods	file:
xDisconnect	vendor\sqlite\sqlite3.c	/^  int (*xDisconnect)(sqlite3_vtab *pVTab);$/;"	m	struct:sqlite3_module	file:
xDlClose	vendor\sqlite\sqlite3.c	/^  void (*xDlClose)(sqlite3_vfs*, void*);$/;"	m	struct:sqlite3_vfs	file:
xDlError	vendor\sqlite\sqlite3.c	/^  void (*xDlError)(sqlite3_vfs*, int nByte, char *zErrMsg);$/;"	m	struct:sqlite3_vfs	file:
xDlOpen	vendor\sqlite\sqlite3.c	/^  void *(*xDlOpen)(sqlite3_vfs*, const char *zFilename);$/;"	m	struct:sqlite3_vfs	file:
xEof	vendor\sqlite\sqlite3.c	/^  int (*xEof)(sqlite3_vtab_cursor*);$/;"	m	struct:sqlite3_module	file:
xExprCallback	vendor\sqlite\sqlite3.c	/^  int (*xExprCallback)(Walker*, Expr*);     \/* Callback for expressions *\/$/;"	m	struct:Walker	file:
xFetch	vendor\sqlite\sqlite3.c	/^  int (*xFetch)(sqlite3_file*, sqlite3_int64 iOfst, int iAmt, void **pp);$/;"	m	struct:sqlite3_io_methods	file:
xFetch	vendor\sqlite\sqlite3.c	/^  sqlite3_pcache_page *(*xFetch)(sqlite3_pcache*, unsigned key, int createFlag);$/;"	m	struct:sqlite3_pcache_methods2	file:
xFetch	vendor\sqlite\sqlite3.c	/^  void *(*xFetch)(sqlite3_pcache*, unsigned key, int createFlag);$/;"	m	struct:sqlite3_pcache_methods	file:
xFileControl	vendor\sqlite\sqlite3.c	/^  int (*xFileControl)(sqlite3_file*, int op, void *pArg);$/;"	m	struct:sqlite3_io_methods	file:
xFileSize	vendor\sqlite\sqlite3.c	/^  int (*xFileSize)(sqlite3_file*, sqlite3_int64 *pSize);$/;"	m	struct:sqlite3_io_methods	file:
xFilter	vendor\sqlite\sqlite3.c	/^  int (*xFilter)(sqlite3_vtab_cursor*, int idxNum, const char *idxStr,$/;"	m	struct:sqlite3_module	file:
xFinalize	vendor\sqlite\sqlite3.c	/^  void (*xFinalize)(sqlite3_context*);                \/* Aggregate finalizer *\/$/;"	m	struct:FuncDef	file:
xFindFunction	vendor\sqlite\sqlite3.c	/^  int (*xFindFunction)(sqlite3_vtab *pVtab, int nArg, const char *zName,$/;"	m	struct:sqlite3_module	file:
xFree	vendor\sqlite\sqlite3.c	/^  void (*xFree)(void*);          \/* Free a prior allocation *\/$/;"	m	struct:sqlite3_mem_methods	file:
xFree	vendor\sqlite\sqlite3.c	/^static void xFree(void *p){$/;"	f	file:
xFreeSchema	vendor\sqlite\sqlite3.c	/^  void (*xFreeSchema)(void*);  \/* Destructor for BtShared.pSchema *\/$/;"	m	struct:BtShared	file:
xFullPathname	vendor\sqlite\sqlite3.c	/^  int (*xFullPathname)(sqlite3_vfs*, const char *zName, int nOut, char *zOut);$/;"	m	struct:sqlite3_vfs	file:
xFunc	vendor\sqlite\sqlite3.c	/^  int (*xFunc)(void *,int);  \/* The busy callback *\/$/;"	m	struct:BusyHandler	file:
xFunc	vendor\sqlite\sqlite3.c	/^  void (*xFunc)(sqlite3_context*,int,sqlite3_value**); \/* Regular function *\/$/;"	m	struct:FuncDef	file:
xGeom	vendor\sqlite\sqlite3.c	/^    int (*xGeom)(sqlite3_rtree_geometry*,int,RtreeDValue*,int*);$/;"	m	union:RtreeConstraint::__anon28	file:
xGeom	vendor\sqlite\sqlite3.c	/^  int (*xGeom)(sqlite3_rtree_geometry*, int, RtreeDValue*, int*);$/;"	m	struct:RtreeGeomCallback	file:
xGetLastError	vendor\sqlite\sqlite3.c	/^  int (*xGetLastError)(sqlite3_vfs*, int, char *);$/;"	m	struct:sqlite3_vfs	file:
xGetSystemCall	vendor\sqlite\sqlite3.c	/^  sqlite3_syscall_ptr (*xGetSystemCall)(sqlite3_vfs*, const char *zName);$/;"	m	struct:sqlite3_vfs	file:
xInit	vendor\sqlite\sqlite3.c	/^  int (*xInit)(void*);           \/* Initialize the memory allocator *\/$/;"	m	struct:sqlite3_mem_methods	file:
xInit	vendor\sqlite\sqlite3.c	/^  int (*xInit)(void*);$/;"	m	struct:sqlite3_pcache_methods	file:
xInit	vendor\sqlite\sqlite3.c	/^  int (*xInit)(void*);$/;"	m	struct:sqlite3_pcache_methods2	file:
xLanguageid	vendor\sqlite\sqlite3.c	/^  int (*xLanguageid)(sqlite3_tokenizer_cursor *pCsr, int iLangid);$/;"	m	struct:sqlite3_tokenizer_module	file:
xLock	vendor\sqlite\sqlite3.c	/^  int (*xLock)(sqlite3_file*, int);$/;"	m	struct:sqlite3_io_methods	file:
xLog	vendor\sqlite\sqlite3.c	/^  void (*xLog)(void*,int,const char*); \/* Function for logging *\/$/;"	m	struct:Sqlite3Config	file:
xMalloc	vendor\sqlite\sqlite3.c	/^  void *(*xMalloc)(int);         \/* Memory allocation function *\/$/;"	m	struct:sqlite3_mem_methods	file:
xMutexAlloc	vendor\sqlite\sqlite3.c	/^  sqlite3_mutex *(*xMutexAlloc)(int);$/;"	m	struct:sqlite3_mutex_methods	file:
xMutexEnd	vendor\sqlite\sqlite3.c	/^  int (*xMutexEnd)(void);$/;"	m	struct:sqlite3_mutex_methods	file:
xMutexEnter	vendor\sqlite\sqlite3.c	/^  void (*xMutexEnter)(sqlite3_mutex *);$/;"	m	struct:sqlite3_mutex_methods	file:
xMutexFree	vendor\sqlite\sqlite3.c	/^  void (*xMutexFree)(sqlite3_mutex *);$/;"	m	struct:sqlite3_mutex_methods	file:
xMutexHeld	vendor\sqlite\sqlite3.c	/^  int (*xMutexHeld)(sqlite3_mutex *);$/;"	m	struct:sqlite3_mutex_methods	file:
xMutexInit	vendor\sqlite\sqlite3.c	/^  int (*xMutexInit)(void);$/;"	m	struct:sqlite3_mutex_methods	file:
xMutexLeave	vendor\sqlite\sqlite3.c	/^  void (*xMutexLeave)(sqlite3_mutex *);$/;"	m	struct:sqlite3_mutex_methods	file:
xMutexNotheld	vendor\sqlite\sqlite3.c	/^  int (*xMutexNotheld)(sqlite3_mutex *);$/;"	m	struct:sqlite3_mutex_methods	file:
xMutexTry	vendor\sqlite\sqlite3.c	/^  int (*xMutexTry)(sqlite3_mutex *);$/;"	m	struct:sqlite3_mutex_methods	file:
xNext	vendor\sqlite\sqlite3.c	/^  int (*xNext)($/;"	m	struct:sqlite3_tokenizer_module	file:
xNext	vendor\sqlite\sqlite3.c	/^  int (*xNext)(sqlite3_vtab_cursor*);$/;"	m	struct:sqlite3_module	file:
xNextSystemCall	vendor\sqlite\sqlite3.c	/^  const char *(*xNextSystemCall)(sqlite3_vfs*, const char *zName);$/;"	m	struct:sqlite3_vfs	file:
xOpen	vendor\sqlite\sqlite3.c	/^  int (*xOpen)($/;"	m	struct:sqlite3_tokenizer_module	file:
xOpen	vendor\sqlite\sqlite3.c	/^  int (*xOpen)(sqlite3_vfs*, const char *zName, sqlite3_file*,$/;"	m	struct:sqlite3_vfs	file:
xOpen	vendor\sqlite\sqlite3.c	/^  int (*xOpen)(sqlite3_vtab *pVTab, sqlite3_vtab_cursor **ppCursor);$/;"	m	struct:sqlite3_module	file:
xPagecount	vendor\sqlite\sqlite3.c	/^  int (*xPagecount)(sqlite3_pcache*);$/;"	m	struct:sqlite3_pcache_methods	file:
xPagecount	vendor\sqlite\sqlite3.c	/^  int (*xPagecount)(sqlite3_pcache*);$/;"	m	struct:sqlite3_pcache_methods2	file:
xProfile	vendor\sqlite\sqlite3.c	/^  void (*xProfile)(void*,const char*,u64);  \/* Profiling function *\/$/;"	m	struct:sqlite3	file:
xProgress	vendor\sqlite\sqlite3.c	/^  int (*xProgress)(void *);     \/* The progress callback *\/$/;"	m	struct:sqlite3	file:
xQueryFunc	vendor\sqlite\sqlite3.c	/^    int (*xQueryFunc)(sqlite3_rtree_query_info*);$/;"	m	union:RtreeConstraint::__anon28	file:
xQueryFunc	vendor\sqlite\sqlite3.c	/^  int (*xQueryFunc)(sqlite3_rtree_query_info*);$/;"	m	struct:RtreeGeomCallback	file:
xRandomness	vendor\sqlite\sqlite3.c	/^  int (*xRandomness)(sqlite3_vfs*, int nByte, char *zOut);$/;"	m	struct:sqlite3_vfs	file:
xRead	vendor\sqlite\sqlite3.c	/^  int (*xRead)(sqlite3_file*, void*, int iAmt, sqlite3_int64 iOfst);$/;"	m	struct:sqlite3_io_methods	file:
xRealloc	vendor\sqlite\sqlite3.c	/^  void *(*xRealloc)(void*,int);  \/* Resize an allocation *\/$/;"	m	struct:sqlite3_mem_methods	file:
xReiniter	vendor\sqlite\sqlite3.c	/^  void (*xReiniter)(DbPage*); \/* Call this routine when reloading pages *\/$/;"	m	struct:Pager	file:
xRekey	vendor\sqlite\sqlite3.c	/^  void (*xRekey)(sqlite3_pcache*, sqlite3_pcache_page*, $/;"	m	struct:sqlite3_pcache_methods2	file:
xRekey	vendor\sqlite\sqlite3.c	/^  void (*xRekey)(sqlite3_pcache*, void*, unsigned oldKey, unsigned newKey);$/;"	m	struct:sqlite3_pcache_methods	file:
xRelease	vendor\sqlite\sqlite3.c	/^  int (*xRelease)(sqlite3_vtab *pVTab, int);$/;"	m	struct:sqlite3_module	file:
xRename	vendor\sqlite\sqlite3.c	/^  int (*xRename)(sqlite3_vtab *pVtab, const char *zNew);$/;"	m	struct:sqlite3_module	file:
xRollback	vendor\sqlite\sqlite3.c	/^  int (*xRollback)(sqlite3_vtab *pVTab);$/;"	m	struct:sqlite3_module	file:
xRollbackCallback	vendor\sqlite\sqlite3.c	/^  void (*xRollbackCallback)(void*); \/* Invoked at every commit. *\/$/;"	m	struct:sqlite3	file:
xRollbackTo	vendor\sqlite\sqlite3.c	/^  int (*xRollbackTo)(sqlite3_vtab *pVTab, int);$/;"	m	struct:sqlite3_module	file:
xRoundup	vendor\sqlite\sqlite3.c	/^  int (*xRoundup)(int);          \/* Round up request size to allocation size *\/$/;"	m	struct:sqlite3_mem_methods	file:
xRowid	vendor\sqlite\sqlite3.c	/^  int (*xRowid)(sqlite3_vtab_cursor*, sqlite3_int64 *pRowid);$/;"	m	struct:sqlite3_module	file:
xSavepoint	vendor\sqlite\sqlite3.c	/^  int (*xSavepoint)(sqlite3_vtab *pVTab, int);$/;"	m	struct:sqlite3_module	file:
xSectorSize	vendor\sqlite\sqlite3.c	/^  int (*xSectorSize)(sqlite3_file*);$/;"	m	struct:sqlite3_io_methods	file:
xSelectCallback	vendor\sqlite\sqlite3.c	/^  int (*xSelectCallback)(Walker*,Select*);  \/* Callback for SELECTs *\/$/;"	m	struct:Walker	file:
xSelectCallback2	vendor\sqlite\sqlite3.c	/^  void (*xSelectCallback2)(Walker*,Select*);\/* Second callback for SELECTs *\/$/;"	m	struct:Walker	file:
xSetSystemCall	vendor\sqlite\sqlite3.c	/^  int (*xSetSystemCall)(sqlite3_vfs*, const char *zName, sqlite3_syscall_ptr);$/;"	m	struct:sqlite3_vfs	file:
xShmBarrier	vendor\sqlite\sqlite3.c	/^  void (*xShmBarrier)(sqlite3_file*);$/;"	m	struct:sqlite3_io_methods	file:
xShmLock	vendor\sqlite\sqlite3.c	/^  int (*xShmLock)(sqlite3_file*, int offset, int n, int flags);$/;"	m	struct:sqlite3_io_methods	file:
xShmMap	vendor\sqlite\sqlite3.c	/^  int (*xShmMap)(sqlite3_file*, int iPg, int pgsz, int, void volatile**);$/;"	m	struct:sqlite3_io_methods	file:
xShmUnmap	vendor\sqlite\sqlite3.c	/^  int (*xShmUnmap)(sqlite3_file*, int deleteFlag);$/;"	m	struct:sqlite3_io_methods	file:
xShrink	vendor\sqlite\sqlite3.c	/^  void (*xShrink)(sqlite3_pcache*);$/;"	m	struct:sqlite3_pcache_methods2	file:
xShutdown	vendor\sqlite\sqlite3.c	/^  void (*xShutdown)(void*);      \/* Deinitialize the memory allocator *\/$/;"	m	struct:sqlite3_mem_methods	file:
xShutdown	vendor\sqlite\sqlite3.c	/^  void (*xShutdown)(void*);$/;"	m	struct:sqlite3_pcache_methods	file:
xShutdown	vendor\sqlite\sqlite3.c	/^  void (*xShutdown)(void*);$/;"	m	struct:sqlite3_pcache_methods2	file:
xSize	vendor\sqlite\sqlite3.c	/^  int (*xSize)(void*);           \/* Return the size of an allocation *\/$/;"	m	struct:sqlite3_mem_methods	file:
xSleep	vendor\sqlite\sqlite3.c	/^  int (*xSleep)(sqlite3_vfs*, int microseconds);$/;"	m	struct:sqlite3_vfs	file:
xSqllog	vendor\sqlite\sqlite3.c	/^  void(*xSqllog)(void*,sqlite3*,const char*, int);$/;"	m	struct:Sqlite3Config	file:
xStep	vendor\sqlite\sqlite3.c	/^  void (*xStep)(sqlite3_context*,int,sqlite3_value**); \/* Aggregate step *\/$/;"	m	struct:FuncDef	file:
xStress	vendor\sqlite\sqlite3.c	/^  int (*xStress)(void*,PgHdr*);       \/* Call to try make a page clean *\/$/;"	m	struct:PCache	file:
xSync	vendor\sqlite\sqlite3.c	/^  int (*xSync)(sqlite3_file*, int flags);$/;"	m	struct:sqlite3_io_methods	file:
xSync	vendor\sqlite\sqlite3.c	/^  int (*xSync)(sqlite3_vtab *pVTab);$/;"	m	struct:sqlite3_module	file:
xTask	vendor\sqlite\sqlite3.c	/^  void *(*xTask)(void*);         \/* The thread routine *\/$/;"	m	struct:SQLiteThread	file:
xTask	vendor\sqlite\sqlite3.c	/^  void *(*xTask)(void*);   \/* The routine to run as a thread *\/$/;"	m	struct:SQLiteThread	file:
xTestCallback	vendor\sqlite\sqlite3.c	/^  int (*xTestCallback)(int);        \/* Invoked by sqlite3FaultSim() *\/$/;"	m	struct:Sqlite3Config	file:
xTrace	vendor\sqlite\sqlite3.c	/^  void (*xTrace)(void*,const char*);        \/* Trace function *\/$/;"	m	struct:sqlite3	file:
xTruncate	vendor\sqlite\sqlite3.c	/^  int (*xTruncate)(sqlite3_file*, sqlite3_int64 size);$/;"	m	struct:sqlite3_io_methods	file:
xTruncate	vendor\sqlite\sqlite3.c	/^  void (*xTruncate)(sqlite3_pcache*, unsigned iLimit);$/;"	m	struct:sqlite3_pcache_methods	file:
xTruncate	vendor\sqlite\sqlite3.c	/^  void (*xTruncate)(sqlite3_pcache*, unsigned iLimit);$/;"	m	struct:sqlite3_pcache_methods2	file:
xUnfetch	vendor\sqlite\sqlite3.c	/^  int (*xUnfetch)(sqlite3_file*, sqlite3_int64 iOfst, void *p);$/;"	m	struct:sqlite3_io_methods	file:
xUnlock	vendor\sqlite\sqlite3.c	/^  int (*xUnlock)(sqlite3_file*, int);$/;"	m	struct:sqlite3_io_methods	file:
xUnlockNotify	vendor\sqlite\sqlite3.c	/^  void (*xUnlockNotify)(void **, int);  \/* Unlock notify callback *\/$/;"	m	struct:sqlite3	file:
xUnpin	vendor\sqlite\sqlite3.c	/^  void (*xUnpin)(sqlite3_pcache*, sqlite3_pcache_page*, int discard);$/;"	m	struct:sqlite3_pcache_methods2	file:
xUnpin	vendor\sqlite\sqlite3.c	/^  void (*xUnpin)(sqlite3_pcache*, void*, int discard);$/;"	m	struct:sqlite3_pcache_methods	file:
xUpdate	vendor\sqlite\sqlite3.c	/^  int (*xUpdate)(sqlite3_vtab *, int, sqlite3_value **, sqlite3_int64 *);$/;"	m	struct:sqlite3_module	file:
xUpdateCallback	vendor\sqlite\sqlite3.c	/^  void (*xUpdateCallback)(void*,int, const char*,const char*,sqlite_int64);$/;"	m	struct:sqlite3	file:
xVdbeBranch	vendor\sqlite\sqlite3.c	/^  void (*xVdbeBranch)(void*,int iSrcLine,u8 eThis,u8 eMx);  \/* Callback *\/$/;"	m	struct:Sqlite3Config	file:
xWalCallback	vendor\sqlite\sqlite3.c	/^  int (*xWalCallback)(void *, sqlite3 *, const char *, int);$/;"	m	struct:sqlite3	file:
xWrite	vendor\sqlite\sqlite3.c	/^  int (*xWrite)(sqlite3_file*, const void*, int iAmt, sqlite3_int64 iOfst);$/;"	m	struct:sqlite3_io_methods	file:
xferCompatibleCollation	vendor\sqlite\sqlite3.c	/^static int xferCompatibleCollation(const char *z1, const char *z2){$/;"	f	file:
xferCompatibleIndex	vendor\sqlite\sqlite3.c	/^static int xferCompatibleIndex(Index *pDest, Index *pSrc){$/;"	f	file:
xferOptimization	vendor\sqlite\sqlite3.c	/^static int xferOptimization($/;"	f	file:
xthreadsafe	vendor\sqlite\sqlite3.c	/^  int (*xthreadsafe)(void);$/;"	m	struct:sqlite3_api_routines	file:
yColCache	vendor\sqlite\sqlite3.c	/^  struct yColCache {$/;"	s	struct:Parse	file:
yDbMask	vendor\sqlite\sqlite3.c	/^  typedef unsigned char yDbMask[(SQLITE_MAX_ATTACHED+9)\/8];$/;"	t	file:
yDbMask	vendor\sqlite\sqlite3.c	/^  typedef unsigned int yDbMask;$/;"	t	file:
ynVar	vendor\sqlite\sqlite3.c	/^typedef i16 ynVar;$/;"	t	file:
ynVar	vendor\sqlite\sqlite3.c	/^typedef int ynVar;$/;"	t	file:
yy0	vendor\sqlite\sqlite3.c	/^  sqlite3ParserTOKENTYPE yy0;$/;"	m	union:__anon25	file:
yy132	vendor\sqlite\sqlite3.c	/^  Expr* yy132;$/;"	m	union:__anon25	file:
yy14	vendor\sqlite\sqlite3.c	/^  ExprList* yy14;$/;"	m	union:__anon25	file:
yy186	vendor\sqlite\sqlite3.c	/^  u8 yy186;$/;"	m	union:__anon25	file:
yy3	vendor\sqlite\sqlite3.c	/^  Select* yy3;$/;"	m	union:__anon25	file:
yy328	vendor\sqlite\sqlite3.c	/^  int yy328;$/;"	m	union:__anon25	file:
yy346	vendor\sqlite\sqlite3.c	/^  ExprSpan yy346;$/;"	m	union:__anon25	file:
yy378	vendor\sqlite\sqlite3.c	/^  struct TrigEvent yy378;$/;"	m	union:__anon25	typeref:struct:__anon25::TrigEvent	file:
yy381	vendor\sqlite\sqlite3.c	/^  u16 yy381;$/;"	m	union:__anon25	file:
yy408	vendor\sqlite\sqlite3.c	/^  IdList* yy408;$/;"	m	union:__anon25	file:
yy429	vendor\sqlite\sqlite3.c	/^  struct {int value; int mask;} yy429;$/;"	m	union:__anon25	typeref:struct:__anon25::__anon26	file:
yy473	vendor\sqlite\sqlite3.c	/^  TriggerStep* yy473;$/;"	m	union:__anon25	file:
yy476	vendor\sqlite\sqlite3.c	/^  struct LimitVal yy476;$/;"	m	union:__anon25	typeref:struct:__anon25::LimitVal	file:
yy59	vendor\sqlite\sqlite3.c	/^  With* yy59;$/;"	m	union:__anon25	file:
yy65	vendor\sqlite\sqlite3.c	/^  SrcList* yy65;$/;"	m	union:__anon25	file:
yy96	vendor\sqlite\sqlite3.c	/^  struct LikeOp yy96;$/;"	m	union:__anon25	typeref:struct:__anon25::LikeOp	file:
yyFallback	vendor\sqlite\sqlite3.c	/^static const YYCODETYPE yyFallback[] = {$/;"	v	file:
yyGrowStack	vendor\sqlite\sqlite3.c	/^static void yyGrowStack(yyParser *p){$/;"	f	file:
yyParser	vendor\sqlite\sqlite3.c	/^struct yyParser {$/;"	s	file:
yyParser	vendor\sqlite\sqlite3.c	/^typedef struct yyParser yyParser;$/;"	t	typeref:struct:yyParser	file:
yyRuleInfo	vendor\sqlite\sqlite3.c	/^} yyRuleInfo[] = {$/;"	v	typeref:struct:__anon27	file:
yyRuleName	vendor\sqlite\sqlite3.c	/^static const char *const yyRuleName[] = {$/;"	v	file:
yyStackEntry	vendor\sqlite\sqlite3.c	/^struct yyStackEntry {$/;"	s	file:
yyStackEntry	vendor\sqlite\sqlite3.c	/^typedef struct yyStackEntry yyStackEntry;$/;"	t	typeref:struct:yyStackEntry	file:
yyStackOverflow	vendor\sqlite\sqlite3.c	/^static void yyStackOverflow(yyParser *yypParser, YYMINORTYPE *yypMinor){$/;"	f	file:
yyTokenName	vendor\sqlite\sqlite3.c	/^static const char *const yyTokenName[] = { $/;"	v	file:
yyTraceFILE	vendor\sqlite\sqlite3.c	/^static FILE *yyTraceFILE = 0;$/;"	v	file:
yyTracePrompt	vendor\sqlite\sqlite3.c	/^static char *yyTracePrompt = 0;$/;"	v	file:
yy_accept	vendor\sqlite\sqlite3.c	/^static void yy_accept($/;"	f	file:
yy_action	vendor\sqlite\sqlite3.c	/^static const YYACTIONTYPE yy_action[] = {$/;"	v	file:
yy_default	vendor\sqlite\sqlite3.c	/^static const YYACTIONTYPE yy_default[] = {$/;"	v	file:
yy_destructor	vendor\sqlite\sqlite3.c	/^static void yy_destructor($/;"	f	file:
yy_find_reduce_action	vendor\sqlite\sqlite3.c	/^static int yy_find_reduce_action($/;"	f	file:
yy_find_shift_action	vendor\sqlite\sqlite3.c	/^static int yy_find_shift_action($/;"	f	file:
yy_lookahead	vendor\sqlite\sqlite3.c	/^static const YYCODETYPE yy_lookahead[] = {$/;"	v	file:
yy_parse_failed	vendor\sqlite\sqlite3.c	/^static void yy_parse_failed($/;"	f	file:
yy_pop_parser_stack	vendor\sqlite\sqlite3.c	/^static int yy_pop_parser_stack(yyParser *pParser){$/;"	f	file:
yy_reduce	vendor\sqlite\sqlite3.c	/^static void yy_reduce($/;"	f	file:
yy_reduce_ofst	vendor\sqlite\sqlite3.c	/^static const short yy_reduce_ofst[] = {$/;"	v	file:
yy_shift	vendor\sqlite\sqlite3.c	/^static void yy_shift($/;"	f	file:
yy_shift_ofst	vendor\sqlite\sqlite3.c	/^static const short yy_shift_ofst[] = {$/;"	v	file:
yy_syntax_error	vendor\sqlite\sqlite3.c	/^static void yy_syntax_error($/;"	f	file:
yyerrcnt	vendor\sqlite\sqlite3.c	/^  int yyerrcnt;                 \/* Shifts left before out of the error *\/$/;"	m	struct:yyParser	file:
yyidx	vendor\sqlite\sqlite3.c	/^  int yyidx;                    \/* Index of top element in stack *\/$/;"	m	struct:yyParser	file:
yyidxMax	vendor\sqlite\sqlite3.c	/^  int yyidxMax;                 \/* Maximum value of yyidx *\/$/;"	m	struct:yyParser	file:
yyinit	vendor\sqlite\sqlite3.c	/^  int yyinit;$/;"	m	union:__anon25	file:
yystack	vendor\sqlite\sqlite3.c	/^  yyStackEntry *yystack;        \/* The parser's stack *\/$/;"	m	struct:yyParser	file:
yystksz	vendor\sqlite\sqlite3.c	/^  int yystksz;                  \/* Current side of the stack *\/$/;"	m	struct:yyParser	file:
yytestcase	vendor\sqlite\sqlite3.c	122162;"	d	file:
yytestcase	vendor\sqlite\sqlite3.c	122371;"	d	file:
yyzerominor	vendor\sqlite\sqlite3.c	/^static const YYMINORTYPE yyzerominor = { 0 };$/;"	v	file:
z	vendor\sqlite\sqlite3.c	/^    char *z;               \/* Pointer to data for string (char array) types *\/$/;"	m	union:VdbeOp::__anon4	file:
z	vendor\sqlite\sqlite3.c	/^  char *z;                        \/* Pointer to buffer containing string *\/$/;"	m	struct:StrBuffer	file:
z	vendor\sqlite\sqlite3.c	/^  char *z;                        \/* Text of the token *\/$/;"	m	struct:Fts3PhraseToken	file:
z	vendor\sqlite\sqlite3.c	/^  char *z;            \/* String or BLOB value *\/$/;"	m	struct:Mem	file:
z	vendor\sqlite\sqlite3.c	/^  const char *z;     \/* Text of the token.  Not NULL-terminated! *\/$/;"	m	struct:Token	file:
zAlias	vendor\sqlite\sqlite3.c	/^    char *zAlias;     \/* The "B" part of a "A AS B" phrase.  zName is the "A" *\/$/;"	m	struct:SrcList::SrcList_item	file:
zAuthContext	vendor\sqlite\sqlite3.c	/^  const char *zAuthContext;   \/* Put saved Parse.zAuthContext here *\/$/;"	m	struct:AuthContext	file:
zAuthContext	vendor\sqlite\sqlite3.c	/^  const char *zAuthContext; \/* The 6th parameter to db->xAuth callbacks *\/$/;"	m	struct:Parse	file:
zAuthPW	vendor\sqlite\sqlite3.c	/^  char *zAuthPW;                \/* Password used to authenticate *\/$/;"	m	struct:sqlite3_userauth	file:
zAuthUser	vendor\sqlite\sqlite3.c	/^  char *zAuthUser;              \/* User name used to authenticate *\/$/;"	m	struct:sqlite3_userauth	file:
zBase	vendor\sqlite\sqlite3.c	/^  char *zBase;         \/* A base allocation.  Not from malloc. *\/$/;"	m	struct:StrAccum	file:
zBase	vendor\sqlite\sqlite3.c	/^  char zBase[100];   \/* Initial space *\/$/;"	m	struct:Explain	file:
zBuf	vendor\sqlite\sqlite3.c	/^  char *zBuf;                     \/* Space to buffer journal writes *\/$/;"	m	struct:JournalFile	file:
zBuffer	vendor\sqlite\sqlite3.c	/^  char *zBuffer;$/;"	m	struct:IcuCursor	file:
zCanonicalName	vendor\sqlite\sqlite3.c	/^  char *zCanonicalName;         \/* Canonical filename *\/$/;"	m	struct:vxworksFileId	file:
zChunk	vendor\sqlite\sqlite3.c	/^  u8 zChunk[JOURNAL_CHUNKSIZE];   \/* Content of this chunk *\/$/;"	m	struct:FileChunk	file:
zCol	vendor\sqlite\sqlite3.c	/^    char *zCol;           \/* Name of column in zTo.  If NULL use PRIMARY KEY *\/$/;"	m	struct:FKey::sColMap	file:
zColAff	vendor\sqlite\sqlite3.c	/^  char *zColAff;           \/* String defining the affinity of each column *\/$/;"	m	struct:Index	file:
zColAff	vendor\sqlite\sqlite3.c	/^  char *zColAff;       \/* String defining the affinity of each column *\/$/;"	m	struct:Table	file:
zColl	vendor\sqlite\sqlite3.c	/^  char *zColl;     \/* Collating sequence.  If NULL, use the default *\/$/;"	m	struct:Column	file:
zCollName	vendor\sqlite\sqlite3.c	/^  char *zCollName;           \/* Required collating sequence, if not NULL *\/$/;"	m	struct:WhereScan	file:
zComment	vendor\sqlite\sqlite3.c	/^  char *zComment;          \/* Comment to improve readability *\/$/;"	m	struct:VdbeOp	file:
zContentTbl	vendor\sqlite\sqlite3.c	/^  char *zContentTbl;              \/* content=xxx option, or NULL *\/$/;"	m	struct:Fts3Table	file:
zData	vendor\sqlite\sqlite3.c	/^  u8 *zData;                  \/* Content of the node, as should be on disk *\/$/;"	m	struct:RtreeNode	file:
zDatabase	vendor\sqlite\sqlite3.c	/^    char *zDatabase;  \/* Name of database holding this table *\/$/;"	m	struct:SrcList::SrcList_item	file:
zDatabase	vendor\sqlite\sqlite3.c	/^  const char *zDatabase;$/;"	m	struct:analysisInfo	file:
zDb	vendor\sqlite\sqlite3.c	/^  char *zDb;                  \/* Name of database containing r-tree table *\/$/;"	m	struct:Rtree	file:
zDb	vendor\sqlite\sqlite3.c	/^  const char *zDb;                \/* logical database name *\/$/;"	m	struct:Fts3Table	file:
zDb	vendor\sqlite\sqlite3.c	/^  const char *zDb;    \/* Make sure all objects are contained in this database *\/$/;"	m	struct:DbFixer	file:
zDeleteOnClose	vendor\sqlite\sqlite3.c	/^  LPWSTR zDeleteOnClose;  \/* Name of file to delete when closing *\/$/;"	m	struct:winFile	file:
zDflt	vendor\sqlite\sqlite3.c	/^  char *zDflt;     \/* Original text of the default value *\/$/;"	m	struct:Column	file:
zEnd	vendor\sqlite\sqlite3.c	/^  const char *zEnd;     \/* One character past the end of input text *\/$/;"	m	struct:ExprSpan	file:
zErr	vendor\sqlite\sqlite3.c	/^    const char *zErr;               \/* Error message for circular references *\/$/;"	m	struct:With::Cte	file:
zErrMsg	vendor\sqlite\sqlite3.c	/^  char *zErrMsg;                  \/* Error message from sqlite3_mprintf() *\/$/;"	m	struct:sqlite3_vtab	file:
zErrMsg	vendor\sqlite\sqlite3.c	/^  char *zErrMsg;          \/* Error message written here *\/$/;"	m	struct:Vdbe	file:
zErrMsg	vendor\sqlite\sqlite3.c	/^  char *zErrMsg;       \/* An error message *\/$/;"	m	struct:Parse	file:
zErrMsg	vendor\sqlite\sqlite3.c	/^  char *zErrMsg;     \/* Error message text, if an error occurs *\/$/;"	m	struct:TabResult	file:
zFilename	vendor\sqlite\sqlite3.c	/^  char *zFilename;            \/* Name of the database file *\/$/;"	m	struct:Pager	file:
zFilename	vendor\sqlite\sqlite3.c	/^  char *zFilename;           \/* Name of the file *\/$/;"	m	struct:winShmNode	file:
zFilename	vendor\sqlite\sqlite3.c	/^  char *zFilename;           \/* Name of the mmapped file *\/$/;"	m	struct:unixShmNode	file:
zIndex	vendor\sqlite\sqlite3.c	/^    char *zIndex;     \/* Identifier from "INDEXED BY <zIndex>" clause *\/$/;"	m	struct:SrcList::SrcList_item	file:
zInput	vendor\sqlite\sqlite3.c	/^  char *zInput;                   \/* Input string *\/$/;"	m	struct:Fts3tokCursor	file:
zInput	vendor\sqlite\sqlite3.c	/^  const char *zInput;          \/* input we are tokenizing *\/$/;"	m	struct:porter_tokenizer_cursor	file:
zJournal	vendor\sqlite\sqlite3.c	/^  char *zJournal;             \/* Name of the journal file *\/$/;"	m	struct:Pager	file:
zJournal	vendor\sqlite\sqlite3.c	/^  const char *zJournal;           \/* Name of the journal file *\/$/;"	m	struct:JournalFile	file:
zLanguageid	vendor\sqlite\sqlite3.c	/^  char *zLanguageid;              \/* languageid=xxx option, or NULL *\/$/;"	m	struct:Fts3Table	file:
zLocale	vendor\sqlite\sqlite3.c	/^  char *zLocale;$/;"	m	struct:IcuTokenizer	file:
zMagicHeader	vendor\sqlite\sqlite3.c	/^static const char zMagicHeader[] = SQLITE_FILE_HEADER;$/;"	v	file:
zMalloc	vendor\sqlite\sqlite3.c	/^  char *zMalloc;                  \/* Malloc'd space (possibly) used for zTerm *\/$/;"	m	struct:SegmentNode	file:
zMalloc	vendor\sqlite\sqlite3.c	/^  char *zMalloc;                  \/* Malloc'd space (possibly) used for zTerm *\/$/;"	m	struct:SegmentWriter	file:
zMalloc	vendor\sqlite\sqlite3.c	/^  char *zMalloc;      \/* Space to hold MEM_Str or MEM_Blob if szMalloc>0 *\/$/;"	m	struct:Mem	file:
zMatchinfo	vendor\sqlite\sqlite3.c	/^  char *zMatchinfo;               \/* Matchinfo specification *\/$/;"	m	struct:Fts3Cursor	file:
zName	vendor\sqlite\sqlite3.c	/^    char *zName;                    \/* Name of this CTE *\/$/;"	m	struct:With::Cte	file:
zName	vendor\sqlite\sqlite3.c	/^    char *zName;            \/* Token associated with this expression *\/$/;"	m	struct:ExprList::ExprList_item	file:
zName	vendor\sqlite\sqlite3.c	/^    char *zName;      \/* Name of the identifier *\/$/;"	m	struct:IdList::IdList_item	file:
zName	vendor\sqlite\sqlite3.c	/^    char *zName;      \/* Name of the table *\/$/;"	m	struct:SrcList::SrcList_item	file:
zName	vendor\sqlite\sqlite3.c	/^  char *zName;                        \/* Savepoint name (nul-terminated) *\/$/;"	m	struct:Savepoint	file:
zName	vendor\sqlite\sqlite3.c	/^  char *zName;                    \/* Name of table or index *\/$/;"	m	struct:ScanStatus	file:
zName	vendor\sqlite\sqlite3.c	/^  char *zName;                \/* Name of r-tree table *\/ $/;"	m	struct:Rtree	file:
zName	vendor\sqlite\sqlite3.c	/^  char *zName;             \/* Name of this index *\/$/;"	m	struct:Index	file:
zName	vendor\sqlite\sqlite3.c	/^  char *zName;            \/* The name of the trigger                        *\/$/;"	m	struct:Trigger	file:
zName	vendor\sqlite\sqlite3.c	/^  char *zName;          \/* Name of the collating sequence, UTF-8 encoded *\/$/;"	m	struct:CollSeq	file:
zName	vendor\sqlite\sqlite3.c	/^  char *zName;         \/* Name of the table or view *\/$/;"	m	struct:Table	file:
zName	vendor\sqlite\sqlite3.c	/^  char *zName;         \/* Name of this database *\/$/;"	m	struct:Db	file:
zName	vendor\sqlite\sqlite3.c	/^  char *zName;         \/* SQL name of the function. *\/$/;"	m	struct:FuncDef	file:
zName	vendor\sqlite\sqlite3.c	/^  char *zName;     \/* Name of this column *\/$/;"	m	struct:Column	file:
zName	vendor\sqlite\sqlite3.c	/^  const char *const zName;  \/* Name of pragma *\/$/;"	m	struct:sPragmaNames	file:
zName	vendor\sqlite\sqlite3.c	/^  const char *zName;                   \/* Name passed to create_module() *\/$/;"	m	struct:Module	file:
zName	vendor\sqlite\sqlite3.c	/^  const char *zName;              \/* virtual table name *\/$/;"	m	struct:Fts3Table	file:
zName	vendor\sqlite\sqlite3.c	/^  const char *zName;            \/* Name of the system call *\/$/;"	m	struct:unix_syscall	file:
zName	vendor\sqlite\sqlite3.c	/^  const char *zName;            \/* Name of the system call *\/$/;"	m	struct:win_syscall	file:
zName	vendor\sqlite\sqlite3.c	/^  const char *zName;       \/* Name of this virtual file system *\/$/;"	m	struct:sqlite3_vfs	file:
zName	vendor\sqlite\sqlite3.c	/^  const char *zName;   \/* Name of the table *\/$/;"	m	struct:TableLock	file:
zPath	vendor\sqlite\sqlite3.c	/^  const char *zPath;                  \/* Name of the file *\/$/;"	m	struct:unixFile	file:
zPath	vendor\sqlite\sqlite3.c	/^  const char *zPath;      \/* Full pathname of this file *\/$/;"	m	struct:winFile	file:
zPfx	vendor\sqlite\sqlite3.c	/^  const char *zPfx; \/* Error message prefix *\/$/;"	m	struct:IntegrityCk	file:
zPool	vendor\sqlite\sqlite3.c	/^  u8 *zPool;       \/* Memory available to be allocated *\/$/;"	m	struct:Mem5Global	file:
zReadExprlist	vendor\sqlite\sqlite3.c	/^  char *zReadExprlist;$/;"	m	struct:Fts3Table	file:
zSegmentsTbl	vendor\sqlite\sqlite3.c	/^  char *zSegmentsTbl;             \/* Name of %_segments table *\/$/;"	m	struct:Fts3Table	file:
zSelName	vendor\sqlite\sqlite3.c	/^  char zSelName[12];     \/* Symbolic name of this SELECT use for debugging *\/$/;"	m	struct:Select	file:
zSpan	vendor\sqlite\sqlite3.c	/^    char *zSpan;            \/* Original text of the expression *\/$/;"	m	struct:ExprList::ExprList_item	file:
zSql	vendor\sqlite\sqlite3.c	/^  char *zSql;             \/* Text of the SQL statement that generated this *\/$/;"	m	struct:Vdbe	file:
zStart	vendor\sqlite\sqlite3.c	/^  const char *zStart;   \/* First character of input text *\/$/;"	m	struct:ExprSpan	file:
zStop	vendor\sqlite\sqlite3.c	/^  char *zStop;$/;"	m	struct:Fts3auxCursor	file:
zTail	vendor\sqlite\sqlite3.c	/^  const char *zTail;        \/* All SQL text past the last semicolon parsed *\/$/;"	m	struct:Parse	file:
zTerm	vendor\sqlite\sqlite3.c	/^  char *zTerm;                    \/* Pointer to current term *\/$/;"	m	struct:Fts3SegReader	file:
zTerm	vendor\sqlite\sqlite3.c	/^  char *zTerm;                    \/* Pointer to previous term buffer *\/$/;"	m	struct:SegmentNode	file:
zTerm	vendor\sqlite\sqlite3.c	/^  char *zTerm;                    \/* Pointer to previous term buffer *\/$/;"	m	struct:SegmentWriter	file:
zTerm	vendor\sqlite\sqlite3.c	/^  char *zTerm;                    \/* Pointer to term buffer *\/$/;"	m	struct:Fts3MultiSegReader	file:
zTerm	vendor\sqlite\sqlite3.c	/^  const char *zTerm;$/;"	m	struct:Fts3SegFilter	file:
zText	vendor\sqlite\sqlite3.c	/^  char *zText;         \/* The string collected so far *\/$/;"	m	struct:StrAccum	file:
zTitle	vendor\sqlite\sqlite3.c	/^  char zTitle[100];  \/* The title text *\/$/;"	m	struct:__anon12	file:
zTo	vendor\sqlite\sqlite3.c	/^  char *zTo;        \/* Name of table that the key points to (aka: Parent) *\/$/;"	m	struct:FKey	file:
zToken	vendor\sqlite\sqlite3.c	/^    char *zToken;          \/* Token value. Zero terminated and dequoted *\/$/;"	m	union:Expr::__anon6	file:
zToken	vendor\sqlite\sqlite3.c	/^  char *zToken;                   \/* storage for current token *\/$/;"	m	struct:unicode_cursor	file:
zToken	vendor\sqlite\sqlite3.c	/^  char *zToken;                \/* storage for current token *\/$/;"	m	struct:porter_tokenizer_cursor	file:
zToken	vendor\sqlite\sqlite3.c	/^  const char *zToken;             \/* Current 'token' value *\/$/;"	m	struct:Fts3tokCursor	file:
zType	vendor\sqlite\sqlite3.c	/^  char *zType;     \/* Data type for this column *\/$/;"	m	struct:Column	file:
zType	vendor\sqlite\sqlite3.c	/^  const char *zType;  \/* Type of the container - used for error messages *\/$/;"	m	struct:DbFixer	file:
zWal	vendor\sqlite\sqlite3.c	/^  char *zWal;                 \/* File name for write-ahead log *\/$/;"	m	struct:Pager	file:
zWalName	vendor\sqlite\sqlite3.c	/^  const char *zWalName;      \/* Name of WAL file *\/$/;"	m	struct:Wal	file:
zWriteExprlist	vendor\sqlite\sqlite3.c	/^  char *zWriteExprlist;$/;"	m	struct:Fts3Table	file:
zeroJournalHdr	vendor\sqlite\sqlite3.c	/^static int zeroJournalHdr(Pager *pPager, int doTruncate){$/;"	f	file:
zeroPage	vendor\sqlite\sqlite3.c	/^static void zeroPage(MemPage *pPage, int flags){$/;"	f	file:
zeroblobFunc	vendor\sqlite\sqlite3.c	/^static void zeroblobFunc($/;"	f	file:
FULLY_WITHIN	vendor\sqlite\sqlite3.h	7730;"	d
NOT_WITHIN	vendor\sqlite\sqlite3.h	7728;"	d
PARTLY_WITHIN	vendor\sqlite\sqlite3.h	7729;"	d
SQLITE3_TEXT	vendor\sqlite\sqlite3.h	3842;"	d
SQLITE_ABORT	vendor\sqlite\sqlite3.h	403;"	d
SQLITE_ABORT_ROLLBACK	vendor\sqlite\sqlite3.h	486;"	d
SQLITE_ACCESS_EXISTS	vendor\sqlite\sqlite3.h	1214;"	d
SQLITE_ACCESS_READ	vendor\sqlite\sqlite3.h	1216;"	d
SQLITE_ACCESS_READWRITE	vendor\sqlite\sqlite3.h	1215;"	d
SQLITE_ALTER_TABLE	vendor\sqlite\sqlite3.h	2637;"	d
SQLITE_ANALYZE	vendor\sqlite\sqlite3.h	2639;"	d
SQLITE_ANY	vendor\sqlite\sqlite3.h	4209;"	d
SQLITE_API	vendor\sqlite\sqlite3.h	53;"	d
SQLITE_ATTACH	vendor\sqlite\sqlite3.h	2635;"	d
SQLITE_AUTH	vendor\sqlite\sqlite3.h	422;"	d
SQLITE_AUTH_USER	vendor\sqlite\sqlite3.h	500;"	d
SQLITE_BLOB	vendor\sqlite\sqlite3.h	3835;"	d
SQLITE_BUSY	vendor\sqlite\sqlite3.h	404;"	d
SQLITE_BUSY_RECOVERY	vendor\sqlite\sqlite3.h	475;"	d
SQLITE_BUSY_SNAPSHOT	vendor\sqlite\sqlite3.h	476;"	d
SQLITE_CANTOPEN	vendor\sqlite\sqlite3.h	413;"	d
SQLITE_CANTOPEN_CONVPATH	vendor\sqlite\sqlite3.h	480;"	d
SQLITE_CANTOPEN_FULLPATH	vendor\sqlite\sqlite3.h	479;"	d
SQLITE_CANTOPEN_ISDIR	vendor\sqlite\sqlite3.h	478;"	d
SQLITE_CANTOPEN_NOTEMPDIR	vendor\sqlite\sqlite3.h	477;"	d
SQLITE_CHECKPOINT_FULL	vendor\sqlite\sqlite3.h	7418;"	d
SQLITE_CHECKPOINT_PASSIVE	vendor\sqlite\sqlite3.h	7417;"	d
SQLITE_CHECKPOINT_RESTART	vendor\sqlite\sqlite3.h	7419;"	d
SQLITE_CHECKPOINT_TRUNCATE	vendor\sqlite\sqlite3.h	7420;"	d
SQLITE_CONFIG_COVERING_INDEX_SCAN	vendor\sqlite\sqlite3.h	1794;"	d
SQLITE_CONFIG_GETMALLOC	vendor\sqlite\sqlite3.h	1779;"	d
SQLITE_CONFIG_GETMUTEX	vendor\sqlite\sqlite3.h	1785;"	d
SQLITE_CONFIG_GETPCACHE	vendor\sqlite\sqlite3.h	1789;"	d
SQLITE_CONFIG_GETPCACHE2	vendor\sqlite\sqlite3.h	1793;"	d
SQLITE_CONFIG_HEAP	vendor\sqlite\sqlite3.h	1782;"	d
SQLITE_CONFIG_LOG	vendor\sqlite\sqlite3.h	1790;"	d
SQLITE_CONFIG_LOOKASIDE	vendor\sqlite\sqlite3.h	1787;"	d
SQLITE_CONFIG_MALLOC	vendor\sqlite\sqlite3.h	1778;"	d
SQLITE_CONFIG_MEMSTATUS	vendor\sqlite\sqlite3.h	1783;"	d
SQLITE_CONFIG_MMAP_SIZE	vendor\sqlite\sqlite3.h	1796;"	d
SQLITE_CONFIG_MULTITHREAD	vendor\sqlite\sqlite3.h	1776;"	d
SQLITE_CONFIG_MUTEX	vendor\sqlite\sqlite3.h	1784;"	d
SQLITE_CONFIG_PAGECACHE	vendor\sqlite\sqlite3.h	1781;"	d
SQLITE_CONFIG_PCACHE	vendor\sqlite\sqlite3.h	1788;"	d
SQLITE_CONFIG_PCACHE2	vendor\sqlite\sqlite3.h	1792;"	d
SQLITE_CONFIG_PCACHE_HDRSZ	vendor\sqlite\sqlite3.h	1798;"	d
SQLITE_CONFIG_PMASZ	vendor\sqlite\sqlite3.h	1799;"	d
SQLITE_CONFIG_SCRATCH	vendor\sqlite\sqlite3.h	1780;"	d
SQLITE_CONFIG_SERIALIZED	vendor\sqlite\sqlite3.h	1777;"	d
SQLITE_CONFIG_SINGLETHREAD	vendor\sqlite\sqlite3.h	1775;"	d
SQLITE_CONFIG_SQLLOG	vendor\sqlite\sqlite3.h	1795;"	d
SQLITE_CONFIG_URI	vendor\sqlite\sqlite3.h	1791;"	d
SQLITE_CONFIG_WIN32_HEAPSIZE	vendor\sqlite\sqlite3.h	1797;"	d
SQLITE_CONSTRAINT	vendor\sqlite\sqlite3.h	418;"	d
SQLITE_CONSTRAINT_CHECK	vendor\sqlite\sqlite3.h	487;"	d
SQLITE_CONSTRAINT_COMMITHOOK	vendor\sqlite\sqlite3.h	488;"	d
SQLITE_CONSTRAINT_FOREIGNKEY	vendor\sqlite\sqlite3.h	489;"	d
SQLITE_CONSTRAINT_FUNCTION	vendor\sqlite\sqlite3.h	490;"	d
SQLITE_CONSTRAINT_NOTNULL	vendor\sqlite\sqlite3.h	491;"	d
SQLITE_CONSTRAINT_PRIMARYKEY	vendor\sqlite\sqlite3.h	492;"	d
SQLITE_CONSTRAINT_ROWID	vendor\sqlite\sqlite3.h	496;"	d
SQLITE_CONSTRAINT_TRIGGER	vendor\sqlite\sqlite3.h	493;"	d
SQLITE_CONSTRAINT_UNIQUE	vendor\sqlite\sqlite3.h	494;"	d
SQLITE_CONSTRAINT_VTAB	vendor\sqlite\sqlite3.h	495;"	d
SQLITE_COPY	vendor\sqlite\sqlite3.h	2644;"	d
SQLITE_CORRUPT	vendor\sqlite\sqlite3.h	410;"	d
SQLITE_CORRUPT_VTAB	vendor\sqlite\sqlite3.h	481;"	d
SQLITE_CREATE_INDEX	vendor\sqlite\sqlite3.h	2612;"	d
SQLITE_CREATE_TABLE	vendor\sqlite\sqlite3.h	2613;"	d
SQLITE_CREATE_TEMP_INDEX	vendor\sqlite\sqlite3.h	2614;"	d
SQLITE_CREATE_TEMP_TABLE	vendor\sqlite\sqlite3.h	2615;"	d
SQLITE_CREATE_TEMP_TRIGGER	vendor\sqlite\sqlite3.h	2616;"	d
SQLITE_CREATE_TEMP_VIEW	vendor\sqlite\sqlite3.h	2617;"	d
SQLITE_CREATE_TRIGGER	vendor\sqlite\sqlite3.h	2618;"	d
SQLITE_CREATE_VIEW	vendor\sqlite\sqlite3.h	2619;"	d
SQLITE_CREATE_VTABLE	vendor\sqlite\sqlite3.h	2640;"	d
SQLITE_DBCONFIG_ENABLE_FKEY	vendor\sqlite\sqlite3.h	1860;"	d
SQLITE_DBCONFIG_ENABLE_TRIGGER	vendor\sqlite\sqlite3.h	1861;"	d
SQLITE_DBCONFIG_LOOKASIDE	vendor\sqlite\sqlite3.h	1859;"	d
SQLITE_DBSTATUS_CACHE_HIT	vendor\sqlite\sqlite3.h	6539;"	d
SQLITE_DBSTATUS_CACHE_MISS	vendor\sqlite\sqlite3.h	6540;"	d
SQLITE_DBSTATUS_CACHE_USED	vendor\sqlite\sqlite3.h	6533;"	d
SQLITE_DBSTATUS_CACHE_WRITE	vendor\sqlite\sqlite3.h	6541;"	d
SQLITE_DBSTATUS_DEFERRED_FKS	vendor\sqlite\sqlite3.h	6542;"	d
SQLITE_DBSTATUS_LOOKASIDE_HIT	vendor\sqlite\sqlite3.h	6536;"	d
SQLITE_DBSTATUS_LOOKASIDE_MISS_FULL	vendor\sqlite\sqlite3.h	6538;"	d
SQLITE_DBSTATUS_LOOKASIDE_MISS_SIZE	vendor\sqlite\sqlite3.h	6537;"	d
SQLITE_DBSTATUS_LOOKASIDE_USED	vendor\sqlite\sqlite3.h	6532;"	d
SQLITE_DBSTATUS_MAX	vendor\sqlite\sqlite3.h	6543;"	d
SQLITE_DBSTATUS_SCHEMA_USED	vendor\sqlite\sqlite3.h	6534;"	d
SQLITE_DBSTATUS_STMT_USED	vendor\sqlite\sqlite3.h	6535;"	d
SQLITE_DELETE	vendor\sqlite\sqlite3.h	2620;"	d
SQLITE_DENY	vendor\sqlite\sqlite3.h	2589;"	d
SQLITE_DEPRECATED	vendor\sqlite\sqlite3.h	70;"	d
SQLITE_DETACH	vendor\sqlite\sqlite3.h	2636;"	d
SQLITE_DETERMINISTIC	vendor\sqlite\sqlite3.h	4220;"	d
SQLITE_DONE	vendor\sqlite\sqlite3.h	429;"	d
SQLITE_DROP_INDEX	vendor\sqlite\sqlite3.h	2621;"	d
SQLITE_DROP_TABLE	vendor\sqlite\sqlite3.h	2622;"	d
SQLITE_DROP_TEMP_INDEX	vendor\sqlite\sqlite3.h	2623;"	d
SQLITE_DROP_TEMP_TABLE	vendor\sqlite\sqlite3.h	2624;"	d
SQLITE_DROP_TEMP_TRIGGER	vendor\sqlite\sqlite3.h	2625;"	d
SQLITE_DROP_TEMP_VIEW	vendor\sqlite\sqlite3.h	2626;"	d
SQLITE_DROP_TRIGGER	vendor\sqlite\sqlite3.h	2627;"	d
SQLITE_DROP_VIEW	vendor\sqlite\sqlite3.h	2628;"	d
SQLITE_DROP_VTABLE	vendor\sqlite\sqlite3.h	2641;"	d
SQLITE_EMPTY	vendor\sqlite\sqlite3.h	415;"	d
SQLITE_ERROR	vendor\sqlite\sqlite3.h	400;"	d
SQLITE_EXPERIMENTAL	vendor\sqlite\sqlite3.h	71;"	d
SQLITE_EXTERN	vendor\sqlite\sqlite3.h	49;"	d
SQLITE_FAIL	vendor\sqlite\sqlite3.h	7505;"	d
SQLITE_FCNTL_BUSYHANDLER	vendor\sqlite\sqlite3.h	969;"	d
SQLITE_FCNTL_CHUNK_SIZE	vendor\sqlite\sqlite3.h	960;"	d
SQLITE_FCNTL_COMMIT_PHASETWO	vendor\sqlite\sqlite3.h	975;"	d
SQLITE_FCNTL_FILE_POINTER	vendor\sqlite\sqlite3.h	961;"	d
SQLITE_FCNTL_GET_LOCKPROXYFILE	vendor\sqlite\sqlite3.h	956;"	d
SQLITE_FCNTL_HAS_MOVED	vendor\sqlite\sqlite3.h	973;"	d
SQLITE_FCNTL_LAST_ERRNO	vendor\sqlite\sqlite3.h	958;"	d
SQLITE_FCNTL_LOCKSTATE	vendor\sqlite\sqlite3.h	955;"	d
SQLITE_FCNTL_MMAP_SIZE	vendor\sqlite\sqlite3.h	971;"	d
SQLITE_FCNTL_OVERWRITE	vendor\sqlite\sqlite3.h	965;"	d
SQLITE_FCNTL_PERSIST_WAL	vendor\sqlite\sqlite3.h	964;"	d
SQLITE_FCNTL_POWERSAFE_OVERWRITE	vendor\sqlite\sqlite3.h	967;"	d
SQLITE_FCNTL_PRAGMA	vendor\sqlite\sqlite3.h	968;"	d
SQLITE_FCNTL_SET_LOCKPROXYFILE	vendor\sqlite\sqlite3.h	957;"	d
SQLITE_FCNTL_SIZE_HINT	vendor\sqlite\sqlite3.h	959;"	d
SQLITE_FCNTL_SYNC	vendor\sqlite\sqlite3.h	974;"	d
SQLITE_FCNTL_SYNC_OMITTED	vendor\sqlite\sqlite3.h	962;"	d
SQLITE_FCNTL_TEMPFILENAME	vendor\sqlite\sqlite3.h	970;"	d
SQLITE_FCNTL_TRACE	vendor\sqlite\sqlite3.h	972;"	d
SQLITE_FCNTL_VFSNAME	vendor\sqlite\sqlite3.h	966;"	d
SQLITE_FCNTL_WIN32_AV_RETRY	vendor\sqlite\sqlite3.h	963;"	d
SQLITE_FCNTL_WIN32_SET_HANDLE	vendor\sqlite\sqlite3.h	976;"	d
SQLITE_FLOAT	vendor\sqlite\sqlite3.h	3834;"	d
SQLITE_FORMAT	vendor\sqlite\sqlite3.h	423;"	d
SQLITE_FULL	vendor\sqlite\sqlite3.h	412;"	d
SQLITE_FUNCTION	vendor\sqlite\sqlite3.h	2642;"	d
SQLITE_GET_LOCKPROXYFILE	vendor\sqlite\sqlite3.h	979;"	d
SQLITE_IGNORE	vendor\sqlite\sqlite3.h	2590;"	d
SQLITE_INDEX_CONSTRAINT_EQ	vendor\sqlite\sqlite3.h	5552;"	d
SQLITE_INDEX_CONSTRAINT_GE	vendor\sqlite\sqlite3.h	5556;"	d
SQLITE_INDEX_CONSTRAINT_GT	vendor\sqlite\sqlite3.h	5553;"	d
SQLITE_INDEX_CONSTRAINT_LE	vendor\sqlite\sqlite3.h	5554;"	d
SQLITE_INDEX_CONSTRAINT_LT	vendor\sqlite\sqlite3.h	5555;"	d
SQLITE_INDEX_CONSTRAINT_MATCH	vendor\sqlite\sqlite3.h	5557;"	d
SQLITE_INSERT	vendor\sqlite\sqlite3.h	2629;"	d
SQLITE_INTEGER	vendor\sqlite\sqlite3.h	3833;"	d
SQLITE_INTERNAL	vendor\sqlite\sqlite3.h	401;"	d
SQLITE_INTERRUPT	vendor\sqlite\sqlite3.h	408;"	d
SQLITE_IOCAP_ATOMIC	vendor\sqlite\sqlite3.h	560;"	d
SQLITE_IOCAP_ATOMIC16K	vendor\sqlite\sqlite3.h	566;"	d
SQLITE_IOCAP_ATOMIC1K	vendor\sqlite\sqlite3.h	562;"	d
SQLITE_IOCAP_ATOMIC2K	vendor\sqlite\sqlite3.h	563;"	d
SQLITE_IOCAP_ATOMIC32K	vendor\sqlite\sqlite3.h	567;"	d
SQLITE_IOCAP_ATOMIC4K	vendor\sqlite\sqlite3.h	564;"	d
SQLITE_IOCAP_ATOMIC512	vendor\sqlite\sqlite3.h	561;"	d
SQLITE_IOCAP_ATOMIC64K	vendor\sqlite\sqlite3.h	568;"	d
SQLITE_IOCAP_ATOMIC8K	vendor\sqlite\sqlite3.h	565;"	d
SQLITE_IOCAP_IMMUTABLE	vendor\sqlite\sqlite3.h	573;"	d
SQLITE_IOCAP_POWERSAFE_OVERWRITE	vendor\sqlite\sqlite3.h	572;"	d
SQLITE_IOCAP_SAFE_APPEND	vendor\sqlite\sqlite3.h	569;"	d
SQLITE_IOCAP_SEQUENTIAL	vendor\sqlite\sqlite3.h	570;"	d
SQLITE_IOCAP_UNDELETABLE_WHEN_OPEN	vendor\sqlite\sqlite3.h	571;"	d
SQLITE_IOERR	vendor\sqlite\sqlite3.h	409;"	d
SQLITE_IOERR_ACCESS	vendor\sqlite\sqlite3.h	460;"	d
SQLITE_IOERR_BLOCKED	vendor\sqlite\sqlite3.h	458;"	d
SQLITE_IOERR_CHECKRESERVEDLOCK	vendor\sqlite\sqlite3.h	461;"	d
SQLITE_IOERR_CLOSE	vendor\sqlite\sqlite3.h	463;"	d
SQLITE_IOERR_CONVPATH	vendor\sqlite\sqlite3.h	473;"	d
SQLITE_IOERR_DELETE	vendor\sqlite\sqlite3.h	457;"	d
SQLITE_IOERR_DELETE_NOENT	vendor\sqlite\sqlite3.h	470;"	d
SQLITE_IOERR_DIR_CLOSE	vendor\sqlite\sqlite3.h	464;"	d
SQLITE_IOERR_DIR_FSYNC	vendor\sqlite\sqlite3.h	452;"	d
SQLITE_IOERR_FSTAT	vendor\sqlite\sqlite3.h	454;"	d
SQLITE_IOERR_FSYNC	vendor\sqlite\sqlite3.h	451;"	d
SQLITE_IOERR_GETTEMPPATH	vendor\sqlite\sqlite3.h	472;"	d
SQLITE_IOERR_LOCK	vendor\sqlite\sqlite3.h	462;"	d
SQLITE_IOERR_MMAP	vendor\sqlite\sqlite3.h	471;"	d
SQLITE_IOERR_NOMEM	vendor\sqlite\sqlite3.h	459;"	d
SQLITE_IOERR_RDLOCK	vendor\sqlite\sqlite3.h	456;"	d
SQLITE_IOERR_READ	vendor\sqlite\sqlite3.h	448;"	d
SQLITE_IOERR_SEEK	vendor\sqlite\sqlite3.h	469;"	d
SQLITE_IOERR_SHMLOCK	vendor\sqlite\sqlite3.h	467;"	d
SQLITE_IOERR_SHMMAP	vendor\sqlite\sqlite3.h	468;"	d
SQLITE_IOERR_SHMOPEN	vendor\sqlite\sqlite3.h	465;"	d
SQLITE_IOERR_SHMSIZE	vendor\sqlite\sqlite3.h	466;"	d
SQLITE_IOERR_SHORT_READ	vendor\sqlite\sqlite3.h	449;"	d
SQLITE_IOERR_TRUNCATE	vendor\sqlite\sqlite3.h	453;"	d
SQLITE_IOERR_UNLOCK	vendor\sqlite\sqlite3.h	455;"	d
SQLITE_IOERR_WRITE	vendor\sqlite\sqlite3.h	450;"	d
SQLITE_LAST_ERRNO	vendor\sqlite\sqlite3.h	981;"	d
SQLITE_LIMIT_ATTACHED	vendor\sqlite\sqlite3.h	3171;"	d
SQLITE_LIMIT_COLUMN	vendor\sqlite\sqlite3.h	3166;"	d
SQLITE_LIMIT_COMPOUND_SELECT	vendor\sqlite\sqlite3.h	3168;"	d
SQLITE_LIMIT_EXPR_DEPTH	vendor\sqlite\sqlite3.h	3167;"	d
SQLITE_LIMIT_FUNCTION_ARG	vendor\sqlite\sqlite3.h	3170;"	d
SQLITE_LIMIT_LENGTH	vendor\sqlite\sqlite3.h	3164;"	d
SQLITE_LIMIT_LIKE_PATTERN_LENGTH	vendor\sqlite\sqlite3.h	3172;"	d
SQLITE_LIMIT_SQL_LENGTH	vendor\sqlite\sqlite3.h	3165;"	d
SQLITE_LIMIT_TRIGGER_DEPTH	vendor\sqlite\sqlite3.h	3174;"	d
SQLITE_LIMIT_VARIABLE_NUMBER	vendor\sqlite\sqlite3.h	3173;"	d
SQLITE_LIMIT_VDBE_OP	vendor\sqlite\sqlite3.h	3169;"	d
SQLITE_LIMIT_WORKER_THREADS	vendor\sqlite\sqlite3.h	3175;"	d
SQLITE_LOCKED	vendor\sqlite\sqlite3.h	405;"	d
SQLITE_LOCKED_SHAREDCACHE	vendor\sqlite\sqlite3.h	474;"	d
SQLITE_LOCK_EXCLUSIVE	vendor\sqlite\sqlite3.h	586;"	d
SQLITE_LOCK_NONE	vendor\sqlite\sqlite3.h	582;"	d
SQLITE_LOCK_PENDING	vendor\sqlite\sqlite3.h	585;"	d
SQLITE_LOCK_RESERVED	vendor\sqlite\sqlite3.h	584;"	d
SQLITE_LOCK_SHARED	vendor\sqlite\sqlite3.h	583;"	d
SQLITE_MISMATCH	vendor\sqlite\sqlite3.h	419;"	d
SQLITE_MISUSE	vendor\sqlite\sqlite3.h	420;"	d
SQLITE_MUTEX_FAST	vendor\sqlite\sqlite3.h	6180;"	d
SQLITE_MUTEX_RECURSIVE	vendor\sqlite\sqlite3.h	6181;"	d
SQLITE_MUTEX_STATIC_APP1	vendor\sqlite\sqlite3.h	6190;"	d
SQLITE_MUTEX_STATIC_APP2	vendor\sqlite\sqlite3.h	6191;"	d
SQLITE_MUTEX_STATIC_APP3	vendor\sqlite\sqlite3.h	6192;"	d
SQLITE_MUTEX_STATIC_LRU	vendor\sqlite\sqlite3.h	6187;"	d
SQLITE_MUTEX_STATIC_LRU2	vendor\sqlite\sqlite3.h	6188;"	d
SQLITE_MUTEX_STATIC_MASTER	vendor\sqlite\sqlite3.h	6182;"	d
SQLITE_MUTEX_STATIC_MEM	vendor\sqlite\sqlite3.h	6183;"	d
SQLITE_MUTEX_STATIC_MEM2	vendor\sqlite\sqlite3.h	6184;"	d
SQLITE_MUTEX_STATIC_OPEN	vendor\sqlite\sqlite3.h	6185;"	d
SQLITE_MUTEX_STATIC_PMEM	vendor\sqlite\sqlite3.h	6189;"	d
SQLITE_MUTEX_STATIC_PRNG	vendor\sqlite\sqlite3.h	6186;"	d
SQLITE_NOLFS	vendor\sqlite\sqlite3.h	421;"	d
SQLITE_NOMEM	vendor\sqlite\sqlite3.h	406;"	d
SQLITE_NOTADB	vendor\sqlite\sqlite3.h	425;"	d
SQLITE_NOTFOUND	vendor\sqlite\sqlite3.h	411;"	d
SQLITE_NOTICE	vendor\sqlite\sqlite3.h	426;"	d
SQLITE_NOTICE_RECOVER_ROLLBACK	vendor\sqlite\sqlite3.h	498;"	d
SQLITE_NOTICE_RECOVER_WAL	vendor\sqlite\sqlite3.h	497;"	d
SQLITE_NULL	vendor\sqlite\sqlite3.h	3836;"	d
SQLITE_OK	vendor\sqlite\sqlite3.h	398;"	d
SQLITE_OPEN_AUTOPROXY	vendor\sqlite\sqlite3.h	514;"	d
SQLITE_OPEN_CREATE	vendor\sqlite\sqlite3.h	511;"	d
SQLITE_OPEN_DELETEONCLOSE	vendor\sqlite\sqlite3.h	512;"	d
SQLITE_OPEN_EXCLUSIVE	vendor\sqlite\sqlite3.h	513;"	d
SQLITE_OPEN_FULLMUTEX	vendor\sqlite\sqlite3.h	525;"	d
SQLITE_OPEN_MAIN_DB	vendor\sqlite\sqlite3.h	517;"	d
SQLITE_OPEN_MAIN_JOURNAL	vendor\sqlite\sqlite3.h	520;"	d
SQLITE_OPEN_MASTER_JOURNAL	vendor\sqlite\sqlite3.h	523;"	d
SQLITE_OPEN_MEMORY	vendor\sqlite\sqlite3.h	516;"	d
SQLITE_OPEN_NOMUTEX	vendor\sqlite\sqlite3.h	524;"	d
SQLITE_OPEN_PRIVATECACHE	vendor\sqlite\sqlite3.h	527;"	d
SQLITE_OPEN_READONLY	vendor\sqlite\sqlite3.h	509;"	d
SQLITE_OPEN_READWRITE	vendor\sqlite\sqlite3.h	510;"	d
SQLITE_OPEN_SHAREDCACHE	vendor\sqlite\sqlite3.h	526;"	d
SQLITE_OPEN_SUBJOURNAL	vendor\sqlite\sqlite3.h	522;"	d
SQLITE_OPEN_TEMP_DB	vendor\sqlite\sqlite3.h	518;"	d
SQLITE_OPEN_TEMP_JOURNAL	vendor\sqlite\sqlite3.h	521;"	d
SQLITE_OPEN_TRANSIENT_DB	vendor\sqlite\sqlite3.h	519;"	d
SQLITE_OPEN_URI	vendor\sqlite\sqlite3.h	515;"	d
SQLITE_OPEN_WAL	vendor\sqlite\sqlite3.h	528;"	d
SQLITE_PERM	vendor\sqlite\sqlite3.h	402;"	d
SQLITE_PRAGMA	vendor\sqlite\sqlite3.h	2630;"	d
SQLITE_PROTOCOL	vendor\sqlite\sqlite3.h	414;"	d
SQLITE_RANGE	vendor\sqlite\sqlite3.h	424;"	d
SQLITE_READ	vendor\sqlite\sqlite3.h	2631;"	d
SQLITE_READONLY	vendor\sqlite\sqlite3.h	407;"	d
SQLITE_READONLY_CANTLOCK	vendor\sqlite\sqlite3.h	483;"	d
SQLITE_READONLY_DBMOVED	vendor\sqlite\sqlite3.h	485;"	d
SQLITE_READONLY_RECOVERY	vendor\sqlite\sqlite3.h	482;"	d
SQLITE_READONLY_ROLLBACK	vendor\sqlite\sqlite3.h	484;"	d
SQLITE_RECURSIVE	vendor\sqlite\sqlite3.h	2645;"	d
SQLITE_REINDEX	vendor\sqlite\sqlite3.h	2638;"	d
SQLITE_REPLACE	vendor\sqlite\sqlite3.h	7507;"	d
SQLITE_ROLLBACK	vendor\sqlite\sqlite3.h	7503;"	d
SQLITE_ROW	vendor\sqlite\sqlite3.h	428;"	d
SQLITE_SAVEPOINT	vendor\sqlite\sqlite3.h	2643;"	d
SQLITE_SCANSTAT_EST	vendor\sqlite\sqlite3.h	7558;"	d
SQLITE_SCANSTAT_EXPLAIN	vendor\sqlite\sqlite3.h	7560;"	d
SQLITE_SCANSTAT_NAME	vendor\sqlite\sqlite3.h	7559;"	d
SQLITE_SCANSTAT_NLOOP	vendor\sqlite\sqlite3.h	7556;"	d
SQLITE_SCANSTAT_NVISIT	vendor\sqlite\sqlite3.h	7557;"	d
SQLITE_SCANSTAT_SELECTID	vendor\sqlite\sqlite3.h	7561;"	d
SQLITE_SCHEMA	vendor\sqlite\sqlite3.h	416;"	d
SQLITE_SELECT	vendor\sqlite\sqlite3.h	2632;"	d
SQLITE_SET_LOCKPROXYFILE	vendor\sqlite\sqlite3.h	980;"	d
SQLITE_SHM_EXCLUSIVE	vendor\sqlite\sqlite3.h	1243;"	d
SQLITE_SHM_LOCK	vendor\sqlite\sqlite3.h	1241;"	d
SQLITE_SHM_NLOCK	vendor\sqlite\sqlite3.h	1253;"	d
SQLITE_SHM_SHARED	vendor\sqlite\sqlite3.h	1242;"	d
SQLITE_SHM_UNLOCK	vendor\sqlite\sqlite3.h	1240;"	d
SQLITE_SOURCE_ID	vendor\sqlite\sqlite3.h	112;"	d
SQLITE_STATIC	vendor\sqlite\sqlite3.h	4438;"	d
SQLITE_STATUS_MALLOC_COUNT	vendor\sqlite\sqlite3.h	6416;"	d
SQLITE_STATUS_MALLOC_SIZE	vendor\sqlite\sqlite3.h	6412;"	d
SQLITE_STATUS_MEMORY_USED	vendor\sqlite\sqlite3.h	6407;"	d
SQLITE_STATUS_PAGECACHE_OVERFLOW	vendor\sqlite\sqlite3.h	6409;"	d
SQLITE_STATUS_PAGECACHE_SIZE	vendor\sqlite\sqlite3.h	6414;"	d
SQLITE_STATUS_PAGECACHE_USED	vendor\sqlite\sqlite3.h	6408;"	d
SQLITE_STATUS_PARSER_STACK	vendor\sqlite\sqlite3.h	6413;"	d
SQLITE_STATUS_SCRATCH_OVERFLOW	vendor\sqlite\sqlite3.h	6411;"	d
SQLITE_STATUS_SCRATCH_SIZE	vendor\sqlite\sqlite3.h	6415;"	d
SQLITE_STATUS_SCRATCH_USED	vendor\sqlite\sqlite3.h	6410;"	d
SQLITE_STMTSTATUS_AUTOINDEX	vendor\sqlite\sqlite3.h	6610;"	d
SQLITE_STMTSTATUS_FULLSCAN_STEP	vendor\sqlite\sqlite3.h	6608;"	d
SQLITE_STMTSTATUS_SORT	vendor\sqlite\sqlite3.h	6609;"	d
SQLITE_STMTSTATUS_VM_STEP	vendor\sqlite\sqlite3.h	6611;"	d
SQLITE_SYNC_DATAONLY	vendor\sqlite\sqlite3.h	616;"	d
SQLITE_SYNC_FULL	vendor\sqlite\sqlite3.h	615;"	d
SQLITE_SYNC_NORMAL	vendor\sqlite\sqlite3.h	614;"	d
SQLITE_TESTCTRL_ALWAYS	vendor\sqlite\sqlite3.h	6278;"	d
SQLITE_TESTCTRL_ASSERT	vendor\sqlite\sqlite3.h	6277;"	d
SQLITE_TESTCTRL_BENIGN_MALLOC_HOOKS	vendor\sqlite\sqlite3.h	6275;"	d
SQLITE_TESTCTRL_BITVEC_TEST	vendor\sqlite\sqlite3.h	6273;"	d
SQLITE_TESTCTRL_BYTEORDER	vendor\sqlite\sqlite3.h	6287;"	d
SQLITE_TESTCTRL_EXPLAIN_STMT	vendor\sqlite\sqlite3.h	6284;"	d
SQLITE_TESTCTRL_FAULT_INSTALL	vendor\sqlite\sqlite3.h	6274;"	d
SQLITE_TESTCTRL_FIRST	vendor\sqlite\sqlite3.h	6269;"	d
SQLITE_TESTCTRL_IMPOSTER	vendor\sqlite\sqlite3.h	6290;"	d
SQLITE_TESTCTRL_ISINIT	vendor\sqlite\sqlite3.h	6288;"	d
SQLITE_TESTCTRL_ISKEYWORD	vendor\sqlite\sqlite3.h	6281;"	d
SQLITE_TESTCTRL_LAST	vendor\sqlite\sqlite3.h	6291;"	d
SQLITE_TESTCTRL_LOCALTIME_FAULT	vendor\sqlite\sqlite3.h	6283;"	d
SQLITE_TESTCTRL_NEVER_CORRUPT	vendor\sqlite\sqlite3.h	6285;"	d
SQLITE_TESTCTRL_OPTIMIZATIONS	vendor\sqlite\sqlite3.h	6280;"	d
SQLITE_TESTCTRL_PENDING_BYTE	vendor\sqlite\sqlite3.h	6276;"	d
SQLITE_TESTCTRL_PRNG_RESET	vendor\sqlite\sqlite3.h	6272;"	d
SQLITE_TESTCTRL_PRNG_RESTORE	vendor\sqlite\sqlite3.h	6271;"	d
SQLITE_TESTCTRL_PRNG_SAVE	vendor\sqlite\sqlite3.h	6270;"	d
SQLITE_TESTCTRL_RESERVE	vendor\sqlite\sqlite3.h	6279;"	d
SQLITE_TESTCTRL_SCRATCHMALLOC	vendor\sqlite\sqlite3.h	6282;"	d
SQLITE_TESTCTRL_SORTER_MMAP	vendor\sqlite\sqlite3.h	6289;"	d
SQLITE_TESTCTRL_VDBE_COVERAGE	vendor\sqlite\sqlite3.h	6286;"	d
SQLITE_TEXT	vendor\sqlite\sqlite3.h	3838;"	d
SQLITE_TEXT	vendor\sqlite\sqlite3.h	3840;"	d
SQLITE_TOOBIG	vendor\sqlite\sqlite3.h	417;"	d
SQLITE_TRANSACTION	vendor\sqlite\sqlite3.h	2633;"	d
SQLITE_TRANSIENT	vendor\sqlite\sqlite3.h	4439;"	d
SQLITE_UPDATE	vendor\sqlite\sqlite3.h	2634;"	d
SQLITE_UTF16	vendor\sqlite\sqlite3.h	4208;"	d
SQLITE_UTF16BE	vendor\sqlite\sqlite3.h	4207;"	d
SQLITE_UTF16LE	vendor\sqlite\sqlite3.h	4206;"	d
SQLITE_UTF16_ALIGNED	vendor\sqlite\sqlite3.h	4210;"	d
SQLITE_UTF8	vendor\sqlite\sqlite3.h	4205;"	d
SQLITE_VERSION	vendor\sqlite\sqlite3.h	110;"	d
SQLITE_VERSION	vendor\sqlite\sqlite3.h	77;"	d
SQLITE_VERSION_NUMBER	vendor\sqlite\sqlite3.h	111;"	d
SQLITE_VERSION_NUMBER	vendor\sqlite\sqlite3.h	80;"	d
SQLITE_VTAB_CONSTRAINT_SUPPORT	vendor\sqlite\sqlite3.h	7477;"	d
SQLITE_WARNING	vendor\sqlite\sqlite3.h	427;"	d
SQLITE_WARNING_AUTOINDEX	vendor\sqlite\sqlite3.h	499;"	d
_SQLITE3RTREE_H_	vendor\sqlite\sqlite3.h	7638;"	d
_SQLITE3_H_	vendor\sqlite\sqlite3.h	34;"	d
aConstraint	vendor\sqlite\sqlite3.h	/^  } *aConstraint;            \/* Table of WHERE clause constraints *\/$/;"	m	struct:sqlite3_index_info	typeref:struct:sqlite3_index_info::sqlite3_index_constraint
aConstraintUsage	vendor\sqlite\sqlite3.h	/^  } *aConstraintUsage;$/;"	m	struct:sqlite3_index_info	typeref:struct:sqlite3_index_info::sqlite3_index_constraint_usage
aCoord	vendor\sqlite\sqlite3.h	/^  sqlite3_rtree_dbl *aCoord;        \/* Coordinates of node or entry to check *\/$/;"	m	struct:sqlite3_rtree_query_info
aOrderBy	vendor\sqlite\sqlite3.h	/^  } *aOrderBy;               \/* The ORDER BY clause *\/$/;"	m	struct:sqlite3_index_info	typeref:struct:sqlite3_index_info::sqlite3_index_orderby
aParam	vendor\sqlite\sqlite3.h	/^  sqlite3_rtree_dbl *aParam;        \/* value of function parameters *\/$/;"	m	struct:sqlite3_rtree_query_info
aParam	vendor\sqlite\sqlite3.h	/^  sqlite3_rtree_dbl *aParam;      \/* Parameters passed to SQL geom function *\/$/;"	m	struct:sqlite3_rtree_geometry
anQueue	vendor\sqlite\sqlite3.h	/^  unsigned int *anQueue;            \/* Number of pending entries in the queue *\/$/;"	m	struct:sqlite3_rtree_query_info
argvIndex	vendor\sqlite\sqlite3.h	/^    int argvIndex;           \/* if >0, constraint is part of argv to xFilter *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_constraint_usage
desc	vendor\sqlite\sqlite3.h	/^     unsigned char desc;       \/* True for DESC.  False for ASC. *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_orderby
double	vendor\sqlite\sqlite3.h	264;"	d
double	vendor\sqlite\sqlite3.h	7616;"	d
eParentWithin	vendor\sqlite\sqlite3.h	/^  int eParentWithin;                \/* Visibility of parent node *\/$/;"	m	struct:sqlite3_rtree_query_info
eWithin	vendor\sqlite\sqlite3.h	/^  int eWithin;                      \/* OUT: Visiblity *\/$/;"	m	struct:sqlite3_rtree_query_info
estimatedCost	vendor\sqlite\sqlite3.h	/^  double estimatedCost;           \/* Estimated cost of using this index *\/$/;"	m	struct:sqlite3_index_info
estimatedRows	vendor\sqlite\sqlite3.h	/^  sqlite3_int64 estimatedRows;    \/* Estimated number of rows returned *\/$/;"	m	struct:sqlite3_index_info
iColumn	vendor\sqlite\sqlite3.h	/^     int iColumn;              \/* Column number *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_orderby
iColumn	vendor\sqlite\sqlite3.h	/^     int iColumn;              \/* Column on left-hand side of constraint *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_constraint
iLevel	vendor\sqlite\sqlite3.h	/^  int iLevel;                       \/* Level of current node or entry *\/$/;"	m	struct:sqlite3_rtree_query_info
iRowid	vendor\sqlite\sqlite3.h	/^  sqlite3_int64 iRowid;             \/* Rowid for current entry *\/$/;"	m	struct:sqlite3_rtree_query_info
iTermOffset	vendor\sqlite\sqlite3.h	/^     int iTermOffset;          \/* Used internally - xBestIndex should ignore *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_constraint
iVersion	vendor\sqlite\sqlite3.h	/^  int iVersion;            \/* Structure version number (currently 3) *\/$/;"	m	struct:sqlite3_vfs
iVersion	vendor\sqlite\sqlite3.h	/^  int iVersion;$/;"	m	struct:sqlite3_io_methods
iVersion	vendor\sqlite\sqlite3.h	/^  int iVersion;$/;"	m	struct:sqlite3_module
iVersion	vendor\sqlite\sqlite3.h	/^  int iVersion;$/;"	m	struct:sqlite3_pcache_methods2
idxNum	vendor\sqlite\sqlite3.h	/^  int idxNum;                \/* Number used to identify the index *\/$/;"	m	struct:sqlite3_index_info
idxStr	vendor\sqlite\sqlite3.h	/^  char *idxStr;              \/* String, possibly obtained from sqlite3_malloc *\/$/;"	m	struct:sqlite3_index_info
mxLevel	vendor\sqlite\sqlite3.h	/^  int mxLevel;                      \/* The largest iLevel value in the tree *\/$/;"	m	struct:sqlite3_rtree_query_info
mxPathname	vendor\sqlite\sqlite3.h	/^  int mxPathname;          \/* Maximum file pathname length *\/$/;"	m	struct:sqlite3_vfs
nConstraint	vendor\sqlite\sqlite3.h	/^  int nConstraint;           \/* Number of entries in aConstraint *\/$/;"	m	struct:sqlite3_index_info
nCoord	vendor\sqlite\sqlite3.h	/^  int nCoord;                       \/* Number of coordinates *\/$/;"	m	struct:sqlite3_rtree_query_info
nOrderBy	vendor\sqlite\sqlite3.h	/^  int nOrderBy;              \/* Number of terms in the ORDER BY clause *\/$/;"	m	struct:sqlite3_index_info
nParam	vendor\sqlite\sqlite3.h	/^  int nParam;                       \/* Number of function parameters *\/$/;"	m	struct:sqlite3_rtree_query_info
nParam	vendor\sqlite\sqlite3.h	/^  int nParam;                     \/* Size of array aParam[] *\/$/;"	m	struct:sqlite3_rtree_geometry
nRef	vendor\sqlite\sqlite3.h	/^  int nRef;                       \/* NO LONGER USED *\/$/;"	m	struct:sqlite3_vtab
needToFreeIdxStr	vendor\sqlite\sqlite3.h	/^  int needToFreeIdxStr;      \/* Free idxStr using sqlite3_free() if true *\/$/;"	m	struct:sqlite3_index_info
omit	vendor\sqlite\sqlite3.h	/^    unsigned char omit;      \/* Do not code a test for this constraint *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_constraint_usage
op	vendor\sqlite\sqlite3.h	/^     unsigned char op;         \/* Constraint operator *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_constraint
orderByConsumed	vendor\sqlite\sqlite3.h	/^  int orderByConsumed;       \/* True if output is already ordered *\/$/;"	m	struct:sqlite3_index_info
pAppData	vendor\sqlite\sqlite3.h	/^  void *pAppData;                \/* Argument to xInit() and xShutdown() *\/$/;"	m	struct:sqlite3_mem_methods
pAppData	vendor\sqlite\sqlite3.h	/^  void *pAppData;          \/* Pointer to application-specific data *\/$/;"	m	struct:sqlite3_vfs
pArg	vendor\sqlite\sqlite3.h	/^  void *pArg;$/;"	m	struct:sqlite3_pcache_methods
pArg	vendor\sqlite\sqlite3.h	/^  void *pArg;$/;"	m	struct:sqlite3_pcache_methods2
pBuf	vendor\sqlite\sqlite3.h	/^  void *pBuf;        \/* The content of the page *\/$/;"	m	struct:sqlite3_pcache_page
pContext	vendor\sqlite\sqlite3.h	/^  void *pContext;                   \/* pContext from when function registered *\/$/;"	m	struct:sqlite3_rtree_query_info
pContext	vendor\sqlite\sqlite3.h	/^  void *pContext;                 \/* Copy of pContext passed to s_r_g_c() *\/$/;"	m	struct:sqlite3_rtree_geometry
pExtra	vendor\sqlite\sqlite3.h	/^  void *pExtra;      \/* Extra information associated with the page *\/$/;"	m	struct:sqlite3_pcache_page
pMethods	vendor\sqlite\sqlite3.h	/^  const struct sqlite3_io_methods *pMethods;  \/* Methods for an open file *\/$/;"	m	struct:sqlite3_file	typeref:struct:sqlite3_file::sqlite3_io_methods
pModule	vendor\sqlite\sqlite3.h	/^  const sqlite3_module *pModule;  \/* The module for this virtual table *\/$/;"	m	struct:sqlite3_vtab
pNext	vendor\sqlite\sqlite3.h	/^  sqlite3_vfs *pNext;      \/* Next registered VFS *\/$/;"	m	struct:sqlite3_vfs
pUser	vendor\sqlite\sqlite3.h	/^  void *pUser;                      \/* callback can use this, if desired *\/$/;"	m	struct:sqlite3_rtree_query_info
pUser	vendor\sqlite\sqlite3.h	/^  void *pUser;                    \/* Callback implementation user data *\/$/;"	m	struct:sqlite3_rtree_geometry
pVtab	vendor\sqlite\sqlite3.h	/^  sqlite3_vtab *pVtab;      \/* Virtual table of this cursor *\/$/;"	m	struct:sqlite3_vtab_cursor
rParentScore	vendor\sqlite\sqlite3.h	/^  sqlite3_rtree_dbl rParentScore;   \/* Score of parent node *\/$/;"	m	struct:sqlite3_rtree_query_info
rScore	vendor\sqlite\sqlite3.h	/^  sqlite3_rtree_dbl rScore;         \/* OUT: Write the score here *\/$/;"	m	struct:sqlite3_rtree_query_info
sqlite3	vendor\sqlite\sqlite3.h	/^typedef struct sqlite3 sqlite3;$/;"	t	typeref:struct:sqlite3
sqlite3_backup	vendor\sqlite\sqlite3.h	/^typedef struct sqlite3_backup sqlite3_backup;$/;"	t	typeref:struct:sqlite3_backup
sqlite3_blob	vendor\sqlite\sqlite3.h	/^typedef struct sqlite3_blob sqlite3_blob;$/;"	t	typeref:struct:sqlite3_blob
sqlite3_callback	vendor\sqlite\sqlite3.h	/^typedef int (*sqlite3_callback)(void*,int,char**, char**);$/;"	t
sqlite3_context	vendor\sqlite\sqlite3.h	/^typedef struct sqlite3_context sqlite3_context;$/;"	t	typeref:struct:sqlite3_context
sqlite3_data_directory	vendor\sqlite\sqlite3.h	/^SQLITE_API SQLITE_EXTERN char *sqlite3_data_directory;$/;"	v
sqlite3_destructor_type	vendor\sqlite\sqlite3.h	/^typedef void (*sqlite3_destructor_type)(void*);$/;"	t
sqlite3_file	vendor\sqlite\sqlite3.h	/^struct sqlite3_file {$/;"	s
sqlite3_file	vendor\sqlite\sqlite3.h	/^typedef struct sqlite3_file sqlite3_file;$/;"	t	typeref:struct:sqlite3_file
sqlite3_index_constraint	vendor\sqlite\sqlite3.h	/^  struct sqlite3_index_constraint {$/;"	s	struct:sqlite3_index_info
sqlite3_index_constraint_usage	vendor\sqlite\sqlite3.h	/^  struct sqlite3_index_constraint_usage {$/;"	s	struct:sqlite3_index_info
sqlite3_index_info	vendor\sqlite\sqlite3.h	/^struct sqlite3_index_info {$/;"	s
sqlite3_index_info	vendor\sqlite\sqlite3.h	/^typedef struct sqlite3_index_info sqlite3_index_info;$/;"	t	typeref:struct:sqlite3_index_info
sqlite3_index_orderby	vendor\sqlite\sqlite3.h	/^  struct sqlite3_index_orderby {$/;"	s	struct:sqlite3_index_info
sqlite3_int64	vendor\sqlite\sqlite3.h	/^typedef sqlite_int64 sqlite3_int64;$/;"	t
sqlite3_io_methods	vendor\sqlite\sqlite3.h	/^struct sqlite3_io_methods {$/;"	s
sqlite3_io_methods	vendor\sqlite\sqlite3.h	/^typedef struct sqlite3_io_methods sqlite3_io_methods;$/;"	t	typeref:struct:sqlite3_io_methods
sqlite3_mem_methods	vendor\sqlite\sqlite3.h	/^struct sqlite3_mem_methods {$/;"	s
sqlite3_mem_methods	vendor\sqlite\sqlite3.h	/^typedef struct sqlite3_mem_methods sqlite3_mem_methods;$/;"	t	typeref:struct:sqlite3_mem_methods
sqlite3_module	vendor\sqlite\sqlite3.h	/^struct sqlite3_module {$/;"	s
sqlite3_module	vendor\sqlite\sqlite3.h	/^typedef struct sqlite3_module sqlite3_module;$/;"	t	typeref:struct:sqlite3_module
sqlite3_mutex	vendor\sqlite\sqlite3.h	/^typedef struct sqlite3_mutex sqlite3_mutex;$/;"	t	typeref:struct:sqlite3_mutex
sqlite3_mutex_methods	vendor\sqlite\sqlite3.h	/^struct sqlite3_mutex_methods {$/;"	s
sqlite3_mutex_methods	vendor\sqlite\sqlite3.h	/^typedef struct sqlite3_mutex_methods sqlite3_mutex_methods;$/;"	t	typeref:struct:sqlite3_mutex_methods
sqlite3_pcache	vendor\sqlite\sqlite3.h	/^typedef struct sqlite3_pcache sqlite3_pcache;$/;"	t	typeref:struct:sqlite3_pcache
sqlite3_pcache_methods	vendor\sqlite\sqlite3.h	/^struct sqlite3_pcache_methods {$/;"	s
sqlite3_pcache_methods	vendor\sqlite\sqlite3.h	/^typedef struct sqlite3_pcache_methods sqlite3_pcache_methods;$/;"	t	typeref:struct:sqlite3_pcache_methods
sqlite3_pcache_methods2	vendor\sqlite\sqlite3.h	/^struct sqlite3_pcache_methods2 {$/;"	s
sqlite3_pcache_methods2	vendor\sqlite\sqlite3.h	/^typedef struct sqlite3_pcache_methods2 sqlite3_pcache_methods2;$/;"	t	typeref:struct:sqlite3_pcache_methods2
sqlite3_pcache_page	vendor\sqlite\sqlite3.h	/^struct sqlite3_pcache_page {$/;"	s
sqlite3_pcache_page	vendor\sqlite\sqlite3.h	/^typedef struct sqlite3_pcache_page sqlite3_pcache_page;$/;"	t	typeref:struct:sqlite3_pcache_page
sqlite3_rtree_dbl	vendor\sqlite\sqlite3.h	/^  typedef double sqlite3_rtree_dbl;$/;"	t
sqlite3_rtree_dbl	vendor\sqlite\sqlite3.h	/^  typedef sqlite3_int64 sqlite3_rtree_dbl;$/;"	t
sqlite3_rtree_geometry	vendor\sqlite\sqlite3.h	/^struct sqlite3_rtree_geometry {$/;"	s
sqlite3_rtree_geometry	vendor\sqlite\sqlite3.h	/^typedef struct sqlite3_rtree_geometry sqlite3_rtree_geometry;$/;"	t	typeref:struct:sqlite3_rtree_geometry
sqlite3_rtree_query_info	vendor\sqlite\sqlite3.h	/^struct sqlite3_rtree_query_info {$/;"	s
sqlite3_rtree_query_info	vendor\sqlite\sqlite3.h	/^typedef struct sqlite3_rtree_query_info sqlite3_rtree_query_info;$/;"	t	typeref:struct:sqlite3_rtree_query_info
sqlite3_stmt	vendor\sqlite\sqlite3.h	/^typedef struct sqlite3_stmt sqlite3_stmt;$/;"	t	typeref:struct:sqlite3_stmt
sqlite3_syscall_ptr	vendor\sqlite\sqlite3.h	/^typedef void (*sqlite3_syscall_ptr)(void);$/;"	t
sqlite3_temp_directory	vendor\sqlite\sqlite3.h	/^SQLITE_API SQLITE_EXTERN char *sqlite3_temp_directory;$/;"	v
sqlite3_uint64	vendor\sqlite\sqlite3.h	/^typedef sqlite_uint64 sqlite3_uint64;$/;"	t
sqlite3_value	vendor\sqlite\sqlite3.h	/^typedef struct Mem sqlite3_value;$/;"	t	typeref:struct:Mem
sqlite3_version	vendor\sqlite\sqlite3.h	/^SQLITE_API SQLITE_EXTERN const char sqlite3_version[];$/;"	v
sqlite3_vfs	vendor\sqlite\sqlite3.h	/^struct sqlite3_vfs {$/;"	s
sqlite3_vfs	vendor\sqlite\sqlite3.h	/^typedef struct sqlite3_vfs sqlite3_vfs;$/;"	t	typeref:struct:sqlite3_vfs
sqlite3_vtab	vendor\sqlite\sqlite3.h	/^struct sqlite3_vtab {$/;"	s
sqlite3_vtab	vendor\sqlite\sqlite3.h	/^typedef struct sqlite3_vtab sqlite3_vtab;$/;"	t	typeref:struct:sqlite3_vtab
sqlite3_vtab_cursor	vendor\sqlite\sqlite3.h	/^struct sqlite3_vtab_cursor {$/;"	s
sqlite3_vtab_cursor	vendor\sqlite\sqlite3.h	/^typedef struct sqlite3_vtab_cursor sqlite3_vtab_cursor;$/;"	t	typeref:struct:sqlite3_vtab_cursor
sqlite_int64	vendor\sqlite\sqlite3.h	/^  typedef SQLITE_INT64_TYPE sqlite_int64;$/;"	t
sqlite_int64	vendor\sqlite\sqlite3.h	/^  typedef __int64 sqlite_int64;$/;"	t
sqlite_int64	vendor\sqlite\sqlite3.h	/^  typedef long long int sqlite_int64;$/;"	t
sqlite_uint64	vendor\sqlite\sqlite3.h	/^  typedef unsigned SQLITE_INT64_TYPE sqlite_uint64;$/;"	t
sqlite_uint64	vendor\sqlite\sqlite3.h	/^  typedef unsigned __int64 sqlite_uint64;$/;"	t
sqlite_uint64	vendor\sqlite\sqlite3.h	/^  typedef unsigned long long int sqlite_uint64;$/;"	t
szOsFile	vendor\sqlite\sqlite3.h	/^  int szOsFile;            \/* Size of subclassed sqlite3_file *\/$/;"	m	struct:sqlite3_vfs
usable	vendor\sqlite\sqlite3.h	/^     unsigned char usable;     \/* True if this constraint is usable *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_constraint
xAccess	vendor\sqlite\sqlite3.h	/^  int (*xAccess)(sqlite3_vfs*, const char *zName, int flags, int *pResOut);$/;"	m	struct:sqlite3_vfs
xBegin	vendor\sqlite\sqlite3.h	/^  int (*xBegin)(sqlite3_vtab *pVTab);$/;"	m	struct:sqlite3_module
xBestIndex	vendor\sqlite\sqlite3.h	/^  int (*xBestIndex)(sqlite3_vtab *pVTab, sqlite3_index_info*);$/;"	m	struct:sqlite3_module
xCachesize	vendor\sqlite\sqlite3.h	/^  void (*xCachesize)(sqlite3_pcache*, int nCachesize);$/;"	m	struct:sqlite3_pcache_methods
xCachesize	vendor\sqlite\sqlite3.h	/^  void (*xCachesize)(sqlite3_pcache*, int nCachesize);$/;"	m	struct:sqlite3_pcache_methods2
xCheckReservedLock	vendor\sqlite\sqlite3.h	/^  int (*xCheckReservedLock)(sqlite3_file*, int *pResOut);$/;"	m	struct:sqlite3_io_methods
xClose	vendor\sqlite\sqlite3.h	/^  int (*xClose)(sqlite3_file*);$/;"	m	struct:sqlite3_io_methods
xClose	vendor\sqlite\sqlite3.h	/^  int (*xClose)(sqlite3_vtab_cursor*);$/;"	m	struct:sqlite3_module
xColumn	vendor\sqlite\sqlite3.h	/^  int (*xColumn)(sqlite3_vtab_cursor*, sqlite3_context*, int);$/;"	m	struct:sqlite3_module
xCommit	vendor\sqlite\sqlite3.h	/^  int (*xCommit)(sqlite3_vtab *pVTab);$/;"	m	struct:sqlite3_module
xConnect	vendor\sqlite\sqlite3.h	/^  int (*xConnect)(sqlite3*, void *pAux,$/;"	m	struct:sqlite3_module
xCreate	vendor\sqlite\sqlite3.h	/^  int (*xCreate)(sqlite3*, void *pAux,$/;"	m	struct:sqlite3_module
xCreate	vendor\sqlite\sqlite3.h	/^  sqlite3_pcache *(*xCreate)(int szPage, int bPurgeable);$/;"	m	struct:sqlite3_pcache_methods
xCreate	vendor\sqlite\sqlite3.h	/^  sqlite3_pcache *(*xCreate)(int szPage, int szExtra, int bPurgeable);$/;"	m	struct:sqlite3_pcache_methods2
xCurrentTime	vendor\sqlite\sqlite3.h	/^  int (*xCurrentTime)(sqlite3_vfs*, double*);$/;"	m	struct:sqlite3_vfs
xCurrentTimeInt64	vendor\sqlite\sqlite3.h	/^  int (*xCurrentTimeInt64)(sqlite3_vfs*, sqlite3_int64*);$/;"	m	struct:sqlite3_vfs
xDelUser	vendor\sqlite\sqlite3.h	/^  void (*xDelUser)(void *);       \/* Called by SQLite to clean up pUser *\/$/;"	m	struct:sqlite3_rtree_geometry
xDelUser	vendor\sqlite\sqlite3.h	/^  void (*xDelUser)(void*);          \/* function to free pUser *\/$/;"	m	struct:sqlite3_rtree_query_info
xDelete	vendor\sqlite\sqlite3.h	/^  int (*xDelete)(sqlite3_vfs*, const char *zName, int syncDir);$/;"	m	struct:sqlite3_vfs
xDestroy	vendor\sqlite\sqlite3.h	/^  int (*xDestroy)(sqlite3_vtab *pVTab);$/;"	m	struct:sqlite3_module
xDestroy	vendor\sqlite\sqlite3.h	/^  void (*xDestroy)(sqlite3_pcache*);$/;"	m	struct:sqlite3_pcache_methods
xDestroy	vendor\sqlite\sqlite3.h	/^  void (*xDestroy)(sqlite3_pcache*);$/;"	m	struct:sqlite3_pcache_methods2
xDeviceCharacteristics	vendor\sqlite\sqlite3.h	/^  int (*xDeviceCharacteristics)(sqlite3_file*);$/;"	m	struct:sqlite3_io_methods
xDisconnect	vendor\sqlite\sqlite3.h	/^  int (*xDisconnect)(sqlite3_vtab *pVTab);$/;"	m	struct:sqlite3_module
xDlClose	vendor\sqlite\sqlite3.h	/^  void (*xDlClose)(sqlite3_vfs*, void*);$/;"	m	struct:sqlite3_vfs
xDlError	vendor\sqlite\sqlite3.h	/^  void (*xDlError)(sqlite3_vfs*, int nByte, char *zErrMsg);$/;"	m	struct:sqlite3_vfs
xDlOpen	vendor\sqlite\sqlite3.h	/^  void *(*xDlOpen)(sqlite3_vfs*, const char *zFilename);$/;"	m	struct:sqlite3_vfs
xEof	vendor\sqlite\sqlite3.h	/^  int (*xEof)(sqlite3_vtab_cursor*);$/;"	m	struct:sqlite3_module
xFetch	vendor\sqlite\sqlite3.h	/^  int (*xFetch)(sqlite3_file*, sqlite3_int64 iOfst, int iAmt, void **pp);$/;"	m	struct:sqlite3_io_methods
xFetch	vendor\sqlite\sqlite3.h	/^  sqlite3_pcache_page *(*xFetch)(sqlite3_pcache*, unsigned key, int createFlag);$/;"	m	struct:sqlite3_pcache_methods2
xFetch	vendor\sqlite\sqlite3.h	/^  void *(*xFetch)(sqlite3_pcache*, unsigned key, int createFlag);$/;"	m	struct:sqlite3_pcache_methods
xFileControl	vendor\sqlite\sqlite3.h	/^  int (*xFileControl)(sqlite3_file*, int op, void *pArg);$/;"	m	struct:sqlite3_io_methods
xFileSize	vendor\sqlite\sqlite3.h	/^  int (*xFileSize)(sqlite3_file*, sqlite3_int64 *pSize);$/;"	m	struct:sqlite3_io_methods
xFilter	vendor\sqlite\sqlite3.h	/^  int (*xFilter)(sqlite3_vtab_cursor*, int idxNum, const char *idxStr,$/;"	m	struct:sqlite3_module
xFindFunction	vendor\sqlite\sqlite3.h	/^  int (*xFindFunction)(sqlite3_vtab *pVtab, int nArg, const char *zName,$/;"	m	struct:sqlite3_module
xFree	vendor\sqlite\sqlite3.h	/^  void (*xFree)(void*);          \/* Free a prior allocation *\/$/;"	m	struct:sqlite3_mem_methods
xFullPathname	vendor\sqlite\sqlite3.h	/^  int (*xFullPathname)(sqlite3_vfs*, const char *zName, int nOut, char *zOut);$/;"	m	struct:sqlite3_vfs
xGetLastError	vendor\sqlite\sqlite3.h	/^  int (*xGetLastError)(sqlite3_vfs*, int, char *);$/;"	m	struct:sqlite3_vfs
xGetSystemCall	vendor\sqlite\sqlite3.h	/^  sqlite3_syscall_ptr (*xGetSystemCall)(sqlite3_vfs*, const char *zName);$/;"	m	struct:sqlite3_vfs
xInit	vendor\sqlite\sqlite3.h	/^  int (*xInit)(void*);           \/* Initialize the memory allocator *\/$/;"	m	struct:sqlite3_mem_methods
xInit	vendor\sqlite\sqlite3.h	/^  int (*xInit)(void*);$/;"	m	struct:sqlite3_pcache_methods
xInit	vendor\sqlite\sqlite3.h	/^  int (*xInit)(void*);$/;"	m	struct:sqlite3_pcache_methods2
xLock	vendor\sqlite\sqlite3.h	/^  int (*xLock)(sqlite3_file*, int);$/;"	m	struct:sqlite3_io_methods
xMalloc	vendor\sqlite\sqlite3.h	/^  void *(*xMalloc)(int);         \/* Memory allocation function *\/$/;"	m	struct:sqlite3_mem_methods
xMutexAlloc	vendor\sqlite\sqlite3.h	/^  sqlite3_mutex *(*xMutexAlloc)(int);$/;"	m	struct:sqlite3_mutex_methods
xMutexEnd	vendor\sqlite\sqlite3.h	/^  int (*xMutexEnd)(void);$/;"	m	struct:sqlite3_mutex_methods
xMutexEnter	vendor\sqlite\sqlite3.h	/^  void (*xMutexEnter)(sqlite3_mutex *);$/;"	m	struct:sqlite3_mutex_methods
xMutexFree	vendor\sqlite\sqlite3.h	/^  void (*xMutexFree)(sqlite3_mutex *);$/;"	m	struct:sqlite3_mutex_methods
xMutexHeld	vendor\sqlite\sqlite3.h	/^  int (*xMutexHeld)(sqlite3_mutex *);$/;"	m	struct:sqlite3_mutex_methods
xMutexInit	vendor\sqlite\sqlite3.h	/^  int (*xMutexInit)(void);$/;"	m	struct:sqlite3_mutex_methods
xMutexLeave	vendor\sqlite\sqlite3.h	/^  void (*xMutexLeave)(sqlite3_mutex *);$/;"	m	struct:sqlite3_mutex_methods
xMutexNotheld	vendor\sqlite\sqlite3.h	/^  int (*xMutexNotheld)(sqlite3_mutex *);$/;"	m	struct:sqlite3_mutex_methods
xMutexTry	vendor\sqlite\sqlite3.h	/^  int (*xMutexTry)(sqlite3_mutex *);$/;"	m	struct:sqlite3_mutex_methods
xNext	vendor\sqlite\sqlite3.h	/^  int (*xNext)(sqlite3_vtab_cursor*);$/;"	m	struct:sqlite3_module
xNextSystemCall	vendor\sqlite\sqlite3.h	/^  const char *(*xNextSystemCall)(sqlite3_vfs*, const char *zName);$/;"	m	struct:sqlite3_vfs
xOpen	vendor\sqlite\sqlite3.h	/^  int (*xOpen)(sqlite3_vfs*, const char *zName, sqlite3_file*,$/;"	m	struct:sqlite3_vfs
xOpen	vendor\sqlite\sqlite3.h	/^  int (*xOpen)(sqlite3_vtab *pVTab, sqlite3_vtab_cursor **ppCursor);$/;"	m	struct:sqlite3_module
xPagecount	vendor\sqlite\sqlite3.h	/^  int (*xPagecount)(sqlite3_pcache*);$/;"	m	struct:sqlite3_pcache_methods
xPagecount	vendor\sqlite\sqlite3.h	/^  int (*xPagecount)(sqlite3_pcache*);$/;"	m	struct:sqlite3_pcache_methods2
xRandomness	vendor\sqlite\sqlite3.h	/^  int (*xRandomness)(sqlite3_vfs*, int nByte, char *zOut);$/;"	m	struct:sqlite3_vfs
xRead	vendor\sqlite\sqlite3.h	/^  int (*xRead)(sqlite3_file*, void*, int iAmt, sqlite3_int64 iOfst);$/;"	m	struct:sqlite3_io_methods
xRealloc	vendor\sqlite\sqlite3.h	/^  void *(*xRealloc)(void*,int);  \/* Resize an allocation *\/$/;"	m	struct:sqlite3_mem_methods
xRekey	vendor\sqlite\sqlite3.h	/^  void (*xRekey)(sqlite3_pcache*, sqlite3_pcache_page*, $/;"	m	struct:sqlite3_pcache_methods2
xRekey	vendor\sqlite\sqlite3.h	/^  void (*xRekey)(sqlite3_pcache*, void*, unsigned oldKey, unsigned newKey);$/;"	m	struct:sqlite3_pcache_methods
xRelease	vendor\sqlite\sqlite3.h	/^  int (*xRelease)(sqlite3_vtab *pVTab, int);$/;"	m	struct:sqlite3_module
xRename	vendor\sqlite\sqlite3.h	/^  int (*xRename)(sqlite3_vtab *pVtab, const char *zNew);$/;"	m	struct:sqlite3_module
xRollback	vendor\sqlite\sqlite3.h	/^  int (*xRollback)(sqlite3_vtab *pVTab);$/;"	m	struct:sqlite3_module
xRollbackTo	vendor\sqlite\sqlite3.h	/^  int (*xRollbackTo)(sqlite3_vtab *pVTab, int);$/;"	m	struct:sqlite3_module
xRoundup	vendor\sqlite\sqlite3.h	/^  int (*xRoundup)(int);          \/* Round up request size to allocation size *\/$/;"	m	struct:sqlite3_mem_methods
xRowid	vendor\sqlite\sqlite3.h	/^  int (*xRowid)(sqlite3_vtab_cursor*, sqlite3_int64 *pRowid);$/;"	m	struct:sqlite3_module
xSavepoint	vendor\sqlite\sqlite3.h	/^  int (*xSavepoint)(sqlite3_vtab *pVTab, int);$/;"	m	struct:sqlite3_module
xSectorSize	vendor\sqlite\sqlite3.h	/^  int (*xSectorSize)(sqlite3_file*);$/;"	m	struct:sqlite3_io_methods
xSetSystemCall	vendor\sqlite\sqlite3.h	/^  int (*xSetSystemCall)(sqlite3_vfs*, const char *zName, sqlite3_syscall_ptr);$/;"	m	struct:sqlite3_vfs
xShmBarrier	vendor\sqlite\sqlite3.h	/^  void (*xShmBarrier)(sqlite3_file*);$/;"	m	struct:sqlite3_io_methods
xShmLock	vendor\sqlite\sqlite3.h	/^  int (*xShmLock)(sqlite3_file*, int offset, int n, int flags);$/;"	m	struct:sqlite3_io_methods
xShmMap	vendor\sqlite\sqlite3.h	/^  int (*xShmMap)(sqlite3_file*, int iPg, int pgsz, int, void volatile**);$/;"	m	struct:sqlite3_io_methods
xShmUnmap	vendor\sqlite\sqlite3.h	/^  int (*xShmUnmap)(sqlite3_file*, int deleteFlag);$/;"	m	struct:sqlite3_io_methods
xShrink	vendor\sqlite\sqlite3.h	/^  void (*xShrink)(sqlite3_pcache*);$/;"	m	struct:sqlite3_pcache_methods2
xShutdown	vendor\sqlite\sqlite3.h	/^  void (*xShutdown)(void*);      \/* Deinitialize the memory allocator *\/$/;"	m	struct:sqlite3_mem_methods
xShutdown	vendor\sqlite\sqlite3.h	/^  void (*xShutdown)(void*);$/;"	m	struct:sqlite3_pcache_methods
xShutdown	vendor\sqlite\sqlite3.h	/^  void (*xShutdown)(void*);$/;"	m	struct:sqlite3_pcache_methods2
xSize	vendor\sqlite\sqlite3.h	/^  int (*xSize)(void*);           \/* Return the size of an allocation *\/$/;"	m	struct:sqlite3_mem_methods
xSleep	vendor\sqlite\sqlite3.h	/^  int (*xSleep)(sqlite3_vfs*, int microseconds);$/;"	m	struct:sqlite3_vfs
xSync	vendor\sqlite\sqlite3.h	/^  int (*xSync)(sqlite3_file*, int flags);$/;"	m	struct:sqlite3_io_methods
xSync	vendor\sqlite\sqlite3.h	/^  int (*xSync)(sqlite3_vtab *pVTab);$/;"	m	struct:sqlite3_module
xTruncate	vendor\sqlite\sqlite3.h	/^  int (*xTruncate)(sqlite3_file*, sqlite3_int64 size);$/;"	m	struct:sqlite3_io_methods
xTruncate	vendor\sqlite\sqlite3.h	/^  void (*xTruncate)(sqlite3_pcache*, unsigned iLimit);$/;"	m	struct:sqlite3_pcache_methods
xTruncate	vendor\sqlite\sqlite3.h	/^  void (*xTruncate)(sqlite3_pcache*, unsigned iLimit);$/;"	m	struct:sqlite3_pcache_methods2
xUnfetch	vendor\sqlite\sqlite3.h	/^  int (*xUnfetch)(sqlite3_file*, sqlite3_int64 iOfst, void *p);$/;"	m	struct:sqlite3_io_methods
xUnlock	vendor\sqlite\sqlite3.h	/^  int (*xUnlock)(sqlite3_file*, int);$/;"	m	struct:sqlite3_io_methods
xUnpin	vendor\sqlite\sqlite3.h	/^  void (*xUnpin)(sqlite3_pcache*, sqlite3_pcache_page*, int discard);$/;"	m	struct:sqlite3_pcache_methods2
xUnpin	vendor\sqlite\sqlite3.h	/^  void (*xUnpin)(sqlite3_pcache*, void*, int discard);$/;"	m	struct:sqlite3_pcache_methods
xUpdate	vendor\sqlite\sqlite3.h	/^  int (*xUpdate)(sqlite3_vtab *, int, sqlite3_value **, sqlite3_int64 *);$/;"	m	struct:sqlite3_module
xWrite	vendor\sqlite\sqlite3.h	/^  int (*xWrite)(sqlite3_file*, const void*, int iAmt, sqlite3_int64 iOfst);$/;"	m	struct:sqlite3_io_methods
zErrMsg	vendor\sqlite\sqlite3.h	/^  char *zErrMsg;                  \/* Error message from sqlite3_mprintf() *\/$/;"	m	struct:sqlite3_vtab
zName	vendor\sqlite\sqlite3.h	/^  const char *zName;       \/* Name of this virtual file system *\/$/;"	m	struct:sqlite3_vfs
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_PROGRAM_VERSION	5.8	//
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
